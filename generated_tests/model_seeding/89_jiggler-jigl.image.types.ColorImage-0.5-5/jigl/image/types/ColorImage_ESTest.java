/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:21:15 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.awt.image.ColorConvertOp;
import java.util.Hashtable;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = interpolatedColorImage0.getColorModel();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorModel0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-4880), (-4880), 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorModel colorModel0 = ColorModel.HLS;
      colorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.HLS, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      ColorImage colorImage1 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      int int0 = (-2519);
      // Undeclared exception!
      try { 
        colorImage1.multiply(0, (-2519));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 3;
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      int int3 = rOI0.Y();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertTrue(int3 == int2);
      assertEquals(1, int3);
      
      int int4 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int int0 = Integer.MAX_VALUE;
      ColorImage colorImage0 = new ColorImage(Integer.MAX_VALUE, Integer.MAX_VALUE);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, (-437), (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(8, 8);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(8, colorImage0.X());
      assertEquals(8, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      ColorModel colorModel0 = ColorModel.YIQ;
      colorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.YIQ, colorImage0.getColorModel());
      assertEquals(8, colorImage0.X());
      assertEquals(8, colorImage0.Y());
      
      intArray0[1] = 8;
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      Integer integer1 = Integer.valueOf((-568));
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-568), (int)integer1);
      
      int int0 = integer1.intValue();
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-568), int0);
      
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(200, (int)integer2);
      
      Integer integer3 = Integer.valueOf(4224);
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)int0));
      assertEquals(4224, (int)integer3);
      
      Integer integer4 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(400, (int)integer4);
      
      byte byte0 = integer4.byteValue();
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals((byte) (-112), byte0);
      
      float float0 = integer4.floatValue();
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(400.0F, float0, 0.01F);
      
      Integer integer5 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer1));
      assertEquals(100, (int)integer5);
      
      Integer integer6 = Integer.valueOf((-2272));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals((-2272), (int)integer6);
      
      Integer integer7 = new Integer(710);
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer3));
      assertEquals(710, (int)integer7);
      
      Integer integer8 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertEquals(100, (int)integer8);
      
      byte byte1 = integer8.byteValue();
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(byte1 == byte0);
      assertEquals((byte)100, byte1);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer2;
      integerArray0[1] = integer6;
      // Undeclared exception!
      try { 
        colorImage0.set((-568), (-262), integerArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -262
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(8, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(8, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 8;
      ColorImage colorImage1 = colorImage0.addbuffer(0, 0, (-16777216), 0, intArray0);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {0, 0, 0, 8}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(8, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertEquals(4, intArray0.length);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(8, 0, 5, (-123), (-123));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 5);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-170), 2998, 962, 2998, 962);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply(16, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer integer0 = Integer.getInteger("pm/qj%s", (-2));
      assertNotNull(integer0);
      assertEquals((-2), (int)integer0);
      
      Integer[] integerArray0 = new Integer[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-2), (-2), integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-1378), (-1378), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = 0;
      int int1 = 0;
      int[] intArray0 = new int[19];
      intArray0[0] = 0;
      intArray0[1] = 2616;
      intArray0[2] = 0;
      ColorImage colorImage1 = colorImage0.subtract(colorImage0);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertNotNull(colorImage1);
      
      Hashtable<RenderingHints.Key, String> hashtable0 = new Hashtable<RenderingHints.Key, String>();
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertNotNull(hashtable0);
      
      RenderingHints renderingHints0 = new RenderingHints(hashtable0);
      assertTrue(hashtable0.isEmpty());
      assertEquals(0, hashtable0.size());
      assertEquals(0, renderingHints0.size());
      assertTrue(renderingHints0.isEmpty());
      assertNotNull(renderingHints0);
      
      ColorConvertOp colorConvertOp0 = null;
      try {
        colorConvertOp0 = new ColorConvertOp((ColorSpace) null, renderingHints0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 2998, 0, (-4188));
      assertEquals((-4188), rOI0.uy());
      assertEquals(2998, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(7187, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI1.uy();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, int0);
      
      rOI1.setROI(0, (-4188), 0, 0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(4189, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals((-4188), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(4189, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals((-4188), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(4189, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals((-4188), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4189, int2);
      
      int int3 = rOI1.X();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(4189, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals((-4188), rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(1, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-4188), 2998, 0, (-4188), 0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(6, 6);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(6, colorImage0.Y());
      assertEquals(6, colorImage0.X());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = colorImage0.copy();
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(6, colorImage0.Y());
      assertEquals(6, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(6, colorImage1.X());
      assertEquals(6, colorImage1.Y());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      // Undeclared exception!
      try { 
        colorImage0.max(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = ColorModel.HSV;
      interpolatedColorImage0.colorModel = colorModel0;
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.HSV, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      ColorImage colorImage0 = null;
      InterpolationMethod interpolationMethod0 = InterpolationMethod.CUBIC;
      interpolatedColorImage0.interpolationMethod = interpolationMethod0;
      assertEquals(InterpolationMethod.CUBIC, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.HSV, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = 2;
      rOI0.setROI(0, 0, 2, 2);
      assertEquals(2, rOI0.ly());
      assertEquals(2, rOI0.lx());
      assertEquals(3, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 4043;
      ColorImage colorImage0 = new ColorImage(4043, 4043);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 2, 2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.lx());
      assertEquals(3, rOI0.Y());
      assertEquals(3, rOI0.X());
      assertEquals(2, rOI0.ly());
      
      double double0 = 3040.3357710959;
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 2;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      String string0 = colorImage0.toString();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(string0);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      
      rOI0.setROI(0, (-292), 0, (-292));
      assertEquals((-292), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-292), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-292);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      ColorImage colorImage1 = colorImage0.divide(intArray0);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {(-292), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertNotNull(colorImage1);
      assertEquals(8, intArray0.length);
      
      ColorImage colorImage2 = new ColorImage();
      assertEquals(0, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotNull(colorImage2);
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      
      ColorImage colorImage3 = colorImage1.subtract(colorImage2);
      assertSame(colorImage0, colorImage3);
      assertNotSame(colorImage0, colorImage2);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertNotSame(colorImage1, colorImage2);
      assertSame(colorImage1, colorImage3);
      assertNotSame(colorImage2, colorImage0);
      assertNotSame(colorImage2, colorImage3);
      assertNotSame(colorImage2, colorImage1);
      assertSame(colorImage3, colorImage1);
      assertSame(colorImage3, colorImage0);
      assertNotSame(colorImage3, colorImage2);
      assertArrayEquals(new int[] {(-292), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(ColorModel.RGB, colorImage3.getColorModel());
      assertEquals(0, colorImage3.Y());
      assertEquals(0, colorImage3.X());
      assertNotNull(colorImage3);
      assertFalse(colorImage0.equals((Object)colorImage2));
      assertFalse(colorImage1.equals((Object)colorImage2));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertFalse(colorImage3.equals((Object)colorImage2));
      assertEquals(8, intArray0.length);
      
      // Undeclared exception!
      try { 
        colorImage3.divide(0, 0, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 4043;
      ColorImage colorImage0 = new ColorImage(4043, 4043);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 2, 2);
      assertEquals(2, rOI0.lx());
      assertEquals(2, rOI0.ly());
      assertEquals(3, rOI0.Y());
      assertEquals(3, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.add((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 0;
      intArray0[1] = 823;
      intArray0[2] = 823;
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(0, 4, 0, 823, intArray0);
      assertArrayEquals(new int[] {0, 823, 823}, intArray0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      assertEquals(3, intArray0.length);
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, Integer.MIN_VALUE, 0, Integer.MIN_VALUE, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 2, 2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(3, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(2, rOI0.lx());
      assertEquals(2, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.add(2, Integer.MIN_VALUE, Integer.MIN_VALUE, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ColorImage colorImage0 = new ColorImage(15, 9);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(9, colorImage0.Y());
      assertEquals(15, colorImage0.X());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage((ColorImage) interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      
      InterpolatedColorImage interpolatedColorImage3 = (InterpolatedColorImage)interpolatedColorImage2.subtract((-1105), (-1105), 15);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage0);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage1);
      assertSame(interpolatedColorImage3, interpolatedColorImage2);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage3.getColorModel());
      assertEquals(0, interpolatedColorImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage3.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage3.Y());
      assertNotNull(interpolatedColorImage3);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage1));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, 0, 2, 2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(3, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(2, rOI0.lx());
      assertEquals(2, rOI0.ly());
      
      int[] intArray0 = new int[2];
      intArray0[0] = (-2275);
      intArray0[1] = 2;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        colorImage0.divide(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      interpolatedColorImage0.interpolationMethod = interpolationMethod0;
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 1403;
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      int[] intArray0 = new int[9];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        colorImage0.max(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      int int0 = integer0.intValue();
      assertEquals(0, int0);
      
      float float0 = integer0.floatValue();
      assertTrue(integer0.equals((Object)int0));
      assertEquals(0.0F, float0, 0.01F);
      
      integerArray0[0] = (Integer) 0;
      Integer integer1 = Integer.valueOf(3);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(3, (int)integer1);
      
      Integer integer2 = Integer.valueOf((-855));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((-855), (int)integer2);
      
      Integer integer3 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals(300, (int)integer3);
      
      byte byte0 = integer3.byteValue();
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertEquals((byte)44, byte0);
      
      integerArray0[1] = integer3;
      Integer integer4 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals((-30000), (int)integer4);
      
      int int1 = integer4.intValue();
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(int1 == int0);
      assertEquals((-30000), int1);
      
      int int2 = integer4.intValue();
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals((-30000), int2);
      
      int int3 = Integer.min(0, (-3606));
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals((-3606), int3);
      
      Integer integer5 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer5);
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals((-30000), (int)integer5);
      
      int int4 = integer5.intValue();
      assertFalse(int4 == int3);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int0);
      assertTrue(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)int3));
      assertFalse(integer5.equals((Object)integer1));
      assertTrue(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer2));
      assertEquals((-30000), int4);
      
      float float1 = integer4.floatValue();
      assertNotEquals(float1, float0, 0.01F);
      assertTrue(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer2));
      assertTrue(integer4.equals((Object)int2));
      assertTrue(integer4.equals((Object)int4));
      assertFalse(integer4.equals((Object)int3));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals((-30000.0F), float1, 0.01F);
      
      integerArray0[2] = (Integer) (-30000);
      Integer integer6 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)int4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int3));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)int2));
      assertTrue(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertEquals((-30000), (int)integer6);
      
      int int5 = integer6.intValue();
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertTrue(integer6.equals((Object)int4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)int3));
      assertFalse(integer6.equals((Object)integer0));
      assertTrue(integer6.equals((Object)int2));
      assertTrue(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)integer2));
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals((-30000), int5);
      
      Integer integer7 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)int5));
      assertFalse(integer7.equals((Object)int3));
      assertTrue(integer7.equals((Object)int4));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)int2));
      assertEquals((-30000), (int)integer7);
      
      int int6 = integer7.intValue();
      assertFalse(integer7.equals((Object)integer2));
      assertTrue(integer7.equals((Object)int5));
      assertFalse(integer7.equals((Object)int3));
      assertTrue(integer7.equals((Object)int4));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer3));
      assertTrue(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer0));
      assertTrue(integer7.equals((Object)int2));
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertEquals((-30000), int6);
      
      integerArray0[3] = (Integer) (-30000);
      Integer integer8 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer8);
      assertFalse(integer8.equals((Object)integer1));
      assertFalse(integer8.equals((Object)int1));
      assertFalse(integer8.equals((Object)integer4));
      assertFalse(integer8.equals((Object)integer7));
      assertFalse(integer8.equals((Object)int0));
      assertFalse(integer8.equals((Object)int5));
      assertFalse(integer8.equals((Object)integer3));
      assertFalse(integer8.equals((Object)int2));
      assertFalse(integer8.equals((Object)integer5));
      assertFalse(integer8.equals((Object)integer2));
      assertFalse(integer8.equals((Object)integer0));
      assertFalse(integer8.equals((Object)integer6));
      assertFalse(integer8.equals((Object)int6));
      assertFalse(integer8.equals((Object)int4));
      assertFalse(integer8.equals((Object)int3));
      assertEquals(400, (int)integer8);
      
      integerArray0[4] = integer8;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.Y();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(5, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(5, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1, 32767, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32767
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = 2846;
      ColorImage colorImage0 = new ColorImage(2846, 2846);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2846, colorImage0.X());
      assertEquals(2846, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      colorImage0.min();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = Integer.MAX_VALUE;
      int[] intArray0 = new int[4];
      intArray0[0] = (-1326);
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = (-1326);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(843, (-1326), 843, Integer.MAX_VALUE, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min((-437));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -437
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(5, 5, (-2490), (-2490), 5, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertTrue(int4 == int3);
      assertTrue(int4 == int1);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertFalse(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int1);
      assertEquals(Integer.MAX_VALUE, int6);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertTrue(int5 == int4);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertFalse(int6 == int4);
      assertEquals(Integer.MAX_VALUE, int6);
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      int[] intArray0 = new int[4];
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(92, 1879, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-30), 550, (-30), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      String string0 = interpolatedColorImage0.toString();
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(4, 0, 0, 16, 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(16, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(integer0);
      
      int int0 = 0;
      ColorImage colorImage1 = colorImage0.add((-1922), 0, 0);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(16, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      
      ColorImage colorImage2 = colorImage0.add(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage0, colorImage2);
      assertSame(colorImage1, colorImage0);
      assertSame(colorImage1, colorImage2);
      assertSame(colorImage2, colorImage0);
      assertSame(colorImage2, colorImage1);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(16, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(0, colorImage2.Y());
      assertEquals(16, colorImage2.X());
      assertNotNull(colorImage2);
      
      ColorImage colorImage3 = colorImage1.copy();
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage3);
      assertSame(colorImage1, colorImage0);
      assertNotSame(colorImage1, colorImage3);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage3, colorImage1);
      assertNotSame(colorImage3, colorImage2);
      assertNotSame(colorImage3, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(16, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(ColorModel.RGB, colorImage3.getColorModel());
      assertEquals(16, colorImage3.X());
      assertEquals(0, colorImage3.Y());
      assertNotNull(colorImage3);
      assertFalse(colorImage3.equals((Object)colorImage1));
      assertFalse(colorImage3.equals((Object)colorImage2));
      assertFalse(colorImage3.equals((Object)colorImage0));
      
      // Undeclared exception!
      try { 
        colorImage3.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorModel colorModel0 = colorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorModel0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = Integer.MAX_VALUE;
      intArray0[2] = Integer.MAX_VALUE;
      intArray0[3] = Integer.MAX_VALUE;
      intArray0[4] = Integer.MAX_VALUE;
      ROI rOI0 = new ROI(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MIN_VALUE);
      assertEquals(Integer.MAX_VALUE, rOI0.ux());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(Integer.MAX_VALUE, Integer.MAX_VALUE, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int1 = rOI0.uy();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = 0;
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      rOI0.setROI(0, 0, 0, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ColorModel colorModel0 = ColorModel.YIQ;
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      interpolatedColorImage0.setColorModel(colorModel0);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.YIQ, interpolatedColorImage0.getColorModel());
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      
      int int3 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertFalse(int4 == int2);
      assertEquals(1, int4);
      
      int int5 = rOI0.X();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int5 == int1);
      assertTrue(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int2);
      assertEquals(1, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1584, 1584, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = (-552);
      int int1 = (-2946);
      int[] intArray0 = new int[7];
      // Undeclared exception!
      try { 
        colorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.add((int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-419), (-419), (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 255);
      assertEquals(255, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(255, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = 1;
      int int1 = 2636;
      int int2 = (-1752);
      int int3 = (-325);
      int[] intArray0 = new int[5];
      int int4 = Integer.MAX_VALUE;
      intArray0[0] = Integer.MAX_VALUE;
      intArray0[1] = 255;
      int int5 = 2207;
      intArray0[2] = 2207;
      intArray0[3] = 255;
      intArray0[4] = (-1752);
      // Undeclared exception!
      colorImage0.addbuffer(459, 2636, intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = interpolatedColorImage0.X();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, int0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(3826, (-16777216), (-16777216));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.max(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      ColorImage colorImage0 = interpolatedColorImage0.copy(rOI0);
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1, colorImage0.X());
      assertEquals(1, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage1.X());
      assertEquals(4, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 1090, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int int0 = 255;
      int[] intArray0 = new int[9];
      intArray0[0] = 2684;
      intArray0[1] = 255;
      intArray0[2] = 2684;
      intArray0[3] = 255;
      intArray0[4] = 255;
      intArray0[5] = 2684;
      intArray0[6] = 3711;
      intArray0[7] = 255;
      intArray0[8] = (-2066);
      // Undeclared exception!
      interpolatedColorImage1.addbuffer(3711, 3711, 255, 2684, intArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      String string0 = interpolatedColorImage0.toString();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 0;
      intArray0[5] = 4;
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(0, 0, intArray0);
      assertArrayEquals(new int[] {4, 0, 0, 4, 0, 4}, intArray0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      assertEquals(6, intArray0.length);
      
      int int1 = (-1829);
      // Undeclared exception!
      try { 
        colorImage0.add(2, 0, (-1829), 4, 136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = (-552);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.clip((-552), (-552), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(8, 0);
      assertEquals(8, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      ROI rOI0 = new ROI(1959, 8, Integer.MIN_VALUE, 0);
      assertEquals(1959, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(8, rOI0.ly());
      assertEquals((-2147481688), rOI0.X());
      assertEquals(9, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-1318), (-5917), (-1318), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-5), (-5), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-16777242);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(2559, (-16777242));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage2 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 411;
      intArray0[2] = (-2665);
      intArray0[6] = 8;
      intArray0[4] = 411;
      intArray0[5] = (-1483);
      intArray0[6] = (-1483);
      // Undeclared exception!
      try { 
        interpolatedColorImage2.divide(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      rOI0.setROI(3760, 3760, 569, (-1852));
      assertEquals((-1852), rOI0.uy());
      assertEquals(5613, rOI0.Y());
      assertEquals(3192, rOI0.X());
      assertEquals(3760, rOI0.lx());
      assertEquals(3760, rOI0.ly());
      assertEquals(569, rOI0.ux());
      
      int int1 = rOI0.ux();
      assertEquals((-1852), rOI0.uy());
      assertEquals(5613, rOI0.Y());
      assertEquals(3192, rOI0.X());
      assertEquals(3760, rOI0.lx());
      assertEquals(3760, rOI0.ly());
      assertEquals(569, rOI0.ux());
      assertFalse(int1 == int0);
      assertEquals(569, int1);
      
      int int2 = rOI0.lx();
      assertEquals((-1852), rOI0.uy());
      assertEquals(5613, rOI0.Y());
      assertEquals(3192, rOI0.X());
      assertEquals(3760, rOI0.lx());
      assertEquals(3760, rOI0.ly());
      assertEquals(569, rOI0.ux());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(3760, int2);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(0, 956, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.min(0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = (-1400);
      int int0 = 1830;
      intArray0[1] = 1830;
      intArray0[3] = 2179;
      int int1 = (-1968);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI1 = new ROI(3148, 0, 0, (-437));
      assertEquals(3149, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(3148, rOI1.lx());
      assertEquals(438, rOI1.Y());
      assertEquals((-437), rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-3965), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3965
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = 0;
      int int1 = 128;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 128);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(128, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int2 = rOI0.uy();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      int int4 = rOI0.Y();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int3);
      assertEquals(1, int4);
      
      int int5 = rOI0.X();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertEquals(1, int5);
      
      int int6 = (-65);
      rOI0.setROI(1, 0, 1, (-65));
      assertEquals(1, rOI0.X());
      assertEquals(66, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals((-65), rOI0.uy());
      assertEquals(1, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -65
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = 10;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip(32767, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertTrue(int1 == int0);
      assertEquals(1, int1);
      
      // Undeclared exception!
      try { 
        colorImage0.min((-2109), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2109
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 3950, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      jigl.image.Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertSame(interpolatedColorImage0, image0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertNotNull(image0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, (-1), 0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = interpolatedColorImage0.Y();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = null;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2247;
      intArray0[1] = 2247;
      intArray0[2] = 2247;
      intArray0[3] = 2247;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(2247, 2247, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Image image0 = null;
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      String string0 = interpolatedColorImage0.toString();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      rOI0.setROI((-3191), 128, 4, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(129, rOI0.Y());
      assertEquals(128, rOI0.ly());
      assertEquals((-3191), rOI0.ux());
      assertEquals(4, rOI0.lx());
      assertEquals(3196, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-826), 956, (-4468), 1846, 128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 956
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(781, 781);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(781, interpolatedColorImage0.Y());
      assertEquals(781, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[5];
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals((-30000), (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(100, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals((-30000), (int)integer3);
      
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertEquals(100, (int)integer4);
      
      integerArray0[4] = integer4;
      // Undeclared exception!
      interpolatedColorImage0.clear(integerArray0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[9];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, (-1213), 0, 0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, int0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = 16;
      int int2 = 0;
      int int3 = (-2629);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 6, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      int int1 = 4;
      ColorModel colorModel0 = ColorModel.RGB;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 4, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = colorImage0.Y();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = (-3009);
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = (-3009);
      intArray0[6] = 0;
      intArray0[7] = (-3009);
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals(Integer.MAX_VALUE, int3);
      
      int int4 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertFalse(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.ly();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int2);
      assertTrue(int5 == int1);
      assertTrue(int5 == int0);
      assertTrue(int5 == int4);
      assertFalse(int5 == int3);
      assertEquals(0, int5);
      
      int int6 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int6 == int2);
      assertTrue(int6 == int4);
      assertFalse(int6 == int3);
      assertTrue(int6 == int0);
      assertTrue(int6 == int1);
      assertTrue(int6 == int5);
      assertEquals(0, int6);
      
      int int7 = rOI0.lx();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertFalse(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int2);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertFalse(int7 == int4);
      assertFalse(int7 == int6);
      assertEquals(Integer.MAX_VALUE, int7);
      
      // Undeclared exception!
      try { 
        colorImage0.divide((-3009), (-3009), intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(8, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(8, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(1521, 10);
      assertEquals(10, interpolatedColorImage1.Y());
      assertEquals(1521, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      interpolatedColorImage1.max();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 255;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.subtract(intArray0);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertArrayEquals(new int[] {0, 255, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertEquals(7, intArray0.length);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      String string0 = interpolatedColorImage0.toString();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      Integer integer0 = interpolatedColorImage0.maxComponent();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertNull(integer0);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      rOI0.setROI(0, (-3073), 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(3074, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals((-3073), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1194, 1194, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 216;
      intArray0[3] = 216;
      intArray0[4] = 0;
      intArray0[5] = 216;
      intArray0[6] = 0;
      intArray0[7] = 0;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-364), (-989), 32767, (-989), 794, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -989
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(0, 1231, 887);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      int int1 = 2658;
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertNotNull(rOI0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertTrue(int3 == int0);
      assertTrue(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals(Integer.MAX_VALUE, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertTrue(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertFalse(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertFalse(int6 == int4);
      assertTrue(int6 == int2);
      assertTrue(int6 == int0);
      assertTrue(int6 == int5);
      assertTrue(int6 == int3);
      assertFalse(int6 == int1);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertTrue(int7 == int5);
      assertTrue(int7 == int3);
      assertTrue(int7 == int0);
      assertFalse(int7 == int4);
      assertTrue(int7 == int2);
      assertTrue(int7 == int6);
      assertFalse(int7 == int1);
      assertEquals(0, int7);
      
      int int8 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertFalse(int8 == int5);
      assertTrue(int8 == int4);
      assertFalse(int8 == int7);
      assertFalse(int8 == int2);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertEquals(Integer.MAX_VALUE, int8);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, 2658, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-3345), (-3345), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3345
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertEquals(300, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(1477);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1477, (int)integer2);
      
      byte byte0 = integer2.byteValue();
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((byte) (-59), byte0);
      
      integerArray0[2] = integer1;
      Integer integer3 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-30000), (int)integer3);
      
      int int0 = integer3.intValue();
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((-30000), int0);
      
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(200, (int)integer4);
      
      float float0 = integer4.floatValue();
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer1));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer2));
      assertEquals(200.0F, float0, 0.01F);
      
      integerArray0[3] = integer4;
      Integer integer5 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer3));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer0));
      assertEquals(100, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = Integer.valueOf((-2272));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)integer1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer5));
      assertEquals((-2272), (int)integer6);
      
      Integer integer7 = new Integer((byte) (-59));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertEquals((-59), (int)integer7);
      
      byte byte1 = integer7.byteValue();
      assertFalse(integer7.equals((Object)integer4));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)int0));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-59), byte1);
      
      integerArray0[5] = integer7;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(152, 0, integerArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.YIQ, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.clear();
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(ColorModel.YIQ, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage1.X());
      assertEquals(4, interpolatedColorImage1.Y());
      assertEquals(ColorModel.YIQ, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      
      int int0 = 1864;
      int int1 = 2003;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-475), 0, 2003);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply(3187, 3187, (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, (-292), 0, (-292));
      assertEquals(1, rOI0.X());
      assertEquals((-292), rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-292), rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int[] intArray0 = new int[8];
      intArray0[0] = (-292);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      ColorImage colorImage1 = colorImage0.divide(intArray0);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertArrayEquals(new int[] {(-292), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertNotNull(colorImage1);
      assertEquals(8, intArray0.length);
      
      ColorImage colorImage2 = colorImage1.copy();
      assertSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage1, colorImage2);
      assertSame(colorImage1, colorImage0);
      assertNotSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertArrayEquals(new int[] {(-292), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage2.X());
      assertEquals(0, colorImage2.Y());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotNull(colorImage2);
      assertFalse(colorImage2.equals((Object)colorImage1));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertEquals(8, intArray0.length);
      
      ColorImage colorImage3 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage3.getColorModel());
      assertEquals(0, colorImage3.X());
      assertEquals(0, colorImage3.Y());
      assertNotNull(colorImage3);
      assertFalse(colorImage3.equals((Object)colorImage2));
      assertFalse(colorImage3.equals((Object)colorImage0));
      assertFalse(colorImage3.equals((Object)colorImage1));
      
      ColorImage colorImage4 = colorImage1.subtract(colorImage3);
      assertSame(colorImage0, colorImage1);
      assertNotSame(colorImage0, colorImage3);
      assertSame(colorImage0, colorImage4);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage1, colorImage2);
      assertSame(colorImage1, colorImage0);
      assertNotSame(colorImage1, colorImage3);
      assertSame(colorImage1, colorImage4);
      assertNotSame(colorImage3, colorImage2);
      assertNotSame(colorImage3, colorImage0);
      assertNotSame(colorImage3, colorImage1);
      assertNotSame(colorImage3, colorImage4);
      assertSame(colorImage4, colorImage1);
      assertSame(colorImage4, colorImage0);
      assertNotSame(colorImage4, colorImage3);
      assertNotSame(colorImage4, colorImage2);
      assertArrayEquals(new int[] {(-292), 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage3.getColorModel());
      assertEquals(0, colorImage3.X());
      assertEquals(0, colorImage3.Y());
      assertEquals(ColorModel.RGB, colorImage4.getColorModel());
      assertEquals(0, colorImage4.Y());
      assertEquals(0, colorImage4.X());
      assertNotNull(colorImage4);
      assertFalse(colorImage0.equals((Object)colorImage3));
      assertFalse(colorImage0.equals((Object)colorImage2));
      assertFalse(colorImage1.equals((Object)colorImage2));
      assertFalse(colorImage1.equals((Object)colorImage3));
      assertFalse(colorImage3.equals((Object)colorImage2));
      assertFalse(colorImage3.equals((Object)colorImage0));
      assertFalse(colorImage3.equals((Object)colorImage1));
      assertFalse(colorImage4.equals((Object)colorImage3));
      assertFalse(colorImage4.equals((Object)colorImage2));
      assertEquals(8, intArray0.length);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      ColorImage colorImage5 = colorImage0.divide(1, (-620));
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage0, colorImage5);
      assertNotSame(colorImage0, colorImage3);
      assertSame(colorImage0, colorImage4);
      assertNotSame(colorImage0, colorImage2);
      assertSame(colorImage5, colorImage0);
      assertSame(colorImage5, colorImage4);
      assertNotSame(colorImage5, colorImage3);
      assertNotSame(colorImage5, colorImage2);
      assertSame(colorImage5, colorImage1);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage5.X());
      assertEquals(ColorModel.RGB, colorImage5.getColorModel());
      assertEquals(0, colorImage5.Y());
      assertNotNull(colorImage5);
      assertFalse(colorImage0.equals((Object)colorImage3));
      assertFalse(colorImage0.equals((Object)colorImage2));
      assertFalse(colorImage5.equals((Object)colorImage3));
      assertFalse(colorImage5.equals((Object)colorImage2));
      
      // Undeclared exception!
      try { 
        colorImage3.multiply((-2951), Integer.MIN_VALUE, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(3, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 7;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(7);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      int int0 = 255;
      ColorImage colorImage0 = new ColorImage(255, 255);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(255, colorImage0.Y());
      assertEquals(255, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        colorImage0.subtract(1, 2636, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 16;
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(1, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.splat(0.0, 0.0, intArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // jigl.image.types.GrayImage cannot be cast to jigl.image.types.InterpolatedGrayImage
         //
         verifyException("jigl.image.types.InterpolatedColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      int int0 = 1131;
      ColorImage colorImage0 = new ColorImage(1131, 16);
      assertEquals(16, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1131, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.multiply(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ColorModel colorModel0 = ColorModel.HLS;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.HLS, interpolatedColorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Image image0 = null;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, (-2017), (-552), (-552));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[9];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      String string0 = interpolatedColorImage0.toString();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      String string1 = interpolatedColorImage0.toString(rOI0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("4:4\nnull \n4:4\nnull \n4:4\nnull \n", string1);
      
      int int0 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, (-170), 2086, 0, (-170));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -170
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      String string0 = interpolatedColorImage0.toString();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = (-198);
      rOI0.setROI(952, 4, 1558, (-198));
      assertEquals(203, rOI0.Y());
      assertEquals(1558, rOI0.lx());
      assertEquals(607, rOI0.X());
      assertEquals(952, rOI0.ux());
      assertEquals(4, rOI0.ly());
      assertEquals((-198), rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1152), 255, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = ColorModel.HLS;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.HLS, interpolatedColorImage0.getColorModel());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-1735), (-1735), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorModel colorModel0 = colorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorModel0);
      
      int[] intArray0 = new int[5];
      int int0 = 0;
      int int1 = (-1899);
      // Undeclared exception!
      try { 
        colorImage0.divide(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      int int0 = 1404;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1404, 1404);
      assertEquals(1404, interpolatedColorImage0.Y());
      assertEquals(1404, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage(interpolatedColorImage0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI((-1), (-145), 0, (-1));
      assertEquals(145, rOI0.Y());
      assertEquals(2, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals((-1), rOI0.ly());
      assertEquals((-1), rOI0.ux());
      assertEquals((-145), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, (-1), (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = null;
      try {
        interpolatedColorImage0 = new InterpolatedColorImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[8];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[0];
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, (-292), 0, (-292));
      assertEquals((-292), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals((-292), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ColorImage colorImage1 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, (-292), 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      String string0 = interpolatedColorImage0.toString();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 4, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide((ColorImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(16, 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-3649), (-3649), (-3649), (-3649), 2, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-16777216);
      int int1 = 2559;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(2559, (-16777216));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int1 = 0;
      int[] intArray0 = new int[9];
      intArray0[0] = Integer.MIN_VALUE;
      Integer[] integerArray0 = colorImage0.max();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(integerArray0);
      assertEquals(3, integerArray0.length);
      
      intArray0[1] = 0;
      intArray0[2] = Integer.MIN_VALUE;
      intArray0[3] = Integer.MIN_VALUE;
      intArray0[4] = (-1782);
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 16;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(Integer.MIN_VALUE, 0, 0, 16, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = Integer.MIN_VALUE;
      // Undeclared exception!
      try { 
        colorImage0.plane(Integer.MIN_VALUE);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1332, 1585);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1585, colorImage0.Y());
      assertEquals(1332, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 1332;
      intArray0[1] = 1332;
      intArray0[2] = 114;
      intArray0[3] = 1585;
      intArray0[4] = 1585;
      intArray0[5] = 1332;
      intArray0[6] = 1332;
      intArray0[7] = 1332;
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      Integer[] integerArray0 = interpolatedColorImage1.min();
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(integerArray0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(3, integerArray0.length);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(0, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorModel colorModel0 = ColorModel.HLS;
      colorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.HLS, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      // Undeclared exception!
      try { 
        colorImage0.min(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(7, 7, 741, 741, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 1911;
      intArray0[1] = 1911;
      intArray0[2] = (-2971);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      rOI0.setROI((-329), (-1351), 208, (-1708));
      assertEquals(358, rOI0.Y());
      assertEquals(208, rOI0.lx());
      assertEquals(538, rOI0.X());
      assertEquals((-1708), rOI0.uy());
      assertEquals((-329), rOI0.ux());
      assertEquals((-1351), rOI0.ly());
      
      int int2 = rOI0.Y();
      assertEquals(358, rOI0.Y());
      assertEquals(208, rOI0.lx());
      assertEquals(538, rOI0.X());
      assertEquals((-1708), rOI0.uy());
      assertEquals((-329), rOI0.ux());
      assertEquals((-1351), rOI0.ly());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(358, int2);
      
      int int3 = rOI0.X();
      assertEquals(358, rOI0.Y());
      assertEquals(208, rOI0.lx());
      assertEquals(538, rOI0.X());
      assertEquals((-1708), rOI0.uy());
      assertEquals((-329), rOI0.ux());
      assertEquals((-1351), rOI0.ly());
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(538, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min((-2971), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2971
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      ROI rOI1 = new ROI();
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(Integer.MIN_VALUE, 0, 5, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = (-1123);
      rOI0.setROI(0, 0, 255, (-1123));
      assertEquals(0, rOI0.ly());
      assertEquals(1124, rOI0.Y());
      assertEquals(255, rOI0.lx());
      assertEquals(256, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-1123), rOI0.uy());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      GrayImage grayImage0 = colorImage0.plane(2);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(grayImage0);
      
      GrayImage grayImage1 = colorImage0.plane(2);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(grayImage1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(colorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 4;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      String string0 = interpolatedColorImage0.toString();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = 8;
      int int5 = 364;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, (-254));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 4;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 4, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(2422, 2422, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2422
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer integer0 = Integer.getInteger("EIGHOR", 0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 0, integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((ColorImage) interpolatedColorImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 962;
      intArray0[1] = 962;
      intArray0[2] = (-2968);
      intArray0[3] = 962;
      intArray0[4] = 0;
      intArray0[6] = 255;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(255, 255, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(16, 16, intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(843, 843, 2998, 843, 962);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int1 = 0;
      Integer integer0 = colorImage0.minComponent();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(integer0);
      
      // Undeclared exception!
      try { 
        colorImage0.max(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      int int0 = 9;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(9, 9);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(9, interpolatedColorImage0.X());
      assertEquals(9, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.plane(9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.add((-364), 1764, (-364), (-364), (-364), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(0, int4);
      
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[5] = 0;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      String string0 = interpolatedColorImage0.toString();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI((-198), 4, 1558, (-198));
      assertEquals(4, rOI0.ly());
      assertEquals(1558, rOI0.lx());
      assertEquals((-198), rOI0.ux());
      assertEquals((-198), rOI0.uy());
      assertEquals(203, rOI0.Y());
      assertEquals(1757, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip(32767, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(800, 800, 800);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = new ColorImage(0, 172);
      assertEquals(0, colorImage0.X());
      assertEquals(172, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(172, 172);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 172
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(1584, 7, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(142, 0);
      assertEquals(142, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      jigl.image.Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertSame(interpolatedColorImage0, image0);
      assertEquals(142, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(142, image0.X());
      assertEquals(0, image0.Y());
      assertNotNull(image0);
      
      String string0 = interpolatedColorImage0.toString();
      assertSame(interpolatedColorImage0, image0);
      assertEquals(142, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(string0);
      assertEquals("142:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n142:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n142:0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.divide((-350), (-350), 142);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage0, image0);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, image0);
      assertEquals(142, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(142, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      
      int[] intArray0 = new int[4];
      intArray0[0] = (-350);
      intArray0[1] = 142;
      intArray0[2] = (-350);
      intArray0[3] = (-350);
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, int2);
      
      int int3 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int4 == int2);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.ux();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int6 == int0);
      assertFalse(int6 == int3);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertTrue(int6 == int2);
      assertEquals(Integer.MAX_VALUE, int6);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-1728), (-1728));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1728
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.multiply((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(128, 128, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide((-2332), (-552), (-552));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[3];
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI(41, 0, 0, 5);
      assertEquals(41, rOI0.lx());
      assertEquals(6, rOI0.Y());
      assertEquals(5, rOI0.ly());
      assertEquals(42, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      Integer integer0 = new Integer(0);
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(41, 1065, intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      String string0 = interpolatedColorImage0.toString();
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(string0);
      assertEquals("4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n4:4\nnull null null null \nnull null null null \nnull null null null \nnull null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI((-32768), 4, (-32768), (-32768));
      assertEquals((-32768), rOI0.lx());
      assertEquals(32773, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-32768), rOI0.ux());
      assertEquals((-32768), rOI0.uy());
      assertEquals(4, rOI0.ly());
      
      int int0 = rOI0.ly();
      assertEquals((-32768), rOI0.lx());
      assertEquals(32773, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-32768), rOI0.ux());
      assertEquals((-32768), rOI0.uy());
      assertEquals(4, rOI0.ly());
      assertEquals(4, int0);
      
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 4;
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(4, 4, intArray0);
      assertArrayEquals(new int[] {4, 4, 4, 4, 4, 4}, intArray0);
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(4, colorImage0.X());
      assertNotNull(colorImage0);
      assertEquals(6, intArray0.length);
      
      Integer[] integerArray0 = colorImage0.min();
      assertArrayEquals(new int[] {4, 4, 4, 4, 4, 4}, intArray0);
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(4, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(4, colorImage0.X());
      assertNotNull(integerArray0);
      assertEquals(6, intArray0.length);
      assertEquals(3, integerArray0.length);
      
      int int1 = (-1829);
      int int2 = 136;
      // Undeclared exception!
      try { 
        colorImage0.add(2, 4, (-1829), 4, 136);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, (-292), 0, (-292));
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals((-292), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals((-292), rOI0.uy());
      
      // Undeclared exception!
      try { 
        colorImage0.clip(0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -292
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((-22), 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(16, (-276), 16, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int0 = (-552);
      int int1 = (-2946);
      int[] intArray0 = new int[7];
      intArray0[0] = 1911;
      intArray0[1] = (-552);
      intArray0[2] = (-2946);
      intArray0[3] = (-1752);
      intArray0[4] = (-2946);
      // Undeclared exception!
      try { 
        colorImage0.addbuffer((-325), 1766, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(255, 255);
      assertEquals(255, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(255, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      colorImage0.maxComponent();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ly();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI(0, 2726, 16, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2727, rOI0.Y());
      assertEquals(17, rOI0.X());
      assertEquals(16, rOI0.lx());
      assertEquals(2726, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((ColorImage) interpolatedColorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      rOI0.setROI((-2531), (-2531), (-2531), 3489);
      assertEquals((-2531), rOI0.uy());
      assertEquals((-2531), rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(6021, rOI0.Y());
      assertEquals((-2531), rOI0.lx());
      assertEquals(3489, rOI0.ly());
      
      // Undeclared exception!
      interpolatedColorImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage(0, (-437));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      int int0 = integer0.intValue();
      assertEquals(400, int0);
      
      Integer integer1 = new Integer(400);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertEquals(400, (int)integer1);
      
      int int1 = integer1.intValue();
      assertTrue(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(int1 == int0);
      assertEquals(400, int1);
      
      integerArray0[0] = (Integer) 400;
      Integer integer2 = new Integer((-2293));
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals((-2293), (int)integer2);
      
      integerArray0[1] = integer2;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int1));
      assertEquals(200, (int)integer3);
      
      int int2 = Integer.remainderUnsigned((-1831), (-199));
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals((-1831), int2);
      
      integerArray0[2] = integer3;
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage0.clear(integerArray0);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage1);
      assertSame(interpolatedColorImage2, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertEquals(3, integerArray0.length);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(1740, 0, Integer.MAX_VALUE, 1740, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-552), (-552), (-70), (-552), (-552));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = interpolatedColorImage0.copy();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, 0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.maxComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      jigl.image.Image<Integer[]> image0 = interpolatedColorImage0.clear();
      assertSame(interpolatedColorImage0, image0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, image0.Y());
      assertEquals(0, image0.X());
      assertNotNull(image0);
      
      rOI0.setROI(216, 0, 0, 216);
      assertEquals(216, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(216, rOI0.ly());
      assertEquals(217, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(217, rOI0.X());
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage1.equals((Object)image0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((ColorImage) interpolatedColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      int int1 = 152;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(300, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(300, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(1477);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals(1477, (int)integer2);
      
      byte byte0 = integer2.byteValue();
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertEquals((byte) (-59), byte0);
      
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertEquals((-30000), (int)integer3);
      
      int int2 = integer3.intValue();
      assertFalse(integer3.equals((Object)int1));
      assertFalse(integer3.equals((Object)integer0));
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-30000), int2);
      
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer4);
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(200, (int)integer4);
      
      float float0 = integer4.floatValue();
      assertFalse(integer4.equals((Object)int2));
      assertFalse(integer4.equals((Object)int1));
      assertFalse(integer4.equals((Object)int0));
      assertFalse(integer4.equals((Object)integer2));
      assertFalse(integer4.equals((Object)integer3));
      assertFalse(integer4.equals((Object)integer0));
      assertFalse(integer4.equals((Object)integer1));
      assertEquals(200.0F, float0, 0.01F);
      
      integerArray0[3] = integer4;
      Integer integer5 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer5);
      assertFalse(integer5.equals((Object)integer1));
      assertFalse(integer5.equals((Object)integer0));
      assertFalse(integer5.equals((Object)int1));
      assertFalse(integer5.equals((Object)int0));
      assertFalse(integer5.equals((Object)integer4));
      assertFalse(integer5.equals((Object)int2));
      assertFalse(integer5.equals((Object)integer2));
      assertFalse(integer5.equals((Object)integer3));
      assertEquals(100, (int)integer5);
      
      integerArray0[4] = integer5;
      Integer integer6 = Integer.valueOf((-2272));
      assertNotNull(integer6);
      assertFalse(integer6.equals((Object)int2));
      assertFalse(integer6.equals((Object)integer5));
      assertFalse(integer6.equals((Object)int1));
      assertFalse(integer6.equals((Object)int0));
      assertFalse(integer6.equals((Object)integer4));
      assertFalse(integer6.equals((Object)integer2));
      assertFalse(integer6.equals((Object)integer3));
      assertFalse(integer6.equals((Object)integer0));
      assertFalse(integer6.equals((Object)integer1));
      assertEquals((-2272), (int)integer6);
      
      Integer integer7 = new Integer((-4923));
      assertNotNull(integer7);
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int2));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertEquals((-4923), (int)integer7);
      
      int int3 = Integer.compareUnsigned(7, 0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertEquals(1, int3);
      
      byte byte1 = integer7.byteValue();
      assertFalse(integer7.equals((Object)integer1));
      assertFalse(integer7.equals((Object)int2));
      assertFalse(integer7.equals((Object)int3));
      assertFalse(integer7.equals((Object)integer6));
      assertFalse(integer7.equals((Object)integer0));
      assertFalse(integer7.equals((Object)integer3));
      assertFalse(integer7.equals((Object)integer2));
      assertFalse(integer7.equals((Object)integer5));
      assertFalse(integer7.equals((Object)int1));
      assertFalse(integer7.equals((Object)int0));
      assertFalse(integer7.equals((Object)integer4));
      assertTrue(byte1 == byte0);
      assertEquals((byte) (-59), byte1);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 1477;
      intArray0[1] = (int) (byte) (-59);
      intArray0[2] = (-1077);
      intArray0[3] = (-30000);
      intArray0[4] = 1477;
      intArray0[5] = (int) integerArray0[0];
      intArray0[6] = 7;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int int0 = 2;
      String string0 = interpolatedColorImage0.toString();
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(string0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertEquals("0:0\n0:0\n0:0\n", string0);
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.divide(2, 1427, 0);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      
      int[][] intArray0 = new int[7][0];
      int[] intArray1 = new int[4];
      intArray1[0] = 2691;
      intArray1[1] = 6;
      intArray1[2] = Integer.MAX_VALUE;
      intArray1[3] = 0;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[1];
      assertFalse(intArray2.equals((Object)intArray1));
      
      intArray2[0] = 6;
      intArray0[1] = intArray2;
      int[] intArray3 = new int[9];
      assertFalse(intArray3.equals((Object)intArray1));
      assertFalse(intArray3.equals((Object)intArray2));
      
      intArray3[0] = 6;
      intArray3[1] = 6;
      intArray3[2] = Integer.MAX_VALUE;
      intArray3[3] = 0;
      intArray3[4] = 2;
      intArray3[5] = Integer.MAX_VALUE;
      intArray3[6] = Integer.MAX_VALUE;
      intArray3[7] = 6;
      intArray3[8] = Integer.MAX_VALUE;
      intArray0[2] = intArray3;
      int[] intArray4 = new int[8];
      assertFalse(intArray4.equals((Object)intArray1));
      assertFalse(intArray4.equals((Object)intArray2));
      assertFalse(intArray4.equals((Object)intArray3));
      
      intArray4[0] = 0;
      intArray4[1] = 6;
      intArray4[2] = 2691;
      intArray4[3] = 0;
      intArray4[4] = 0;
      intArray4[5] = 2691;
      intArray4[6] = Integer.MAX_VALUE;
      intArray4[7] = Integer.MAX_VALUE;
      intArray0[3] = intArray4;
      int[] intArray5 = new int[6];
      assertFalse(intArray5.equals((Object)intArray1));
      assertFalse(intArray5.equals((Object)intArray3));
      assertFalse(intArray5.equals((Object)intArray4));
      assertFalse(intArray5.equals((Object)intArray2));
      
      intArray5[0] = 2;
      intArray5[1] = 2691;
      intArray5[2] = 0;
      intArray5[3] = 0;
      intArray5[4] = 6;
      intArray5[5] = 0;
      intArray0[4] = intArray5;
      int[] intArray6 = new int[3];
      assertFalse(intArray6.equals((Object)intArray4));
      assertFalse(intArray6.equals((Object)intArray5));
      assertFalse(intArray6.equals((Object)intArray2));
      assertFalse(intArray6.equals((Object)intArray3));
      assertFalse(intArray6.equals((Object)intArray1));
      
      intArray6[0] = Integer.MAX_VALUE;
      intArray6[1] = 0;
      intArray6[2] = 2;
      intArray0[5] = intArray6;
      int[] intArray7 = new int[5];
      assertFalse(intArray7.equals((Object)intArray4));
      assertFalse(intArray7.equals((Object)intArray5));
      assertFalse(intArray7.equals((Object)intArray6));
      assertFalse(intArray7.equals((Object)intArray3));
      assertFalse(intArray7.equals((Object)intArray1));
      assertFalse(intArray7.equals((Object)intArray2));
      
      intArray7[0] = 6;
      intArray7[1] = Integer.MAX_VALUE;
      intArray7[2] = Integer.MAX_VALUE;
      intArray7[3] = 0;
      intArray7[4] = 0;
      intArray0[6] = intArray7;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(16, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNull(integer0);
      
      ColorImage colorImage1 = colorImage0.add((-1922), 0, 0);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(16, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      
      ColorImage colorImage2 = colorImage0.add(colorImage1);
      assertSame(colorImage0, colorImage2);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertSame(colorImage1, colorImage2);
      assertSame(colorImage2, colorImage1);
      assertSame(colorImage2, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(16, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(16, colorImage2.X());
      assertEquals(0, colorImage2.Y());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotNull(colorImage2);
      
      ColorImage colorImage3 = colorImage1.copy();
      assertSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage3);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      assertNotSame(colorImage1, colorImage3);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage3, colorImage2);
      assertNotSame(colorImage3, colorImage1);
      assertNotSame(colorImage3, colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(16, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(16, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(16, colorImage3.X());
      assertEquals(ColorModel.RGB, colorImage3.getColorModel());
      assertEquals(0, colorImage3.Y());
      assertNotNull(colorImage3);
      assertFalse(colorImage3.equals((Object)colorImage2));
      assertFalse(colorImage3.equals((Object)colorImage1));
      assertFalse(colorImage3.equals((Object)colorImage0));
      
      Integer[] integerArray0 = new Integer[9];
      integerArray0[0] = null;
      Integer integer1 = Integer.valueOf(1394);
      assertNotNull(integer1);
      assertEquals(1394, (int)integer1);
      
      Integer integer2 = Integer.valueOf(428);
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(428, (int)integer2);
      
      Integer integer3 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals(0, (int)integer3);
      
      byte byte0 = integer3.byteValue();
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer1));
      assertEquals((byte)0, byte0);
      
      integerArray0[1] = integer3;
      integerArray0[2] = null;
      integerArray0[3] = null;
      integerArray0[4] = null;
      integerArray0[5] = null;
      integerArray0[6] = null;
      integerArray0[7] = null;
      integerArray0[8] = null;
      // Undeclared exception!
      try { 
        colorImage0.set((-1922), 0, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      rOI0.setROI(0, Integer.MAX_VALUE, Integer.MAX_VALUE, 0);
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, int0);
      
      int int1 = rOI0.ux();
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.lx();
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(Integer.MAX_VALUE, int2);
      
      int int3 = rOI0.ux();
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.ly();
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int4 == int0);
      assertFalse(int4 == int1);
      assertTrue(int4 == int2);
      assertFalse(int4 == int3);
      assertEquals(Integer.MAX_VALUE, int4);
      
      int int5 = rOI0.ux();
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertFalse(int5 == int2);
      assertTrue(int5 == int3);
      assertFalse(int5 == int4);
      assertTrue(int5 == int0);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = rOI0.lx();
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(Integer.MIN_VALUE, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertEquals(Integer.MAX_VALUE, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertTrue(int6 == int2);
      assertFalse(int6 == int3);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int0);
      assertTrue(int6 == int4);
      assertEquals(Integer.MAX_VALUE, int6);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, int0);
      
      int int1 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      
      int int2 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, int2);
      
      int int3 = rOI0.ly();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertEquals(0, int3);
      
      int int4 = rOI0.ux();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int4 == int3);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertEquals(0, int4);
      
      int int5 = rOI0.lx();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertTrue(int5 == int1);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertEquals(0, int5);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.diff(interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(2, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      long[] longArray0 = interpolatedColorImage0.sqrSum();
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(longArray0);
      assertEquals(3, longArray0.length);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = (-1074);
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = rOI0.uy();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, int0);
      
      int int1 = rOI0.X();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertFalse(int1 == int0);
      assertEquals(1, int1);
      
      int int2 = rOI0.Y();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(1, int2);
      
      rOI0.setROI(1, 1429, 0, 5);
      assertEquals(1429, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.X());
      assertEquals(1425, rOI0.Y());
      assertEquals(5, rOI0.uy());
      assertEquals(1, rOI0.lx());
      
      int int3 = rOI0.X();
      assertEquals(1429, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(2, rOI0.X());
      assertEquals(1425, rOI0.Y());
      assertEquals(5, rOI0.uy());
      assertEquals(1, rOI0.lx());
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(2, int3);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract((-16777216), (-1074), intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(integerArray0);
      assertEquals(3, integerArray0.length);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int int0 = 2;
      rOI0.setROI(0, 0, 2, 2);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(3, rOI0.X());
      assertEquals(3, rOI0.Y());
      assertEquals(2, rOI0.lx());
      assertEquals(2, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 2998;
      int int1 = 962;
      int int2 = (-1);
      int int3 = 0;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      int int4 = rOI0.uy();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertTrue(int4 == int3);
      assertEquals(0, int4);
      
      int int5 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(int5 == int1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertEquals(1, int5);
      
      int int6 = rOI0.Y();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertTrue(int6 == int5);
      assertFalse(int6 == int1);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      assertFalse(int6 == int3);
      assertFalse(int6 == int0);
      assertEquals(1, int6);
      
      int int7 = rOI0.X();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertFalse(int7 == int2);
      assertTrue(int7 == int5);
      assertFalse(int7 == int1);
      assertFalse(int7 == int3);
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      assertFalse(int7 == int4);
      assertEquals(1, int7);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(2998, 20, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2998
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      ColorImage colorImage2 = colorImage1.multiply(0, 0);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage2, colorImage0);
      assertSame(colorImage2, colorImage1);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(0, colorImage2.Y());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotNull(colorImage2);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage0));
      
      ROI rOI0 = new ROI(0, 8, 1759, 599);
      assertEquals(8, rOI0.uy());
      assertEquals(1760, rOI0.X());
      assertEquals(592, rOI0.Y());
      assertEquals(1759, rOI0.lx());
      assertEquals(599, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(Integer.MIN_VALUE, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(Integer.MIN_VALUE, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(Integer.MAX_VALUE, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, int0);
      
      rOI1.setROI((-1035), 0, 0, 8);
      assertNotSame(rOI1, rOI0);
      assertEquals(1036, rOI1.X());
      assertEquals((-1035), rOI1.ux());
      assertEquals(9, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int1 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1036, rOI1.X());
      assertEquals((-1035), rOI1.ux());
      assertEquals(9, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int1 == int0);
      assertEquals((-1035), int1);
      
      int int2 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(1036, rOI1.X());
      assertEquals((-1035), rOI1.ux());
      assertEquals(9, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1036, rOI1.X());
      assertEquals((-1035), rOI1.ux());
      assertEquals(9, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertEquals((-1035), int3);
      
      int int4 = rOI1.ly();
      assertNotSame(rOI1, rOI0);
      assertEquals(1036, rOI1.X());
      assertEquals((-1035), rOI1.ux());
      assertEquals(9, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertEquals(8, int4);
      
      int int5 = rOI1.ux();
      assertNotSame(rOI1, rOI0);
      assertEquals(1036, rOI1.X());
      assertEquals((-1035), rOI1.ux());
      assertEquals(9, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertTrue(int5 == int1);
      assertFalse(int5 == int2);
      assertEquals((-1035), int5);
      
      int int6 = rOI1.lx();
      assertNotSame(rOI1, rOI0);
      assertEquals(1036, rOI1.X());
      assertEquals((-1035), rOI1.ux());
      assertEquals(9, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(8, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(int6 == int4);
      assertTrue(int6 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int1);
      assertTrue(int6 == int2);
      assertFalse(int6 == int3);
      assertEquals(0, int6);
      
      rOI1.setROI((-758), 0, 0, 0);
      assertNotSame(rOI1, rOI0);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(759, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals((-758), rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        colorImage1.clip(599, (-1035), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ColorModel colorModel0 = ColorModel.HLS;
      colorImage0.setColorModel(colorModel0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.HLS, colorImage0.getColorModel());
      
      // Undeclared exception!
      try { 
        colorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(865, 865, intArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, int0);
      
      int[] intArray0 = new int[6];
      intArray0[5] = 0;
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract(850, 0, 0, 0, Integer.MAX_VALUE, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[8];
      int int0 = 0;
      intArray0[6] = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = (-2020);
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 2966;
      int[] intArray0 = new int[6];
      intArray0[0] = (-1632);
      intArray0[1] = 2998;
      intArray0[2] = 2172;
      intArray0[3] = 2;
      intArray0[4] = 2998;
      intArray0[5] = 2998;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(2172, 2966, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-1487), 3950, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = Integer.MAX_VALUE;
      int int1 = 0;
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertNotNull(rOI0);
      
      int int2 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, int2);
      
      int int3 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertTrue(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertEquals(0, int3);
      
      int int4 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertTrue(int4 == int0);
      assertEquals(Integer.MAX_VALUE, int4);
      
      int int5 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertTrue(int5 == int2);
      assertTrue(int5 == int3);
      assertTrue(int5 == int1);
      assertEquals(0, int5);
      
      int int6 = rOI0.ly();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertTrue(int6 == int5);
      assertFalse(int6 == int4);
      assertTrue(int6 == int3);
      assertTrue(int6 == int2);
      assertFalse(int6 == int0);
      assertTrue(int6 == int1);
      assertEquals(0, int6);
      
      int int7 = rOI0.ux();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertTrue(int7 == int3);
      assertTrue(int7 == int2);
      assertFalse(int7 == int4);
      assertFalse(int7 == int0);
      assertTrue(int7 == int6);
      assertTrue(int7 == int1);
      assertTrue(int7 == int5);
      assertEquals(0, int7);
      
      int int8 = rOI0.lx();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(Integer.MAX_VALUE, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(Integer.MIN_VALUE, rOI0.X());
      assertFalse(int8 == int1);
      assertFalse(int8 == int7);
      assertFalse(int8 == int3);
      assertTrue(int8 == int0);
      assertTrue(int8 == int4);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertEquals(Integer.MAX_VALUE, int8);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply((-2490), (-2490), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2490
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 10;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      int int0 = 1080;
      int int1 = 14;
      ColorImage colorImage0 = new ColorImage(1080, 14);
      int int2 = 3;
      ROI rOI0 = null;
      colorImage0.toString();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(0, 0, 0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[5];
      intArray0[0] = (-1400);
      intArray0[1] = 1830;
      intArray0[2] = 0;
      intArray0[3] = 2179;
      intArray0[4] = (-1968);
      ROI rOI0 = new ROI(Integer.MAX_VALUE, 0, 0, 0);
      rOI0.ux();
      rOI0.ux();
      rOI0.lx();
      rOI0.ux();
      rOI0.ly();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = (-1752);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      ROI rOI0 = new ROI();
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage(0, 0);
      InterpolatedColorImage interpolatedColorImage3 = new InterpolatedColorImage();
      ColorImage colorImage0 = interpolatedColorImage0.diff(interpolatedColorImage2);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      ColorModel colorModel0 = ColorModel.HLS;
      colorImage0.setColorModel(colorModel0);
      ColorImage colorImage1 = new ColorImage();
      // Undeclared exception!
      try { 
        colorImage1.multiply(0, (-2519));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.setROI(0, (-292), 0, (-292));
      int[] intArray0 = new int[8];
      intArray0[0] = (-292);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      ColorImage colorImage1 = colorImage0.divide(intArray0);
      ColorImage colorImage2 = new ColorImage();
      colorImage1.subtract(colorImage2);
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        colorImage0.subtract(0, 0, 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      int[] intArray0 = new int[7];
      intArray0[0] = 1911;
      intArray0[1] = (-552);
      intArray0[2] = (-2946);
      intArray0[3] = (-1752);
      intArray0[4] = (-2946);
      intArray0[5] = (-552);
      intArray0[6] = (-2946);
      // Undeclared exception!
      try { 
        colorImage0.multiply((-552), (-2946), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.POPUP_LAYER;
      integerArray0[1] = integer1;
      Integer integer2 = Integer.valueOf(1477);
      integer2.byteValue();
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.FRAME_CONTENT_LAYER;
      integer3.intValue();
      Integer integer4 = JLayeredPane.MODAL_LAYER;
      integer4.floatValue();
      integerArray0[3] = integer4;
      Integer integer5 = JLayeredPane.PALETTE_LAYER;
      integerArray0[4] = integer5;
      Integer.valueOf((-2272));
      Integer integer6 = new Integer((-4923));
      integer6.byteValue();
      integerArray0[5] = integer6;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(152, 0, integerArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 0, (Integer[]) null, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = 8;
      ColorImage colorImage0 = new ColorImage(8, 8);
      int int1 = 3;
      int[] intArray0 = new int[4];
      ColorModel colorModel0 = ColorModel.YIQ;
      colorImage0.colorModel = colorModel0;
      intArray0[0] = 8;
      intArray0[1] = 3;
      int int2 = 1087;
      intArray0[2] = 1087;
      intArray0[3] = 8;
      // Undeclared exception!
      try { 
        colorImage0.divide(3, 3, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      interpolatedColorImage0.get(3, 3);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(3, 3, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(4, 4);
      ColorModel colorModel0 = ColorModel.YIQ;
      interpolatedColorImage0.setColorModel(colorModel0);
      interpolatedColorImage0.clear();
      int int0 = 1864;
      int int1 = 2003;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1864, 0, 2003);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      ROI rOI0 = new ROI();
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      ROI rOI0 = new ROI();
      rOI0.setROI(216, 0, 0, 216);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      int[] intArray0 = new int[3];
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      ROI rOI0 = new ROI();
      int int0 = 2;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(2, (-1266));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1266
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }
}

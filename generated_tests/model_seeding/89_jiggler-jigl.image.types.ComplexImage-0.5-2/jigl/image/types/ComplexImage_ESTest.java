/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:58:14 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import java.awt.RenderingHints;
import java.awt.ScrollPane;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import java.awt.image.RescaleOp;
import javax.swing.plaf.synth.SynthSplitPaneUI;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.min();
      FileSystemHandling.shouldAllThrowIOExceptions();
      complexImage1.divide(1.0F, (float) 70);
      complexImage1.max();
      // Undeclared exception!
      try { 
        complexImage0.set(70, 70, (float) 70, (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 255.0F);
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      int int0 = 2069;
      int int1 = 195;
      ROI rOI0 = new ROI(2069, 2069, 2069, 195);
      // Undeclared exception!
      try { 
        complexImage2.getImag(2069, 2069, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      // Undeclared exception!
      try { 
        complexImage0.divide(4287.0F, 4287.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1905, 1905);
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complex1.real();
      complex0.magnitude();
      Complex complex2 = new Complex(complex1);
      complex2.unit();
      // Undeclared exception!
      complexImage0.clear(complex2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      Complex complex0 = new Complex();
      complex0.setReal(16);
      ComplexImage complexImage1 = new ComplexImage(16, 0);
      complexImage1.subtract(0.0F, (-32768.0F));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      Complex complex0 = complexImage0.max();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = complexImage0.clear(complex0);
      complexImage1.real();
      // Undeclared exception!
      try { 
        complexImage1.setImag(16, 16, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      complexImage0.clear();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complex1.real();
      FileSystemHandling.shouldAllThrowIOExceptions();
      float float0 = 0.0F;
      complexImage0.divide(float0, float0);
      float float1 = 0.0F;
      float float2 = (-1.0F);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_STROKE_CONTROL;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      RescaleOp rescaleOp0 = new RescaleOp(float1, float2, renderingHints0);
      BufferedImage bufferedImage0 = null;
      // Undeclared exception!
      try { 
        rescaleOp0.filter(bufferedImage0, bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.RescaleOp", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage1.addbuffer(2830, (-1436), (float) 70, (float) 2830);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1200, 1200);
      ROI rOI0 = new ROI(255, 128, 1281, (-1751));
      complexImage0.imaginary();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      // Undeclared exception!
      try { 
        complexImage0.divide(410.051F, (float) 70);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.set(3792, 1, 255.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#/aoOi+WZbFu=#2");
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      complexImage0.getJavaImage();
      complexImage0.phaseImage();
      complexImage1.clear();
      ROI rOI0 = new ROI(0, (-1947), 0, 16);
      // Undeclared exception!
      try { 
        complexImage1.divide(0, 70, (-1.0F), 768.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 70
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.min();
      float float0 = 1.0F;
      FileSystemHandling.shouldAllThrowIOExceptions();
      ComplexImage complexImage2 = complexImage1.divide(1.0F, (float) 70);
      ROI rOI0 = new ROI();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h_z8Xw?#zDvN6*1Q6S");
      complexImage1.subtract(complexImage0, rOI0, rOI0);
      complexImage2.add(0.0F, (float) 16);
      // Undeclared exception!
      try { 
        complexImage1.setImaginary(666, 0, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 666
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.Y();
      complexImage0.real();
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.uy();
      rOI0.ly();
      // Undeclared exception!
      try { 
        complexImage0.subtract(2651.9436F, (-1.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      ROI rOI0 = new ROI();
      complexImage0.set(1293, 1291, (float) 8, (float) 1291, rOI0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(34, 34);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = complexImage1.add(0.0F, (float) 34);
      complexImage2.min();
      complexImage1.subtract(complexImage0);
      complexImage2.Y();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      Complex complex0 = new Complex();
      complex0.mult(0.0);
      Integer integer0 = new Integer(0);
      Complex.sub(complex0, complex0);
      ComplexImage complexImage1 = complexImage0.multiply(426.71304F, (float) 16);
      ComplexImage complexImage2 = complexImage1.diff(complexImage0);
      complexImage1.subtract((-4530.1064F), 278.18973F);
      complexImage2.imag();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage(1298, 1298);
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.getMagnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.min();
      complexImage1.divide(complexImage0);
      ROI rOI0 = new ROI(126, 126, (-1), 126);
      rOI0.setROI((-1), 16, 16, 16);
      complexImage1.add(complexImage0);
      complexImage0.phaseImage();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      complexImage0.divide((float) 70, (float) 70);
      complexImage0.getJavaImage();
      complexImage0.phaseImage();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex();
      ROI rOI0 = new ROI();
      rOI0.setROI((-1418), 6675, 1, 2);
      ComplexImage complexImage0 = new ComplexImage(2, 16);
      // Undeclared exception!
      try { 
        complexImage0.add((float) 2, 499.94058F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(2498, 2498);
      int int0 = 0;
      complexImage1.setReal(0, 0, (float) 0);
      complexImage0.multiply(0.0F, (float) 2498);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.getMagnitudeImage();
      complexImage0.phaseImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary((-590), 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.divide(0.0F, 1.0F);
      complexImage0.multiply(complexImage1);
      ROI rOI0 = new ROI();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 1319;
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ComplexImage complexImage1 = new ComplexImage(0, 1319);
      complexImage1.phaseImage();
      complexImage0.divide(complexImage1);
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.subtract(0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complex1.setReal(70);
      Complex complex2 = Complex.sub(complex1, complex0);
      complex1.real();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.add(complexImage0);
      Complex complex3 = new Complex(complex2);
      Complex complex4 = new Complex(complex0);
      complex3.real();
      Complex complex5 = new Complex(complex2);
      // Undeclared exception!
      try { 
        complexImage0.clear((Complex) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      // Undeclared exception!
      try { 
        complexImage0.set(16, 16, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      Complex complex0 = new Complex();
      complex0.setReal(70);
      Complex.sub(complex0, complex0);
      complex0.real();
      complexImage0.toString();
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        complexImage0.setImag(70, 16, 1462.0144F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      complexImage1.clear();
      complexImage0.divide(complexImage1);
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImag(0, 1070, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.max();
      ComplexImage complexImage1 = new ComplexImage();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImag((-2093), 23, (float) (-2093), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      complexImage1.multiply(complexImage0);
      ROI rOI0 = new ROI();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.imaginary();
      complexImage0.real = null;
      int int0 = 16;
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 1200;
      ComplexImage complexImage0 = new ComplexImage(1200, 1200);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add((float) 1200, (float) 1200, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 2956;
      rOI0.setROI(2956, (-1), (-1), (-1));
      int int1 = 1477;
      int int2 = 1296;
      int int3 = 469;
      rOI0.setROI(1084, 1296, 1296, 469);
      complexImage0.add((ComplexImage) null);
      complexImage0.multiply((ComplexImage) null);
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(0, 2, (-3674), 0);
      rOI0.uy();
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.uy();
      rOI0.ly();
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      ROI rOI0 = new ROI();
      rOI0.ux();
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage2, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.getImag(1496, 1290);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(1302, 1302, (float) 1302, (float) 1302);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = (-241.1694F);
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, (-241.1694F));
      float float1 = 2413.0F;
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(1991).when(rOI0).lx();
      doReturn((-1751)).when(rOI0).ly();
      doReturn((-1751)).when(rOI0).ux();
      doReturn((-1751)).when(rOI0).uy();
      // Undeclared exception!
      try { 
        complexImage1.add(2413.0F, (-241.1694F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      int int0 = (-2272);
      ROI rOI0 = new ROI(16, 70, 16, (-2272));
      int int1 = 1084;
      rOI0.setROI(70, 16, 2956, 1084);
      int int2 = 1477;
      rOI0.setROI(70, 16, 16, 1477);
      ComplexImage complexImage1 = null;
      // Undeclared exception!
      try { 
        complexImage0.add((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 0);
      ROI rOI0 = new ROI();
      rOI0.setROI(32, 128, 1084, 16);
      complexImage0.add((ComplexImage) null);
      complexImage0.phaseImage();
      complexImage0.X();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 529;
      int int1 = (-72);
      ROI rOI0 = new ROI(0, (-1), (-4833), (-1));
      rOI0.setROI(0, (-3174), (-72), (-4833));
      rOI0.setROI((-4833), (-1), 529, 0);
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      complexImage0.divide((float) 70, (float) 70);
      RealGrayImage realGrayImage0 = complexImage0.real;
      RealGrayImage realGrayImage1 = realGrayImage0.add((-22.627241F));
      realGrayImage1.getJavaImage();
      ComplexImage complexImage1 = new ComplexImage(16, 0);
      complexImage1.magnitudeImage();
      complexImage0.getJavaImage();
      complexImage1.phaseImage();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      int int0 = 2085;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      int int1 = 1468;
      ComplexImage complexImage0 = new ComplexImage(2085, 1468);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      complexImage0.addbuffer(2085, 1468, (float) 1468, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.add((ComplexImage) null);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.phaseImage();
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.min();
      FileSystemHandling.shouldAllThrowIOExceptions();
      complexImage1.divide(1.0F, (float) 70);
      complexImage1.max();
      // Undeclared exception!
      try { 
        complexImage0.set(70, 70, (-1005.7846F), (float) 16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      int int0 = 1319;
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.multiply((-1), 16, (float) 16, (-3259.3682F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      rOI0.setROI((-1044), (-1044), 16, 0);
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1044
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      int int0 = 1631;
      ComplexImage complexImage0 = new ComplexImage(1631, 1631);
      int int1 = 598;
      ROI rOI0 = new ROI(1631, (-3674), 0, 598);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      rOI0.uy();
      rOI0.X();
      rOI0.setROI(598, (-3674), 598, 170);
      rOI0.Y();
      rOI0.uy();
      rOI0.ly();
      // Undeclared exception!
      complexImage0.copy(rOI0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.min();
      ComplexImage complexImage2 = complexImage0.clear();
      complexImage2.max();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = new ComplexImage();
      float float0 = 0.0F;
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      rOI0.uy();
      FileSystemHandling.shouldAllThrowIOExceptions();
      rOI0.X();
      rOI0.Y();
      rOI0.uy();
      int int0 = new Integer(1);
      // Undeclared exception!
      try { 
        complexImage1.add(0.0F, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      // Undeclared exception!
      try { 
        complexImage0.get(16, 78);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 78
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 195);
      complexImage0.clear();
      ROI rOI0 = new ROI((-4041), 0, 598, 128);
      rOI0.uy();
      rOI0.X();
      Integer integer0 = new Integer(128);
      rOI0.uy();
      rOI0.ly();
      complexImage0.getImag(0, 0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.add(1004.0F, 1004.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(1709, 0, (float) 1709, 787.5F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      int int0 = 70;
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      RealGrayImage realGrayImage0 = complexImage0.real;
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      complexImage1.phaseImage();
      realGrayImage1.getJavaImage();
      ComplexImage complexImage2 = new ComplexImage(70, 16);
      RealGrayImage realGrayImage2 = complexImage1.magnitudeImage();
      complexImage0.getJavaImage();
      complexImage2.setReal(realGrayImage2);
      // Undeclared exception!
      try { 
        complexImage2.subtract((float) 16, 161.668F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 16;
      int int1 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      complexImage0.divide((float) 70, (float) 70);
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractArrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ROI rOI0 = new ROI();
      rOI0.setROI(1084, 2956, 1311, 0);
      complexImage0.add(complexImage0);
      complexImage0.phaseImage();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.lx();
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage(7, 7);
      // Undeclared exception!
      try { 
        complexImage1.divide(7, 7, 0.0F, 3520.93F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      rOI0.uy();
      rOI0.X();
      rOI0.Y();
      rOI0.uy();
      rOI0.ly();
      // Undeclared exception!
      try { 
        complexImage0.subtract(4036.0F, 4036.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ComplexImage complexImage0 = new ComplexImage(34, 34);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = complexImage1.add(0.0F, (float) 34);
      complexImage2.min();
      complexImage2.subtract(complexImage1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = new ComplexImage();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      double double0 = new Integer(16);
      complex0.magnitude();
      Complex complex2 = new Complex(complex1);
      complexImage1.add(complexImage0);
      complexImage1.multiply(complexImage0);
      ROI rOI0 = new ROI();
      complexImage1.real();
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1200, 1200);
      int int0 = (-3049);
      int int1 = 255;
      float float0 = 0.0F;
      ROI rOI0 = new ROI();
      int int2 = 1;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-3049), 1, 0.0F, 120.33F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      int int0 = 1200;
      ComplexImage complexImage0 = new ComplexImage(1200, 1200);
      int int1 = 255;
      float float0 = 0.0F;
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = complexImage0.addbuffer(1200, 1, (-16.363394F), 120.33F);
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        complexImage1.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      Complex complex0 = new Complex();
      complex0.setReal(70);
      Complex.sub(complex0, complex0);
      complexImage0.toString();
      ComplexImage complexImage1 = complexImage0.multiply((-1644.3098F), (float) 0);
      ComplexImage complexImage2 = complexImage1.diff(complexImage0);
      complexImage2.real();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 170);
      ROI rOI0 = new ROI((-4041), 0, 598, 128);
      rOI0.uy();
      rOI0.X();
      int int0 = new Integer(128);
      rOI0.uy();
      rOI0.ly();
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, (-1973.1663F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.setImag((RealGrayImage) null);
      SynthSplitPaneUI synthSplitPaneUI0 = new SynthSplitPaneUI();
      // Undeclared exception!
      try { 
        synthSplitPaneUI0.createDefaultDivider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.divide(complexImage1);
      complexImage0.multiply((float) 1319, (-1888.0183F));
      ComplexImage complexImage2 = new ComplexImage();
      ROI rOI0 = new ROI(1828, 1319, 1297, 0);
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.multiply((float) 1319, (-1888.0183F));
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.multiply((-1653.3F), (-1653.3F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      float float0 = 0.0F;
      rOI0.setROI(1, 1, (-209), 929);
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI((-357), 255, (-209), (-209));
      complexImage0.subtract((float) (-357), (float) (-357));
      complexImage0.add((float) (-357), 981.17F);
      // Undeclared exception!
      try { 
        complexImage0.add((-209), 255, 1016.0F, (-32768.0F), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.subtract(0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.divide(complexImage1);
      ComplexImage complexImage2 = complexImage0.multiply((float) 1319, (-1888.0F));
      ComplexImage complexImage3 = new ComplexImage(complexImage1);
      ROI rOI0 = new ROI();
      ComplexImage complexImage4 = new ComplexImage(1319, 0);
      complexImage4.getJavaImage();
      // Undeclared exception!
      try { 
        complexImage2.add(complexImage4, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 255.0F);
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      complexImage2.subtract(0.0F, 255.0F);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      // Undeclared exception!
      try { 
        complexImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complex1.real();
      double double0 = new Double(0.0);
      complex1.div((-123.5289196786));
      Complex complex2 = new Complex(complex1);
      complex2.magnitude();
      complexImage1.add(0.0F, (float) 16);
      complexImage1.magnitudeImage();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.addbuffer(0, 1319, (float) 1319, (-3837.268F));
      // Undeclared exception!
      try { 
        complexImage1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = new ComplexImage(16, 0);
      ROI rOI0 = new ROI();
      rOI0.setROI(1663, (-4120), 16, 2);
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.subtract((float) 16, (float) 16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      float float0 = 0.0F;
      ComplexImage complexImage1 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      Complex complex0 = complexImage0.max();
      ROI rOI0 = new ROI();
      Complex.div(complex0, complex0);
      ComplexImage complexImage1 = complexImage0.clear(complex0);
      complexImage1.real();
      complexImage1.copy();
      // Undeclared exception!
      try { 
        complexImage1.setImag(16, 16, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ComplexImage complexImage1 = new ComplexImage(0, 1319);
      complexImage0.divide(complexImage1);
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.subtract(0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      int int0 = 16;
      int int1 = 195;
      ComplexImage complexImage0 = new ComplexImage(16, 195);
      int int2 = 128;
      ROI rOI0 = new ROI((-4041), 0, 598, 128);
      rOI0.setROI((-2272), (-730), (-4041), 904);
      rOI0.uy();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.Y();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add(0, 0, (-1253.2F), (float) 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.min();
      complexImage1.divide(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      ComplexImage complexImage2 = complexImage0.multiply((-2419.0F), (-1.0F), rOI0);
      complexImage2.multiply(0.0F, 1046.4498F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.subtract(0, 0, 0.0F, 3405.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(95, 1317);
      // Undeclared exception!
      try { 
        complexImage0.multiply(1317, 1317, (float) 95, (float) 1317);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1317
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(11, 410);
      ComplexImage complexImage1 = new ComplexImage(410, 11);
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 2956;
      rOI0.setROI(2956, (-1), (-1), (-1));
      rOI0.setROI(1494, 1524, (-260), 1494);
      int int1 = 1477;
      int int2 = 1296;
      int int3 = 469;
      rOI0.setROI(1084, 1296, 1296, 469);
      // Undeclared exception!
      try { 
        complexImage0.subtract((-1), 1524, 0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3373, 3373);
      ROI rOI0 = new ROI();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage1.divide(complexImage0);
      // Undeclared exception!
      complexImage0.getMagnitudeImage();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.subtract(0.0F, (float) 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.lx();
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, (float) 0);
      complexImage1.toString();
      complexImage0.clear();
      ComplexImage complexImage2 = complexImage1.diff(complexImage0);
      complexImage2.add((float) 0, 0.0F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ROI rOI0 = new ROI();
      rOI0.lx();
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      int int0 = (-669);
      // Undeclared exception!
      try { 
        complexImage1.setReal(2752, (-669), (float) (-669), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setImag(289, 289, (float) (-1003));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.divide(complexImage1);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImag((-125), 128, (-1792.276F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.getReal((-1), (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = 4036.0F;
      int int0 = 0;
      int int1 = 598;
      // Undeclared exception!
      try { 
        complexImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage0.multiply(complexImage1);
      ROI rOI0 = new ROI();
      SynthSplitPaneUI synthSplitPaneUI0 = new SynthSplitPaneUI();
      // Undeclared exception!
      try { 
        synthSplitPaneUI0.createDefaultDivider();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.getJavaImage();
      int int1 = 2;
      // Undeclared exception!
      try { 
        complexImage0.setReal(2044, 2, (float) 2044);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage0.getMagnitudeImage();
      complexImage1.subtract((float) 16, 0.0F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.magnitudeImage();
      complexImage0.phaseImage();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      complexImage0.clear();
      complexImage0.subtract((float) 16, (float) 16);
      ROI rOI0 = new ROI();
      complexImage0.min(rOI0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add((-357), (-357), (float) (-357), (float) (-357), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      int int0 = 3373;
      ComplexImage complexImage0 = new ComplexImage(3373, 3373);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        complexImage0.divide(2588.752F, (float) 3373, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      int int0 = 170;
      ComplexImage complexImage0 = new ComplexImage(16, 170);
      int int1 = 70;
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      complex1.setReal(70);
      Complex.sub(complex1, complex0);
      complex1.real();
      complex0.toString();
      Complex complex2 = new Complex(complex0);
      complex2.conj();
      // Undeclared exception!
      try { 
        complexImage0.set(170, 70, complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      RealGrayImage realGrayImage0 = complexImage0.real;
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      realGrayImage1.getJavaImage();
      ComplexImage complexImage2 = new ComplexImage(70, 16);
      complexImage1.magnitudeImage();
      complexImage0.getJavaImage();
      complexImage2.setImaginary(realGrayImage0);
      // Undeclared exception!
      try { 
        complexImage2.subtract((float) 16, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1200, 1200);
      ROI rOI0 = new ROI();
      rOI0.uy();
      rOI0.uy();
      int int0 = new Integer(1200);
      rOI0.Y();
      rOI0.uy();
      ROI rOI1 = new ROI();
      rOI1.ux();
      rOI1.lx();
      rOI1.ly();
      complexImage0.toString(rOI0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      int int0 = 1319;
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.setReal(0, 743, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      int int0 = 1;
      int int1 = (-1);
      ROI rOI0 = new ROI(1, 1, 1, (-1));
      int int2 = 3561;
      int int3 = 1183;
      int int4 = 2282;
      int int5 = 0;
      rOI0.setROI((-1), (-1), 3561, 0);
      rOI0.setROI(3561, 3561, 1183, 2282);
      // Undeclared exception!
      try { 
        complexImage1.divide(1.0F, (-2250.089F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.real();
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage(1582, (-2050));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.divide(complexImage1);
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1296, 1296, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImag(1319, 16, 3007.89F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      float float0 = 0.0F;
      float float1 = 3267.2927F;
      complexImage0.divide(3267.2927F, (-171.07834F));
      RealGrayImage realGrayImage0 = null;
      try {
        realGrayImage0 = new RealGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1283);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.divide(2661.3F, 2661.3F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 1;
      // Undeclared exception!
      try { 
        complexImage0.get(1, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      // Undeclared exception!
      try { 
        complexImage0.multiply(20, 1319, (float) 1319, (float) 1319, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1319
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      complexImage0.divide(complexImage1);
      complexImage0.getMagnitudeImage();
      int int1 = 0;
      complexImage0.phaseImage();
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.subtract(0, 0, (float) 0, 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI((-1), 3396, (-1398), 1310);
      // Undeclared exception!
      try { 
        complexImage0.multiply((-1.0F), (-1.0F), rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage();
      Complex complex0 = new Complex();
      Complex complex1 = new Complex(complex0);
      Complex complex2 = new Complex(complex1);
      complex2.real();
      ComplexImage complexImage1 = new ComplexImage();
      ComplexImage complexImage2 = complexImage1.multiply(0.0F, 255.0F);
      ROI rOI0 = new ROI((-638), 255, 1172, 1319);
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 2313);
      int int0 = 1;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1, 2313, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2313
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3808, 0);
      complexImage0.divide(complexImage0);
      complexImage0.multiply(2296.866F, (float) 16);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 255.0F);
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        complexImage2.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      int int1 = (-84);
      ROI rOI0 = new ROI();
      rOI0.ux();
      rOI0.lx();
      // Undeclared exception!
      try { 
        complexImage1.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.min();
      complexImage1.divide(complexImage0);
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      complexImage1.copy();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      ComplexImage complexImage2 = complexImage1.diff(complexImage0);
      complexImage2.subtract(2037.1F, 2037.1F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      ComplexImage complexImage1 = complexImage0.clear();
      ROI rOI0 = new ROI();
      Integer integer0 = new Integer(16);
      rOI0.lx();
      complexImage0.max(rOI0);
      complexImage1.copy();
      ComplexImage complexImage2 = complexImage1.add(0.0F, (float) 16);
      complexImage2.subtract(2364.97F, (float) 16, rOI0);
      // Undeclared exception!
      try { 
        complexImage0.setReal((-1), 1, 2724.7754F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, (-3056.0532F));
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage1.X());
      assertEquals(1, realGrayImage1.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      
      complexImage1.setImaginary(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 195);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      ROI rOI0 = new ROI();
      rOI0.setROI((-4041), (-1249), (-548), (-2681));
      // Undeclared exception!
      try { 
        complexImage1.setImaginary(0, 16, (float) 195, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 16;
      int int1 = 195;
      ComplexImage complexImage0 = new ComplexImage(16, 195);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(195, complexImage0.Y());
      
      ROI rOI0 = new ROI((-4041), 0, 598, 128);
      assertNotNull(rOI0);
      assertEquals(128, rOI0.ly());
      assertEquals(129, rOI0.Y());
      assertEquals((-4041), rOI0.ux());
      assertEquals(4640, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(598, rOI0.lx());
      
      int int2 = rOI0.uy();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(128, rOI0.ly());
      assertEquals(129, rOI0.Y());
      assertEquals((-4041), rOI0.ux());
      assertEquals(4640, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(598, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(16, complexImage0.X());
      assertEquals(195, complexImage0.Y());
      assertEquals(195, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int1 = 1560;
      int int2 = 16;
      // Undeclared exception!
      try { 
        complexImage0.setImag(1560, 16, (-231.19F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      ROI rOI0 = new ROI(16, 16, 1271, 16);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.ux());
      assertEquals(1271, rOI0.lx());
      assertEquals(16, rOI0.uy());
      assertEquals(1256, rOI0.X());
      assertEquals(16, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.subtract((float) 16, 2037.1F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      rOI0.setROI(255, (-4094), (-4094), 2669);
      assertEquals(6764, rOI0.Y());
      assertEquals(4350, rOI0.X());
      assertEquals((-4094), rOI0.ux());
      assertEquals(2669, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals((-4094), rOI0.uy());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(1319, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(1319, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage1.divide(0, 0, 121.79849F, (float) 1319);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.Y());
      assertEquals(1319, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((-985.4F), 1.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 0.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.subtract(0.0F, 0.0F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((-1), (-1), 4394.116F, 1326.4613F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 1319;
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      
      Complex complex2 = complex1.div(0.0);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex0));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.magnitude(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex1.imaginary(), 0.01);
      assertEquals(Float.NaN, complex1.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex2.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex2.imag(), 0.01);
      assertEquals(Float.NaN, complex2.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex2.arg(), 0.01);
      assertEquals(0L, complex2.longValue());
      assertEquals(0, complex2.intValue());
      assertEquals(Double.NaN, complex2.real(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals((short)0, complex2.shortValue());
      assertEquals(Double.NaN, complex2.imaginary(), 0.01);
      assertEquals(Double.NaN, complex2.magnitude(), 0.01);
      
      Complex complex3 = new Complex(complex1);
      assertNotNull(complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.magnitude(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex1.imaginary(), 0.01);
      assertEquals(Float.NaN, complex1.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex3.magnitude(), 0.01);
      assertEquals(Double.NaN, complex3.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex3.imaginary(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(Float.NaN, complex3.floatValue(), 0.01F);
      assertEquals((short)0, complex3.shortValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertEquals(Double.NaN, complex3.real(), 0.01);
      
      double double0 = complex3.real();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex0.equals((Object)complex3));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex1.equals((Object)complex3));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex1, complex0);
      assertSame(complex1, complex2);
      assertNotSame(complex1, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(Double.NaN, complex1.imag(), 0.01);
      assertEquals(Double.NaN, complex1.real(), 0.01);
      assertEquals(Double.NaN, complex1.magnitude(), 0.01);
      assertEquals(Double.NaN, complex1.arg(), 0.01);
      assertEquals(Double.NaN, complex1.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex1.imaginary(), 0.01);
      assertEquals(Float.NaN, complex1.floatValue(), 0.01F);
      assertEquals(Double.NaN, complex3.magnitude(), 0.01);
      assertEquals(Double.NaN, complex3.doubleValue(), 0.01);
      assertEquals(Double.NaN, complex3.imaginary(), 0.01);
      assertEquals(0, complex3.intValue());
      assertEquals(Float.NaN, complex3.floatValue(), 0.01F);
      assertEquals((short)0, complex3.shortValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(Double.NaN, complex3.arg(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(Double.NaN, complex3.imag(), 0.01);
      assertEquals(Double.NaN, complex3.real(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.multiply(0.0F, 255.0F);
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      int int1 = (-638);
      int int2 = 1172;
      ROI rOI0 = new ROI((-638), 255, 1172, 1319);
      assertNotNull(rOI0);
      assertEquals((-638), rOI0.ux());
      assertEquals(1319, rOI0.ly());
      assertEquals(1172, rOI0.lx());
      assertEquals(1065, rOI0.Y());
      assertEquals(255, rOI0.uy());
      assertEquals(1811, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage2, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      int int0 = 1319;
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.Y());
      assertEquals(1319, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(1, 1, (-3056.0532F));
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1, realGrayImage1.X());
      
      complexImage0.setImaginary(realGrayImage0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, 2, (float) 2, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      
      // Undeclared exception!
      complexImage0.addbuffer(1319, 1319, 1319, 1319, (float) 1319, (float) 1319);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals((-3674), int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(0, rOI0.lx());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(0, rOI0.lx());
      
      int int2 = rOI0.Y();
      assertEquals(4273, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI((-3246), 2896, 1200, 396);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(4447, rOI1.X());
      assertEquals(2896, rOI1.ly());
      assertEquals(1200, rOI1.lx());
      assertEquals((-3246), rOI1.ux());
      assertEquals(2501, rOI1.Y());
      assertEquals(396, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ROI rOI0 = new ROI((-4041), 0, 16, (-4041));
      assertNotNull(rOI0);
      assertEquals(4042, rOI0.Y());
      assertEquals(4058, rOI0.X());
      assertEquals((-4041), rOI0.uy());
      assertEquals((-4041), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      int int0 = rOI0.uy();
      assertEquals((-4041), int0);
      assertEquals(4042, rOI0.Y());
      assertEquals(4058, rOI0.X());
      assertEquals((-4041), rOI0.uy());
      assertEquals((-4041), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      int int1 = rOI0.X();
      assertEquals(4058, int1);
      assertFalse(int1 == int0);
      assertEquals(4042, rOI0.Y());
      assertEquals(4058, rOI0.X());
      assertEquals((-4041), rOI0.uy());
      assertEquals((-4041), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      Integer integer0 = new Integer(16);
      assertEquals(16, (int)integer0);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      
      int int2 = rOI0.uy();
      assertEquals((-4041), int2);
      assertTrue(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4042, rOI0.Y());
      assertEquals(4058, rOI0.X());
      assertEquals((-4041), rOI0.uy());
      assertEquals((-4041), rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(16, rOI0.lx());
      
      ROI rOI1 = new ROI(1575, 16, 210, 915);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(210, rOI1.ux());
      assertEquals(16, rOI1.uy());
      assertEquals(1575, rOI1.lx());
      assertEquals(915, rOI1.ly());
      assertEquals(900, rOI1.Y());
      assertEquals(1366, rOI1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getImaginary((-4041), 16, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4025
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 2183;
      ComplexImage complexImage0 = new ComplexImage(2183, 2183);
      assertNotNull(complexImage0);
      assertEquals(2183, complexImage0.X());
      assertEquals(2183, complexImage0.Y());
      
      // Undeclared exception!
      complexImage0.copy();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(160, 160, (float) 1277, (float) 1277, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      int int0 = 1319;
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      
      int int1 = 8;
      float float0 = (-2467.289F);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      int int2 = (-1);
      // Undeclared exception!
      try { 
        complexImage0.multiply((-1), 8, (float) 8, (float) 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      
      ComplexImage complexImage1 = complexImage0.clear(complex0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      
      Complex complex1 = Complex.sub(complex0, complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      
      Complex complex2 = complexImage1.min();
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(Float.POSITIVE_INFINITY, complex2.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex2.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.imaginary(), 0.01);
      assertEquals((byte) (-1), complex2.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex2.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.doubleValue(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex2.intValue());
      assertEquals((short) (-1), complex2.shortValue());
      assertEquals(9223372036854775807L, complex2.longValue());
      assertEquals(0.7853981633974483, complex2.arg(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage1.setImag(16, 16, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(2317, 2317, 2317, (-1));
      assertEquals((-1), rOI0.uy());
      assertEquals(2319, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(2317, rOI0.lx());
      assertEquals(2317, rOI0.ly());
      assertEquals(2317, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage1.getReal((-1), (-1), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI(1084, 1084, 21, 2956);
      assertEquals(1084, rOI0.uy());
      assertEquals(1064, rOI0.X());
      assertEquals(2956, rOI0.ly());
      assertEquals(1873, rOI0.Y());
      assertEquals(21, rOI0.ux());
      assertEquals(1084, rOI0.lx());
      
      complexImage0.add(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.getImag(16, 2956);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(255.0F, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(1.0F, 1.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.diff(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.get((-1), (-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      double double0 = complex0.setReal(int0);
      assertEquals(0.0, double0, 0.01);
      assertEquals(16.0F, complex0.floatValue(), 0.01F);
      assertEquals(16.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)16, complex0.shortValue());
      assertEquals(16.0, complex0.magnitude(), 0.01);
      assertEquals(16.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)16, complex0.byteValue());
      assertEquals(16L, complex0.longValue());
      assertEquals(16, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      Complex complex1 = Complex.sub(complex0, complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(16.0F, complex0.floatValue(), 0.01F);
      assertEquals(16.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)16, complex0.shortValue());
      assertEquals(16.0, complex0.magnitude(), 0.01);
      assertEquals(16.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)16, complex0.byteValue());
      assertEquals(16L, complex0.longValue());
      assertEquals(16, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      
      String string0 = complex0.toString();
      assertEquals("(16.0, 0.0)", string0);
      assertNotNull(string0);
      assertFalse(complex0.equals((Object)complex1));
      assertNotSame(complex0, complex1);
      assertEquals(16.0F, complex0.floatValue(), 0.01F);
      assertEquals(16.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)16, complex0.shortValue());
      assertEquals(16.0, complex0.magnitude(), 0.01);
      assertEquals(16.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)16, complex0.byteValue());
      assertEquals(16L, complex0.longValue());
      assertEquals(16, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      
      Complex complex2 = new Complex(complex0);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertEquals(16.0F, complex0.floatValue(), 0.01F);
      assertEquals(16.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)16, complex0.shortValue());
      assertEquals(16.0, complex0.magnitude(), 0.01);
      assertEquals(16.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)16, complex0.byteValue());
      assertEquals(16L, complex0.longValue());
      assertEquals(16, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(16.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(16.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)16, complex2.byteValue());
      assertEquals(16.0F, complex2.floatValue(), 0.01F);
      assertEquals(16, complex2.intValue());
      assertEquals(16.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(16L, complex2.longValue());
      assertEquals((short)16, complex2.shortValue());
      
      Complex complex3 = complex2.conj();
      assertNotNull(complex3);
      assertFalse(complex0.equals((Object)complex2));
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex1));
      assertFalse(complex3.equals((Object)complex2));
      assertNotSame(complex0, complex2);
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex3);
      assertNotSame(complex2, complex0);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex3);
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex1);
      assertNotSame(complex3, complex2);
      assertEquals(16.0F, complex0.floatValue(), 0.01F);
      assertEquals(16.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)16, complex0.shortValue());
      assertEquals(16.0, complex0.magnitude(), 0.01);
      assertEquals(16.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)16, complex0.byteValue());
      assertEquals(16L, complex0.longValue());
      assertEquals(16, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(16.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(16.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals((byte)16, complex2.byteValue());
      assertEquals(16.0F, complex2.floatValue(), 0.01F);
      assertEquals(16, complex2.intValue());
      assertEquals(16.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals(16L, complex2.longValue());
      assertEquals((short)16, complex2.shortValue());
      assertEquals(-0.0, complex3.arg(), 0.01);
      assertEquals(16.0F, complex3.floatValue(), 0.01F);
      assertEquals(16, complex3.intValue());
      assertEquals(16.0, complex3.magnitude(), 0.01);
      assertEquals(16.0, complex3.doubleValue(), 0.01);
      assertEquals(-0.0, complex3.imaginary(), 0.01);
      assertEquals((byte)16, complex3.byteValue());
      assertEquals(16L, complex3.longValue());
      assertEquals((short)16, complex3.shortValue());
      assertEquals(-0.0, complex3.imag(), 0.01);
      assertEquals(16.0, complex3.real(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      int int1 = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.ux();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int3 = rOI0.lx();
      assertEquals(0, int3);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.getImaginary(int0, int1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      
      int int0 = 8;
      ComplexImage complexImage1 = complexImage0.copy();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1319, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      assertEquals(1319, complexImage1.Y());
      assertEquals(1319, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      float float0 = 0.0F;
      complexImage1.setImag(int0, int0, float0, rOI0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1808);
      assertNotNull(complexImage0);
      assertEquals(1808, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      float[][] floatArray0 = new float[0][4];
      RealGrayImage realGrayImage0 = new RealGrayImage(floatArray0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage0);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      RealGrayImage realGrayImage1 = new RealGrayImage(realGrayImage0);
      assertEquals(0, floatArray0.length);
      assertNotNull(realGrayImage1);
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      complexImage0.setImag(realGrayImage1);
      assertEquals(0, floatArray0.length);
      assertFalse(realGrayImage0.equals((Object)realGrayImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(realGrayImage0, realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1808, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1751), 1, 485, 485, (float) 1, 2886.6F);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-357), 255, (-209), (-209));
      assertNotNull(rOI0);
      assertEquals((-209), rOI0.lx());
      assertEquals(465, rOI0.Y());
      assertEquals((-209), rOI0.uy());
      assertEquals((-357), rOI0.ux());
      assertEquals(149, rOI0.X());
      assertEquals(255, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.add((-357), (-209), (float) (-357), (float) (-209), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-1132);
      int int1 = 443;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-1), 443, 443, (-3674), (float) 0, (float) 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, 4, (-209), 0);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.ly());
      assertEquals((-209), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(210, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(5, rOI0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI1, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real;
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 0);
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      RealGrayImage realGrayImage2 = realGrayImage1.addbuffer(0, 1299, 770.0F);
      assertNotNull(realGrayImage2);
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(1299, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      ImageProducer imageProducer0 = realGrayImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(realGrayImage0.equals((Object)realGrayImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage2));
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertNotSame(realGrayImage1, realGrayImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      ComplexImage complexImage2 = new ComplexImage(70, 16);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(70, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.addbuffer(1889, 0, (float) 1889, (float) 70);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(70, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(0, complexImage3.Y());
      assertEquals(1889, complexImage3.X());
      
      ComplexImage complexImage4 = complexImage0.add((float) 70, (float) 16);
      assertNotNull(complexImage4);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage4.X());
      assertEquals(16, complexImage4.Y());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.lx();
      assertEquals(0, int0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      
      RealGrayImage realGrayImage0 = complexImage0.real();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.setImag(1297, 1297, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      
      double double0 = complex1.real();
      assertEquals(0.0, double0, 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      
      double double1 = complex1.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      
      Complex complex2 = new Complex(complex1);
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0L, complex2.longValue());
      assertEquals(0.0, complex2.magnitude(), 0.01);
      assertEquals(0.0, complex2.doubleValue(), 0.01);
      assertEquals(0.0F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.imag(), 0.01);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(0.0, complex2.imaginary(), 0.01);
      assertEquals(0, complex2.intValue());
      assertEquals(0.0, complex2.arg(), 0.01);
      assertEquals((byte)0, complex2.byteValue());
      assertEquals((short)0, complex2.shortValue());
      
      complexImage1.add(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      complexImage1.multiply(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(5539, 5539, 270.61087F, 1074.0F, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage0.setImaginary(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage1 = new ComplexImage(832, 0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(832, complexImage1.X());
      
      RealGrayImage realGrayImage1 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(832, complexImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(832, realGrayImage1.X());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      RealGrayImage realGrayImage2 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage1.Y());
      assertEquals(832, complexImage1.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(832, realGrayImage2.X());
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.set(598, 1, (float) 1, (float) 8, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(0.0F, (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      int int1 = 70;
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.real;
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer((-3970), 0, 0, 0, (float) 0, (float) 0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(1319, complexImage2.Y());
      
      Complex complex0 = complexImage1.max();
      assertNotNull(complex0);
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(1055, 1055);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1055, complexImage1.Y());
      assertEquals(1055, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      int int0 = 1;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1055;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-985.4F);
      floatArray0[4] = (-985.4F);
      floatArray0[5] = 1.0F;
      floatArray0[8] = 0.0F;
      floatArray0[7] = (float) 1055;
      floatArray0[8] = (-994.8668F);
      RealGrayImage realGrayImage0 = complexImage1.real;
      assertNotNull(realGrayImage0);
      assertEquals(1055, realGrayImage0.Y());
      assertEquals(1055, realGrayImage0.X());
      
      complexImage0.setReal(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(1055, complexImage1.Y());
      assertEquals(1055, complexImage1.X());
      assertEquals(1055, realGrayImage0.Y());
      assertEquals(1055, realGrayImage0.X());
      
      int int1 = 5;
      // Undeclared exception!
      try { 
        complexImage2.addbuffer(3276, 1055, 5, 1055, 1.0F, (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(3373, 3373);
      assertNotNull(complexImage0);
      assertEquals(3373, complexImage0.X());
      assertEquals(3373, complexImage0.Y());
      
      // Undeclared exception!
      complexImage0.clear();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1117, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(1117, complexImage0.X());
      
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      assertNotNull(rOI0);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(598, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int0 = rOI0.uy();
      assertEquals((-3674), int0);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(598, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(598, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int2 = rOI0.Y();
      assertEquals(4273, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(598, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      int int3 = rOI0.uy();
      assertEquals((-3674), int3);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals((-3674), rOI0.uy());
      assertEquals(598, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      rOI0.setROI((-3674), (-2375), 0, 16);
      assertEquals((-2375), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.ux());
      assertEquals(16, rOI0.ly());
      assertEquals(2392, rOI0.Y());
      assertEquals(3675, rOI0.X());
      
      int int4 = rOI0.ly();
      assertEquals(16, int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-2375), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.ux());
      assertEquals(16, rOI0.ly());
      assertEquals(2392, rOI0.Y());
      assertEquals(3675, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2375
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(592.7837F, 592.7837F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(16, realGrayImage0.Y());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        complexImage1.setImag(1, 16, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract((-0.08498394F), (-0.08498394F));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(0, 1319);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(1319, complexImage1.Y());
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1319, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      assertEquals(1319, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = realGrayImage0.add((float) 1319);
      assertNotNull(realGrayImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      assertEquals(1319, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1319, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      
      RealGrayImage realGrayImage2 = realGrayImage1.add(884.0095F);
      assertNotNull(realGrayImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertSame(realGrayImage0, realGrayImage1);
      assertSame(realGrayImage0, realGrayImage2);
      assertSame(realGrayImage1, realGrayImage0);
      assertSame(realGrayImage1, realGrayImage2);
      assertSame(realGrayImage2, realGrayImage0);
      assertSame(realGrayImage2, realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      assertEquals(1319, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(1319, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(1319, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      
      int int1 = 1315;
      ComplexImage complexImage2 = new ComplexImage(1315, 4124);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      assertNotNull(rOI0);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals((-3674), int0);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      
      int int2 = rOI0.Y();
      assertEquals(4273, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      
      int int3 = rOI0.uy();
      assertEquals((-3674), int3);
      assertFalse(int3 == int2);
      assertTrue(int3 == int0);
      assertFalse(int3 == int1);
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      
      ROI rOI1 = new ROI(0, 1399, 1399, 598);
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1400, rOI1.X());
      assertEquals(1399, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(1399, rOI1.ly());
      assertEquals(598, rOI1.uy());
      assertEquals(802, rOI1.Y());
      
      ROI rOI2 = new ROI(0, (-3674), 0, 598);
      assertNotNull(rOI2);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertEquals(4273, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals((-3674), rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(598, rOI2.ly());
      
      int int4 = rOI2.uy();
      assertEquals((-3674), int4);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int3);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(4273, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals((-3674), rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(598, rOI2.ly());
      
      int int5 = rOI2.X();
      assertEquals(1, int5);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(4273, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals((-3674), rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(598, rOI2.ly());
      
      int int6 = rOI2.Y();
      assertEquals(4273, int6);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int6 == int0);
      assertTrue(int6 == int2);
      assertFalse(int6 == int1);
      assertFalse(int6 == int4);
      assertFalse(int6 == int5);
      assertFalse(int6 == int3);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(4273, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals((-3674), rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(598, rOI2.ly());
      
      int int7 = rOI2.uy();
      assertEquals((-3674), int7);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertTrue(int7 == int4);
      assertFalse(int7 == int2);
      assertFalse(int7 == int6);
      assertTrue(int7 == int0);
      assertFalse(int7 == int1);
      assertFalse(int7 == int5);
      assertTrue(int7 == int3);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(4273, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals((-3674), rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(598, rOI2.ly());
      
      int int8 = rOI2.ly();
      assertEquals(598, int8);
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(int8 == int6);
      assertFalse(int8 == int2);
      assertFalse(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int5);
      assertFalse(int8 == int1);
      assertFalse(int8 == int0);
      assertFalse(int8 == int7);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertEquals(4273, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(1, rOI2.X());
      assertEquals((-3674), rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(598, rOI2.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 0, 317.1F, rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      
      double double0 = complex0.setReal(70);
      assertEquals(0.0, double0, 0.01);
      assertEquals(70.0, complex0.magnitude(), 0.01);
      assertEquals(70.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)70, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(70.0, complex0.real(), 0.01);
      assertEquals(70L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)70, complex0.byteValue());
      assertEquals(70.0F, complex0.floatValue(), 0.01F);
      assertEquals(70, complex0.intValue());
      
      Complex complex1 = Complex.sub(complex0, complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(70.0, complex0.magnitude(), 0.01);
      assertEquals(70.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)70, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(70.0, complex0.real(), 0.01);
      assertEquals(70L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)70, complex0.byteValue());
      assertEquals(70.0F, complex0.floatValue(), 0.01F);
      assertEquals(70, complex0.intValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      
      String string0 = complexImage0.toString();
      assertEquals("0:16\n0:16\n", string0);
      assertNotNull(string0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      String string1 = complex1.toString();
      assertEquals("(0.0, 0.0)", string1);
      assertNotNull(string1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(70.0, complex0.magnitude(), 0.01);
      assertEquals(70.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)70, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(70.0, complex0.real(), 0.01);
      assertEquals(70L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)70, complex0.byteValue());
      assertEquals(70.0F, complex0.floatValue(), 0.01F);
      assertEquals(70, complex0.intValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      
      Complex complex2 = complex0.conj();
      assertNotNull(complex2);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex0, complex2);
      assertNotSame(complex2, complex1);
      assertNotSame(complex2, complex0);
      assertEquals(70.0, complex0.magnitude(), 0.01);
      assertEquals(70.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)70, complex0.shortValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(70.0, complex0.real(), 0.01);
      assertEquals(70L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((byte)70, complex0.byteValue());
      assertEquals(70.0F, complex0.floatValue(), 0.01F);
      assertEquals(70, complex0.intValue());
      assertEquals(70, complex2.intValue());
      assertEquals(-0.0, complex2.imag(), 0.01);
      assertEquals(-0.0, complex2.imaginary(), 0.01);
      assertEquals(70.0, complex2.doubleValue(), 0.01);
      assertEquals(70.0, complex2.real(), 0.01);
      assertEquals(70.0, complex2.magnitude(), 0.01);
      assertEquals(70L, complex2.longValue());
      assertEquals((short)70, complex2.shortValue());
      assertEquals(-0.0, complex2.arg(), 0.01);
      assertEquals((byte)70, complex2.byteValue());
      assertEquals(70.0F, complex2.floatValue(), 0.01F);
      
      Complex complex3 = complexImage0.max();
      assertNotNull(complex3);
      assertFalse(complex3.equals((Object)complex0));
      assertFalse(complex3.equals((Object)complex2));
      assertFalse(complex3.equals((Object)complex1));
      assertNotSame(complex3, complex0);
      assertNotSame(complex3, complex2);
      assertNotSame(complex3, complex1);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, complex3.magnitude(), 0.01);
      assertEquals(0.0, complex3.doubleValue(), 0.01);
      assertEquals((short)0, complex3.shortValue());
      assertEquals(0.0, complex3.imag(), 0.01);
      assertEquals(0.0, complex3.arg(), 0.01);
      assertEquals(0.0F, complex3.floatValue(), 0.01F);
      assertEquals(0.0, complex3.real(), 0.01);
      assertEquals(0L, complex3.longValue());
      assertEquals(0, complex3.intValue());
      assertEquals((byte)0, complex3.byteValue());
      assertEquals(0.0, complex3.imaginary(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.multiply(255.0F, 255.0F);
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      complexImage0.add(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-2093), 23, (-445.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      int int0 = 1439;
      int int1 = (-1044);
      rOI0.setROI(1439, (-1044), 1439, (-1044));
      assertEquals((-1044), rOI0.uy());
      assertEquals(1439, rOI0.lx());
      assertEquals((-1044), rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1439, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 0, (float) 16);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage0);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.lx();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int2 = rOI1.ux();
      assertEquals(0, int2);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      int int3 = rOI1.lx();
      assertEquals(0, int3);
      assertFalse(rOI1.equals((Object)rOI0));
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(complexImage1, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = (-1515);
      // Undeclared exception!
      try { 
        complexImage0.add((-1515), 0, (-1963.0F), (-1710.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(34, 34);
      assertNotNull(complexImage0);
      assertEquals(34, complexImage0.Y());
      assertEquals(34, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(34, complexImage0.Y());
      assertEquals(34, complexImage0.X());
      assertEquals(34, complexImage1.Y());
      assertEquals(34, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(34, complexImage0.Y());
      assertEquals(34, complexImage0.X());
      assertEquals(34, complexImage2.X());
      assertEquals(34, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage3 = complexImage2.subtract(32767.0F, (float) 34, rOI0);
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(34, complexImage0.Y());
      assertEquals(34, complexImage0.X());
      assertEquals(34, complexImage2.X());
      assertEquals(34, complexImage2.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(34, complexImage3.Y());
      assertEquals(34, complexImage3.X());
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertEquals(34, complexImage0.Y());
      assertEquals(34, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-7), 34, 2724.7754F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.Y());
      assertEquals(1319, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.set(1319, 8, (float) 8, (-2467.289F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1319
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#/aoOi+WZbFu=#2");
      assertFalse(boolean0);
      
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, 3419.4841F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ImageProducer imageProducer0 = complexImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      int int0 = 1293;
      ROI rOI0 = new ROI(1293, (-1), 1288, 0);
      assertNotNull(rOI0);
      assertEquals(2, rOI0.Y());
      assertEquals(1288, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1293, rOI0.lx());
      assertEquals(6, rOI0.X());
      assertEquals((-1), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(16, 239, (float) (-1947), (float) (-1947), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 239
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = null;
      try {
        complexImage1 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.real;
      assertNotNull(realGrayImage0);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      ImageProducer imageProducer0 = realGrayImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(complexImage0, complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      
      RealGrayImage realGrayImage1 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0, realGrayImage1.X());
      assertEquals(16, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      ImageProducer imageProducer1 = complexImage0.getJavaImage();
      assertNotNull(imageProducer1);
      assertFalse(imageProducer1.equals((Object)imageProducer0));
      assertSame(complexImage0, complexImage1);
      assertNotSame(imageProducer1, imageProducer0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage2 = complexImage0.phaseImage();
      assertNotNull(realGrayImage2);
      assertSame(complexImage0, complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(16, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      
      int int0 = complexImage1.X();
      assertEquals(0, int0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.add(1004.0F, 1004.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      int int0 = rOI0.ly();
      assertEquals(0, int0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage2 = null;
      try {
        complexImage2 = new ComplexImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, 255.0F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(2935, 3378);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1288, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(1288, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, 1004.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.add(0.0F, (float) 16);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(311, 2);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(311, complexImage1.X());
      assertEquals(2, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int1 = rOI0.lx();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      int int2 = rOI0.lx();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      int int0 = 3436;
      ComplexImage complexImage0 = new ComplexImage(3436, 3436);
      assertNotNull(complexImage0);
      assertEquals(3436, complexImage0.X());
      assertEquals(3436, complexImage0.Y());
      
      ROI rOI0 = new ROI((-1), (-1), (-4041), (-1565));
      assertNotNull(rOI0);
      assertEquals(4041, rOI0.X());
      assertEquals((-1565), rOI0.uy());
      assertEquals((-4041), rOI0.ux());
      assertEquals((-1), rOI0.ly());
      assertEquals((-1), rOI0.lx());
      assertEquals(1565, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      double double0 = complex0.setReal(16);
      assertEquals(0.0, double0, 0.01);
      assertEquals(16.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)16, complex0.byteValue());
      assertEquals(16L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(16.0, complex0.magnitude(), 0.01);
      assertEquals(16, complex0.intValue());
      assertEquals(16.0, complex0.real(), 0.01);
      assertEquals(16.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)16, complex0.shortValue());
      
      Complex complex1 = Complex.sub(complex0, complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(16.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)16, complex0.byteValue());
      assertEquals(16L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(16.0, complex0.magnitude(), 0.01);
      assertEquals(16, complex0.intValue());
      assertEquals(16.0, complex0.real(), 0.01);
      assertEquals(16.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)16, complex0.shortValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.arg(), 0.01);
      
      ComplexImage complexImage1 = complexImage0.multiply(426.71304F, 426.71304F);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.diff(complexImage1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage1.subtract((-4502.3345F), 0.0F);
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(16, complexImage3.Y());
      assertEquals(0, complexImage3.X());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI(0, (-3674), 0, 598);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int0 = rOI0.uy();
      assertEquals((-3674), int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int1 = rOI0.X();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)12;
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals((short)0, complex0.shortValue());
      
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte) (-7);
      byteArray0[4] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)12, (byte) (-89), (byte)11, (byte) (-7), (byte) (-1)}, byteArray0);
      
      int int2 = rOI0.Y();
      assertEquals(4273, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int3 = rOI0.uy();
      assertEquals((-3674), int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      int int4 = rOI0.ly();
      assertEquals(598, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(598, rOI0.ly());
      assertEquals(4273, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals((-3674), rOI0.uy());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(4036.0F, 4036.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = (-241.1694F);
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, (-241.1694F));
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      float float1 = 2413.0F;
      ROI rOI0 = mock(ROI.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(rOI0).lx();
      doReturn(0).when(rOI0).ly();
      doReturn(0).when(rOI0).ux();
      doReturn(0).when(rOI0).uy();
      // Undeclared exception!
      try { 
        complexImage1.add(2413.0F, (-241.1694F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1319, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.X());
      assertEquals(1319, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(24, 24);
      assertNotNull(complexImage0);
      assertEquals(24, complexImage0.Y());
      assertEquals(24, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      String string0 = complex0.toString();
      assertEquals("(0.0, 0.0)", string0);
      assertNotNull(string0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 24, 24, 24, (-588.2F), (-88.7F));
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(24, complexImage0.Y());
      assertEquals(24, complexImage0.X());
      assertEquals(24, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      String string1 = complexImage1.toString();
      assertEquals("0:24\n0:24\n", string1);
      assertNotNull(string1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(24, complexImage0.Y());
      assertEquals(24, complexImage0.X());
      assertEquals(24, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      Complex complex1 = complex0.conj();
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(-0.0, complex1.imag(), 0.01);
      assertEquals(-0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(-0.0, complex1.imaginary(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(24, 24, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int0 = rOI0.ux();
      assertEquals(0, int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      int int1 = rOI0.lx();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      Complex complex0 = complexImage0.max(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      ComplexImage complexImage2 = complexImage1.copy();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage1.add(0.0F, (float) 16);
      assertNotNull(complexImage3);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage3.X());
      assertEquals(16, complexImage3.Y());
      
      ComplexImage complexImage4 = complexImage3.subtract(2364.97F, (float) 16, rOI0);
      assertNotNull(complexImage4);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage4);
      assertSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage3, complexImage4);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage3);
      assertSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(16, complexImage3.X());
      assertEquals(16, complexImage3.Y());
      assertEquals(16, complexImage4.Y());
      assertEquals(16, complexImage4.X());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      rOI0.setROI((-2093), 2, 290, (-3583));
      assertEquals(290, rOI0.lx());
      assertEquals(2, rOI0.ly());
      assertEquals(2384, rOI0.X());
      assertEquals((-2093), rOI0.ux());
      assertEquals(3586, rOI0.Y());
      assertEquals((-3583), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.setImag((-2093), 23, (-445.0F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      
      ROI rOI0 = new ROI(1, 16, 16, 1);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.lx());
      assertEquals(16, rOI0.Y());
      assertEquals(16, rOI0.X());
      assertEquals(1, rOI0.uy());
      assertEquals(1, rOI0.ux());
      assertEquals(16, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI((-3674), (-615), (-1924), 2413);
      assertNotNull(rOI0);
      assertEquals((-3674), rOI0.ux());
      assertEquals((-1924), rOI0.lx());
      assertEquals((-615), rOI0.uy());
      assertEquals(3029, rOI0.Y());
      assertEquals(1751, rOI0.X());
      assertEquals(2413, rOI0.ly());
      
      int int0 = rOI0.uy();
      assertEquals((-615), int0);
      assertEquals((-3674), rOI0.ux());
      assertEquals((-1924), rOI0.lx());
      assertEquals((-615), rOI0.uy());
      assertEquals(3029, rOI0.Y());
      assertEquals(1751, rOI0.X());
      assertEquals(2413, rOI0.ly());
      
      int int1 = rOI0.uy();
      assertEquals((-615), int1);
      assertTrue(int1 == int0);
      assertEquals((-3674), rOI0.ux());
      assertEquals((-1924), rOI0.lx());
      assertEquals((-615), rOI0.uy());
      assertEquals(3029, rOI0.Y());
      assertEquals(1751, rOI0.X());
      assertEquals(2413, rOI0.ly());
      
      int int2 = rOI0.X();
      assertEquals(1751, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals((-3674), rOI0.ux());
      assertEquals((-1924), rOI0.lx());
      assertEquals((-615), rOI0.uy());
      assertEquals(3029, rOI0.Y());
      assertEquals(1751, rOI0.X());
      assertEquals(2413, rOI0.ly());
      
      rOI0.setROI(1751, (-166), (-3674), 2);
      assertEquals((-3674), rOI0.ux());
      assertEquals(1751, rOI0.lx());
      assertEquals((-166), rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(169, rOI0.Y());
      assertEquals(5426, rOI0.X());
      
      int int3 = rOI0.Y();
      assertEquals(169, int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals((-3674), rOI0.ux());
      assertEquals(1751, rOI0.lx());
      assertEquals((-166), rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(169, rOI0.Y());
      assertEquals(5426, rOI0.X());
      
      int int4 = rOI0.uy();
      assertEquals((-166), int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals((-3674), rOI0.ux());
      assertEquals(1751, rOI0.lx());
      assertEquals((-166), rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(169, rOI0.Y());
      assertEquals(5426, rOI0.X());
      
      int int5 = rOI0.ly();
      assertEquals(2, int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int1);
      assertEquals((-3674), rOI0.ux());
      assertEquals(1751, rOI0.lx());
      assertEquals((-166), rOI0.uy());
      assertEquals(2, rOI0.ly());
      assertEquals(169, rOI0.Y());
      assertEquals(5426, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      assertNotNull(complexImage0);
      assertEquals(1319, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      rOI0.setROI(128, 1744, 1907, 128);
      assertEquals(1617, rOI0.Y());
      assertEquals(1780, rOI0.X());
      assertEquals(1744, rOI0.ly());
      assertEquals(1907, rOI0.lx());
      assertEquals(128, rOI0.ux());
      assertEquals(128, rOI0.uy());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      rOI0.setROI(1316, 1316, 1316, (-1));
      assertEquals(1, rOI0.X());
      assertEquals(1318, rOI0.Y());
      assertEquals(1316, rOI0.ly());
      assertEquals(1316, rOI0.lx());
      assertEquals((-1), rOI0.uy());
      assertEquals(1316, rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      complexImage0.add(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1319, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.multiply(0.0F, 255.0F);
      assertNotNull(complexImage3);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      complexImage1.multiply(complexImage3);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        complexImage2.getImaginary(1316, 1305);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      Complex complex0 = new Complex();
      assertNotNull(complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      double double0 = complex0.real();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      Complex complex1 = new Complex(complex0);
      assertNotNull(complex1);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      
      double double1 = complex1.magnitude();
      assertEquals(0.0, double1, 0.01);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(double1, double0, 0.01);
      assertNotSame(complex0, complex1);
      assertNotSame(complex1, complex0);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals(0, complex1.intValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage0.set(567, 16, complex1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      int int0 = 1275;
      ComplexImage complexImage0 = new ComplexImage(1275, 1275);
      assertNotNull(complexImage0);
      assertEquals(1275, complexImage0.Y());
      assertEquals(1275, complexImage0.X());
      
      // Undeclared exception!
      complexImage0.toString();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(1055, 1055);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(1055, complexImage1.Y());
      assertEquals(1055, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertNotNull(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      int int0 = 1;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (float) 1055;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 1;
      floatArray0[3] = (-4473.98F);
      floatArray0[5] = (float) 1055;
      floatArray0[8] = 0.0F;
      floatArray0[7] = (float) 1055;
      floatArray0[8] = (-994.8668F);
      RealGrayImage realGrayImage0 = complexImage1.real;
      assertNotNull(realGrayImage0);
      assertEquals(1055, realGrayImage0.Y());
      assertEquals(1055, realGrayImage0.X());
      
      complexImage0.setReal(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(1055, complexImage1.Y());
      assertEquals(1055, complexImage1.X());
      assertEquals(1055, realGrayImage0.Y());
      assertEquals(1055, realGrayImage0.X());
      
      int int1 = 5;
      // Undeclared exception!
      try { 
        complexImage2.addbuffer(3276, 1055, 5, 1055, 1.0F, 14.927458F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.multiply(0.0F, 255.0F);
      assertNotNull(complexImage2);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage0 = new ComplexImage(311, 23);
      assertNotNull(complexImage0);
      assertEquals(23, complexImage0.Y());
      assertEquals(311, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.add(1004.0F, 1260.4F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      int int0 = 1319;
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      
      int int1 = 16;
      float float0 = 3007.89F;
      // Undeclared exception!
      try { 
        complexImage0.clear(complex0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      int int0 = (-1915);
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1915), (-956));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      int int0 = 16;
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.subtract(1174.0F, (float) 16);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      
      complexImage2.setReal((RealGrayImage) null);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage2.Y());
      assertEquals(16, complexImage2.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(0.0F, 1174.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      ComplexImage complexImage2 = complexImage1.divide(1.0F, (float) 70);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      
      ROI rOI0 = new ROI(16, 3223, 1314, 560);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.ux());
      assertEquals(2664, rOI0.Y());
      assertEquals(1314, rOI0.lx());
      assertEquals(1299, rOI0.X());
      assertEquals(3223, rOI0.ly());
      assertEquals(560, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 560
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jigl.image.AbstractImage");
      assertFalse(boolean0);
      
      ComplexImage complexImage1 = new ComplexImage(311, 2);
      assertNotNull(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertEquals(311, complexImage1.X());
      assertEquals(2, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.add((float) 311, 1260.4F);
      assertNotNull(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(16, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage2.getImaginary(927, 1719);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      complexImage0.divide(complexImage0);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.subtract((-4717), 12, 0.0F, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = (-209);
      int int1 = 255;
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.divide((-209), (-209), 0.0F, (float) 255, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      Complex complex0 = new Complex();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.phaseImage();
      ROI rOI0 = new ROI((-2318), (-2318), (-2318), 1);
      // Undeclared exception!
      try { 
        complexImage1.getImag((-2038), (-2318), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 16);
      ComplexImage complexImage1 = complexImage0.divide((float) 70, (float) 70);
      complexImage1.multiply(complexImage0);
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.add(0, 16, (float) 0, (float) 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 1319);
      ROI rOI0 = new ROI();
      rOI0.setROI(1084, 2956, 1311, 0);
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      assertEquals(0, complexImage0.X());
      assertEquals(1319, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      complexImage1.magnitudeImage();
      complexImage0.divide(complexImage1);
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.setImag((-1), 1, 4822.2F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }
}

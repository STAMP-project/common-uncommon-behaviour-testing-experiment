/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 20:00:13 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import com.ib.client.Order;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Order_ESTest extends Order_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Order order0 = new Order();
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_whatIf);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertNotNull(order0);
      
      order0.m_displaySize = (-3578);
      order0.m_permId = (int) 'n';
      Order order1 = new Order();
      assertFalse(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_continuousUpdate);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_parentId);
      assertNotNull(order1);
      
      boolean boolean0 = order1.equals(order0);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals((-3578), order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(110, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_ocaType);
      assertFalse(order0.m_whatIf);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_clientId);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_blockOrder);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_continuousUpdate);
      assertTrue(order1.m_transmit);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertFalse(order1.m_sweepToFill);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_parentId);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_overridePercentageConstraints);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertNotNull(order0);
      
      order0.m_permId = 1;
      order0.m_notHeld = true;
      Order order1 = new Order();
      assertFalse(order1.equals((Object)order0));
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertFalse(order1.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertNotNull(order1);
      
      boolean boolean0 = order0.equals(order1);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(0, order0.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_ocaType);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, order0.m_permId);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_allOrNone);
      assertTrue(order0.m_notHeld);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_hidden);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_outsideRth);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertFalse(order1.m_notHeld);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_permId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Order order0 = new Order();
      assertFalse(order0.m_eTradeOnly);
      assertFalse(order0.m_outsideRth);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertNotNull(order0);
      
      order0.m_permId = 1;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertNotNull(order1);
      
      order1.m_sweepToFill = true;
      boolean boolean0 = order1.equals(order0);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertFalse(order0.m_eTradeOnly);
      assertFalse(order0.m_outsideRth);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order0.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_totalQuantity);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_continuousUpdate);
      assertFalse(order1.m_blockOrder);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_whatIf);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertTrue(order1.m_sweepToFill);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertTrue(order1.m_transmit);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Order order0 = new Order();
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_clientId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_hidden);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals(0, order0.m_permId);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_eTradeOnly);
      assertNotNull(order0);
      
      order0.m_permId = (int) 'm';
      order0.m_hidden = true;
      Order order1 = new Order();
      assertFalse(order1.equals((Object)order0));
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_clientId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_eTradeOnly);
      assertNotNull(order1);
      
      boolean boolean0 = order0.equals(order1);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertTrue(order0.m_hidden);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_clientId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(0, order0.m_parentId);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(109, order0.m_permId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_blockOrder);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_orderId);
      assertFalse(order0.m_eTradeOnly);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_notHeld);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_clientId);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_parentId);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_totalQuantity);
      assertTrue(order1.m_transmit);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_hidden);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_orderId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_eTradeOnly);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_hidden);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertNotNull(order0);
      
      order0.m_outsideRth = true;
      order0.m_permId = (int) 'y';
      Order order1 = new Order();
      assertFalse(order1.equals((Object)order0));
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_whatIf);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertNotNull(order1);
      
      boolean boolean0 = order0.equals(order1);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertTrue(order0.m_outsideRth);
      assertEquals(0, order0.m_ocaType);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_orderId);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_sweepToFill);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_hidden);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertFalse(order0.m_whatIf);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(121, order0.m_permId);
      assertEquals('n', Order.OPT_FARMM);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order1.m_notHeld);
      assertEquals(0, order1.m_displaySize);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order1.m_orderId);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_origin);
      assertEquals(0, order1.m_permId);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertTrue(order1.m_transmit);
      assertFalse(order1.m_outsideRth);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertFalse(order1.m_whatIf);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Order order0 = new Order();
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_hidden);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_permId);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertNotNull(order0);
      
      order0.m_permId = (int) 'm';
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_permId);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_hidden);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_notHeld);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertNotNull(order1);
      
      order0.m_parentId = 1;
      boolean boolean0 = order1.equals(order0);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_clientId);
      assertEquals(109, order0.m_permId);
      assertFalse(order0.m_notHeld);
      assertFalse(order0.m_whatIf);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_allOrNone);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertFalse(order0.m_outsideRth);
      assertFalse(order0.m_hidden);
      assertEquals(1, order0.m_parentId);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_origin);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertTrue(order1.m_transmit);
      assertEquals(0, order1.m_permId);
      assertFalse(order1.m_allOrNone);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(0, order1.m_clientId);
      assertFalse(order1.m_hidden);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(0, order1.m_ocaType);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertFalse(order1.m_notHeld);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertFalse(order1.m_blockOrder);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_outsideRth);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_clientId);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(0, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_eTradeOnly);
      assertNotNull(order0);
      
      order0.m_permId = 1;
      Order order1 = new Order();
      assertTrue(order1.equals((Object)order0));
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertFalse(order1.m_blockOrder);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
      assertNotNull(order1);
      
      order1.m_ocaType = 78;
      boolean boolean0 = order0.equals(order1);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertFalse(order0.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_whatIf);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(0, order0.m_displaySize);
      assertEquals(1, order0.m_permId);
      assertEquals(0, order0.m_clientId);
      assertEquals(1, Order.FIRM);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertEquals('f', Order.OPT_FIRM);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertEquals(0, Order.CUSTOMER);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals(0, order0.m_parentId);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertFalse(order0.m_outsideRth);
      assertTrue(order0.m_transmit);
      assertEquals(0, order0.m_totalQuantity);
      assertFalse(order0.m_hidden);
      assertFalse(order0.m_blockOrder);
      assertFalse(order0.m_allOrNone);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertEquals(0, order0.m_origin);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0, order0.m_orderId);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(0, order0.m_continuousUpdate);
      assertFalse(order0.m_eTradeOnly);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertFalse(order1.m_sweepToFill);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertFalse(order1.m_allOrNone);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order1.m_origin);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertFalse(order1.m_hidden);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(0, order1.m_shortSaleSlot);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals(0, order1.m_clientId);
      assertEquals(0, order1.m_auctionStrategy);
      assertFalse(order1.m_notHeld);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order1.m_parentId);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(78, order1.m_ocaType);
      assertFalse(order1.m_blockOrder);
      assertTrue(order1.m_transmit);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals(0, order1.m_orderId);
      assertEquals(0, order1.m_permId);
      assertEquals(0, order1.m_displaySize);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order1.m_eTradeOnly);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_ocaType);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_permId);
      assertEquals(0, order0.m_orderId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order0.m_auxPrice, 0.01);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_clientId);
      assertNotNull(order0);
      
      order0.m_auxPrice = (-4434.5131349683);
      order0.m_permId = 1;
      Order order1 = new Order();
      assertFalse(order1.equals((Object)order0));
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertTrue(order1.m_transmit);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
      assertNotNull(order1);
      
      boolean boolean0 = order1.equals(order0);
      assertNotSame(order0, order1);
      assertNotSame(order1, order0);
      assertFalse(order0.equals((Object)order1));
      assertFalse(order1.equals((Object)order0));
      assertFalse(boolean0);
      assertEquals(1.7976931348623157E308, order0.m_scalePriceIncrement, 0.01);
      assertEquals(1, order0.m_permId);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeLower, 0.01);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals('m', Order.OPT_ISEMM);
      assertFalse(order0.m_notHeld);
      assertEquals(1.7976931348623157E308, order0.m_volatility, 0.01);
      assertFalse(order0.m_firmQuoteOnly);
      assertEquals(0, order0.m_ocaType);
      assertEquals((-4434.5131349683), order0.m_auxPrice, 0.01);
      assertEquals(1, Order.FIRM);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(Integer.MAX_VALUE, order0.m_minQty);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(0, order0.m_auctionStrategy);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleInitLevelSize);
      assertEquals(0, order0.m_displaySize);
      assertEquals(0, order0.m_orderId);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order0.m_delta, 0.01);
      assertEquals(0.0, order0.m_discretionaryAmt, 0.01);
      assertFalse(order0.m_sweepToFill);
      assertEquals(0, order0.m_continuousUpdate);
      assertEquals(1.7976931348623157E308, order0.m_trailStopPrice, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_nbboPriceCap, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_basisPoints, 0.01);
      assertFalse(order0.m_blockOrder);
      assertEquals(0.0, order0.m_lmtPrice, 0.01);
      assertFalse(order0.m_eTradeOnly);
      assertTrue(order0.m_transmit);
      assertFalse(order0.m_outsideRth);
      assertEquals(0, order0.m_totalQuantity);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertFalse(order0.m_hidden);
      assertEquals(1.7976931348623157E308, order0.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(Integer.MAX_VALUE, order0.m_referencePriceType);
      assertEquals(0, order0.m_shortSaleSlot);
      assertEquals(0, order0.m_origin);
      assertFalse(order0.m_allOrNone);
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order0.m_basisPointsType);
      assertFalse(order0.m_overridePercentageConstraints);
      assertEquals(0, order0.m_parentId);
      assertEquals(Integer.MAX_VALUE, order0.m_volatilityType);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order0.m_startingPrice, 0.01);
      assertEquals(0, Order.CUSTOMER);
      assertEquals(Integer.MAX_VALUE, order0.m_scaleSubsLevelSize);
      assertFalse(order0.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertEquals(0, order0.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order0.m_percentOffset, 0.01);
      assertEquals(1.7976931348623157E308, order0.m_stockRangeUpper, 0.01);
      assertEquals(0, order0.m_clientId);
      assertEquals(0, order1.m_totalQuantity);
      assertFalse(order1.m_allOrNone);
      assertFalse(order1.m_outsideRth);
      assertFalse(order1.m_eTradeOnly);
      assertEquals(0, order1.m_triggerMethod);
      assertEquals(1.7976931348623157E308, order1.m_percentOffset, 0.01);
      assertEquals('b', Order.OPT_BROKER_DEALER);
      assertEquals(0.0, order1.m_auxPrice, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRefPrice, 0.01);
      assertEquals(2, Order.AUCTION_IMPROVEMENT);
      assertEquals(0, order1.m_origin);
      assertEquals(Integer.MAX_VALUE, order1.m_referencePriceType);
      assertFalse(order1.m_hidden);
      assertEquals(0, order1.m_shortSaleSlot);
      assertTrue(order1.m_transmit);
      assertEquals('n', Order.OPT_FARMM);
      assertEquals(1.7976931348623157E308, order1.m_startingPrice, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_basisPointsType);
      assertFalse(order1.m_overridePercentageConstraints);
      assertEquals(Integer.MAX_VALUE, order1.m_volatilityType);
      assertEquals(0, order1.m_parentId);
      assertEquals(0, order1.m_clientId);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeUpper, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleSubsLevelSize);
      assertEquals('m', Order.OPT_ISEMM);
      assertEquals(0, Order.CUSTOMER);
      assertFalse(order1.m_whatIf);
      assertEquals(1, Order.AUCTION_MATCH);
      assertFalse(order1.m_notHeld);
      assertFalse(order1.m_firmQuoteOnly);
      assertEquals(0, order1.m_displaySize);
      assertEquals('c', Order.OPT_CUSTOMER);
      assertEquals(1, Order.FIRM);
      assertEquals(1.7976931348623157E308, order1.m_scalePriceIncrement, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_stockRangeLower, 0.01);
      assertEquals(1.7976931348623157E308, order1.m_nbboPriceCap, 0.01);
      assertEquals(0, order1.m_ocaType);
      assertEquals(3, Order.AUCTION_TRANSPARENT);
      assertEquals(1.7976931348623157E308, order1.m_delta, 0.01);
      assertEquals('f', Order.OPT_FIRM);
      assertEquals(Integer.MAX_VALUE, order1.m_minQty);
      assertEquals(1.7976931348623157E308, order1.m_deltaNeutralAuxPrice, 0.01);
      assertEquals(0, order1.m_auctionStrategy);
      assertEquals(1.7976931348623157E308, order1.m_volatility, 0.01);
      assertEquals(0, order1.m_permId);
      assertEquals(0.0, order1.m_discretionaryAmt, 0.01);
      assertEquals(Integer.MAX_VALUE, order1.m_scaleInitLevelSize);
      assertEquals('y', Order.OPT_SPECIALIST);
      assertEquals(1.7976931348623157E308, order1.m_trailStopPrice, 0.01);
      assertEquals('?', Order.OPT_UNKNOWN);
      assertEquals(1.7976931348623157E308, order1.m_basisPoints, 0.01);
      assertEquals(0.0, order1.m_lmtPrice, 0.01);
      assertFalse(order1.m_blockOrder);
      assertFalse(order1.m_sweepToFill);
      assertEquals(0, order1.m_continuousUpdate);
      assertEquals(0, order1.m_orderId);
  }
}

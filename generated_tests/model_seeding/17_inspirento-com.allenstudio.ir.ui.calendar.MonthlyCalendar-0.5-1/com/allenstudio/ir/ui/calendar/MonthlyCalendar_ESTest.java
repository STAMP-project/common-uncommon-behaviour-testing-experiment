/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 16:13:27 GMT 2019
 */

package com.allenstudio.ir.ui.calendar;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.allenstudio.ir.ui.calendar.IMonthlyCalendarModel;
import com.allenstudio.ir.ui.calendar.MonthlyCalendar;
import com.allenstudio.ir.ui.calendar.MonthlyCalendarModel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.SystemColor;
import java.awt.event.MouseEvent;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Locale;
import java.util.TimeZone;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.JComponent;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MonthlyCalendar_ESTest extends MonthlyCalendar_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      MonthlyCalendarModel monthlyCalendarModel0 = new MonthlyCalendarModel();
      assertEquals(0, monthlyCalendarModel0.getSelectedDate());
      assertNotNull(monthlyCalendarModel0);
      
      monthlyCalendar0.setModel(monthlyCalendarModel0);
      assertEquals(0, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(0, monthlyCalendarModel0.getSelectedDate());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertEquals(0, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=0,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Border border0 = LineBorder.createBlackLineBorder();
      assertNotNull(border0);
      
      monthlyCalendar0.setBorder(border0);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setWeekStartOnSunday(false);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(1758, 1);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(1758, monthlyCalendar0.getYear());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMonth(12);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(12, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYear(1970);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(1970, monthlyCalendar0.getYear());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMarked(13, true);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      boolean boolean0 = monthlyCalendar0.getMouseListeningEnabled();
      assertFalse(boolean0);
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setDateForeground((Color) null);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Color color0 = monthlyCalendar0.getDateForeground();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNull(color0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      SystemColor systemColor0 = SystemColor.control;
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertNotNull(systemColor0);
      
      monthlyCalendar0.setDateForeground(systemColor0);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(192, systemColor0.getBlue());
      assertEquals(192, systemColor0.getRed());
      assertEquals(192, systemColor0.getGreen());
      assertEquals((-4144960), systemColor0.getRGB());
      assertEquals(255, systemColor0.getAlpha());
      assertEquals(1, systemColor0.getTransparency());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Color color0 = monthlyCalendar0.getDateForeground();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(192, color0.getGreen());
      assertEquals((-4144960), color0.getRGB());
      assertEquals(192, color0.getBlue());
      assertEquals(192, color0.getRed());
      assertEquals(255, color0.getAlpha());
      assertEquals(1, color0.getTransparency());
      assertSame(color0, systemColor0);
      assertNotNull(color0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Dimension dimension0 = new Dimension((-2107), 15);
      assertEquals(15.0, dimension0.getHeight(), 0.01);
      assertEquals((-2107.0), dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(15, dimension0.height);
      assertEquals((-2107), dimension0.width);
      
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setCellDimension(dimension0);
      assertEquals(15.0, dimension0.getHeight(), 0.01);
      assertEquals((-2107.0), dimension0.getWidth(), 0.01);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(15, dimension0.height);
      assertEquals((-2107), dimension0.width);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Dimension dimension1 = monthlyCalendar0.getCellDimension();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals((-2107.0), dimension1.getWidth(), 0.01);
      assertEquals(15.0, dimension1.getHeight(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotSame(dimension1, dimension0);
      assertNotNull(dimension1);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals((-2107), dimension1.width);
      assertEquals(15, dimension1.height);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Dimension dimension0 = monthlyCalendar0.getSize();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      monthlyCalendar0.setCellDimension(dimension0);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(0.0, dimension0.getHeight(), 0.01);
      assertEquals(0.0, dimension0.getWidth(), 0.01);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(0, dimension0.width);
      assertEquals(0, dimension0.height);
      
      Dimension dimension1 = monthlyCalendar0.getCellDimension();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(0.0, dimension1.getHeight(), 0.01);
      assertEquals(0.0, dimension1.getWidth(), 0.01);
      assertTrue(dimension1.equals((Object)dimension0));
      assertNotSame(dimension1, dimension0);
      assertNotNull(dimension1);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(0, dimension1.height);
      assertEquals(0, dimension1.width);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYearMonth((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertNotNull(timeZone0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Calendar calendar0 = MockCalendar.getInstance(timeZone0, locale0);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=64800000,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      assertNotNull(calendar0);
      
      calendar0.set(0, 1970);
      assertEquals("GMT+18:00", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+18:00\",offset=64800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1970,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=46,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=3,AM_PM=1,HOUR=2,HOUR_OF_DAY=14,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=64800000,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertTrue(calendar0.isLenient());
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYearMonth(calendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setHeaderComponent(monthlyCalendar0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // adding container's parent to itself
         //
         verifyException("java.awt.Container", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseReleased((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mousePressed((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseMoved((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseExited((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseEntered((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseDragged((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.mouseClicked((MouseEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.model = null;
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.getSelectedDay();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        MonthlyCalendar.paintSymbol((Graphics) null, monthlyCalendar0.MARKED_FONT, monthlyCalendar0.DEFAULT_HIGHLIGHT_BG, monthlyCalendar0.DEFAULT_HIGHLIGHT_FG, "", 27, 3, 4163, 4163);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 24);
      assertNotNull(mockGregorianCalendar0);
      
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth(1, 1);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(1, monthlyCalendar0.getYear());
      assertEquals(1, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=1,WEEK_OF_YEAR=6,WEEK_OF_MONTH=1,DAY_OF_MONTH=24,DAY_OF_YEAR=32,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(1, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 3, 3, 9);
      assertNotNull(mockGregorianCalendar0);
      
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=122,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(4, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(5, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYearMonth(4, 4);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(4, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(4, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(true);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(8, 1, 8);
      assertNotNull(mockGregorianCalendar0);
      
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=1,WEEK_OF_YEAR=5,WEEK_OF_MONTH=1,DAY_OF_MONTH=8,DAY_OF_YEAR=32,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(8, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(29, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(8, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=8,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=29,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertNotNull(calendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 4);
      assertNotNull(mockGregorianCalendar0);
      
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=4,DAY_OF_YEAR=122,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(5, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(4, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Calendar calendar0 = monthlyCalendar0.getSelectedDate();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(5, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(4, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=4,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=31,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertFalse(calendar0.equals((Object)mockGregorianCalendar0));
      assertNotSame(calendar0, mockGregorianCalendar0);
      assertNotNull(calendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        MonthlyCalendar.paintSymbol((Graphics) null, monthlyCalendar0.NORMAL_FONT, monthlyCalendar0.DEFAULT_DATE_BG, monthlyCalendar0.DEFAULT_HEADER_BG, (String) null, 27, 27, 20, 27);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setWeekStartOnSunday(false);
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      DebugGraphics debugGraphics0 = new DebugGraphics();
      assertNotNull(debugGraphics0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.paintComponent(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.paintComponent((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setHeaderComponent((JComponent) null);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Box box0 = Box.createHorizontalBox();
      assertFalse(box0.getIgnoreRepaint());
      assertFalse(box0.isFocusCycleRoot());
      assertFalse(box0.isFocusTraversalPolicyProvider());
      assertFalse(box0.isFocusTraversalPolicySet());
      assertTrue(box0.getFocusTraversalKeysEnabled());
      assertNotNull(box0);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setHeaderComponent(box0);
        fail("Expecting exception: IncompatibleClassChangeError");
      
      } catch(IncompatibleClassChangeError e) {
         //
         // Expected static method org.evosuite.runtime.mock.javax.swing.MockJComponent.getPreferredSize()Ljava/awt/Dimension;
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setCellDimension((Dimension) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(4, 4, 3, 3, 9);
      assertNotNull(mockGregorianCalendar0);
      
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=122,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(5, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(4, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYearMonth((Calendar) mockGregorianCalendar0);
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-62030523060000,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=4,MONTH=4,WEEK_OF_YEAR=18,WEEK_OF_MONTH=1,DAY_OF_MONTH=3,DAY_OF_YEAR=124,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=3,HOUR_OF_DAY=3,MINUTE=9,SECOND=0,MILLISECOND=0,ZONE_OFFSET=0,DST_OFFSET=0]", mockGregorianCalendar0.toString());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(5, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(4, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMonth(2);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth(27);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMonth((-1182));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid month specified!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      // Undeclared exception!
      try { 
        monthlyCalendar0.setYear(20);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Year must be later than 1970!
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      monthlyCalendar0.setYear(2154);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2154, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(true);
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      monthlyCalendar0.setMouseListeningEnabled(false);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      Color color0 = monthlyCalendar0.getHeaderBackground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(255, color0.getAlpha());
      assertEquals(223, color0.getBlue());
      assertEquals((-8743201), color0.getRGB());
      assertEquals(122, color0.getRed());
      assertEquals(150, color0.getGreen());
      assertEquals(1, color0.getTransparency());
      assertNotNull(color0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      int int0 = monthlyCalendar0.getSelectedDay();
      assertEquals(31, int0);
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      Dimension dimension0 = monthlyCalendar0.getMaximumSize();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(32767.0, dimension0.getHeight(), 0.01);
      assertEquals(32767.0, dimension0.getWidth(), 0.01);
      assertNotNull(dimension0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(32767, dimension0.height);
      assertEquals(32767, dimension0.width);
      
      monthlyCalendar0.setPreferredSize(dimension0);
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertEquals(32767.0, dimension0.getHeight(), 0.01);
      assertEquals(32767.0, dimension0.getWidth(), 0.01);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(32767, dimension0.height);
      assertEquals(32767, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      
      int int0 = monthlyCalendar0.getMonth();
      assertEquals(2, int0);
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      IMonthlyCalendarModel iMonthlyCalendarModel0 = monthlyCalendar0.getModel();
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertEquals(31, iMonthlyCalendarModel0.getSelectedDate());
      assertNotNull(iMonthlyCalendarModel0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertNotNull(monthlyCalendar0);
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
      
      boolean boolean0 = monthlyCalendar0.getWeekStartOnSunday();
      assertTrue(boolean0);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicySet());
      assertFalse(monthlyCalendar0.getIgnoreRepaint());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertTrue(monthlyCalendar0.getFocusTraversalKeysEnabled());
      assertEquals(31, monthlyCalendar0.getSelectedDay());
      assertFalse(monthlyCalendar0.isFocusCycleRoot());
      assertFalse(monthlyCalendar0.isFocusTraversalPolicyProvider());
      assertEquals(27, MonthlyCalendar.DEFAULT_CELL_WIDTH);
      assertEquals(20, MonthlyCalendar.DEFAULT_CELL_HEIGHT);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      int int0 = monthlyCalendar0.getYear();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHighlightForeground(monthlyCalendar0.DEFAULT_HEADER_FG);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHighlightBackground(monthlyCalendar0.DEFAULT_HIGHLIGHT_FG);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      SystemColor systemColor0 = SystemColor.windowText;
      monthlyCalendar0.setHeaderForeground(systemColor0);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Dimension dimension0 = monthlyCalendar0.getCellDimension();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(27, dimension0.width);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(20, dimension0.height);
      assertTrue(monthlyCalendar0.getWeekStartOnSunday());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.resetHighlight();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getDateForeground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      // Undeclared exception!
      try { 
        monthlyCalendar0.setMarked(1263, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1262
         //
         verifyException("com.allenstudio.ir.ui.calendar.MonthlyCalendarModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setHeaderFont(monthlyCalendar0.NORMAL_FONT);
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.dateSelected();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getDateBackground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(255, color0.getGreen());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getHeaderComponent();
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      SystemColor systemColor0 = SystemColor.controlShadow;
      monthlyCalendar0.setHeaderBackground(systemColor0);
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.setDateBackground((Color) null);
      assertEquals(2014, monthlyCalendar0.getYear());
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Font font0 = monthlyCalendar0.getHeaderFont();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertFalse(font0.isBold());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHeaderForeground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
      assertTrue(monthlyCalendar0.getMouseListeningEnabled());
      assertEquals(216, color0.getRed());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      boolean boolean0 = monthlyCalendar0.getMouseListeningEnabled();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertTrue(boolean0);
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      Color color0 = monthlyCalendar0.getHighlightBackground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(84, color0.getGreen());
      assertEquals(2014, monthlyCalendar0.getYear());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      MonthlyCalendar monthlyCalendar0 = new MonthlyCalendar();
      monthlyCalendar0.getHighlightForeground();
      assertEquals(2, monthlyCalendar0.getMonth());
      assertEquals(2014, monthlyCalendar0.getYear());
  }
}

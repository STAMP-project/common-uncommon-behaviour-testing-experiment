/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 21:40:47 GMT 2019
 */

package de.outstare.fortbattleplayer.statistics;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.outstare.fortbattleplayer.model.Area;
import de.outstare.fortbattleplayer.model.CharacterClass;
import de.outstare.fortbattleplayer.model.Combatant;
import de.outstare.fortbattleplayer.model.CombatantSide;
import de.outstare.fortbattleplayer.model.CombatantState;
import de.outstare.fortbattleplayer.model.impl.SimpleCombatant;
import de.outstare.fortbattleplayer.model.impl.SimpleWeapon;
import de.outstare.fortbattleplayer.statistics.PositionSwitch;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PositionSwitch_ESTest extends PositionSwitch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null, (Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-45), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "A", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-45), "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "DFzA9>c?h_Fnd");
      PositionSwitch positionSwitch0 = new PositionSwitch((-45), simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-45), "", characterClass0, simpleWeapon0, "\"r~Y3T;o0N");
      PositionSwitch positionSwitch1 = new PositionSwitch((int) positionSwitch0.health1, simpleCombatant1, simpleCombatant0);
      int int0 = positionSwitch1.compareTo(positionSwitch0);
      assertFalse(positionSwitch0.equals((Object)positionSwitch1));
      assertEquals((-45), positionSwitch1.round);
      assertEquals((-13), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null, (Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2399), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2399), "b[o~O>.pH-k~Y5.+", characterClass0, simpleWeapon0, "");
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-45), "b[o~O>.pH-k~Y5.+", characterClass0, simpleWeapon0, "{!p8{E}y,f7c.\"");
      PositionSwitch positionSwitch0 = new PositionSwitch(1231, simpleCombatant0, simpleCombatant1);
      positionSwitch0.hashCode();
      assertEquals(1231, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      PositionSwitch positionSwitch0 = null;
      try {
        positionSwitch0 = new PositionSwitch((-932), (Combatant) null, (Combatant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(2924, combatant0, combatant0);
      assertEquals(2924, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2399), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2399), "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "p0#wnK=^(#vU_x");
      PositionSwitch positionSwitch0 = new PositionSwitch((-45), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(1867, positionSwitch0.player1, simpleCombatant0);
      boolean boolean0 = positionSwitch1.equals(positionSwitch0);
      assertFalse(boolean0);
      assertFalse(positionSwitch0.equals((Object)positionSwitch1));
      assertEquals(1867, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null, (Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-45), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "A", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-45), "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "DFzA9>c?h_Fnd");
      PositionSwitch positionSwitch0 = new PositionSwitch((-45), simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, (-45), "", characterClass0, simpleWeapon0, "\"r~Y3T;o0N");
      PositionSwitch positionSwitch1 = new PositionSwitch((int) positionSwitch0.health1, simpleCombatant1, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals(positionSwitch1);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals((-45), positionSwitch1.round);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, 1800, area0, false);
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(0, "", 0, 1260);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 1074, "", characterClass0, simpleWeapon0, (String) null);
      PositionSwitch positionSwitch0 = new PositionSwitch(1137, simpleCombatant0, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(1137, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2399), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2399), "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "p0#wnK=^(#vU_x");
      PositionSwitch positionSwitch0 = new PositionSwitch((-45), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(2, positionSwitch0.player1, positionSwitch0.player2);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertEquals(2, positionSwitch1.round);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1616, 1616).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(1616, combatant0, combatant0);
      int int0 = positionSwitch0.compareTo(positionSwitch0);
      assertEquals(0, int0);
      assertEquals(1616, positionSwitch0.round);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2399), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2399), "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "p0#wnK=^(#vU_x");
      PositionSwitch positionSwitch0 = new PositionSwitch((-45), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch(2, positionSwitch0.player1, positionSwitch0.player2);
      PositionSwitch positionSwitch2 = new PositionSwitch(2, simpleCombatant0, positionSwitch0.player1);
      boolean boolean0 = positionSwitch1.equals(positionSwitch2);
      assertFalse(positionSwitch0.equals((Object)positionSwitch1));
      assertTrue(boolean0);
      assertEquals(2, positionSwitch2.round);
      assertFalse(positionSwitch2.equals((Object)positionSwitch0));
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null, (Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, 3, area0, false);
      CharacterClass characterClass0 = CharacterClass.GREENHORN;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon(3, "A", 3, 3);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, 3, "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "DFzA9>c?h_Fnd");
      PositionSwitch positionSwitch0 = new PositionSwitch(3, simpleCombatant0, simpleCombatant0);
      SimpleCombatant simpleCombatant1 = new SimpleCombatant(combatantSide0, combatantState0, 3, "A", characterClass0, simpleWeapon0, "DFzA9>c?h_Fnd");
      PositionSwitch positionSwitch1 = new PositionSwitch(3, simpleCombatant1, simpleCombatant1);
      int int0 = positionSwitch1.compareTo(positionSwitch0);
      assertEquals((-3), int0);
      assertEquals(3, positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2399), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2399), "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "p0#wnK=^(#vU_x");
      PositionSwitch positionSwitch0 = new PositionSwitch((-45), simpleCombatant0, simpleCombatant0);
      PositionSwitch positionSwitch1 = new PositionSwitch((-2546), simpleCombatant0, positionSwitch0.player1);
      int int0 = positionSwitch0.compareTo(positionSwitch1);
      assertFalse(positionSwitch1.equals((Object)positionSwitch0));
      assertEquals(1, int0);
      assertEquals((-2546), positionSwitch1.round);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Combatant combatant0 = mock(Combatant.class, new ViolatedAssumptionAnswer());
      doReturn(1608, 1608).when(combatant0)._health();
      PositionSwitch positionSwitch0 = new PositionSwitch(1608, combatant0, combatant0);
      // Undeclared exception!
      try { 
        positionSwitch0.compareTo((PositionSwitch) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.outstare.fortbattleplayer.statistics.PositionSwitch", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      CombatantSide combatantSide0 = CombatantSide.DEFENDER;
      Area area0 = mock(Area.class, new ViolatedAssumptionAnswer());
      doReturn((Combatant) null).when(area0).occupy(any(de.outstare.fortbattleplayer.model.Combatant.class) , any(de.outstare.fortbattleplayer.model.Area.class));
      CombatantState combatantState0 = new CombatantState(area0, (-2399), area0, false);
      CharacterClass characterClass0 = CharacterClass.SOLDIER;
      SimpleWeapon simpleWeapon0 = new SimpleWeapon((-45), "", 0, 1867);
      SimpleCombatant simpleCombatant0 = new SimpleCombatant(combatantSide0, combatantState0, (-2399), "DFzA9>c?h_Fnd", characterClass0, simpleWeapon0, "p0#wnK=^(#vU_x");
      PositionSwitch positionSwitch0 = new PositionSwitch((-45), simpleCombatant0, simpleCombatant0);
      boolean boolean0 = positionSwitch0.equals(simpleCombatant0);
      assertEquals((-45), positionSwitch0.round);
      assertFalse(boolean0);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 06 19:54:27 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Light;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.VSIBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Integer.toUnsignedLong((-2189));
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      homeLight0.setAngle(4294965107L);
      homeLight1.getY();
      homeLight1.setName("com.eteks.sweethome3d.model.Level");
      homeLight1.getTexture();
      homeLight1.getShininess();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 172.8203F);
      homeLight0.setWidth(46.92762F);
      Integer.toUnsignedLong((-2189));
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      homeLight1.getY();
      homeLight1.setName("NAME_X_OFFSET");
      homeLight1.setShininess(float0);
      homeLight0.getPrice();
      homeLight1.getX();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[0];
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(true);
      homeLight0.setWidth((-811.0F));
      homeLight0.isDeformable();
      homeLight1.setMovable(true);
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setNameVisible(false);
      homeLight0.setNameAngle((-44.4F));
      homeLight0.move((-2189), 46.92762F);
      homeLight1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.clone();
      homeLight0.containsPoint(90.283295F, 3.4028235E38F, (-1294.7F));
      LightSource lightSource0 = new LightSource((-1113), (-1294.7F), (-496.377F), (-1113));
      LightSource lightSource1 = new LightSource((-1254.8304F), (-496.377F), (-803.0F), (-783));
      Float float0 = new Float((double) (-5928.8F));
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 3.4028235E38F, 3, float0);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      homeLight0.setLevel(level0);
      Integer integer0 = new Integer(3);
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setElevation(0.3926991F);
      homeLight0.getNameXOffset();
      homeLight0.isTopLeftPointAt(0.3926991F, 46.92762F, 451.93457F);
      homeLight0.setNameXOffset(451.93457F);
      homeLight0.getGroundElevation();
      homeLight0.getY();
      HomePieceOfFurniture.Property.values();
      homeLight0.getX();
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isPointAt(497.5697F, 1159.432F, 497.5697F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setElevation(497.5697F);
      homeLight0.setVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      LightSource lightSource0 = new LightSource(2.9453228F, 4085.0247F, 2.9453228F, 2480);
      Float float0 = new Float(1739.0230421);
      LightSource lightSource1 = new LightSource(2307.8F, 4085.0247F, 4085.0247F, (-1));
      Level level0 = new Level("~FnXm~", 837.127F, 0.5F, 837.127F);
      level0.getElevation();
      level0.getHeight();
      homeLight1.setLevel(level0);
      Integer integer0 = new Integer(2480);
      homeLight1.clone();
      homeLight0.setAngle((-2630.73F));
      homeLight0.getStaircaseCutOutShape();
      homeLight1.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(22.942448F);
      LightSource lightSource0 = new LightSource(22.942448F, 22.942448F, 0.3926991F, (-783));
      homeLight0.intersectsRectangle(1780.0F, (-1289.9661F), 1780.0F, (-1289.9661F));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";^UfO5CBvztd^K");
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = homeLight1.clone();
      homeLight0.move(3021.0F, 3.8316722F);
      HomeLight homeLight4 = homeLight3.clone();
      homeLight2.isBottomLeftPointAt(2988.114F, (-783), 1321.5F);
      homeLight4.move(0.0F, 0.0F);
      homeLight4.isNameCenterPointAt(1640.019F, (-783), 937.46265F);
      homeLight0.getWidth();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(689.5437F, 997.94244F, 689.5437F);
      homeLight0.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      Level level0 = new Level("", 46.92762F, (-1.0F), 46.92762F);
      level0.getElevation();
      Level level1 = level0.clone();
      Float float0 = new Float(46.92762F);
      homeLight0.isAtLevel(level1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(82.63204F).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      homePieceOfFurniture0.setName((String) null);
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(1647, 1425.3369F, 1647);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1530.5F));
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(4550.353F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.move((-1614.2019F), (-2534.3955F));
      homeLight0.setNameYOffset(0.0F);
      homeLight0.setX((-1614.2019F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.setMovable(true);
      homeLight1.isResizable();
      homeLight1.isDeformable();
      homeLight1.intersectsRectangle(0.0F, 0.0F, 2.9453228F, 3247.858F);
      homeLight0.setMovable(false);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setNameAngle(1.0F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.isBottomLeftPointAt(1.0F, (-1.0F), 1825.765F);
      homeLight2.move(1.0F, (-60.82742F));
      homeLight2.isNameCenterPointAt(0.0F, (-60.82742F), (-3838.493F));
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(82.63204F).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopRightPointAt((-2189), (-2189), 566.76F);
      homeLight1.setDepth((-2167.2146F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopLeftPointAt(514.6601F, 3022.828F, (-2189));
      homeLight2.setNameXOffset(191.2F);
      homeLight1.getGroundElevation();
      homeLight0.getY();
      homeLight1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      homeLight0.setNameVisible(false);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("c/}cg#]$Ww`7");
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Integer integer0 = new Integer(2147483135);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.getTexture();
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.tools.URLContent");
      HomeLight homeLight1 = homeLight0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("com.eteks.sweethome3d.tools.URLContent", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isNameCenterPointAt(3.4028235E38F, (-1.0F), 0.0F);
      homeLight1.isBottomLeftPointAt((-498.76F), 2115.4004F, 3.4028235E38F);
      homeLight1.getColor();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float float0 = Float.valueOf(1747.0F);
      Float.min(526.18787F, 2465.4646F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      homeLight1.getY();
      homeLight0.setVisible(true);
      homeLight1.setElevation(52.32F);
      Float.compare(0.0F, (-1511.15F));
      Float.compare((-2601.4133F), 0.0F);
      homeLight1.setShininess((Float) 0.0F);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isPointAt(4550.353F, (-2534.3955F), (-2534.3955F));
      homeLight0.setX(4550.353F);
      homeLight0.setDescription("");
      homeLight0.setVisible(false);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(light0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture0.setColor((Integer) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setNameYOffset((-1.0F));
      homeLight2.isBottomLeftPointAt(46.92762F, (-1388.8F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setMovable(true);
      homeLight0.isResizable();
      homeLight0.isTopLeftPointAt((-1294.7F), 1170.6016F, 52.32F);
      homeLight0.setNameXOffset((-2189));
      homeLight0.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setWidth((-1925.73F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float(46.92762F);
      LightSource lightSource0 = new LightSource(646.1024F, 4.106398F, 4.106398F, 1302, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(4.106398F, (-1535.6777F), 46.92762F, 2134067437, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(4.106398F, 46.92762F, 646.1024F, (-2145025206), float0);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float(1343.5547F);
      LightSource lightSource3 = new LightSource(1343.5547F, 1302, (-1535.6777F), (-2145025206), float1);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(1302, 646.1024F, 1343.5547F, (-2910));
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(3101.7583F, 0.0F, 2134067437, 2134067437);
      lightSourceArray0[5] = lightSource5;
      Integer integer0 = Integer.valueOf(1514);
      URLContent uRLContent0 = new URLContent((URL) null);
      float[][] floatArray0 = new float[2][6];
      float[] floatArray1 = new float[2];
      floatArray1[0] = 3101.7583F;
      floatArray1[1] = 646.1024F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = (-44.4F);
      floatArray2[1] = 4.106398F;
      floatArray2[2] = (float) (-2910);
      floatArray2[3] = (-1.0F);
      floatArray2[4] = (-44.4F);
      floatArray2[5] = (float) 2134067437;
      floatArray2[6] = 46.92762F;
      floatArray2[7] = (float) (-2910);
      floatArray0[1] = floatArray2;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("yVd;\"h3").when(light0).getCurrency();
      doReturn((-1.0F)).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn((-44.4F)).when(light0).getElevation();
      doReturn(3101.7583F).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture$SortableProperty").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(646.1024F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameVisible(false);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      float float2 = 0.0F;
      homeLight1.setAngle(0.0F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setNameYOffset(4056.9675F);
      homeLight1.clone();
      HomeLight homeLight3 = null;
      try {
        homeLight3 = new HomeLight(homeLight0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Super class isn't cloneable");
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(4550.353F);
      homeLight0.isPointAt(4550.353F, (-2534.3955F), (-2534.3955F));
      homeLight0.setVisible(false);
      homeLight0.isDeformable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.clone();
      homeLight0.clone();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setDescription("");
      homeLight2.setDescription("");
      homeLight0.isTopLeftPointAt(2179.25F, 2179.25F, 2179.25F);
      homeLight1.isTopLeftPointAt(2179.25F, 1456.26F, (-1535.0F));
      homeLight2.setMovable(false);
      homeLight2.getDescription();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = true;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.isTopRightPointAt(0.0F, 65.02255F, 65.02255F);
      homeLight0.setWidth((-2189));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset((-1.0F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(false);
      homeLight0.isTopRightPointAt((-2423.616F), 52.32F, 773.0F);
      homeLight0.setWidth(3.8808222F);
      homeLight1.isDeformable();
      homeLight1.setMovable(false);
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setNameVisible(true);
      homeLight0.setNameAngle((-1294.7F));
      homeLight1.move(773.0F, 2773.4966F);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.5F, 1133.0F, 0.5F, 1);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-1.0F), 0.0F, (-1651), (Float) null);
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-4871));
      Object object0 = new Object();
      integer0.equals(object0);
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[3];
      floatArray1[0] = 894.03754F;
      floatArray1[1] = (float) (-4871);
      floatArray1[2] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (float) (-1651);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = 0.5F;
      floatArray2[3] = (-1697.465F);
      floatArray2[4] = 405.61002F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 405.61002F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-1.0F);
      floatArray4[4] = 0.5F;
      floatArray4[5] = 0.5F;
      floatArray4[6] = (float) (-4871);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[7];
      floatArray5[0] = 1133.0F;
      floatArray5[1] = 1133.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 405.61002F;
      floatArray5[4] = (-1.0F);
      floatArray5[5] = (float) 1;
      floatArray5[6] = 0.5F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (float) 1;
      floatArray6[1] = (float) 1;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 0.0F;
      floatArray6[4] = (float) (-4871);
      floatArray6[5] = (float) 1;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = (float) 1;
      floatArray7[1] = (-1697.465F);
      floatArray7[2] = (float) (-1651);
      floatArray7[3] = 1133.0F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      floatArray8[0] = (float) (-1651);
      floatArray8[1] = 405.61002F;
      floatArray8[2] = (float) (-4871);
      floatArray8[3] = (float) (-1651);
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("").when(light0).getCurrency();
      doReturn((float)1).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn((float)(-1651)).when(light0).getElevation();
      doReturn(894.03754F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("3r`0`").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1854.279F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      Integer integer1 = Integer.valueOf(2146996182);
      int int0 = 19;
      Integer.remainderUnsigned(8192, 2);
      homeLight0.setColor(integer1);
      homeLight0.getWidth();
      homeLight0.getValueAddedTax();
      homeLight0.isNameVisible();
      homeLight0.getPoints();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isMovable();
      HomePieceOfFurniture.SortableProperty.values();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("jV`yPwhTe]tBfK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.jV`yPwhTe]tBfK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setDescription("NAME_X_OFFSET");
      homeLight0.isBottomRightPointAt((-2189), 0.0F, 807.4F);
      homeLight0.getAngle();
      homeLight0.isBottomRightPointAt(1702.2F, 950.618F, 3877.271F);
      homeLight0.getNameStyle();
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBD").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt((-769.3F), 0.3926991F, 2779.3F);
      homeLight0.isTopLeftPointAt(1647, 3.4028235E38F, (-1659.3718F));
      homeLight0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isPointAt(0.0F, 0.0F, 2863.374F);
      homeLight0.setName((String) null);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(true);
      homeLight0.isTopRightPointAt(0.0F, 173.87274F, 2010.3622F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(2641.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt((-319.57095F), 1127.26F, 2641.0F);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1530.5F));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = new Integer(780754148);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)780754148).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)780754148).when(light0).getElevation();
      doReturn((float)780754148).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)780754148).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setWidth(780754148);
      Integer.toUnsignedLong(780754148);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setDescription("");
      homeLight2.setDescription("");
      HomeLight homeLight3 = homeLight1.clone();
      homeLight0.isNameCenterPointAt(67.4F, 1.0872087F, 1.0872087F);
      homeLight3.setMovable(true);
      homeLight3.isNameCenterPointAt(1.0872087F, 67.4F, 67.4F);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(3.83F, (-420.8576F), 3.83F, 491);
      lightSourceArray0[0] = lightSource0;
      String string0 = "com.eteks.sweethome3d.model.HomePieceOfFurniture$3";
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      Integer integer0 = new Integer(491);
      float[][] floatArray0 = new float[5][7];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 3.83F;
      floatArray1[1] = (float) 491;
      floatArray1[2] = (float) 491;
      floatArray1[3] = (float) 491;
      floatArray1[4] = (float) 491;
      floatArray1[5] = (-420.8576F);
      floatArray1[6] = 1584.338F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[8];
      floatArray2[0] = 3.83F;
      floatArray2[1] = (-420.8576F);
      floatArray2[2] = (float) 491;
      floatArray2[3] = (-2272.85F);
      floatArray2[4] = (-420.8576F);
      floatArray2[5] = 3.83F;
      floatArray2[6] = 3.83F;
      floatArray2[7] = 1584.338F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = (float) 491;
      floatArray3[1] = 1584.338F;
      floatArray3[2] = (-420.8576F);
      floatArray3[3] = 1584.338F;
      floatArray3[4] = 1584.338F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 1584.338F;
      floatArray4[1] = 1584.338F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      floatArray5[0] = 1584.338F;
      floatArray5[1] = 3.83F;
      floatArray5[2] = (-2272.85F);
      floatArray5[3] = 1584.338F;
      floatArray5[4] = 1584.338F;
      floatArray5[5] = (-420.8576F);
      floatArray5[6] = (-420.8576F);
      floatArray5[7] = 1584.338F;
      floatArray0[4] = floatArray5;
      boolean boolean0 = true;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", temporaryURLContent0, temporaryURLContent0, (-420.8576F), 491, 1584.338F, 491, true, true, integer0, floatArray0, true, (-1720.473F), true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer1 = homePieceOfFurniture0.getColor();
      float[][] floatArray6 = new float[4][1];
      floatArray6[0] = floatArray1;
      floatArray6[1] = floatArray3;
      floatArray6[2] = floatArray2;
      floatArray6[3] = floatArray2;
      BigDecimal.multiply(1L, 1L);
      int int0 = 323;
      BigDecimal bigDecimal0 = new BigDecimal(int0);
      int int1 = bigDecimal0.scale();
      BigDecimal bigDecimal1 = bigDecimal0.setScale(int1);
      String string1 = "";
      boolean boolean1 = true;
      boolean boolean2 = true;
      boolean boolean3 = true;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer1).when(light0).getColor();
      doReturn(string0).when(light0).getCurrency();
      doReturn(floatArray1[1]).when(light0).getDepth();
      doReturn(string0).when(light0).getDescription();
      doReturn(floatArray5[6]).when(light0).getElevation();
      doReturn(floatArray4[1]).when(light0).getHeight();
      doReturn(temporaryURLContent0).when(light0).getIcon();
      doReturn(temporaryURLContent0).when(light0).getModel();
      doReturn(floatArray6).when(light0).getModelRotation();
      doReturn(string0).when(light0).getName();
      doReturn(temporaryURLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal1).when(light0).getPrice();
      doReturn(string1).when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(floatArray5[3]).when(light0).getWidth();
      doReturn(boolean0).when(light0).isBackFaceShown();
      doReturn(boolean1).when(light0).isDeformable();
      doReturn(boolean0).when(light0).isDoorOrWindow();
      doReturn(boolean2).when(light0).isMovable();
      doReturn(boolean1).when(light0).isResizable();
      doReturn(boolean3).when(light0).isTexturable();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      boolean boolean4 = false;
      homeLight0.setNameVisible(boolean4);
      homeLight0.setAngle(float0);
      HomeLight homeLight1 = homeLight0.clone();
      String string2 = "c/}cg#]$Ww`7";
      homeLight1.setDescription(string2);
      float float1 = (-1.0F);
      float float2 = 1768.9414F;
      float float3 = 1.0F;
      homeLight1.isBottomLeftPointAt(float1, float3, float0);
      homeLight1.move(float2, float3);
      float float4 = 52.32F;
      float float5 = 2732.83F;
      homeLight0.isNameCenterPointAt(float5, float0, float4);
      homeLight1.getWidth();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.containsPoint((-1976.3445F), (-1976.3445F), 1854.2587F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, (-1976.3445F));
      // Undeclared exception!
      try { 
        homeLight2.setWidth((-1355.0681F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HomeLight homeLight0 = null;
      try {
        homeLight0 = new HomeLight((Light) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Integer.compare((-2189), (-2189));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("tVYSK*").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float.valueOf(1747.0F);
      TextStyle textStyle0 = new TextStyle(641.2662F, true, true);
      textStyle0.deriveBoldStyle(false);
      textStyle0.deriveStyle(90.283295F);
      homeLight0.setNameStyle(textStyle0);
      homeLight0.setY(773.0F);
      homeLight0.getElevation();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(1647, 1425.3369F, 1647);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1530.5F));
      homeLight0.setMovable(false);
      homeLight0.isTopRightPointAt((-1530.5F), 0.0F, 2618.6123F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isNameCenterPointAt(3.4028235E38F, (-1.0F), 0.0F);
      homeLight0.isBottomLeftPointAt((-1.0F), 2088.5571F, 3.4028235E38F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.intersectsRectangle(0.0F, 1835.784F, (-1416.1836F), (-2054.9023F));
      homeLight1.setDescription("&KgAKAO/");
      homeLight0.setDescription("com.eteks.sweethome3d.model.HomePieceOfFurniture$11");
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.intersectsRectangle(1780.0F, (-1289.9661F), 1780.0F, (-1289.9661F));
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setNameAngle(1780.0F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.isBottomLeftPointAt(1768.9414F, (-1.0F), 1780.0F);
      homeLight0.isDeformable();
      homeLight2.getStaircaseCutOutShape();
      homeLight0.setY(0.0F);
      Integer integer0 = Integer.valueOf((-1));
      // Undeclared exception!
      try { 
        homeLight2.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = homeLight2.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight4 = homeLight2.clone();
      homeLight4.getAngle();
      homeLight4.isBottomRightPointAt(3.4028235E38F, 0.0F, 3.4028235E38F);
      homeLight3.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(1647, 1127.26F, 2641.0F);
      homeLight0.setColor(integer0);
      homeLight0.setX(1127.26F);
      homeLight0.isDeformable();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.access$1000((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(1647, 1127.26F, 2641.0F);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, (-1530.5F));
      homeLight0.setNameXOffset(1009.826F);
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.move(1554.6418F, 1554.6418F);
      homeLight0.setNameYOffset((-1.0F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(1554.6418F);
      homeLight1.isDeformable();
      homeLight1.isBottomRightPointAt(4550.353F, 4.29496499E9F, 4.29496499E9F);
      homeLight1.getNameStyle();
      homeLight1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.isTopLeftPointAt(46.92762F, 3023.0242F, 3023.0242F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      float float0 = 0.0F;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.setDescription("");
      float float1 = (-288.7F);
      float float2 = 1417.3333F;
      CatalogTexture catalogTexture0 = new CatalogTexture("", "7(Tg", (Content) null, (-4017.592F), 1764.3451F, "", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      // Undeclared exception!
      try { 
        homeLight1.setTexture(homeTexture0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      float float0 = 2.9453228F;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getValueAddedTax();
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      float float1 = (-4017.592F);
      float float2 = 5.2831855F;
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float.valueOf(1747.0F);
      TextStyle textStyle0 = new TextStyle(641.2662F, true, true);
      textStyle0.deriveItalicStyle(true);
      textStyle0.deriveStyle(90.283295F);
      homeLight0.setNameStyle(textStyle0);
      homeLight0.setY(773.0F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Integer.toUnsignedLong((-2189));
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      homeLight1.getY();
      homeLight1.setName("NAME_X_OFFSET");
      homeLight1.setShininess(float0);
      homeLight0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt((-1.0F), 3.4028235E38F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      homeLight1.getY();
      homeLight0.getIcon();
      homeLight0.getWidth();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.setVisible(true);
      homeLight0.isTopRightPointAt((-1.0F), (-1.0F), (-2345.0F));
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameVisible(true);
      homeLight0.setAngle(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("c/}cg#]$Ww`7");
      homeLight1.isTopRightPointAt(3773.9988F, 0.0F, 46.92762F);
      homeLight0.setNameVisible(false);
      // Undeclared exception!
      try { 
        homeLight1.setDepth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(22.206633F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getPriceValueAddedTaxIncluded();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(false);
      homeLight0.isTopRightPointAt((-2423.616F), 52.32F, 773.0F);
      homeLight0.setWidth(3.8808222F);
      homeLight1.isDeformable();
      homeLight1.setMovable(false);
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setNameVisible(true);
      homeLight0.setNameAngle((-1294.7F));
      homeLight1.move(773.0F, 2773.4966F);
      homeLight1.getAngle();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ".-BpzS{G>", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "UkVO<Vd20}");
      URLContent uRLContent0 = new URLContent(uRL2);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[5][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = (-1251.04F);
      floatArray1[2] = 3186.6F;
      floatArray1[3] = (-963.78F);
      floatArray1[4] = (-1251.04F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = 0.3926991F;
      floatArray2[1] = (-1251.04F);
      floatArray2[2] = (-1251.04F);
      floatArray2[3] = 0.3926991F;
      floatArray2[4] = 3186.6F;
      floatArray2[5] = 1530.7358F;
      floatArray2[6] = (-963.78F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 1530.7358F;
      floatArray3[1] = (-1251.04F);
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = (-963.78F);
      floatArray3[4] = 1530.7358F;
      floatArray3[5] = (-963.78F);
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = (-4558.278F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = (-4558.278F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = (-1251.04F);
      floatArray5[1] = (-1142.0F);
      floatArray5[2] = (-1251.04F);
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = new BigDecimal(3186.6F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(".-BpzS{G>", ".-BpzS{G>", ".-BpzS{G>", uRLContent0, uRLContent0, 3186.6F, (-1251.04F), 3186.6F, (-963.78F), true, 1530.7358F, (-963.78F), sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight1.isTopRightPointAt((-201.7F), 719.8606F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      homeLight0.setVisible(true);
      homeLight0.setWidth((-811.0F));
      homeLight0.isDeformable();
      homeLight0.setMovable(true);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameVisible(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      homeLight0.move((-2189), 46.92762F);
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDepth(0.0F);
      homeLight0.isTopLeftPointAt((-2189), (-1294.7F), (-2189));
      homeLight1.setNameXOffset((-1294.7F));
      homeLight1.getGroundElevation();
      homeLight1.getY();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.isTopLeftPointAt((-1.0F), (-3247.8F), 1102.9374F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isPointAt((-1.0F), 46.92762F, 46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getStaircaseCutOutShape();
      Level level0 = new Level("e:#bkcC8x;", (-1.0F), 1027.9037F, 100.4F);
      level0.getElevation();
      level0.getHeight();
      homeLight0.isAtLevel(level0);
      homeLight0.getHeight();
      homeLight0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.setWidth(1.0F);
      homeLight0.isDeformable();
      homeLight0.setMovable(false);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameVisible(true);
      homeLight0.setNameAngle(0.0F);
      homeLight0.getNameXOffset();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.tools.URLContent");
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight1.move(46.92762F, 0.0F);
      homeLight0.isNameCenterPointAt(3.4028235E38F, (-1.0F), 0.0F);
      homeLight1.isBottomLeftPointAt((-498.76F), 2088.5571F, 3.4028235E38F);
      homeLight2.getCurrency();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(61.981F, 61.981F, 61.981F, 2);
      lightSourceArray0[0] = lightSource0;
      Float.floatToIntBits(0.0F);
      LightSource lightSource1 = new LightSource((-858.9F), 2, 2, 2, (Float) 0.0F);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-858.9F), (-2887.25F), (-2887.25F), 2);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(61.981F, 61.981F, 0.0F, 2, (Float) null);
      lightSourceArray0[3] = lightSource3;
      Float.floatToIntBits((-1001.2885F));
      Float.floatToIntBits(533.52747F);
      Float.floatToIntBits(0.0F);
      LightSource lightSource4 = new LightSource(0, 760.0F, 974.22845F, 1923, (Float) 0.0F);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(0.0F, 1923, 1141203394, 2149);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(974.22845F, 1923, 0, 19);
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(0.0F, (-2077.171F), (-1001.2885F), 2147479805);
      lightSourceArray0[7] = lightSource7;
      Integer integer0 = new Integer((-431));
      URL uRL0 = MockURL.getFileExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      float[][] floatArray0 = new float[8][9];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 1141203394;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) (-998616457);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (-2077.171F);
      floatArray2[1] = (float) (-998616457);
      floatArray2[2] = 0.0F;
      floatArray2[3] = (float) (-998616457);
      floatArray2[4] = (-2077.171F);
      floatArray2[5] = 974.22845F;
      floatArray2[6] = (float) 1141203394;
      floatArray2[7] = (float) (-998616457);
      floatArray2[8] = (-2077.171F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[0];
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[3];
      floatArray4[0] = (-703.2517F);
      floatArray4[1] = (float) (-431);
      floatArray4[2] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = (float) 0;
      floatArray5[1] = (float) 1141203394;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[2];
      floatArray6[0] = (float) 2149;
      floatArray6[1] = 974.22845F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[6];
      floatArray7[0] = (-1001.2885F);
      floatArray7[1] = (-1001.2885F);
      floatArray7[2] = 974.22845F;
      floatArray7[3] = (-858.9F);
      floatArray7[4] = (-2887.25F);
      floatArray7[5] = (-2887.25F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[8];
      floatArray8[0] = (float) 2147479805;
      floatArray8[1] = (-703.2517F);
      floatArray8[2] = 65.305725F;
      floatArray8[3] = 5.2831855F;
      floatArray8[4] = (float) 0;
      floatArray8[5] = 0.0F;
      floatArray8[6] = 0.0F;
      floatArray8[7] = (float) 2147479805;
      floatArray0[7] = floatArray8;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      float float0 = 2570.3184F;
      homeLight0.isBottomRightPointAt(2.0F, 150.915F, 0.5F);
      // Undeclared exception!
      try { 
        homeLight1.setDepth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("");
      homeLight1.setDescription("");
      homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(9.255961F, 9.255961F, 9.255961F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(9.255961F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(9.255961F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("NAE.V/IBs").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(9.255961F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.clone();
      homeLight0.isBottomLeftPointAt(0.3926991F, 1647, 3429.2F);
      homeLight0.isTopLeftPointAt(3429.2F, 9.255961F, 3429.2F);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Integer integer0 = new Integer(2);
      integer0.equals("W^L;`n`KLw,\"xm+@t");
      float[][] floatArray0 = new float[4][2];
      float[] floatArray1 = new float[1];
      floatArray1[0] = (-251.56346F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (float) 2;
      floatArray2[1] = (-251.56346F);
      floatArray2[2] = 1428.16F;
      floatArray2[3] = (float) 2;
      floatArray2[4] = (float) 2;
      floatArray2[5] = (float) 2;
      floatArray2[6] = (-251.56346F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = (float) 2;
      floatArray3[1] = (-251.56346F);
      floatArray3[2] = (float) 2;
      floatArray3[3] = (-251.56346F);
      floatArray3[4] = 1428.16F;
      floatArray3[5] = (-251.56346F);
      floatArray3[6] = (float) 2;
      floatArray3[7] = (-1154.3F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = (-251.56346F);
      floatArray4[1] = (float) 2;
      floatArray4[2] = (-251.56346F);
      floatArray4[3] = (float) 2;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = new BigDecimal(2.0F);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("").when(light0).getCurrency();
      doReturn((-251.56346F)).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn(1428.16F).when(light0).getElevation();
      doReturn((-251.56346F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("W^L;`n`KLw,\"xm+@t").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(148.10117F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(0.0F, 46.92762F, 46.92762F);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(true);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getStaircaseCutOutShape();
      HomeLight homeLight3 = homeLight1.clone();
      homeLight3.setNameAngle(1.0F);
      homeLight2.clone();
      homeLight3.isBottomLeftPointAt(1.5076666F, 233.0F, 1801.5F);
      homeLight3.move(3657.5F, (-1510.062F));
      homeLight3.isNameCenterPointAt(3.8316722F, 1.5076666F, (-595.6812F));
      homeLight3.getWidth();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight1.getPoints();
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      homeLight0.setNameXOffset(0.5F);
      homeLight0.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "NAME_X_OFFSET");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(false);
      homeLight0.isTopRightPointAt((-1294.7F), (-3177.141F), (-1152.49F));
      homeLight0.setWidth(1.0F);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.MOVABLE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight0.setVisible(false);
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Sash[] sashArray0 = new Sash[0];
      float[][] floatArray0 = new float[3][3];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 782.21576F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 782.21576F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = 0.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 782.21576F;
      floatArray2[6] = 0.0F;
      floatArray2[7] = 782.21576F;
      floatArray2[8] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 782.21576F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray3[3] = 782.21576F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = 782.21576F;
      floatArray3[7] = (-3692.0F);
      floatArray3[8] = 782.21576F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", "Piece isn't resizable", "Piece isn't resizable", (Content) null, (Content) null, 0.0F, 782.21576F, 0.0F, 782.21576F, false, 782.21576F, 0.0F, sashArray0, floatArray0, "com.eteks.sweethome3d.io.HomeURLContent", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-2189));
      BigDecimal bigDecimal1 = homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.isTopRightPointAt((-1294.7F), 5.9194074F, 0.0F);
      homeLight0.setWidth(0.0F);
      Float.valueOf(5.9194074F);
      homeLight0.setHeight(0.0F);
      bigDecimal1.shortValueExact();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getPlanIcon();
      homeLight0.getElevation();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(true);
      homeLight0.setWidth(0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setNameVisible(false);
      homeLight1.setNameAngle(3.8808222F);
      homeLight0.move((-2189), 46.92762F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight0.setShininess((Float) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      homeLight1.getY();
      homeLight1.getAngle();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight1.setShininess(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.getY();
      homeLight0.setName("com.eteks.sweethome3d.model.Level");
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.VSIBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn(" doesn't contain piece ").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(1647);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(470.83875F, 911.0395F, 0.3926991F);
      Float.valueOf(911.0395F);
      HomeLight homeLight2 = homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight2.setHeight(2509.708F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      Integer.toUnsignedLong((-1));
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("^Knva*`]|0'lD36Zd", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.move(1554.6418F, 1554.6418F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.setX(1554.6418F);
      homeLight0.isDeformable();
      homeLight0.isBottomRightPointAt(4550.353F, 4.29496499E9F, 4.29496499E9F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.containsPoint(874.1F, 1.0F, 1.0F);
      homeLight0.setNameYOffset(4550.353F);
      homeLight0.isPointAt((-2534.3955F), 4550.353F, (-2534.3955F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DOOR_OR_WINDOW;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setDescription("uM");
      homeLight0.setDescription("");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      float float0 = 2.9453228F;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      float float1 = 0.0F;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      // Undeclared exception!
      try { 
        homeLight1.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[0];
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      boolean boolean0 = true;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      CatalogLight catalogLight0 = new CatalogLight("", "2B.)S[5", "2B.)S[5", (Content) null, (Content) null, resourceURLContent0, 2641.0F, 2.0F, 116.50585F, 237.44F, false, lightSourceArray0, (float[][]) null, " doesn't contain piece ", false, false, true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setAngle(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopRightPointAt(0.0F, 2.9453228F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setDescription((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.move((-1.0F), 46.92762F);
      homeLight1.isPointAt(46.92762F, 46.92762F, (-2534.3955F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(false);
      homeLight0.isTopRightPointAt((-170.013F), (-2534.3955F), 0.0F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(true);
      homeLight1.setWidth(46.92762F);
      Float.valueOf(52.32F);
      homeLight0.setHeight(1825.765F);
      bigDecimal0.shortValueExact();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.getPlanIcon();
      homeLight1.getElevation();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.setDescription("VISIBLE");
      homeLight0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.toString();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isNameCenterPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(82.63204F).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopRightPointAt((-2189), (-2189), 566.76F);
      homeLight1.setDepth((-2167.2146F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopLeftPointAt(514.6601F, 3022.828F, (-2189));
      homeLight2.setNameXOffset(191.2F);
      homeLight1.getGroundElevation();
      homeLight0.getY();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float.valueOf(0.3926991F);
      Float float0 = Float.valueOf(0.0F);
      LightSource lightSource0 = new LightSource((-2487.0F), 1.0F, 1.0F, (-105), float0);
      lightSourceArray0[1] = lightSource0;
      LightSource lightSource1 = new LightSource(3.4028235E38F, (-1.0F), 2.0F, 2147481057);
      lightSourceArray0[2] = lightSource1;
      LightSource lightSource2 = new LightSource((-1185.25F), 316.22647F, 159.8585F, (-1113));
      lightSourceArray0[3] = lightSource2;
      LightSource lightSource3 = new LightSource(3478.919F, (-1254.8304F), (-5928.8F), (-105));
      lightSourceArray0[4] = lightSource3;
      Float float1 = new Float(1.0);
      LightSource lightSource4 = new LightSource(0.3926991F, 0.0F, 1.0F, 3, float1);
      lightSourceArray0[5] = lightSource4;
      Integer integer0 = new Integer(2147481057);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.isBottomRightPointAt(2570.3184F, 1517.0F, 2570.3184F);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.getTexture();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setTexture((HomeTexture) null);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(false);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isDeformable();
      homeLight2.getStaircaseCutOutShape();
      homeLight2.getStaircaseCutOutShape();
      homeLight1.getNameXOffset();
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ".-BpzS{G>", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "UkVO<Vd20}");
      URLContent uRLContent0 = new URLContent(uRL2);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[5][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = (-1251.04F);
      floatArray1[2] = 3186.6F;
      floatArray1[3] = (-963.78F);
      floatArray1[4] = (-1251.04F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = 0.3926991F;
      floatArray2[1] = (-1251.04F);
      floatArray2[2] = (-1251.04F);
      floatArray2[3] = 0.3926991F;
      floatArray2[4] = 3186.6F;
      floatArray2[5] = 1530.7358F;
      floatArray2[6] = (-963.78F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 1530.7358F;
      floatArray3[1] = (-1251.04F);
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = (-963.78F);
      floatArray3[4] = 1530.7358F;
      floatArray3[5] = (-963.78F);
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = (-4558.278F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = (-4558.278F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = (-1251.04F);
      floatArray5[1] = (-1142.0F);
      floatArray5[2] = (-1251.04F);
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = new BigDecimal(3186.6F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(".-BpzS{G>", ".-BpzS{G>", ".-BpzS{G>", uRLContent0, uRLContent0, 3186.6F, (-1251.04F), 3186.6F, (-963.78F), true, 1530.7358F, (-963.78F), sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getShininess();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "i#:g^Hl>1;");
      HomeDoorOrWindow homeDoorOrWindow2 = null;
      try {
        homeDoorOrWindow2 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.isResizable();
      homeLight1.isTopLeftPointAt(1334.494F, 1.0F, (-1743.0F));
      homeLight1.setNameXOffset(0.0F);
      homeLight0.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[10][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomRightPointAt((-807.0F), 1647, 1028.1F);
      homeLight0.getNameStyle();
      homeLight0.getNameYOffset();
      homeLight0.getName();
      homeLight0.isNameCenterPointAt(1028.1F, 45.3455F, 45.3455F);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getGroundElevation();
      homeLight1.getStaircaseCutOutShape();
      homeLight1.isNameVisible();
      homeLight1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.VSIBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight1.intersectsRectangle(0.3926991F, 690.32F, 45.71F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      CatalogTexture catalogTexture0 = new CatalogTexture("", "", (Content) null, (-4017.592F), 1764.3451F, "", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.intersectsRectangle(1764.3451F, 0.0F, (-1.0F), 0.0F);
      homeLight1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setColor(integer0);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setName("NAME_X_OFFSET");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName((String) null);
      homeLight0.isBottomRightPointAt((-533.6413F), (-533.6413F), 191.2F);
      homeLight0.getAngle();
      homeLight0.isTopLeftPointAt((-413.93F), 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      LightSource lightSource0 = new LightSource((-803.0F), (-803.0F), 0.3926991F, (-783));
      Float float0 = new Float((double) (-783));
      homeLight0.setElevation(0.3926991F);
      Float float1 = new Float(973.4F);
      float1.floatValue();
      Float float2 = new Float(973.4F);
      float2.floatValue();
      LightSource lightSource1 = new LightSource((-1874.0F), 0.0F, (-4371.64F), (-1), (Float) 973.4F);
      Integer integer0 = new Integer((-1));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.COLOR;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      HomePieceOfFurniture.Property.values();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-712.893F), 2393.4766F, (-1.0F), 3137.32F, 928.4204F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-39.87959F), 1.3706642F, 1.0F, 928.4204F, 1.3706642F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-3277.491F), 0.0F, 1517.0F, 1.0F, (-1563.0F));
      sashArray0[2] = sash2;
      Integer integer0 = new Integer(346);
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 3137.32F;
      floatArray1[1] = 1.0F;
      floatArray1[2] = (-1.0F);
      floatArray1[3] = (float) 346;
      floatArray1[4] = 1517.0F;
      floatArray1[5] = 1474.575F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (-363.16647F);
      floatArray2[1] = (-1292.3F);
      floatArray2[2] = (-67.4557F);
      floatArray2[3] = 1474.575F;
      floatArray2[4] = 1182.449F;
      floatArray2[5] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[6];
      floatArray3[0] = (-1.0F);
      floatArray3[1] = (float) 346;
      floatArray3[2] = 2.0F;
      floatArray3[3] = (-363.16647F);
      floatArray3[4] = (-3277.491F);
      floatArray3[5] = (-1.0F);
      floatArray0[2] = floatArray3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("4&BK;]gUCR24v_H:", temporaryURLContent0, temporaryURLContent0, (-1.0F), 1.3706642F, (-1.0F), (-3277.491F), true, (-67.4557F), (-1.0F), sashArray0, integer0, floatArray0, true, 928.4204F, false);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      LightSource lightSource0 = new LightSource(46.92762F, 46.92762F, 0.3926991F, (-783));
      homeLight0.intersectsRectangle(1780.0F, (-1289.9661F), 1780.0F, (-1289.9661F));
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setNameAngle(1780.0F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.isBottomLeftPointAt(1768.9414F, (-1.0F), 1780.0F);
      homeLight2.move((-389.0F), (-783));
      homeLight0.isNameCenterPointAt((-1.0F), 52.32F, 3.8316722F);
      homeLight0.getWidth();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight1.containsPoint((-389.0F), (-4572.0F), (-356.7277F));
      homeLight1.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.clone();
      homeLight0.isTopRightPointAt(204.16F, (-3.998F), 204.16F);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "NN$DzaUeEwKPgjji/`B");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(82.63204F).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopRightPointAt((-2189), (-2189), 566.76F);
      homeLight1.setDepth((-2189));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopLeftPointAt(514.6601F, 3022.828F, (-2189));
      homeLight2.setNameXOffset(191.2F);
      homeLight1.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setVisible(false);
      homeLight0.isTopRightPointAt(204.16F, 204.16F, 497.5697F);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(497.5697F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setName((String) null);
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setNameAngle(497.5697F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isBottomLeftPointAt(3231.57F, 497.5697F, 1019.262F);
      homeLight0.move(3231.57F, 497.5697F);
      homeLight1.isNameCenterPointAt(377.4F, 497.5697F, 2238.505F);
      homeLight0.getWidth();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      // Undeclared exception!
      try { 
        homeLight2.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.move(1554.6418F, 1.0F);
      homeLight0.setNameYOffset((-1.0F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(1554.6418F);
      homeLight1.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.containsPoint((-1.0F), 1554.6418F, 2130.5F);
      homeLight1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("D_/*.A#7", propertyChangeListener0);
      homeLight0.removePropertyChangeListener(propertyChangeListenerProxy0);
      float float0 = 46.92762F;
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      homeLight0.setDepth((-2189));
      homeLight0.isTopLeftPointAt((-2189), (-1294.7F), (-2189));
      homeLight0.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Float.valueOf(1747.0F);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(1334.494F, 1334.494F, (-1.0F), 0.0F, (-2750.451F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1334.494F, (-2180), 0.0F, 1009.826F, (-5605.1F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-5605.1F), 52.32F, 377.4F, 517.0649F, 0.5F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1.0F, (-5605.1F), 46.92762F, (-5605.1F), (-5451.0F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(0.0F, (-2180), 1747.0F, 699.1F, 3050.83F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(1009.826F, (-1.0F), 2.0F, (-727.73F), 2.0F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(3050.83F, 2641.0F, 52.32F, 46.92762F, (-1294.7F));
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(517.0649F, (-393.75226F), 3.1190012F, (-5605.1F), 2819.707F);
      sashArray0[7] = sash7;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.Level", "com.eteks.sweethome3d.model.Level", "com.eteks.sweethome3d.model.Level", (Content) null, (Content) null, (Content) null, (-1.0F), 46.92762F, 3310.41F, 3310.41F, true, 1334.494F, 1009.826F, sashArray0, (float[][]) null, "NAME_X_OFFSET", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBD").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.move(6.89F, 6.89F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.setX(6.89F);
      homeLight0.isDeformable();
      homeLight0.isBottomRightPointAt(4550.353F, 4.29496499E9F, 4.29496499E9F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isBottomRightPointAt(2386.596F, 1105.0F, 1142.9681F);
      homeLight0.getAngle();
      homeLight0.isBottomRightPointAt(0.0F, (-2069.8533F), 2232.247F);
      homeLight0.getNameStyle();
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      LightSource lightSource0 = new LightSource(46.92762F, 46.92762F, 0.3926991F, (-783));
      homeLight0.intersectsRectangle(1780.0F, (-1289.9661F), 1780.0F, (-1289.9661F));
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setNameAngle(1780.0F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setNameXOffset((-783));
      homeLight0.isBottomLeftPointAt(1768.9414F, (-1.0F), 1780.0F);
      homeLight2.move((-389.0F), (-783));
      homeLight0.isNameCenterPointAt((-1.0F), 52.32F, 3.8316722F);
      homeLight0.getWidth();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeLight1.getDepth();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.VSIBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt((-319.57095F), 1127.26F, 2641.0F);
      homeLight0.setNameXOffset(5.2831855F);
      homeLight0.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setMovable(false);
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setNameAngle((-507.907F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isBottomLeftPointAt(3.6496613F, (-647.35F), 4.106398F);
      homeLight1.move(1825.765F, 191.2F);
      homeLight1.setNameVisible(false);
      homeLight2.setNameAngle(191.2F);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.clone();
      LightSource lightSource0 = new LightSource(0.3926991F, (-1294.7F), (-496.377F), (-1113));
      LightSource lightSource1 = new LightSource((-1254.8304F), (-496.377F), (-803.0F), (-783));
      Float float0 = new Float((double) (-5928.8F));
      homeLight0.setElevation((-1658.44F));
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 3.4028235E38F, 3, float0);
      Integer integer0 = new Integer((-1000));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(497.5697F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setName((String) null);
      homeLight1.setVisible(true);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight1.getCurrency();
      homeLight0.getElevation();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Integer integer0 = new Integer((-3287));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(0.0F);
      homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(0.0F, (-3287), (-1294.7F));
      homeLight0.setWidth((-1294.7F));
      Float.valueOf(46.92762F);
      homeLight1.setHeight((-3692.0F));
      bigDecimal0.shortValueExact();
      homeLight0.clone();
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(4550.353F);
      homeLight0.isPointAt(4550.353F, (-2534.3955F), (-2534.3955F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getDescription();
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight0.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight0.isDeformable();
      homeLight0.isDeformable();
      homeLight0.intersectsRectangle(0.0F, 3247.858F, 180.65639F, 5.039188F);
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setNameAngle(3.8316722F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isBottomLeftPointAt(1.0F, (-1.0F), (-39.87959F));
      homeLight2.move(1825.765F, 3247.858F);
      homeLight1.isNameCenterPointAt(2336.5093F, 0.5F, (-39.87959F));
      homeLight1.getWidth();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(4550.353F);
      homeLight0.isPointAt(4550.353F, 4550.353F, 4550.353F);
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[10][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.setDescription("");
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight2.clone();
      float float0 = 1.0872087F;
      // Undeclared exception!
      try { 
        homeLight2.setHeight(1.0872087F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setNameAngle((-444.428F));
      HomeLight homeLight3 = homeLight2.clone();
      homeLight3.isBottomLeftPointAt(0.3926991F, 727.1881F, 2161.3F);
      homeLight0.move((-2189.0F), (-444.428F));
      homeLight0.isNameCenterPointAt(0.3926991F, (-1.0F), (-39.87959F));
      homeLight3.getWidth();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      homeLight0.isDeformable();
      homeLight0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.intersectsRectangle(1780.0F, 1780.0F, 1780.0F, 1780.0F);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";^UfO5CBvztd^K");
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isNameCenterPointAt(0.0F, (-1.0F), 1.0872087F);
      Level level0 = new Level("com.eteks.sweethome3d.model.HomePieceOfFurniture$19", (-191.3513F), 171.05252F, (-1.0F));
      homeLight1.setLevel(level0);
      homeLight2.isNameCenterPointAt(0.0F, 5012.94F, 0.0F);
      homeLight2.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Integer integer0 = new Integer(780754148);
      BigDecimal bigDecimal0 = new BigDecimal(780754148);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("").when(light0).getCurrency();
      doReturn((float)780754148).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn((float)780754148).when(light0).getElevation();
      doReturn((float)780754148).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)780754148).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setWidth(780754148);
      Integer.toUnsignedLong(780754148);
      homeLight0.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      bigDecimal0.scale();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt((-2189), (-2189), 0.0F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isDeformable();
      homeLight1.getStaircaseCutOutShape();
      homeLight0.getHeight();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("S!3x(s#|1@C").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn("S!3x(s#|1@C").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("S!3x(s#|1@C").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)1647).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Level level0 = new Level("KKGXy", 1639.0793F, 46.92762F, 46.92762F);
      level0.getHeight();
      homeLight0.isAtLevel(level0);
      homeLight0.getDepth();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBD").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("NAE.V/IBD").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.move(1647, 1647);
      homeLight0.setNameYOffset((-0.7851919F));
      homeLight0.setX(1647);
      homeLight0.isDeformable();
      homeLight0.isBottomRightPointAt(4550.353F, 4.29496499E9F, 4.29496499E9F);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.VSIBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)1647).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation(0.3926991F);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 1647);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VALUE_ADDED_TAX");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ".-BpzS{G>", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "UkVO<Vd20}");
      URLContent uRLContent0 = new URLContent(uRL2);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[5][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = (-1251.04F);
      floatArray1[2] = 3186.6F;
      floatArray1[3] = (-963.78F);
      floatArray1[4] = (-1251.04F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = 0.3926991F;
      floatArray2[1] = (-1251.04F);
      floatArray2[2] = (-1251.04F);
      floatArray2[3] = 0.3926991F;
      floatArray2[4] = 3186.6F;
      floatArray2[5] = 1530.7358F;
      floatArray2[6] = (-963.78F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 1530.7358F;
      floatArray3[1] = (-1251.04F);
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = (-963.78F);
      floatArray3[4] = 1530.7358F;
      floatArray3[5] = (-963.78F);
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = (-4558.278F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = (-4558.278F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = (-1251.04F);
      floatArray5[1] = (-1142.0F);
      floatArray5[2] = (-1251.04F);
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = new BigDecimal(3186.6F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(".-BpzS{G>", ".-BpzS{G>", ".-BpzS{G>", uRLContent0, uRLContent0, 3186.6F, (-1251.04F), 3186.6F, (-963.78F), true, 1530.7358F, (-963.78F), sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getAngle();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.setVisible(true);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setDescription("NAME_X_OFFSET");
      homeLight0.isBottomRightPointAt((-2189), 0.0F, 807.4F);
      homeLight0.getAngle();
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getElevation();
      homeLight0.isTopLeftPointAt(0.0F, (-2534.3955F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(1170.45F, 1170.45F, (-898.0F), (-930));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1170.45F, 3.4028235E38F, 3.4028235E38F, 1408);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(3.4028235E38F, (-930), 0.5F, 1408);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(3.4028235E38F, (-930), 3.4028235E38F, 2147479805);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(5.2831855F, 589.97327F, 1408, (-930));
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(0.5F, 1170.45F, (-87.0F), 9);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(0.0F, 0.0F, (-898.0F), 9);
      lightSourceArray0[6] = lightSource6;
      Integer integer0 = new Integer(2147479805);
      float[][] floatArray0 = new float[8][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-87.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) (-930);
      floatArray1[3] = (-87.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = 1170.45F;
      floatArray2[1] = (float) 1408;
      floatArray2[2] = (-898.0F);
      floatArray2[3] = (float) (-930);
      floatArray2[4] = 3.4028235E38F;
      floatArray2[5] = (float) (-930);
      floatArray2[6] = (-898.0F);
      floatArray2[7] = 1222.4078F;
      floatArray2[8] = (-898.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 1170.45F;
      floatArray3[1] = 1170.45F;
      floatArray3[2] = (float) 9;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = (-87.0F);
      floatArray4[1] = 1170.45F;
      floatArray4[2] = 1170.45F;
      floatArray4[3] = 5.2831855F;
      floatArray4[4] = (float) 2147479805;
      floatArray4[5] = (-87.0F);
      floatArray4[6] = 1170.45F;
      floatArray4[7] = 5.2831855F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      floatArray5[0] = (float) 9;
      floatArray5[1] = 5.2831855F;
      floatArray5[2] = 1222.4078F;
      floatArray5[3] = (float) 1408;
      floatArray5[4] = 0.0F;
      floatArray5[5] = (-1.0F);
      floatArray5[6] = 589.97327F;
      floatArray5[7] = 5.2831855F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (-87.0F);
      floatArray6[1] = (-1.0F);
      floatArray6[2] = 5.2831855F;
      floatArray6[3] = (-1658.44F);
      floatArray6[4] = (float) 2147479805;
      floatArray6[5] = 1222.4078F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      floatArray7[0] = (float) 1408;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[2];
      floatArray8[0] = (-87.0F);
      floatArray8[1] = (float) 2147479805;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(1222.4078F).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn(0.5F).when(light0).getElevation();
      doReturn(1170.45F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(3011.475F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(0.0F, 46.92762F, 46.92762F);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(false);
      homeLight1.isTopRightPointAt((-442.0959F), 42.89849F, 3.4028235E38F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(222.05F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      homeLight0.setAngle(1.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.containsPoint(2.9453228F, 46.92762F, 0.0F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight1.isTopRightPointAt(1.0F, (-211.44F), (-365.11188F));
      float float1 = (-1355.0681F);
      // Undeclared exception!
      try { 
        homeLight2.setWidth(3282.79F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(false);
      homeLight0.isTopRightPointAt((-1294.7F), (-3177.141F), (-1152.49F));
      homeLight0.setMovable(true);
      homeLight0.getLevel();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.5F, 1133.0F, 0.5F, 1);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-1.0F), 0.0F, (-1651), (Float) null);
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-4871));
      Object object0 = new Object();
      integer0.equals(object0);
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[3];
      floatArray1[1] = (float) (-4871);
      floatArray1[2] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (float) (-1651);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = 0.5F;
      floatArray2[3] = (-1697.465F);
      floatArray2[4] = 405.61002F;
      float[] floatArray3 = new float[0];
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray4[1] = 405.61002F;
      floatArray4[3] = (-1.0F);
      floatArray4[4] = 0.5F;
      floatArray4[5] = 0.5F;
      floatArray4[6] = (float) (-4871);
      floatArray0[3] = floatArray4;
      floatArray0[4] = floatArray0[1];
      float[] floatArray5 = new float[6];
      floatArray5[0] = (float) 1;
      floatArray5[1] = (float) 1;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = (float) (-4871);
      floatArray5[5] = (float) 1;
      floatArray0[5] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = (float) 1;
      floatArray6[1] = (-1697.465F);
      floatArray6[2] = (float) (-1651);
      floatArray6[3] = (-4871.0F);
      floatArray0[6] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = (float) (-1651);
      floatArray7[1] = 405.61002F;
      floatArray7[2] = (float) (-4871);
      floatArray7[3] = (float) (-1651);
      floatArray0[7] = floatArray7;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("").when(light0).getCurrency();
      doReturn((float)1).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn((float)(-1651)).when(light0).getElevation();
      doReturn(894.03754F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("3r`0`").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1854.279F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      Integer integer1 = Integer.valueOf(2146996182);
      Integer.remainderUnsigned(8192, 2);
      // Undeclared exception!
      try { 
        homeLight0.setColor(integer1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isPointAt(4550.353F, (-2534.3955F), (-2534.3955F));
      homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt(4550.353F, 4550.353F, (-2534.3955F));
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.setMovable(true);
      homeLight1.isResizable();
      homeLight1.isDeformable();
      homeLight0.setMovable(false);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setNameAngle(1.0F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight0.isBottomLeftPointAt(1.0F, (-1.0F), 1825.765F);
      homeLight2.move(1.0F, (-60.82742F));
      homeLight2.setNameVisible(false);
      homeLight0.setNameAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      LightSource lightSource0 = new LightSource(46.92762F, 46.92762F, 0.3926991F, (-783));
      homeLight0.intersectsRectangle(1780.0F, (-1289.9661F), 1780.0F, (-1289.9661F));
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight1.setNameAngle(1780.0F);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight1.isTopLeftPointAt(0.3926991F, 3.8316722F, 497.5697F);
      homeLight1.setNameXOffset(0.0F);
      homeLight2.getGroundElevation();
      homeLight2.getElevation();
      Random.setNextRandom((-68));
      homeLight2.getPrice();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      LightSource lightSource0 = new LightSource(22.942448F, 22.942448F, 0.3926991F, (-769));
      homeLight0.intersectsRectangle(1780.0F, (-1289.9661F), 1780.0F, (-1289.9661F));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";^UfO5CBvztd^K");
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = homeLight1.clone();
      homeLight0.move(3021.0F, 0.3926991F);
      HomeLight homeLight4 = homeLight3.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight2.isNameCenterPointAt(1.0872087F, 2.0F, 1.0872087F);
      homeLight0.getWidth();
      homeLight2.getStaircaseCutOutShape();
      homeLight4.clone();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(4550.353F);
      homeLight0.isPointAt(4550.353F, (-2534.3955F), (-2534.3955F));
      homeLight0.setVisible(false);
      homeLight0.setVisible(false);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.clone();
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.clone();
      homeLight1.isNameCenterPointAt((-730.92F), 2951.3213F, 233.3513F);
      homeLight2.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(0.0F, 46.92762F, 46.92762F);
      homeLight1.setName((String) null);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(true);
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.VSIBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(48.099163F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(48.099163F, 48.099163F, 1647);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(48.099163F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.setMovable(false);
      homeLight1.isResizable();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.isBottomLeftPointAt((-39.87959F), 1259.1572F, 1098.9723F);
      homeLight2.move((-39.87959F), (-363.16647F));
      homeLight2.isNameCenterPointAt(0.0F, (-39.87959F), 1334.494F);
      homeLight2.getWidth();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setVisible(false);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-1.0F), 46.92762F, 52.32F);
      homeLight0.setDepth(3022.828F);
      homeLight0.isTopLeftPointAt(3022.828F, 191.2F, (-638.3229F));
      homeLight0.setNameXOffset(46.92762F);
      homeLight1.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.getPlanIcon();
      homeLight1.getElevation();
      TextStyle textStyle0 = new TextStyle(2.9453228F, true, false);
      homeLight0.setAngle(3.8808222F);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("NAE.V/IBs").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBottomLeftPointAt(0.3926991F, 1647, 3429.2F);
      homeLight0.setMovable(true);
      homeLight1.getCurrency();
      // Undeclared exception!
      try { 
        homeLight1.getModelRotation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.clone();
      homeLight1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setDescription((String) null);
      homeLight2.isPointAt(67.4F, (-482.0F), (-574.8036F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight2.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight2.getStaircaseCutOutShape();
      Level level0 = new Level("~FnXm~", 837.127F, 0.5F, 837.127F);
      level0.getElevation();
      level0.getHeight();
      homeLight2.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(52.32F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("DEPTH").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setWidth(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameXOffset((-160.0F));
      homeLight1.getNameXOffset();
      homeLight0.isTopLeftPointAt(474.6F, (-2189), (-2189));
      homeLight0.setNameXOffset((-1.0F));
      homeLight0.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX_PERCENTAGE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("095nQ&=%@3<AD{[o").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(0.0F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setVisible(true);
      homeLight0.setWidth(46.92762F);
      homeLight1.isDeformable();
      homeLight0.setMovable(true);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameVisible(true);
      homeLight1.setNameAngle((-1294.7F));
      homeLight0.setNameXOffset((-2216.8F));
      homeLight1.getY();
      homeLight1.setElevation(2819.707F);
      homeLight0.getNameStyle();
      homeLight0.isNameCenterPointAt(52.32F, 0.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("S!3x(s#|1@C").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn("S!3x(s#|1@C").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("S!3x(s#|1@C").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)1647).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 1647);
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getTexture();
      // Undeclared exception!
      try { 
        homeLight0.setTexture((HomeTexture) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setWidth((-2189));
      Integer.toUnsignedLong((-2189));
      bigDecimal0.ulp();
      Float.valueOf((float) (-2189));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight2 = homeLight1.clone();
      Integer integer1 = new Integer(753);
      Integer integer2 = new Integer(0);
      integer1.equals(integer2);
      homeLight2.setColor(integer2);
      homeLight1.getColor();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      lightSourceArray0[0] = lightSource0;
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.VSIBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)1647).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomRightPointAt(1647, 1320.5F, 1702.2F);
      homeLight0.setX(412.38995F);
      homeLight0.isDeformable();
      homeLight0.isBottomRightPointAt(4550.353F, 412.38995F, 4.29496499E9F);
      homeLight0.setMovable(false);
      homeLight0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(1647, 1425.3369F, 1647);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 1647);
      homeLight0.setMovable(true);
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt((-1.0F), 46.92762F, 52.32F);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "java.version");
      homeLight0.setDepth(3022.828F);
      homeLight0.isTopLeftPointAt(3022.828F, 191.2F, (-638.3229F));
      Integer.toUnsignedString((-2143912972));
      homeLight0.setNameXOffset(46.92762F);
      homeLight1.getGroundElevation();
      homeLight0.getY();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeLight1.addPropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(0.5F, 0.5F, 0.5F, 1);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), (-1.0F), 0.0F, (-1651), (Float) null);
      lightSourceArray0[1] = lightSource1;
      Integer integer0 = new Integer((-4871));
      Object object0 = new Object();
      integer0.equals(object0);
      float[][] floatArray0 = new float[8][1];
      float[] floatArray1 = new float[3];
      floatArray1[1] = (float) (-4871);
      floatArray1[2] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (float) (-1651);
      floatArray2[1] = (-1.0F);
      floatArray2[2] = 0.5F;
      floatArray2[3] = (-1697.465F);
      floatArray2[4] = 405.61002F;
      float[] floatArray3 = new float[0];
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[7];
      floatArray1[0] = 0.0F;
      floatArray4[1] = 405.61002F;
      floatArray4[3] = (-1.0F);
      floatArray4[4] = 0.5F;
      floatArray4[5] = 0.5F;
      floatArray4[6] = (float) (-4871);
      floatArray0[3] = floatArray4;
      floatArray0[4] = floatArray0[1];
      float[] floatArray5 = new float[6];
      floatArray5[0] = (float) 1;
      floatArray5[1] = (float) 1;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = (float) (-4871);
      floatArray5[5] = (float) 1;
      floatArray0[5] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = (float) 1;
      floatArray6[1] = (-1697.465F);
      floatArray6[2] = (float) (-1651);
      floatArray0[6] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = (float) (-4871);
      floatArray7[1] = 405.61002F;
      floatArray7[2] = (float) (-4871);
      floatArray7[3] = (float) (-1651);
      floatArray0[7] = floatArray7;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("").when(light0).getCurrency();
      doReturn((float)1).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn((float)(-1651)).when(light0).getElevation();
      doReturn(894.03754F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("3r`0`").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1854.279F)).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      Integer.remainderUnsigned(8192, 2);
      homeLight0.setColor(integer0);
      homeLight0.getWidth();
      homeLight0.getPoints();
      homeLight0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomePieceOfFurniture.SortableProperty.values();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("jV`yPwhTe]tBfK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.jV`yPwhTe]tBfK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Integer integer0 = new Integer((-881));
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      float[][] floatArray0 = new float[9][7];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) (-881);
      floatArray1[1] = (float) (-881);
      floatArray1[2] = (float) (-881);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (float) (-881);
      floatArray2[2] = (float) (-881);
      floatArray2[3] = (float) (-881);
      floatArray2[4] = (float) (-881);
      floatArray2[5] = 1.0F;
      floatArray2[6] = (float) (-881);
      floatArray2[7] = (float) (-881);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[1];
      floatArray3[0] = (float) (-881);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = (float) (-881);
      floatArray4[1] = 1.0F;
      floatArray4[2] = (float) (-881);
      floatArray4[3] = (float) (-881);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 1.0F;
      floatArray5[1] = (float) (-881);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = (-1538.573F);
      floatArray6[1] = (float) (-881);
      floatArray6[2] = (float) (-881);
      floatArray6[3] = 1.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[3];
      floatArray7[0] = 1.0F;
      floatArray7[1] = (-1538.573F);
      floatArray7[2] = (-1538.573F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[5];
      floatArray8[0] = (-1538.573F);
      floatArray8[1] = (-1538.573F);
      floatArray8[2] = (-1538.573F);
      floatArray8[3] = (float) (-881);
      floatArray8[4] = (-1538.573F);
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[0];
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("com.eteks.sweethome3d.model.HomePieceOfFurniture$19").when(light0).getCurrency();
      doReturn((float)(-881)).when(light0).getDepth();
      doReturn("XX Y/Cp:`$C%h1cvkSa").when(light0).getDescription();
      doReturn((float)(-881)).when(light0).getElevation();
      doReturn((float)(-881)).when(light0).getHeight();
      doReturn(resourceURLContent0).when(light0).getIcon();
      doReturn(resourceURLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("XX Y/Cp:`$C%h1cvkSa").when(light0).getName();
      doReturn(resourceURLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("POWER").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      homeLight0.setAngle(46.92762F);
      float float1 = 0.3926991F;
      float float2 = 1380.4F;
      LightSource lightSource0 = new LightSource(46.92762F, 725.91925F, 1380.4F, (-3294));
      Float float3 = new Float((double) (-783));
      homeLight0.setElevation(0.3926991F);
      homeLight0.setWidth((-783));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      // Undeclared exception!
      try { 
        homeLight1.setShininess(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      TextStyle textStyle0 = new TextStyle(13.442006F, true, true);
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(true);
      homeLight0.setNameStyle(textStyle1);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "com.eteks.sweethome3d.model.HomeLight");
      homeLight0.isBottomRightPointAt(13.442006F, 3.4028235E38F, 3.4028235E38F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.setVisible(true);
      homeLight0.isTopRightPointAt((-1.0F), (-1.0F), (-2345.0F));
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getCurrency();
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("");
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setAngle(0.0F);
      homeLight2.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.move(1554.6418F, 1554.6418F);
      Integer.min(2146862826, 2571);
      homeLight0.setNameYOffset((-1.0F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setX(1554.6418F);
      homeLight1.isDeformable();
      Integer.divideUnsigned(1647, 1647);
      homeLight1.isBottomRightPointAt(4550.353F, 4.29496499E9F, 4.29496499E9F);
      homeLight1.getNameStyle();
      homeLight1.getNameYOffset();
      homeLight0.isBottomLeftPointAt((-1.0F), (-1.0F), 4550.353F);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(22.942448F);
      LightSource lightSource0 = new LightSource(22.942448F, 22.942448F, 0.3926991F, (-799));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setName("PX1");
      homeLight0.setVisible(true);
      homeLight1.isTopRightPointAt(2206.0F, 2206.0F, 22.942448F);
      homeLight0.isDeformable();
      homeLight1.isBottomLeftPointAt(0.3926991F, 1908.5673F, 0.3926991F);
      homeLight0.getStaircaseCutOutShape();
      homeLight1.getName();
      homeLight1.getDescription();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource((-1456.472F), (-1456.472F), (-1834.02F), 17);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, (-1456.472F), (-4656));
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-1834.02F), 0.3926991F, (-4656), (-1));
      lightSourceArray0[2] = lightSource2;
      Float float0 = new Float(1134466.2258634046);
      LightSource lightSource3 = new LightSource(0.3926991F, 0.0F, 0.3926991F, (-4656), float0);
      lightSourceArray0[3] = lightSource3;
      Integer integer0 = new Integer((-4656));
      URL uRL0 = MockURL.getFtpExample();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL1 = MockURL.URL(uRL0, ".-BpzS{G>", uRLStreamHandler0);
      URL uRL2 = MockURL.URL(uRL1, "UkVO<Vd20}");
      URLContent uRLContent0 = new URLContent(uRL2);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = mock(Sash.class, new ViolatedAssumptionAnswer());
      sashArray0[0] = sash0;
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[5][8];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = (-1251.04F);
      floatArray1[2] = 3186.6F;
      floatArray1[3] = (-963.78F);
      floatArray1[4] = (-1251.04F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = 0.3926991F;
      floatArray2[1] = (-1251.04F);
      floatArray2[2] = (-1251.04F);
      floatArray2[3] = 0.3926991F;
      floatArray2[4] = 3186.6F;
      floatArray2[5] = 1530.7358F;
      floatArray2[6] = (-963.78F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 1530.7358F;
      floatArray3[1] = (-1251.04F);
      floatArray3[2] = 0.3926991F;
      floatArray3[3] = (-963.78F);
      floatArray3[4] = 1530.7358F;
      floatArray3[5] = (-963.78F);
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = (-4558.278F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = (-4558.278F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = (-1251.04F);
      floatArray5[1] = (-1142.0F);
      floatArray5[2] = (-1251.04F);
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = new BigDecimal(3186.6F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(".-BpzS{G>", ".-BpzS{G>", ".-BpzS{G>", uRLContent0, uRLContent0, 3186.6F, (-1251.04F), 3186.6F, (-963.78F), true, 1530.7358F, (-963.78F), sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      catalogDoorOrWindow0.getWallThickness();
      catalogDoorOrWindow0.getWallDistance();
      catalogDoorOrWindow0.getSashes();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Content content0 = homeDoorOrWindow1.getIcon();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("uHU7b").when(light0).getCurrency();
      doReturn(2.0F).when(light0).getDepth();
      doReturn("uHU7b").when(light0).getDescription();
      doReturn(2.0F).when(light0).getElevation();
      doReturn(1.858558F).when(light0).getHeight();
      doReturn(content0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn(".-BpzS{G>").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(".-BpzS{G>").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-3694.41F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(4154.556F);
      homeLight0.setNameYOffset(1019.262F);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight1.isPointAt(3247.858F, 1474.575F, 3247.858F);
      homeLight2.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight1.isTopRightPointAt(0.0F, 1019.262F, 0.0F);
      homeLight1.setWidth(0.0F);
      HomeLight homeLight3 = new HomeLight(homeLight0);
      homeLight3.isDeformable();
      homeLight1.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.getPlanIcon();
      homeLight0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.isTopLeftPointAt(1.0F, (-1743.0F), (-1294.7F));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(52.32F);
      homeLight0.setNameYOffset(52.32F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setVisible(true);
      homeLight0.setWidth(0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.getStaircaseCutOutShape();
      homeLight1.setNameVisible(false);
      homeLight1.setNameAngle(3.8808222F);
      homeLight0.move((-2189), (-1294.7F));
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(4550.353F);
      homeLight0.setNameAngle(1000.0946F);
      homeLight0.isPointAt((-2534.3955F), 4550.353F, (-2534.3955F));
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getModel();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[10][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.setVisible(false);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getColor();
      homeLight0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      float float0 = 46.92762F;
      homeLight0.setNameVisible(false);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight0.setDepth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.clone();
      homeLight0.setNameStyle((TextStyle) null);
      homeLight0.setVisible(false);
      homeLight0.isResizable();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.isResizable();
      homeLight1.isDeformable();
      homeLight0.setMovable(false);
      homeLight1.isTopRightPointAt(1334.494F, 0.0F, 0.0F);
      HomePieceOfFurniture.Property.values();
      homeLight1.getX();
      homeLight1.setElevation(3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Integer.toUnsignedLong((-2189));
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      homeLight1.getY();
      homeLight1.setName("com.eteks.sweethome3d.model.Level");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setMovable(false);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      Integer.compareUnsigned((-2189), (-2147398837));
      BigDecimal bigDecimal1 = homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 172.8203F);
      homeLight0.setWidth(46.92762F);
      Integer.toUnsignedLong((-2189));
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBottomRightPointAt(0.0F, (-2189), (-2189));
      homeLight1.setModelMirrored(true);
      homeLight1.setShininess(float0);
      homeLight0.getGroundElevation();
      bigDecimal0.multiply(bigDecimal1);
      homeLight1.getY();
      homeLight1.setName("NAME_X_OFFSET");
      homeLight1.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setModelMirrored(false);
      HomeLight homeLight2 = homeLight1.clone();
      homeLight2.setShininess((Float) null);
      homeLight0.getGroundElevation();
      homeLight1.getY();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameVisible(true);
      homeLight0.setAngle(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("c/}cg#]$Ww`7");
      homeLight1.isTopRightPointAt(3773.9988F, 0.0F, 46.92762F);
      // Undeclared exception!
      try { 
        homeLight1.setDepth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setY(4387.8315F);
      homeLight0.isPointAt(4550.353F, (-2534.3955F), (-2534.3955F));
      homeLight0.setVisible(false);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isDeformable();
      homeLight0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.setDescription("");
      homeLight0.setDescription("");
      homeLight0.setName("com.eteks.sweethome3d.model.HomePieceOfFurniture$5");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.getPlanIcon();
      homeLight1.getElevation();
      TextStyle textStyle0 = new TextStyle(2.9453228F, true, false);
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(false);
      TextStyle textStyle2 = textStyle1.deriveStyle(2.9453228F);
      homeLight1.setNameStyle(textStyle2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopRightPointAt((-1294.7F), (-2189), 566.76F);
      homeLight1.setDepth((-2167.2146F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopLeftPointAt(514.6601F, 3022.828F, (-2189));
      homeLight2.setNameXOffset(191.2F);
      homeLight1.getGroundElevation();
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(0.0F, 0.0F, 1647);
      homeLight0.setMovable(true);
      homeLight0.getDescription();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(61.981F, 61.981F, 61.981F, 2);
      lightSourceArray0[0] = lightSource0;
      Float.floatToIntBits(0.0F);
      LightSource lightSource1 = new LightSource((-858.9F), 2, 2, 2, (Float) 0.0F);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-858.9F), (-858.9F), (-858.9F), 2);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(61.981F, 61.981F, 0.0F, 2, (Float) null);
      lightSourceArray0[3] = lightSource3;
      Float.floatToIntBits((-1001.2885F));
      Float.floatToIntBits(533.52747F);
      Float.floatToIntBits(0.0F);
      LightSource lightSource4 = new LightSource(0, 760.0F, 974.22845F, 1923, (Float) 0.0F);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(0.0F, 1923, 1141203394, 2149);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(974.22845F, 1923, 0, 19);
      LightSource lightSource7 = new LightSource(0.0F, (-2077.171F), (-1001.2885F), 2147479805);
      lightSourceArray0[7] = lightSource7;
      Integer integer0 = new Integer((-431));
      MockURL.getFileExample();
      float[][] floatArray0 = new float[8][9];
      float[] floatArray1 = new float[3];
      floatArray1[0] = (float) 1141203394;
      floatArray1[1] = (float) 0;
      floatArray1[2] = (float) (-998616457);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (-2077.171F);
      floatArray2[1] = (float) (-998616457);
      floatArray2[2] = 0.0F;
      floatArray2[3] = (float) (-998616457);
      floatArray2[4] = (-2077.171F);
      floatArray2[5] = 974.22845F;
      floatArray2[6] = (float) 1141203394;
      floatArray2[7] = (float) (-998616457);
      floatArray2[8] = (-2077.171F);
      floatArray0[1] = floatArray2;
      floatArray0[2] = floatArray1;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 533.52747F;
      floatArray3[1] = (float) (-431);
      floatArray3[2] = 0.0F;
      floatArray0[3] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (float) 0;
      floatArray4[1] = (float) 1141203394;
      floatArray0[5] = floatArray1;
      float[] floatArray5 = new float[6];
      floatArray5[0] = (-1001.2885F);
      floatArray5[1] = (-1001.2885F);
      floatArray5[2] = 974.22845F;
      floatArray5[3] = (-858.9F);
      floatArray5[4] = 0.0F;
      floatArray5[5] = (float) 2;
      floatArray0[6] = floatArray5;
      floatArray0[7] = floatArray2;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.clone();
      homeLight0.isBottomRightPointAt(2.0F, 150.915F, (-9.9861645E8F));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.clone();
      LightSource lightSource0 = new LightSource(0.3926991F, (-1294.7F), (-496.377F), (-1113));
      LightSource lightSource1 = new LightSource((-1254.8304F), (-496.377F), (-803.0F), (-783));
      Float float0 = new Float((double) (-5928.8F));
      LightSource lightSource2 = new LightSource(0.0F, 0.0F, 3.4028235E38F, 3, float0);
      Level level0 = mock(Level.class, new ViolatedAssumptionAnswer());
      homeLight0.setLevel(level0);
      Integer integer0 = new Integer((-1000));
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, (-1976.3445F));
      homeLight1.setNameStyle((TextStyle) null);
      homeLight2.setMovable(false);
      homeLight0.getNameXOffset();
      homeLight2.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight3.isBottomRightPointAt((-1976.3445F), 1.0309969F, 1.0F);
      homeLight3.setNameXOffset(0.0F);
      homeLight1.getGroundElevation();
      homeLight2.getY();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.getNameXOffset();
      homeLight0.isTopLeftPointAt(0.3926991F, 46.92762F, 451.93457F);
      homeLight0.setNameXOffset(451.93457F);
      homeLight0.getY();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.getY();
      homeLight0.setName("com.eteks.sweethome3d.model.Level");
      HomeLight homeLight1 = homeLight0.clone();
      Float float0 = new Float(1.0);
      homeLight1.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      LightSource lightSource0 = new LightSource(0.3926991F, (-1294.7F), (-496.377F), (-1113));
      LightSource lightSource1 = new LightSource((-1254.8304F), (-496.377F), (-803.0F), (-783));
      Float float0 = new Float((double) (-5928.8F));
      homeLight0.setElevation((-1658.44F));
      LightSource lightSource2 = new LightSource(3.4028235E38F, 0.0F, (-496.377F), 3);
      Integer integer0 = new Integer((-1000));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight1.getIcon();
      homeLight0.getNameStyle();
      homeLight0.setNameStyle((TextStyle) null);
      homeLight2.setAngle(46.92762F);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight3 = null;
      try {
        homeLight3 = new HomeLight(homeLight2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("NAE.V/IBs").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isBottomLeftPointAt(0.3926991F, 1647, 3429.2F);
      homeLight1.move(2120.25F, 2073.0F);
      homeLight0.getWidth();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((-1294.7F)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Integer.toUnsignedLong((-2189));
      Float.valueOf(1747.0F);
      homeLight0.isNameCenterPointAt((-815.497F), 0.0F, 0.5F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isMovable();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource(0.0F, 1.0F, 0.0F, 2667);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1.0F, 0.0F, 2.0F, 2667);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-358.58978F), 241.0F, (-358.58978F), (-2145826254));
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-4138.3F), 1523.0F, 1.0F, (-2145826254));
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource((-4394.0F), 0.3926991F, 1976.3445F, 2667);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource((-4394.0F), 1692.2F, (-1.0F), (-2145826254));
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource((-4154.7285F), 0.3926991F, 3059.0F, 2667);
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(1523.0F, (-2137.308F), 3059.0F, 2667);
      lightSourceArray0[7] = lightSource7;
      Integer integer0 = new Integer(1);
      integer0.equals("?|c|,");
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(0.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setDescription("c/}cg#]$Ww`7");
      homeLight1.setName("c/}cg#]$Ww`7");
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.isTopRightPointAt(0.0F, 0.0F, 3773.9988F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(0.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getGroundElevation();
      homeLight1.getPrice();
      homeLight0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setElevation(0.3926991F);
      homeLight0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBD").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("NAE.V/IBD").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(0.3926991F, 0.3926991F, 1647);
      homeLight0.move(6.89F, 6.89F);
      homeLight0.setNameYOffset((-1.0F));
      homeLight0.setX(6.89F);
      homeLight0.isDeformable();
      homeLight0.isBottomRightPointAt(4550.353F, 4.29496499E9F, 4.29496499E9F);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.clone();
      homeLight0.getPriceValueAddedTaxIncluded();
      // Undeclared exception!
      try { 
        homeLight0.getModelRotation();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameYOffset(4550.353F);
      homeLight0.isPointAt((-2534.3955F), 4550.353F, (-2534.3955F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.isNameCenterPointAt(2.9453228F, (-1.0F), 2.9453228F);
      homeLight2.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(0.0F, 46.92762F, 46.92762F);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(true);
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      // Undeclared exception!
      try { 
        homeLight1.setWidth(46.92762F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, " doesn't contain texture ");
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.isDeformable();
      homeLight0.setMovable(true);
      homeLight0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[4];
      LightSource lightSource0 = new LightSource((-2001.2F), 0.3926991F, (-268.0F), 2146508503);
      lightSourceArray0[0] = lightSource0;
      Float.compare((-515.8543F), 2.0F);
      LightSource lightSource1 = new LightSource((-2001.2F), 2146508503, 2.9453228F, 2146508503, (Float) 2.0F);
      lightSourceArray0[1] = lightSource1;
      Float float0 = new Float((double) (-2001.2F));
      LightSource lightSource2 = new LightSource(0.3926991F, (-637.91F), 0.0F, 2146508503, float0);
      lightSourceArray0[2] = lightSource2;
      Float float1 = new Float((-1090.0F));
      LightSource lightSource3 = new LightSource(0.0F, 148.10117F, (-389.0F), (-445), float1);
      lightSourceArray0[3] = lightSource3;
      Integer integer0 = Integer.valueOf(11);
      float[][] floatArray0 = new float[1][0];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 1161.97F;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = new BigDecimal((-1289L));
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("@DZ#l%k_").when(light0).getCurrency();
      doReturn(3.0891597F).when(light0).getDepth();
      doReturn("@DZ#l%k_").when(light0).getDescription();
      doReturn((float)(-445)).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("t7Dy}").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("t7Dy}").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(1161.97F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(0.0F, 46.92762F, 46.92762F);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(false);
      homeLight1.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight1.setWidth(46.92762F);
      homeLight1.isDeformable();
      homeLight0.isDeformable();
      homeLight0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(82.63204F).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-2189));
      homeLight0.setNameYOffset(3022.828F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.isTopRightPointAt((-2189), (-2189), 566.76F);
      homeLight1.setDepth((-2167.2146F));
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.isTopLeftPointAt(514.6601F, 3022.828F, (-2189));
      homeLight2.setNameXOffset(191.2F);
      homeLight1.getGroundElevation();
      homeLight0.getY();
      homeLight0.clone();
      homeLight1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[1][0];
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      bigDecimal0.toString();
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("LEVEL").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(0.3926991F, 0.3926991F, 0.0F);
      homeLight0.setMovable(false);
      homeLight0.getDescription();
      homeLight0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.isBottomLeftPointAt((-1.0F), 3.4028235E38F, 3.4028235E38F);
      // Undeclared exception!
      try { 
        homeLight1.getModelRotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isBottomLeftPointAt(689.5437F, 997.94244F, 689.5437F);
      homeLight0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setVisible(true);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      homeLight0.clone();
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.setMovable(false);
      homeLight1.isResizable();
      homeLight1.isTopLeftPointAt(1334.494F, 1.0F, (-1743.0F));
      homeLight1.setNameXOffset(0.0F);
      homeLight0.getGroundElevation();
      homeLight1.getElevation();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(0.0F, 0.0F, 0.0F, 1965);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1965, 1965, (-2424.857F), 1965);
      lightSourceArray0[1] = lightSource1;
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "C;Ogc|9h");
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, true);
      float[][] floatArray0 = new float[7][4];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-2836.35F);
      floatArray1[1] = 1976.3445F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = 0.0F;
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (-2424.857F);
      floatArray2[3] = (float) 1965;
      floatArray2[4] = (float) 9;
      floatArray2[5] = 1976.3445F;
      floatArray2[6] = (-2424.857F);
      floatArray2[7] = (-2836.35F);
      floatArray2[8] = (float) 1965;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      floatArray3[0] = 1976.3445F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 1976.3445F;
      floatArray3[3] = (float) 1965;
      floatArray3[4] = 1976.3445F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[4];
      floatArray4[0] = (-2836.35F);
      floatArray4[1] = (-2836.35F);
      floatArray4[2] = (-2836.35F);
      floatArray4[3] = (-2424.857F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = (float) 9;
      floatArray5[1] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[2];
      floatArray6[0] = 1976.3445F;
      floatArray6[1] = (float) 9;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[6];
      floatArray7[0] = (float) 9;
      floatArray7[1] = (float) 1965;
      floatArray7[2] = 1976.3445F;
      floatArray7[3] = (-2836.35F);
      floatArray7[4] = (-1.0F);
      floatArray7[5] = 0.0F;
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal0 = new BigDecimal((-1517));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogLight catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1976.3445F, (-2424.857F), (-2424.857F), (-2836.35F), true, lightSourceArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("C;Ogc|9h", propertyChangeListener0);
      homeLight1.removePropertyChangeListener(propertyChangeListenerProxy0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[0];
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getModel();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(2641.0F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.isTopLeftPointAt(1647, 1127.26F, 2641.0F);
      homeLight0.setColor(integer0);
      homeLight0.setX(1127.26F);
      homeLight0.setHeight(2.9453228F);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[8];
      Float float0 = new Float(1.0);
      LightSource lightSource0 = new LightSource(46.92762F, 46.92762F, 46.92762F, 2966, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(2966, 1.0F, 1.0F, 2966, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(46.92762F, 1.0F, 46.92762F, (-2323), float0);
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(0.3926991F, 0.3926991F, 0.3926991F, 1647);
      Integer integer0 = new Integer(1647);
      float[][] floatArray0 = new float[0][0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAE.V/IBs").when(light0).getCurrency();
      doReturn(0.3926991F).when(light0).getDepth();
      doReturn(" doesn't contain piece ").when(light0).getDescription();
      doReturn(0.3926991F).when(light0).getElevation();
      doReturn((float)1647).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("NAE.V/IBs").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn(" doesn't contain piece ").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(0.3926991F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.getValueAddedTax();
      homeLight0.isBottomLeftPointAt(0.3926991F, 1647, 3429.2F);
      homeLight0.setMovable(true);
      homeLight1.getHeight();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setName((String) null);
      homeLight0.isTopRightPointAt(204.16F, 204.16F, 497.5697F);
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setNameVisible(true);
      // Undeclared exception!
      try { 
        homeLight1.setWidth((-1255.06F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Integer integer0 = new Integer(780754148);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)780754148).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)780754148).when(light0).getElevation();
      doReturn((float)780754148).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)780754148).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setWidth(780754148);
      Integer.toUnsignedLong(780754148);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight1.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float float0 = Float.valueOf(1747.0F);
      homeLight0.setHeight((-1435.8F));
      bigDecimal0.shortValueExact();
      HomeLight homeLight1 = homeLight0.clone();
      // Undeclared exception!
      try { 
        homeLight1.setShininess(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.setWidth(46.92762F);
      Float float0 = Float.valueOf(1747.0F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setModelMirrored(false);
      // Undeclared exception!
      try { 
        homeLight1.setShininess(float0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setLevel((Level) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, (-1976.3445F));
      // Undeclared exception!
      try { 
        homeLight2.setWidth((-1355.0681F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setVisible(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isDeformable();
      Integer integer1 = new Integer((-2189));
      homeLight0.setColor(integer1);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      LightSource lightSource0 = new LightSource(22.942448F, 22.942448F, 0.3926991F, (-769));
      homeLight0.intersectsRectangle(1799.446F, (-1289.9661F), 1799.446F, (-1289.9661F));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";^UfO5CBvztd^K");
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.move(3021.0F, 0.3926991F);
      HomeLight homeLight3 = homeLight2.clone();
      homeLight1.isBottomLeftPointAt(1.0F, 22.942448F, (-1289.9661F));
      homeLight3.isNameCenterPointAt((-1.0F), 3021.0F, 1.0872087F);
      homeLight2.isNameCenterPointAt(1.0872087F, 2.0F, 1.0872087F);
      homeLight0.getWidth();
      homeLight2.getStaircaseCutOutShape();
      homeLight3.isVisible();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(22.942448F);
      LightSource lightSource0 = new LightSource(22.942448F, 22.942448F, 0.3926991F, (-783));
      homeLight0.intersectsRectangle(1780.0F, (-1289.9661F), 1780.0F, (-1289.9661F));
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, ";^UfO5CBvztd^K");
      homeLight0.setMovable(false);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getStaircaseCutOutShape();
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.setNameAngle(2.0F);
      HomeLight homeLight3 = homeLight1.clone();
      homeLight0.move(3021.0F, 3.8316722F);
      HomeLight homeLight4 = homeLight3.clone();
      homeLight4.isNameCenterPointAt((-1.0F), 3021.0F, 0.0F);
      homeLight2.isNameCenterPointAt(0.0F, 2.0F, 0.0F);
      homeLight0.getWidth();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight1.clone();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, (-1976.3445F));
      // Undeclared exception!
      try { 
        homeLight2.setWidth((-1330.4332F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((float)(-2189)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn((float)(-2189)).when(light0).getElevation();
      doReturn((float)(-2189)).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("com.eteks.sweethome3d.model.Level").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((float)(-2189)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(true).when(light0).isTexturable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.getTexture();
      homeLight0.setTexture((HomeTexture) null);
      homeLight0.getPriceValueAddedTaxIncluded();
      homeLight0.setVisible(true);
      homeLight0.setWidth((-2189));
      homeLight0.isDeformable();
      homeLight0.getStaircaseCutOutShape();
      homeLight0.getStaircaseCutOutShape();
      // Undeclared exception!
      try { 
        homeLight0.getModelRotation();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setDescription((String) null);
      homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      HomeLight homeLight1 = homeLight0.clone();
      homeLight0.setNameAngle(0.0F);
      homeLight1.setDescription((String) null);
      float float0 = 136.69F;
      homeLight0.isTopRightPointAt((-2043.0F), 136.69F, (-1.0F));
      HomeLight homeLight2 = null;
      try {
        homeLight2 = new HomeLight(homeLight1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset((-1.0F));
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(1397.3F, 46.92762F, (-2534.3955F));
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight0.isBottomLeftPointAt(0.5F, 2.0F, 0.0F);
      homeLight0.move((-2534.3955F), 0.0F);
      homeLight0.isNameCenterPointAt((-2107.0F), 0.0F, 1.0F);
      homeLight0.getWidth();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.isResizable();
      homeLight1.isDeformable();
      homeLight1.intersectsRectangle(0.0F, 0.0F, 2.9453228F, 3247.858F);
      homeLight0.setMovable(false);
      homeLight1.getStaircaseCutOutShape();
      homeLight0.setNameAngle(1.0F);
      HomeLight homeLight2 = homeLight0.clone();
      homeLight2.move(1.0F, (-60.82742F));
      homeLight2.isNameCenterPointAt(0.5F, (-60.82742F), (-3838.493F));
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Class<HomePieceOfFurniture> class0 = HomePieceOfFurniture.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "", true);
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(3.4028235E38F, 0.0F, 1992.0F, 1992.0F, 2671.854F);
      sashArray0[0] = sash0;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("1T#g:C|v", "1T#g:C|v", "1T#g:C|v", resourceURLContent0, resourceURLContent0, resourceURLContent1, 1637.44F, 1637.44F, 1637.44F, 1637.44F, true, 1637.44F, 1637.44F, sashArray0, (float[][]) null, "1T#g:C|v", true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getModel();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      Float float0 = new Float((-1.0));
      float0.floatValue();
      LightSource lightSource0 = new LightSource(1764.3451F, (-1.0F), 1764.6283F, 854, (Float) (-1.0F));
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float((double) (-2806));
      LightSource lightSource1 = new LightSource(1764.6283F, 1764.3451F, (-2505.7102F), (-2806), float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(3.8808222F, 65.305725F, (-1.0F), 2147481057, float1);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(0.0F, 854, 65.305725F, 2147481057, float0);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(1764.6283F, 996.0F, 2147481057, 2147481057, float1);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(996.0F, 592.22F, (-1.0F), (-2434), float0);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource((-248.9F), 592.22F, 65.305725F, 3550, float0);
      lightSourceArray0[6] = lightSource6;
      Integer integer0 = new Integer(2);
      Object object0 = new Object();
      integer0.equals(object0);
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float[][] floatArray0 = new float[0][8];
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("os.name").when(light0).getCurrency();
      doReturn((float)854).when(light0).getDepth();
      doReturn("os.name").when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn((-540.1F)).when(light0).getHeight();
      doReturn(uRLContent0).when(light0).getIcon();
      doReturn(uRLContent0).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn("PRICE").when(light0).getName();
      doReturn(uRLContent0).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("PRICE").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(1764.3451F).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle((-1.0F));
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = null;
      try {
        homeLight1 = new HomeLight(homeLight0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(2.9453228F);
      HomeLight homeLight1 = homeLight0.clone();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      homeLight1.isTopRightPointAt(2.9453228F, 2.9453228F, 0.0F);
      homeLight1.isDeformable();
      homeLight1.setMovable(true);
      homeLight1.isResizable();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      homeLight1.isTopLeftPointAt(1334.494F, 1.0F, (-1743.0F));
      homeLight1.setNameXOffset(0.0F);
      homeLight0.getGroundElevation();
      homeLight0.getY();
      homeLight0.getIcon();
      homeLight1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(1170.45F, 1170.45F, (-898.0F), (-930));
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1170.45F, 3.4028235E38F, 3.4028235E38F, 1408);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(3.4028235E38F, (-930), 0.5F, 1408);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(3.4028235E38F, (-930), 3.4028235E38F, 2147479805);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(5.2831855F, 589.97327F, 1408, (-930));
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(0.5F, 1170.45F, (-87.0F), 9);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(0.0F, 0.0F, (-898.0F), 9);
      lightSourceArray0[6] = lightSource6;
      Integer integer0 = new Integer(2147479805);
      float[][] floatArray0 = new float[8][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-87.0F);
      floatArray1[1] = 0.0F;
      floatArray1[2] = (float) (-930);
      floatArray1[3] = (-87.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = 1170.45F;
      floatArray2[1] = (float) 1408;
      floatArray2[2] = (-898.0F);
      floatArray2[3] = (float) (-930);
      floatArray2[4] = 3.4028235E38F;
      floatArray2[5] = (float) (-930);
      floatArray2[6] = (-898.0F);
      floatArray2[7] = 1222.4078F;
      floatArray2[8] = (-898.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 1170.45F;
      floatArray3[1] = 1170.45F;
      floatArray3[2] = (float) 9;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[8];
      floatArray4[0] = (-87.0F);
      floatArray4[1] = 1170.45F;
      floatArray4[2] = 1170.45F;
      floatArray4[3] = 5.2831855F;
      floatArray4[4] = (float) 2147479805;
      floatArray4[5] = (-87.0F);
      floatArray4[6] = 1170.45F;
      floatArray4[7] = 5.2831855F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[8];
      floatArray5[0] = (float) 9;
      floatArray5[1] = 5.2831855F;
      floatArray5[2] = 1222.4078F;
      floatArray5[3] = (float) 1408;
      floatArray5[4] = 0.0F;
      floatArray5[5] = (-1.0F);
      floatArray5[6] = 589.97327F;
      floatArray5[7] = 5.2831855F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = (-87.0F);
      floatArray6[1] = (-1.0F);
      floatArray6[2] = 5.2831855F;
      floatArray6[3] = (-1658.44F);
      floatArray6[4] = (float) 2147479805;
      floatArray6[5] = 1222.4078F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[1];
      floatArray7[0] = (float) 1408;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[2];
      floatArray8[0] = (-87.0F);
      floatArray8[1] = (float) 2147479805;
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = new BigDecimal(21.99056503610246);
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn(lightSourceArray0).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(1222.4078F).when(light0).getDepth();
      doReturn("").when(light0).getDescription();
      doReturn(0.5F).when(light0).getElevation();
      doReturn(1170.45F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn(floatArray0).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn(3011.475F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.isPointAt(0.0F, 46.92762F, 46.92762F);
      homeLight1.getPriceValueAddedTaxIncluded();
      homeLight1.setVisible(false);
      homeLight1.isTopRightPointAt((-442.0959F), 42.89849F, 3.4028235E38F);
      // Undeclared exception!
      try { 
        homeLight0.setWidth(222.05F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setNameVisible(false);
      boolean boolean0 = homeLight0.isBottomLeftPointAt(689.5437F, 997.94244F, 689.5437F);
      assertFalse(boolean0);
      
      homeLight0.setMovable(false);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals(0.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn((Integer) null).when(light0).getColor();
      doReturn((String) null).when(light0).getCurrency();
      doReturn(0.0F).when(light0).getDepth();
      doReturn((String) null).when(light0).getDescription();
      doReturn(0.0F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn((String) null).when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn((BigDecimal) null).when(light0).getPrice();
      doReturn((String) null).when(light0).getStaircaseCutOutShape();
      doReturn((BigDecimal) null).when(light0).getValueAddedTaxPercentage();
      doReturn(0.0F).when(light0).getWidth();
      doReturn(false).when(light0).isBackFaceShown();
      doReturn(false).when(light0).isDeformable();
      doReturn(false).when(light0).isDoorOrWindow();
      doReturn(false).when(light0).isMovable();
      doReturn(false).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      HomeLight homeLight1 = homeLight0.clone();
      HomeLight homeLight2 = homeLight0.clone();
      HomeLight homeLight3 = homeLight2.clone();
      homeLight1.getStaircaseCutOutShape();
      homeLight2.clone();
      boolean boolean0 = homeLight3.isNameCenterPointAt(19.720387F, (-1.0F), 19.720387F);
      assertTrue(boolean0);
      assertEquals(0.0F, homeLight3.getX(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeLight3.getY(), 0.01F);
      assertEquals(0.0F, homeLight3.getNameYOffset(), 0.01F);
      assertNotSame(homeLight3, homeLight1);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Integer integer0 = new Integer((-2189));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "+SWp@");
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Light light0 = mock(Light.class, new ViolatedAssumptionAnswer());
      doReturn((LightSource[]) null).when(light0).getLightSources();
      doReturn(integer0).when(light0).getColor();
      doReturn("NAME_X_OFFSET").when(light0).getCurrency();
      doReturn((-1294.7F)).when(light0).getDepth();
      doReturn("NAME_X_OFFSET").when(light0).getDescription();
      doReturn(52.32F).when(light0).getElevation();
      doReturn(0.0F).when(light0).getHeight();
      doReturn((Content) null).when(light0).getIcon();
      doReturn((Content) null).when(light0).getModel();
      doReturn((float[][]) null).when(light0).getModelRotation();
      doReturn("NAME_X_OFFSET").when(light0).getName();
      doReturn((Content) null).when(light0).getPlanIcon();
      doReturn(bigDecimal0).when(light0).getPrice();
      doReturn("NAME_X_OFFSET").when(light0).getStaircaseCutOutShape();
      doReturn(bigDecimal0).when(light0).getValueAddedTaxPercentage();
      doReturn((-1294.7F)).when(light0).getWidth();
      doReturn(true).when(light0).isBackFaceShown();
      doReturn(true).when(light0).isDeformable();
      doReturn(true).when(light0).isDoorOrWindow();
      doReturn(true).when(light0).isMovable();
      doReturn(true).when(light0).isResizable();
      doReturn(false).when(light0).isTexturable();
      HomeLight homeLight0 = new HomeLight(light0);
      homeLight0.setAngle(46.92762F);
      homeLight0.setNameYOffset(46.92762F);
      homeLight0.getPriceValueAddedTaxIncluded();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      bigDecimal0.longValueExact();
      homeLight0.isTopRightPointAt(46.92762F, 46.92762F, 0.0F);
      homeLight0.isTopRightPointAt(0.0F, 0.0F, 0.0F);
      homeLight0.setWidth(1.0F);
      homeLight0.isDeformable();
      homeLight0.setMovable(false);
      homeLight0.getStaircaseCutOutShape();
      homeLight0.setNameVisible(true);
      homeLight0.setNameAngle(0.0F);
      homeLight0.getName();
      homeLight0.setX((-1294.7F));
      assertTrue(homeLight0.isNameVisible());
  }
}

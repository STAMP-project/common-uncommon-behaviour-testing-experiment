/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 14:54:45 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.math.RoundingMode;
import java.net.URL;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 137.6F, (byte)0, true, 881.242F, 137.6F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Level level0 = new Level("ELEVATION", 881.242F, 0.0F, 3.29F);
      homeDoorOrWindow1.isAtLevel(level0);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      homeDoorOrWindow2.getValueAddedTax();
      homeDoorOrWindow2.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "c2&# @Lg%;j", (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, (-1812.3569F), (-1441.479F), true, lightSourceArray0, (float[][]) null, "", false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 30.778921F, (-1.0F), 0.0F, false, 30.778921F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(30.778921F, (-2909.2908F), 0.0F);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow0.isBottomLeftPointAt(0.0F, 30.778921F, (byte)21);
      homeDoorOrWindow1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 137.63196F, (byte)0, true, 881.242F, 137.63196F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.isModelMirrored();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      homeDoorOrWindow0.isBottomLeftPointAt(137.63196F, 1162.3167F, 706.564F);
      homeDoorOrWindow0.isDeformable();
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.isTopLeftPointAt(551.25085F, 2.0F, 881.242F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 0.0F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((-2452.1F));
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Cbp|r)!k");
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|r)!k", "com.eteks.sweethome3d.tools.OperatingSystem$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$1", resourceURLContent0, (Content) null, (Content) null, 3.2864308F, 0.3926991F, 0.3926991F, 3.2864308F, true, 1075.0354F, (-2414.02F), sashArray0, (float[][]) null, "Mac OS X", true, (BigDecimal) null, (BigDecimal) null);
      Float float0 = new Float(3.2864308F);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      bigDecimal0.toEngineeringString();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 1.0F, (-607.99274F));
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float1 = new Float(1.0);
      homeDoorOrWindow1.setShininess(float1);
      homeDoorOrWindow1.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      BigInteger bigInteger1 = new BigInteger(byteArray0);
      bigInteger0.and(bigInteger1);
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 129.59346F, (byte)0, true, 881.242F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getY();
      homeDoorOrWindow0.getWidth();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.39014146F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.39014146F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.19634955F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      String string0 = homeDoorOrWindow0.getDescription();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNull(string0);
      
      boolean boolean0 = homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean0);
      
      boolean boolean1 = homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean1);
      
      boolean boolean2 = homeDoorOrWindow0.isTopRightPointAt((-1.0F), 5.310901F, 5.310901F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean2);
      
      homeDoorOrWindow0.setNameAngle(0.0F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      homeDoorOrWindow0.setNameAngle(540.2664F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(6.1956673F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      homeDoorOrWindow1.setMovable(true);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(6.1956673F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.19634955F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      homeDoorOrWindow1.setAngle(5.310901F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(6.1956673F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.19634955F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(5.310901F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.3926991F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow1.setMovable(true);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow1.getY();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ubp|)!k");
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ubp|)!k", "Ubp|)!k", "Ubp|)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Ubp|)!k", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, (-2414.02F));
      homeDoorOrWindow0.setHeight(3.2864308F);
      homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.containsPoint((byte)21, 0.0F, 129.59346F);
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal(3.29F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&3o$a0[>";
      stringArray0[1] = "1";
      stringArray0[2] = "";
      stringArray0[3] = "1";
      stringArray0[4] = "1";
      stringArray0[5] = "&3o$a0[>";
      stringArray0[6] = "@?I$&AL 6Y`D,~0";
      stringArray0[7] = "Cbp|rW!k";
      Long long0 = new Long(0L);
      Float float0 = new Float(27.783936F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "1", "3700-", "&3o$a0[>", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-2414.02F), (-1787.2F), (-1684.8816F), 0.5F, true, "&3o$a0[>", (float[][]) null, (String) null, false, false, false, bigDecimal0, bigDecimal1, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getIcon();
      BigDecimal bigDecimal2 = new BigDecimal(2868.71289805);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "@?I$&AL 6Y`D,~0", "@?I$&AL 6Y`D,~0", "&3o$a0[>", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, (-1684.8816F), 0.5F, (-2190.9568F), 0.3926991F, false, 1.0F, 0.3926991F, sashArray0, (float[][]) null, "Cbp|rW!k", false, false, false, bigDecimal2, bigDecimal1, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isPointAt(761.2265F, (-2190.9568F), 3.29F);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), 0.0F, false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName((String) null);
      homeDoorOrWindow1.setX((-520.84F));
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      homeDoorOrWindow1.isBottomRightPointAt((-1.0F), (byte)46, 0.0F);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.0F, 27.802189F, 0.0F, false, 0.0F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.plus();
      Float float0 = new Float((double) 0.0F);
      BigInteger bigInteger1 = BigInteger.ONE;
      BigInteger bigInteger2 = BigInteger.ZERO;
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 0.39014146F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.getNameYOffset();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, (byte)21, (-1209.258F));
      homeDoorOrWindow1.move((-1209.258F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "c2&# @Lg%;j", (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, (-1812.3569F), (-1441.479F), true, lightSourceArray0, (float[][]) null, "", false, (BigDecimal) null, (BigDecimal) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("c2&# @Lg%;j");
      catalogLight0.setCategory(furnitureCategory0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      homeLight0.getDescription();
      // Undeclared exception!
      try { 
        homeLight0.setDepth((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Level level0 = new Level("", (-408.165F), (-408.165F), (-327.26114F));
      homeDoorOrWindow0.isAtLevel(level0);
      homeDoorOrWindow0.isMovable();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homeDoorOrWindow0.getShininess();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = null;
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F);
      sashArray0[0] = sash0;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (byte)46, 1.0F, 0.0F, (-428.564F), false, (-2159.867F), 1.0F, sashArray0, (float[][]) null, (String) null, true, false, false, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float((double) (byte)46);
      Float float1 = new Float((-711.488043221));
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setShininess(float1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      Float float0 = new Float((-2898.7));
      Integer integer0 = new Integer((byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, resourceURLContent0, resourceURLContent0, (-1.0F), 610.43274F, 706.3F, (-4324.501F), true, "", integer0, (float[][]) null, true, 706.3F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer.min((byte)21, 13);
      homePieceOfFurniture0.isAtLevel((Level) null);
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.getDepth();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Cbp|rW!k", true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setModelMirrored(false);
      Float float0 = new Float((-288.37453682));
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, 27.783936F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow2.isModelMirrored();
      homeDoorOrWindow3.isBottomLeftPointAt(706.564F, 706.564F, (-2414.02F));
      homeDoorOrWindow0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(129.59346F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(129.59346F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(129.59346F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(129.59346F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(64.79673F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(129.59346F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(129.59346F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(64.79673F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(64.79673F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertEquals("iFYLxsE qj=`j_'", furnitureCategory0.getName());
      assertNotNull(furnitureCategory0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      homeDoorOrWindow0.setShininess((Float) null);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(129.59346F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(129.59346F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(64.79673F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      float float1 = homeDoorOrWindow0.getNameYOffset();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(129.59346F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(129.59346F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(64.79673F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertEquals(0.0F, float1, 0.01F);
      
      boolean boolean2 = homeDoorOrWindow0.isTopLeftPointAt((-1209.258F), 0.0F, 0.0F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(129.59346F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(129.59346F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(64.79673F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean2);
      
      homeDoorOrWindow0.move(881.742F, 612.3056F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(129.59346F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(129.59346F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(881.242F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(677.10236F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(129.59346F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      homeDoorOrWindow0.getPrice();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      bigDecimal0.scaleByPowerOfTen(2147483232);
      homeDoorOrWindow0.setNameYOffset(2577.03F);
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 3.2864308F, 3.2864308F);
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 128.40231F, (-1.0F), 0.0F, false, 128.40231F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.0F);
      bigDecimal0.plus();
      Float float1 = new Float((double) 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow1.setVisible(false);
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.getPrice();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1213.3694F, (-1.0F), 0.0F, false, 1213.3694F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      homeDoorOrWindow1.isBottomRightPointAt(1213.3694F, (byte)46, 1772.667F);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)21;
      byteArray1[5] = (byte)21;
      byteArray1[6] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      bigInteger0.flipBit(0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      homeDoorOrWindow0.setY(0.39014146F);
      homeDoorOrWindow1.isTopRightPointAt(0.0F, (byte)21, 0.0F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 0.0F, false, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setDepth(21.0F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      homeDoorOrWindow0.isBottomRightPointAt(3.2864308F, 3.2864308F, 2577.03F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Float float0 = new Float(1224.6112F);
      Integer integer0 = new Integer((byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("6j", resourceURLContent0, resourceURLContent0, (byte)21, (byte)21, (-4324.501F), 1224.6112F, false, "6j", integer0, (float[][]) null, false, 3.4028235E38F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName("6j");
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset(1114.5358F);
      homePieceOfFurniture0.setDepth((byte)21);
      Integer integer1 = Integer.getInteger("6j", integer0);
      homePieceOfFurniture1.setColor(integer1);
      homePieceOfFurniture1.setY((byte)21);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.isTopRightPointAt((-4324.501F), (-4324.501F), (byte)21);
      homePieceOfFurniture1.isTopRightPointAt((-218.60944F), 2194.1592F, (-4324.501F));
      homePieceOfFurniture1.getColor();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.isTopLeftPointAt((-1209.258F), 0.0F, 0.0F);
      homeDoorOrWindow0.move(881.742F, 612.3056F);
      homeDoorOrWindow1.getCurrency();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.getY();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1182.1825F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.getNameYOffset();
      homeDoorOrWindow1.setY(0.3926991F);
      homeDoorOrWindow0.getModel();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 129.59346F, (byte)0, true, 881.242F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt((-2741.0F), 881.242F, 1226.299F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setAngle(129.59346F);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) 0.0F);
      Float float1 = new Float(1109.3F);
      bigDecimal0.plus();
      Float float2 = new Float((double) 0.0F);
      Float float3 = new Float((double) 1109.3F);
      homeDoorOrWindow0.setShininess(float3);
      homeDoorOrWindow1.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1178.67F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ubp|)!k");
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ubp|)!k", "Ubp|)!k", "Ubp|)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Ubp|)!k", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth((-491.1F));
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt((-491.1F), (-3119.428F), (-2414.02F));
      homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      homeDoorOrWindow0.move((-2414.02F), (-2414.02F));
      homeDoorOrWindow1.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Float float0 = new Float(2815.270290107);
      Integer integer0 = new Integer((-2145994901));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, (byte)21, (-4324.501F), 1224.6112F, false, "", integer0, (float[][]) null, false, 3.4028235E38F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isAtLevel((Level) null);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow0.isTexturable();
      homeDoorOrWindow1.isTexturable();
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow1.getHeight();
      homeDoorOrWindow0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isTopRightPointAt(1224.6112F, 440.8F, 0.0F);
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow1.setTexture((HomeTexture) null);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow1.setElevation((-1168.9674F));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeDoorOrWindow1.setNameVisible(false);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      homeDoorOrWindow1.getAngle();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Integer integer0 = new Integer((byte)21);
      Integer.getInteger("6j", integer0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "6j";
      stringArray0[2] = "6j";
      stringArray0[3] = null;
      Float float0 = Float.valueOf(1586.6692F);
      LightSource[] lightSourceArray0 = new LightSource[8];
      LightSource lightSource0 = new LightSource((-4324.501F), (-4324.501F), 438.0F, (byte)21);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-2382.7512F), 1410.928F, 1.0F, (byte)21);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(1410.928F, (-2382.7512F), 241.81544F, (-2632), float0);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(1225.4762F, 1.0F, (-2632), (-2632));
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(241.81544F, 1586.6692F, (-423.7F), 2);
      lightSourceArray0[4] = lightSource4;
      Float float1 = new Float((-2496.565387793629));
      LightSource lightSource5 = new LightSource((-206.0F), 241.81544F, 438.0F, (-2024), float1);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(3759.13F, 2.2864308F, 426.85294F, (-2694));
      lightSourceArray0[6] = lightSource6;
      LightSource lightSource7 = new LightSource(2, 1.0F, (-2024), 2);
      lightSourceArray0[7] = lightSource7;
      BigDecimal bigDecimal0 = new BigDecimal((-683));
      CatalogLight catalogLight0 = new CatalogLight((String) null, "", (String) null, "", stringArray0, (Long) null, float0, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 1.0F, (-2382.7512F), (-1.0F), false, lightSourceArray0, "6j", (float[][]) null, "6j", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      BigInteger bigInteger1 = BigInteger.ZERO;
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger1);
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow((String) null, ">Xn1]", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 767.2F, 738.38F, 767.2F, 1.0F, false, 1.0F, 0.0F, sashArray0, (float[][]) null, "", false, false, true, bigDecimal1, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.tools.TemporaryURLContent", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 0.0F, sashArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      bigDecimal0.toEngineeringString();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setWidth(1005.661F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 129.59346F, (byte)0, true, 881.242F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isModelMirrored();
      homeDoorOrWindow0.getGroundElevation();
      homeDoorOrWindow0.setX(0.0F);
      homeDoorOrWindow0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.30564F, 1.0F, 1.0F, 80.30564F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      Long long0 = new Long(0L);
      Float float0 = new Float(3.4028235E38F);
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Invalid URL base for JAR entry", "ANGLE", "Invalid URL base for JAR entry", "", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 3.4028235E38F, 1.0F, 257.75125F, 80.30564F, true, 1.0F, 5.6732564F, sashArray0, (float[][]) null, "", false, false, true, (BigDecimal) null, (BigDecimal) null, stringArray0[0]);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float1 = new Float((double) 257.75125F);
      homeDoorOrWindow0.setShininess(float1);
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow0.isBottomLeftPointAt(0.39014146F, 5.6732564F, 3.4028235E38F);
      homeDoorOrWindow0.isDeformable();
      homeLight0.clone();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      bigInteger0.abs();
      homeDoorOrWindow1.setName("tr");
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setWidth((byte)21);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 130.47533F, 129.59346F, (byte)41, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow0.setMovable(true);
      System.setCurrentTimeMillis((byte)41);
      homeDoorOrWindow0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 3.2864308F, 3.2864308F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow1.setName("tr");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) 0.0F);
      Float float1 = new Float(1109.3F);
      bigDecimal0.plus();
      Float float2 = new Float((double) 0.0F);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Float float3 = new Float((double) 1109.3F);
      homeDoorOrWindow0.setShininess(float3);
      homeDoorOrWindow1.setVisible(false);
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), 0.0F, false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      Level level0 = new Level("", 1114.5358F, 0.0F, 0.0F);
      Level level1 = level0.clone();
      homeDoorOrWindow0.setLevel(level1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      Level level2 = new Level("$VALUES", (-97.0F), (-1.0F), 0.0F);
      homeDoorOrWindow0.isAtLevel(level2);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.setX(2515.8047F);
      System.setCurrentTimeMillis((byte)21);
      homeDoorOrWindow0.getName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight(27.783936F);
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1441.479F), 130.47533F, 881.242F, 0.0F, true, (-1051.1166F), 881.242F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow1.getNameYOffset();
      HomePieceOfFurniture.SortableProperty.values();
      Level level0 = new Level((String) null, 2665.2324F, (-1441.479F), 0.0F);
      level0.setHeight(0.0F);
      level0.clone();
      homeDoorOrWindow1.setLevel(level0);
      homeDoorOrWindow0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow0.isBottomLeftPointAt(0.0F, 0.3926991F, (byte)21);
      homeDoorOrWindow1.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.containsPoint((byte)21, 0.0F, 129.59346F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow2);
      homeDoorOrWindow1.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("UB5a2A5rn;!_DcMf");
      // Undeclared exception!
      try { 
        homeDoorOrWindow2.setHeight((byte)21);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1178.67F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.setName("Oqc}H&2VfdV7");
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 0.3926991F, sashArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.3926991F, 1225.4762F);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isNameCenterPointAt(0.3926991F, 0.0F, 238.2F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Float float0 = new Float(1224.6112F);
      Integer integer0 = new Integer((-2145994901));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("6j", resourceURLContent0, resourceURLContent0, 1.0F, (byte)21, (-4324.501F), 1224.6112F, false, "6j", integer0, (float[][]) null, true, 3.4028235E38F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isAtLevel((Level) null);
      Integer integer1 = Integer.getInteger("com.eteks.sweethome3d.model.FurnitureCategory", integer0);
      homePieceOfFurniture1.setColor(integer1);
      homePieceOfFurniture1.setY((byte)21);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.isTopRightPointAt(1.0F, 1.0F, (byte)21);
      homePieceOfFurniture1.isTopRightPointAt((-218.60944F), 2194.1592F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Float float0 = new Float(2815.270290107);
      Integer integer0 = new Integer((-2145994901));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, (byte)21, (-4324.501F), 1224.6112F, false, "", integer0, (float[][]) null, false, 3.4028235E38F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isAtLevel((Level) null);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.isTopRightPointAt(1.0F, 1.0F, (byte)21);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.39014146F, (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 612.3056F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.setAngle(0.0F);
      homeDoorOrWindow1.getNameXOffset();
      homeDoorOrWindow1.getY();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      assertEquals(0.39014146F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setName("tr");
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("tr", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      BigInteger bigInteger1 = bigInteger0.flipBit((byte)21);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigInteger1.byteValue());
      assertEquals((short)21, bigInteger1.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger1);
      
      boolean boolean1 = homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean1);
      
      HomeTexture homeTexture0 = homeDoorOrWindow0.getTexture();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNull(homeTexture0);
      
      homeDoorOrWindow1.setTexture((HomeTexture) null);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("tr", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      homeDoorOrWindow1.setNameVisible(false);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("tr", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      boolean boolean2 = homeDoorOrWindow1.intersectsRectangle(1224.6112F, (-912.61505F), 0.0F, 0.39014146F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("tr", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      float float0 = (-1.0F);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float1 = new Float((double) 0.0F);
      Float float2 = new Float(1109.3F);
      bigDecimal0.plus();
      Float float3 = new Float(1.1579207543382391E77);
      homeDoorOrWindow1.setShininess(float3);
      homeDoorOrWindow0.setAngle(0.0F);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.39014146F, (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 0.3926991F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Level level0 = new Level((String) null, 190.92F, (-2217.4385F), 10.0F);
      homeDoorOrWindow0.isAtLevel(level0);
      homeDoorOrWindow0.getPoints();
      homeDoorOrWindow0.isMovable();
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow0.getHeight();
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1178.67F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      Float float0 = new Float(5.6549042951012325);
      homePieceOfFurniture0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 137.6F, (byte)0, true, 881.242F, 137.6F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", (PropertyChangeListener) null);
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getY();
      homeDoorOrWindow0.isPointAt(440.621F, 881.242F, 440.621F);
      homeDoorOrWindow0.setModelMirrored(false);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow1.setWidth(3.2864308F);
      homeDoorOrWindow1.setModelMirrored(true);
      Float float0 = new Float((-4431.9062F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow2);
      homeDoorOrWindow1.isNameCenterPointAt((-4431.9062F), 0.0F, 3369.3F);
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      Float float0 = new Float((-2898.7));
      Integer integer0 = new Integer((byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, resourceURLContent0, resourceURLContent0, (-1.0F), 610.43274F, 706.3F, (-4324.501F), true, "", integer0, (float[][]) null, true, 3897.55F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isAtLevel((Level) null);
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1441.479F), 130.47533F, 881.242F, 0.0F, true, (-1051.1166F), 881.242F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      Float float0 = new Float(1291.7667459);
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow1.isPointAt(0.0F, 1.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("WIDTH", "WIDTH", "WIDTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.13771525F, (-1.0F), 0.13771525F, 0.13771525F, false, (-1.0F), 0.13771525F, sashArray0, (float[][]) null, "WIDTH", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("WIDTH", propertyChangeListener0);
      homeDoorOrWindow0.removePropertyChangeListener(propertyChangeListenerProxy0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.setAngle(0.0F);
      homeDoorOrWindow0.getColor();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory(":8^hoR:p&X");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(533.84894339197);
      HomePieceOfFurniture.SortableProperty.values();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, "m ", resourceURLContent0, resourceURLContent0, resourceURLContent0, 4205.5F, 4205.5F, 1224.6112F, (-2858.5F), false, 1224.6112F, (-2858.5F), sashArray0, (float[][]) null, (String) null, false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), true, (-1.0F), (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((-2452.1F));
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow0.setVisible(true);
      Level level0 = new Level((String) null, 0.0F, (-357.9F), 2.0F);
      level0.setHeight(1948.3F);
      homeDoorOrWindow1.isAtLevel(level0);
      homeDoorOrWindow1.getValueAddedTax();
      homeDoorOrWindow1.getModel();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Integer.getInteger((String) null, (Integer) null);
      homeDoorOrWindow1.setColor((Integer) null);
      homeDoorOrWindow0.setY(3.9158661F);
      homeDoorOrWindow1.getPoints();
      catalogDoorOrWindow0.getCategory();
      homeDoorOrWindow0.isTopRightPointAt((-1.0F), (-1.0F), 303.3696F);
      homeDoorOrWindow0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1213.3694F, (-1.0F), 0.0F, false, 1213.3694F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      homeDoorOrWindow1.isBottomRightPointAt(777.0F, 129.59346F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "# |Y5?Y>g");
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("# |Y5?Y>g", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), 0.0F, false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "# |Y5?Y>g", false, bigDecimal0, bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getTexture();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow1.setElevation((byte)21);
      FileSystemHandling.shouldAllThrowIOExceptions();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      homeDoorOrWindow2.setNameVisible(true);
      homeDoorOrWindow1.getShininess();
      homeDoorOrWindow0.isBottomLeftPointAt(0.0F, 2857.106F, 0.0F);
      homeDoorOrWindow2.clone();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1441.479F), 130.47533F, 881.242F, 0.0F, true, (-1051.1166F), 881.242F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isPointAt((byte)0, 0.5F, 0.0F);
      homeDoorOrWindow0.isNameCenterPointAt((byte)41, 0.3926991F, 2013.9744F);
      homeDoorOrWindow1.isTopRightPointAt(2013.9744F, 0.3926991F, (-557.3055F));
      homeDoorOrWindow0.setNameAngle((-250.402F));
      homeDoorOrWindow0.setNameAngle(0.0F);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.getModel();
      homeDoorOrWindow0.setWidth((-2526.108F));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setY((-1.0F));
      homeLight0.isDeformable();
      homeLight0.setMovable(true);
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      Random.setNextRandom((-2128));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 0.0F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(21.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow1.isResizable();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[1];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getPoints();
      catalogLight0.getCategory();
      homeLight0.isTopRightPointAt(1.0F, 80.8739F, (-1959.0F));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.3926991F, 27.802189F, 0.0F, true, 0.3926991F, 27.802189F, sashArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(true);
      bigDecimal0.plus();
      Float float0 = new Float((double) 27.802189F);
      homeDoorOrWindow0.isTopRightPointAt(27.802189F, 0.39014146F, 3.4028235E38F);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.isNameCenterPointAt(3.4028235E38F, 0.3926991F, 3.4028235E38F);
      homeDoorOrWindow0.isNameCenterPointAt(0.39014146F, 0.39014146F, 0.0F);
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      homeDoorOrWindow0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1178.67F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.isNameCenterPointAt(80.8739F, 1.2056011F, 1.0F);
      homePieceOfFurniture0.getLevel();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 881.242F, 129.59346F, (byte)41, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      bigDecimal1.max(bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.getNameYOffset();
      HomePieceOfFurniture.SortableProperty.values();
      Level level0 = new Level("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", 0.0F, 0.0F, 3.4028235E38F);
      Level level1 = level0.clone();
      homeDoorOrWindow0.setLevel(level1);
      homeDoorOrWindow0.isTopLeftPointAt(3.4028235E38F, 130.47533F, 881.242F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      Float float0 = new Float((double) 0.0F);
      Float float1 = new Float(1109.3F);
      Float float2 = new Float(1.1579207543382391E77);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("iFYLxsE qj=`j_'", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1109.3F, 2.0F, (-1.0F), (byte)21, false, (-1.0F), 0.0F, sashArray0, (float[][]) null, (String) null, true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt(1109.3F, 581.28467F, 1109.3F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow1.intersectsRectangle(0.0F, 3.4028235E38F, (-1.0F), (byte)21);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 881.242F, 129.59346F, (byte)0, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("com.eteks.sweethome3d.model.HomePieceOfFurniture$1");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, (-1812.3569F), (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertNotNull(homeLight0);
      
      boolean boolean1 = homeLight0.isDeformable();
      assertEquals(0, lightSourceArray0.length);
      assertTrue(boolean1 == boolean0);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertTrue(boolean1);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      assertNotNull(furnitureCategory0);
      
      catalogLight0.setCategory(furnitureCategory0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      
      String string0 = homeLight0.getDescription();
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertNull(string0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertEquals((-1441.479F), float0, 0.01F);
      
      homeLight0.setNameYOffset((-1812.3569F));
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      
      Level level0 = homeLight0.getLevel();
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertNull(level0);
      
      homeLight0.setLevel((Level) null);
      assertEquals(0, lightSourceArray0.length);
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertTrue(catalogLight0.isTexturable());
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getCurrency());
      assertNull(catalogLight0.getId());
      assertTrue(catalogLight0.isProportional());
      assertFalse(catalogLight0.isModifiable());
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isResizable());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertTrue(homeLight0.isVisible());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertNull(homeLight0.getCurrency());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getNameYOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(homeLight0.getDescription());
      assertTrue(homeLight0.isDeformable());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "";
      Long long0 = new Long(0L);
      Float float0 = new Float(3.4028235E38F);
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Invalid URL base for JAR entry", "ANGLE", "Invalid URL base for JAR entry", "", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 3.4028235E38F, 1.1169511F, 257.75125F, 80.30564F, true, 1.1169511F, 1.1169511F, sashArray0, (float[][]) null, "", false, false, true, (BigDecimal) null, (BigDecimal) null, stringArray0[0]);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setVisible(false);
      homeDoorOrWindow0.isBottomLeftPointAt(0.39014146F, 1.1169511F, 3.4028235E38F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.39014146F, (-894.62F), 0.0F, 0.0F, false, 1224.6112F, 612.3056F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      Float float1 = new Float((-1.0F));
      homeDoorOrWindow1.setShininess(float1);
      bigInteger0.abs();
      homeDoorOrWindow0.setName((String) null);
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setWidth(1224.6112F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 0.0F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((-2452.1F));
      homeDoorOrWindow0.isNameCenterPointAt((-1.0F), (-1.0F), 3353.96F);
      homeDoorOrWindow1.getValueAddedTax();
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow1.getPoints();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isTopRightPointAt(1.0F, 823.65247F, (-805.3F));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      MockRandom mockRandom0 = new MockRandom();
      BigInteger.probablePrime(13, mockRandom0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow1.getModelRotation();
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(129.59346F, (-2909.2908F), 0.0F);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getWidth();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[11];
      BigDecimal bigDecimal0 = new BigDecimal((-5.913198F));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("zbp|+)!k", "zbp|+)!k", "zbp|+)!k", resourceURLContent0, resourceURLContent0, (Content) null, (-5.913198F), (-5.913198F), (-5.913198F), (-5.913198F), true, (-5.913198F), (-5.913198F), sashArray0, (float[][]) null, "zbp|+)!k", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt((-5.913198F), (-5.913198F), (-5.913198F));
      homeDoorOrWindow1.isBottomRightPointAt(2.0F, 2.0F, (-5.913198F));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.isBottomRightPointAt(2577.03F, 27.783936F, (-116.03124F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow2.setShininess(float0);
      homeDoorOrWindow2.setDescription(")D`liDM;be{X>0lT");
      homeDoorOrWindow1.isTexturable();
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow1.isTopRightPointAt((-1209.758F), (-1209.758F), (-2115.612F));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName((String) null);
      Integer integer0 = new Integer(4);
      homeDoorOrWindow1.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homeDoorOrWindow0.isAtLevel((Level) null);
      homeDoorOrWindow0.getPoints();
      homePieceOfFurniture0.isMovable();
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow1.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setMovable(false);
      homeLight0.isPointAt(634.0F, (-618.7F), (-618.7F));
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      Integer integer0 = new Integer((-1372));
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[3];
      LightSource lightSource0 = new LightSource(0.0F, 615.501F, 0.0F, 33);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.3926991F, 0.0F, 0.0F, 0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(33, 0.0F, 2006.123F, 1288);
      lightSourceArray0[2] = lightSource2;
      float[][] floatArray0 = new float[6][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 2006.123F;
      floatArray1[3] = (float) 1288;
      floatArray1[4] = (-1651.271F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 0;
      floatArray1[7] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (float) 0;
      floatArray2[1] = 0.5F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-1651.271F);
      floatArray2[4] = (float) 1288;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      floatArray3[0] = 0.3926991F;
      floatArray3[1] = (float) 33;
      floatArray3[2] = (-1651.271F);
      floatArray3[3] = 0.5F;
      floatArray3[4] = 615.501F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 0.5F;
      floatArray4[1] = (float) 33;
      floatArray4[2] = 615.501F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 0.0F;
      floatArray4[5] = 615.501F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 2006.123F;
      floatArray5[1] = (float) 0;
      floatArray5[2] = (float) 33;
      floatArray5[3] = 0.0F;
      floatArray5[4] = 0.5F;
      floatArray5[5] = 0.0F;
      floatArray5[6] = (float) 1288;
      floatArray5[7] = 615.501F;
      floatArray5[8] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[0];
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX", "VALUE_ADDED_TAX", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 615.501F, 0.5F, false, lightSourceArray0, "VALUE_ADDED_TAX", floatArray0, "", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameXOffset(2.0F);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[12];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 16.963783F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.2716454F, 27.802189F, 0.0F, false, 0.2716454F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      BigDecimal bigDecimal1 = BigDecimal.ZERO;
      Float float0 = new Float((double) 27.802189F);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      homeLight0.setMovable(true);
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      homeLight0.getModel();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      Float float0 = new Float(3.2864308F);
      homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.isNameCenterPointAt((-605.0F), (-4260.7466F), 1914.0F);
      homeDoorOrWindow0.setDescription("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("WIDTH", "WIDTH", "WIDTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.13771525F, (-1.0F), 0.13771525F, 0.13771525F, false, (-1.0F), 0.13771525F, sashArray0, (float[][]) null, "WIDTH", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameXOffset((-1.0F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.setAngle(0.0F);
      homeDoorOrWindow1.getShininess();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[3];
      LightSource lightSource0 = new LightSource(0.0F, 615.501F, 0.0F, 33);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.3926991F, 0.0F, 0.0F, 0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(33, 0.0F, 0.0F, 1288);
      float[][] floatArray0 = new float[6][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.3926991F;
      floatArray1[2] = 615.501F;
      floatArray1[3] = (float) 1288;
      floatArray1[4] = (-1651.271F);
      floatArray1[5] = 0.0F;
      floatArray1[6] = (float) 0;
      floatArray1[7] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = (float) 0;
      floatArray2[4] = (float) 1288;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      floatArray3[0] = 0.3926991F;
      floatArray3[1] = (float) 33;
      floatArray3[2] = (-1651.271F);
      floatArray3[4] = 615.501F;
      floatArray3[5] = 0.0F;
      floatArray3[6] = 0.0F;
      floatArray0[2] = floatArray3;
      floatArray0[3] = floatArray3;
      float[] floatArray4 = new float[9];
      floatArray4[0] = (float) 33;
      floatArray4[1] = (float) 0;
      floatArray4[2] = (float) 33;
      floatArray4[3] = 0.0F;
      floatArray4[2] = 0.5F;
      floatArray4[5] = 0.0F;
      floatArray4[6] = (float) 1288;
      floatArray4[7] = 615.501F;
      floatArray0[4] = floatArray4;
      floatArray0[2] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("VALUE_ADDED_TAX", "VALUE_ADDED_TAX", "VALUE_ADDED_TAX", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, 615.501F, 0.5F, false, lightSourceArray0, "VALUE_ADDED_TAX", floatArray0, "", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameXOffset(0.0F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 0.0F);
      homeDoorOrWindow0.move((-1.0F), 612.3056F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName((String) null);
      Integer integer0 = new Integer(4);
      Integer.remainderUnsigned(2146677880, 2146677880);
      homeDoorOrWindow1.setColor(integer0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homeDoorOrWindow0.isAtLevel((Level) null);
      homeDoorOrWindow0.getPoints();
      homeDoorOrWindow1.setNameAngle(0.0F);
      homePieceOfFurniture0.getName();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow0.isBottomLeftPointAt(0.0F, 0.3926991F, (byte)21);
      homeDoorOrWindow1.getNameYOffset();
      homeDoorOrWindow0.getIcon();
      homeDoorOrWindow1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow1.setMovable(true);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow1.getY();
      homeDoorOrWindow1.isTopLeftPointAt(0.39014146F, 606.6847F, (-972.46F));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = BigInteger.ONE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      Long long0 = new Long((byte)21);
      LightSource[] lightSourceArray0 = new LightSource[0];
      BigDecimal bigDecimal0 = new BigDecimal((int) (byte)21);
      CatalogLight catalogLight0 = new CatalogLight("", ";`i'D10+Yn", "", "|h:!<?8*", stringArray0, long0, (Float) null, resourceURLContent0, (Content) null, (Content) null, (-3235.004F), 16.343481F, 260.5F, 0.39014146F, false, lightSourceArray0, stringArray0[0], (float[][]) null, stringArray0[0], true, true, true, bigDecimal0, bigDecimal0, (String) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.setWidth((-3235.004F));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), 0.0F, false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName((String) null);
      homeDoorOrWindow1.setX((-520.84F));
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1238.0502F);
      homeDoorOrWindow1.isBottomRightPointAt((-1.0F), 0.0F, (-1.0F));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Integer integer0 = new Integer((byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("j", resourceURLContent0, resourceURLContent0, (byte)21, (byte)21, (-4324.501F), 1239.5669F, false, "j", integer0, (float[][]) null, false, (byte)21, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName("j");
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.setVisible(false);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, (-1812.3569F), (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      homeLight0.getValueAddedTax();
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      HomePieceOfFurniture.SortableProperty.values();
      homeLight0.isPointAt(2.0F, (-2458.2F), 4205.5F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1178.67F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.isTopLeftPointAt(80.8739F, 80.8739F, (-1178.67F));
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTopRightPointAt(3.4028235E38F, (-588.5482F), (-588.5482F));
      homePieceOfFurniture0.isTopRightPointAt(80.8739F, 1.0F, 4262.3896F);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1441.479F), 130.47533F, 881.242F, 0.0F, true, (-1051.1166F), 881.242F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isPointAt((byte)41, 0.5F, 0.0F);
      homeDoorOrWindow0.isNameCenterPointAt((byte)41, 0.3926991F, 2013.9744F);
      homeDoorOrWindow1.isTopRightPointAt(2013.9744F, 0.3926991F, (-557.3055F));
      homeDoorOrWindow0.setNameAngle((-250.402F));
      homeDoorOrWindow0.setNameAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 881.242F, 129.59346F, (byte)41, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.setHeight((byte)41);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float(882.23);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.setNameAngle((-623.0076F));
      homeDoorOrWindow0.containsPoint((-1.0F), (-4563.9854F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      bigInteger0.flipBit((byte)21);
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow0.isPointAt(0.0F, 823.65247F, (byte)21);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.intersectsRectangle(0.0F, 214.595F, 1677.0F, 0.0F);
      homeDoorOrWindow0.isTopRightPointAt(1224.6112F, 440.8F, 0.0F);
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow1.setTexture((HomeTexture) null);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow1.setElevation((-1168.9674F));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("WIDTH", resourceURLContent0, resourceURLContent0, 0.39014146F, 1225.4762F, 0.39014146F, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "WIDTH");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.getGroundElevation();
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.getValueAddedTax();
      homePieceOfFurniture1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 0.0F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((-2452.1F));
      homeDoorOrWindow0.isNameCenterPointAt((-1.0F), (-1.0F), 3353.96F);
      homeDoorOrWindow1.getValueAddedTax();
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow0.setMovable(true);
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[5];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.41766F, 1.0F, 1.0F, 80.41766F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getDescription();
      Float float0 = new Float(80.41766F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      Float float0 = new Float((double) 0.0F);
      Float float1 = new Float(1109.3F);
      Float float2 = new Float(1.1579207543382391E77);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("iFYLxsE qj=`j_'", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1109.3F, 2.0F, (-1.0F), (byte)21, false, (-1.0F), 0.0F, sashArray0, (float[][]) null, (String) null, true, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isBottomRightPointAt(1109.3F, 581.28467F, 1109.3F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, false);
      homeDoorOrWindow1.intersectsRectangle(0.0F, 3.4028235E38F, (-1.0F), (byte)21);
      homeDoorOrWindow0.getPrice();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-37.62003F), 881.242F, 137.6F, (byte)0, true, 881.242F, 137.6F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getY();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      homePieceOfFurniture0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[11];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ubp|)!k", "Ubp|)!k", "Ubp|)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Ubp|)!k", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, (-2414.02F));
      homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 881.242F, 129.59346F, (byte)0, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      TextStyle textStyle0 = new TextStyle(0.0F, true, true);
      homeDoorOrWindow0.setNameStyle(textStyle0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isModelMirrored();
      homeDoorOrWindow0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 3.2864308F, 3.2864308F);
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.3926991F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow1.setMovable(true);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow1.getY();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setNameAngle(1.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isPointAt(80.8739F, (-618.7F), (-618.7F));
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1441.479F), 130.47533F, 881.242F, 0.0F, true, (-1051.1166F), 881.242F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      Float float0 = new Float(1291.7667459);
      Float.sum((-1569.0F), (-1441.479F));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow1.isPointAt(0.0F, 1.0F, 0.0F);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.setNameYOffset(41.0F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow1.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[17];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ubp|)!k", "Ubp|)!k", "Ubp|)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2420.9204F), sashArray0, (float[][]) null, "Ubp|)!k", true, bigDecimal0, bigDecimal0);
      Level level0 = new Level("Ubp|)!k", 3.2864308F, 0.9240534F, 0.9240534F);
      Level level1 = level0.clone();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setLevel(level0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("Ubp|)!k");
      homeDoorOrWindow0.isAtLevel(level1);
      homeDoorOrWindow0.clone();
      Float float0 = Float.valueOf(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setDescription("Ubp|)!k");
      homeDoorOrWindow0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, (String) null, "|Q", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1410.758F, 2458.2F, 1224.6112F, (-1143.7F), true, 1410.758F, 2458.2F, sashArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float(2.0F);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.setNameAngle(2516.3047F);
      homeDoorOrWindow1.getElevation();
      homeDoorOrWindow1.setAngle(2.0F);
      homeDoorOrWindow0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("", "VISIBLE", " doesn't contain piece ", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-729.30225F), 512.3294F, 0.0F, false, lightSourceArray0, (float[][]) null, "", false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("WIDTH", resourceURLContent0, resourceURLContent0, 2082.1F, 2.0F, 2082.1F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      Integer integer0 = new Integer(4);
      homeDoorOrWindow1.setColor(integer0);
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      homeDoorOrWindow1.isTopRightPointAt(777.0F, (-912.61505F), (-837.8508F));
      homeDoorOrWindow1.setNameAngle(1224.6112F);
      homeDoorOrWindow1.getNameYOffset();
      homeDoorOrWindow1.isResizable();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopRightPointAt(0.0F, 2458.2F, (-1.0F));
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.setElevation(0.0F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow0.isBottomLeftPointAt(0.0F, (-2290.36F), 2480.649F);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      Float float0 = new Float((double) 0.0F);
      Float float1 = new Float(1109.3F);
      bigDecimal0.plus();
      Float float2 = new Float((double) 0.0F);
      homeDoorOrWindow1.setAngle((-2887.4F));
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setModelMirrored(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.setElevation((byte)21);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homePieceOfFurniture0.getNameStyle();
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homeDoorOrWindow1.getColor();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((-2452.1F));
      Float float0 = new Float((-1.0F));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.setVisible(true);
      homeDoorOrWindow0.setVisible(true);
      homeDoorOrWindow1.getShininess();
      Float float1 = homeDoorOrWindow1.getShininess();
      homeDoorOrWindow0.setShininess(float1);
      homeDoorOrWindow1.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[14];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.39014146F, (-894.62F), 0.0F, 0.0F, true, 1224.6112F, 612.3056F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float1 = new Float((-894.62F));
      homeDoorOrWindow1.setShininess(float1);
      homeDoorOrWindow0.getNameYOffset();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      homeDoorOrWindow2.isTopLeftPointAt(1224.6112F, (-1.0F), (-1.0F));
      homeDoorOrWindow1.move(0.0F, 612.3056F);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      homePieceOfFurniture0.setName("");
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture0.setDepth(3.2864308F);
      homePieceOfFurniture1.getTexture();
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      homePieceOfFurniture1.isTexturable();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      Float float0 = new Float((-1306.11031251936));
      Integer integer0 = new Integer((-1608));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, resourceURLContent0, resourceURLContent0, 1022.5F, (-1.0F), 0.0F, 706.3F, true, "", integer0, (float[][]) null, true, 1.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isModelMirrored();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[5];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.setName((String) null);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      homePieceOfFurniture0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      homeDoorOrWindow0.isTopRightPointAt((-2725.855F), 3.2864308F, 3.2864308F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isPointAt(634.0F, (-618.7F), (-618.7F));
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      homeLight0.getGroundElevation();
      homeLight0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal(3.29F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.29F, 3.29F, 3.29F, 3.29F, false, 3.29F, (-2414.02F), sashArray0, (float[][]) null, "Cbp|rW!k", true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setModelMirrored(false);
      Float float0 = new Float((-288.37453682));
      homeDoorOrWindow1.isBottomRightPointAt(3.29F, 3.29F, 27.783936F);
      homeDoorOrWindow0.isTopLeftPointAt((-1684.8816F), 0.3926991F, 2829.9783F);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.setAngle((-1.0F));
      homeDoorOrWindow0.getX();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[8];
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.2716454F, 27.802189F, 0.0F, false, 0.2716454F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(1096.31F);
      homeDoorOrWindow0.isTopRightPointAt(27.802189F, 0.39014146F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopRightPointAt(0.0F, 2458.2F, (-1.0F));
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.setElevation(2458.2F);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      homeDoorOrWindow0.setNameVisible(true);
      homeDoorOrWindow0.getNameStyle();
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      homeDoorOrWindow0.setNameXOffset((-2461.521F));
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 71.176F, 1.0F, 1.0F, 71.176F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      Integer integer0 = new Integer((-1372));
      homeLight0.setColor(integer0);
      homeLight0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 80.8739F, 80.8739F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Level level0 = new Level(")*QwV", 80.8739F, 80.8739F, 3.2864308F);
      Level level1 = level0.clone();
      homeLight0.setLevel(level1);
      homeLight0.isPointAt(80.8739F, (-618.7F), (-618.7F));
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      homeLight0.getShininess();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      byte[] byteArray0 = new byte[1];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      Level level0 = new Level(")D`liDM;be{X>0lT", 0.0F, (-357.9F), 2.0F);
      homeDoorOrWindow1.isBottomRightPointAt((byte)0, 3.2864308F, 3.2864308F);
      homeDoorOrWindow0.clone();
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.move((-1209.258F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 128.40231F, (-1.0F), 0.0F, false, 128.40231F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(0.0F);
      bigDecimal0.plus();
      Float float1 = new Float((double) 0.0F);
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight("", "LEVEL", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-2647.5208F), 0.5F, (-2647.5208F), 128.40231F, false, lightSourceArray0, (float[][]) null, "", true, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(true);
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1164.9941F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isNameCenterPointAt(80.8739F, 1.2056011F, (-1164.9941F));
      homePieceOfFurniture0.isPointAt(1294.4432F, 0.0F, 80.8739F);
      homePieceOfFurniture0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[11];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ubp|)!k", "Ubp|)!k", "Ubp|)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Ubp|)!k", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow0.getNameStyle();
      homeDoorOrWindow1.setNameStyle((TextStyle) null);
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, (-2414.02F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow1);
      homeDoorOrWindow0.getShininess();
      homeDoorOrWindow1.clone();
      homeDoorOrWindow0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((-2452.1F));
      Float float0 = new Float((double) (-2452.1F));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.setVisible(true);
      Level level0 = new Level((String) null, 0.0F, (-357.9F), 2.0F);
      homeDoorOrWindow1.isAtLevel(level0);
      homeDoorOrWindow1.getValueAddedTax();
      homeDoorOrWindow1.getX();
      homeDoorOrWindow0.setDescription("?@cbaA9T7=fvk%C$V~");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      MockURL.getFileExample();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("2MbNO$Ycxz\"G6cX,", (Content) null, (Content) null, 80.8739F, 2992.48F, 1820.686F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.isPointAt(1820.686F, 2992.48F, 1820.686F);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[4];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("WIDTH", "WIDTH", "WIDTH", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.13771525F, (-1.0F), 0.13771525F, 0.13771525F, false, (-1.0F), 0.13771525F, sashArray0, (float[][]) null, "WIDTH", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      bigInteger0.flipBit((byte)21);
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", (PropertyChangeListener) null);
      homeDoorOrWindow1.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeDoorOrWindow0.getTexture();
      homeDoorOrWindow1.setTexture((HomeTexture) null);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      Level level0 = new Level((String) null, 2577.03F, (-116.03124F), 1069.0F);
      homeDoorOrWindow1.isBottomRightPointAt(2577.03F, 27.783936F, (-116.03124F));
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow2.setShininess(float0);
      homeDoorOrWindow2.setDescription(")D`liDM;be{X>0lT");
      homeDoorOrWindow0.setWidth(538.95F);
      homeDoorOrWindow1.isTexturable();
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow2.setDepth(27.783936F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      Level level0 = new Level(")D`liDM;be{X>0lT", (-5.674589F), (-357.9F), 2.0F);
      homeDoorOrWindow1.isBottomRightPointAt((byte)15, 3.2864308F, 3.2864308F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow3.setShininess(float0);
      homeDoorOrWindow0.setDescription(")D`liDM;be{X>0lT");
      homeDoorOrWindow2.isTexturable();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeDoorOrWindow0.addPropertyChangeListener(propertyChangeListenerProxy0);
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 881.242F, 129.59346F, (byte)0, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      bigDecimal1.max(bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.getNameYOffset();
      HomePieceOfFurniture.SortableProperty.values();
      Level level0 = new Level("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", 0.0F, 0.0F, 3.4028235E38F);
      Level level1 = level0.clone();
      homeDoorOrWindow0.setLevel(level1);
      homeDoorOrWindow0.getHeight();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      float float0 = 3.2864308F;
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setDepth(3.2864308F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("WIDTH", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 0.0F, sashArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.isTopRightPointAt(0.0F, (-1.0F), (-1.0F));
      homeDoorOrWindow1.getLevel();
      homeDoorOrWindow0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.isTopLeftPointAt(3.2864308F, 5410.018F, (-1.0F));
      homeDoorOrWindow0.setDepth(3.2864308F);
      homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 3.2864308F, 3.2864308F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getTexture();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Float float0 = new Float(1224.6112F);
      Integer integer0 = new Integer((-2145994901));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("6j", resourceURLContent0, resourceURLContent0, 1.0F, (byte)21, (-4324.501F), 1224.6112F, false, "6j", integer0, (float[][]) null, false, 3.4028235E38F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isAtLevel((Level) null);
      Integer integer1 = Integer.getInteger("com.eteks.sweethome3d.model.FurnitureCategory", integer0);
      homePieceOfFurniture1.setColor(integer1);
      homePieceOfFurniture1.setY((byte)21);
      homePieceOfFurniture1.getPoints();
      homePieceOfFurniture0.isTopRightPointAt(1.0F, 1.0F, (byte)21);
      homePieceOfFurniture1.isTopRightPointAt((-218.60944F), 2194.1592F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      BigDecimal bigDecimal1 = new BigDecimal(0L);
      bigDecimal0.toEngineeringString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[5];
      Float float0 = new Float((-1.0));
      LightSource lightSource0 = new LightSource(1814.81F, 1.0F, 0L, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0L, 0L, 3631.362F, 3);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(2310.03F, 1814.81F, (-1526.0F), 1849);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(1239.5669F, (-1526.0F), 1814.81F, (-787));
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(927.0F, 0.5F, 2303.0F, (-787));
      lightSourceArray0[4] = lightSource4;
      BigDecimal bigDecimal2 = new BigDecimal(2147481897);
      CatalogLight catalogLight0 = new CatalogLight("l]", "1", "G>Mw", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, 1239.5669F, (-1526.0F), 1239.5669F, 1.0F, false, lightSourceArray0, "", (float[][]) null, ")D`liDM;b{X>0lT", true, true, true, bigDecimal0, bigDecimal2, (String) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      homeDoorOrWindow0.setX(3.2864308F);
      homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 3.2864308F, 3.2864308F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow1.setY((byte)21);
      homeDoorOrWindow1.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1020.4255F, 3.2864308F, 0.6432154F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.getGroundElevation();
      homePieceOfFurniture0.getValueAddedTax();
      homePieceOfFurniture0.isBackFaceShown();
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URL uRL1 = MockURL.URL(uRL0, ")D`liDM;b{X>0lT");
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL1, true);
      Float float0 = new Float(1.0F);
      Integer integer0 = new Integer((byte)21);
      Integer.remainderUnsigned(970, (byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("'q>bz+x| J ", resourceURLContent0, resourceURLContent0, 4, 396.87F, (byte)21, 21.0F, false, ")D`liDM;b{X>0lT", integer0, (float[][]) null, true, 1.0F, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      Integer integer1 = Integer.getInteger("applicationSubFolder.Windows", 488);
      Integer.getInteger("nT87=X^Q!jRT", integer1);
      homePieceOfFurniture0.setColor(integer1);
      homePieceOfFurniture0.setY(21.0F);
      homePieceOfFurniture0.getPoints();
      catalogPieceOfFurniture0.getCategory();
      homePieceOfFurniture0.isTopRightPointAt(1224.6112F, 21.0F, 2.14714701E9F);
      homePieceOfFurniture0.getNameAngle();
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      BigDecimal bigDecimal0 = new BigDecimal((-1335032405));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$7", (String) null, " ` u#w", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 0.0F, 0.0F, 129.59346F, false, 0.0F, 129.59346F, sashArray0, (float[][]) null, "ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", true, true, false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getY();
      HomePieceOfFurniture.SortableProperty.valueOf("HEIGHT");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, true);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float(0.0F);
      LightSource lightSource0 = new LightSource(1.0F, 799.1461F, 799.1461F, 3, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1278.7F, 799.1461F, 5096.376F, 3, float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-57.143795F), 1.0F, (-57.143795F), 3);
      lightSourceArray0[2] = lightSource2;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = BigDecimal.valueOf((long) 3);
      CatalogLight catalogLight0 = new CatalogLight("", "m", "m", resourceURLContent0, resourceURLContent0, 2228.2268F, 1.0F, 1.0F, 1.0F, true, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal1);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getName();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow1.setY((byte)21);
      homeDoorOrWindow1.getNameStyle();
      homeDoorOrWindow1.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BigDecimal bigDecimal0 = new BigDecimal(157.1319359307872);
      float float0 = 0.0F;
      LightSource[] lightSourceArray0 = new LightSource[1];
      LightSource lightSource0 = new LightSource(4.219347F, 77.0F, 0.3926991F, 19);
      lightSourceArray0[0] = lightSource0;
      CatalogLight catalogLight0 = new CatalogLight("IO.N", "IO.N", "", (Content) null, (Content) null, 0.0F, 0.0F, 1.0F, 1.0F, true, lightSourceArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "G[iaKUakP");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((byte)15);
      Float float0 = new Float((-2898.7));
      Float float1 = new Float(1.0F);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = BigInteger.ZERO;
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      bigDecimal0.toEngineeringString();
      homeDoorOrWindow2.clone();
      homeDoorOrWindow1.isBottomRightPointAt(0.5F, 0.5F, (-1441.479F));
      homeDoorOrWindow0.setAngle((-1.2705722F));
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.39014146F, (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 612.3056F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      bigInteger0.abs();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt((-1.0F), (-1.0F), 0.25F);
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 0.0F, 129.59346F, (byte)41, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      bigDecimal0.plus();
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setAngle(129.59346F);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.setHeight((byte)41);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal((-1.0F));
      BigDecimal bigDecimal2 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, (-1.0F), 3.2864308F, (-1.0F), false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "temp", true, bigDecimal1, bigDecimal2);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setModelMirrored(false);
      Float float0 = new Float((-288.37453682));
      homeDoorOrWindow1.isBottomRightPointAt((-1.0F), 3.2864308F, 27.783936F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow2.getShininess();
      homeDoorOrWindow0.setShininess((Float) null);
      homeDoorOrWindow3.setDescription("com.eteks.sweethome3d.model.TextStyle");
      homeDoorOrWindow0.isTexturable();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[1];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      CatalogTexture catalogTexture0 = new CatalogTexture("ELEVATION", (String) null, (Content) null, (-1420.6196F), 0.0F, "ELEVATION", false);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture0.setTexture(homeTexture0);
      homePieceOfFurniture0.isTexturable();
      homeLight0.isNameCenterPointAt(1.0F, (-2991.98F), 81.3739F);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float0 = new Float((double) (-900.7651F));
      LightSource lightSource0 = new LightSource((-900.7651F), (-1387.0258F), 0.19507073F, (-1473), float0);
      lightSourceArray0[0] = lightSource0;
      Float float1 = new Float((float) (-1473));
      LightSource lightSource1 = new LightSource((-21.0F), (-900.7651F), (-1387.0258F), 1737, float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource((-21.0F), 1564.418F, 1564.418F, 1);
      lightSourceArray0[2] = lightSource2;
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = (-428.564F);
      floatArray1[2] = (-21.0F);
      floatArray1[3] = (-428.564F);
      floatArray1[4] = (-900.7651F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = 77.0F;
      floatArray2[1] = (-834.152F);
      floatArray2[2] = (-900.7651F);
      floatArray2[3] = 0.19507073F;
      floatArray2[4] = (-900.7651F);
      floatArray2[5] = (-1387.0258F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = (-900.7651F);
      floatArray3[1] = (-428.564F);
      floatArray3[2] = 0.19507073F;
      floatArray3[3] = 1564.418F;
      floatArray3[4] = 0.19507073F;
      floatArray3[5] = 0.3926991F;
      floatArray3[6] = (float) 1;
      floatArray3[7] = 0.3926991F;
      floatArray3[8] = (float) 1737;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = (float) (-1473);
      floatArray4[1] = (-834.152F);
      floatArray4[2] = 1564.418F;
      floatArray4[3] = (-834.152F);
      floatArray4[4] = (-1387.0258F);
      floatArray4[5] = 77.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = (float) 1737;
      floatArray5[1] = (float) 1;
      floatArray5[2] = (-834.152F);
      floatArray5[3] = 0.19507073F;
      floatArray5[4] = (float) 1;
      floatArray5[5] = 0.3926991F;
      floatArray5[6] = (-21.0F);
      floatArray5[7] = (-21.0F);
      floatArray5[8] = (float) 1;
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = new BigDecimal((-1387.0258F));
      CatalogLight catalogLight0 = new CatalogLight("`ZIm!AOq5y_!", "", "`ZIm!AOq5y_!", temporaryURLContent0, temporaryURLContent0, (-21.0F), 1410.56F, 1410.56F, (-428.564F), false, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      linkedList0.add((HomePieceOfFurniture) homeLight0);
      String string0 = "Linux";
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Linux");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.2716454F, 27.802189F, 0.0F, false, 0.2716454F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.plus();
      Float float0 = new Float((double) 0.0F);
      BigInteger bigInteger1 = BigInteger.ONE;
      bigInteger0.xor(bigInteger1);
      homeDoorOrWindow0.isTopRightPointAt(27.802189F, 27.802189F, 989.095F);
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 0.39014146F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1.0F));
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, (-1.0F), 3.2864308F, (-1.0F), false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Cbp|rW!k", true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setModelMirrored(false);
      Float float0 = new Float((-288.37453682));
      homeDoorOrWindow1.isBottomRightPointAt((-1.0F), 3.2864308F, 27.783936F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow2.isModelMirrored();
      HomeDoorOrWindow homeDoorOrWindow4 = homeDoorOrWindow0.clone();
      homeDoorOrWindow4.getElevation();
      homeDoorOrWindow3.setName("Cbp|rW!k");
      homeDoorOrWindow1.getIcon();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)46;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1213.3694F, (-1.0F), 0.0F, false, 1213.3694F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName((String) null);
      homeDoorOrWindow1.getNameYOffset();
      homeDoorOrWindow0.isTopLeftPointAt(0.0F, 0.0F, 66.23766F);
      homeDoorOrWindow0.move(612.3056F, 625.2F);
      homeDoorOrWindow1.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.3926991F, true, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow1.setMovable(false);
      homeDoorOrWindow0.getX();
      homeDoorOrWindow1.getY();
      homeDoorOrWindow1.isTopLeftPointAt((-555.4F), (byte)21, 2490.7F);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.intersectsRectangle((-3485.38F), (-564.62F), 80.8739F, 80.8739F);
      homeLight0.isPointAt(80.8739F, (-618.7F), (-618.7F));
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      homeDoorOrWindow1.isDeformable();
      homeDoorOrWindow1.getY();
      homeDoorOrWindow1.isDeformable();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.setElevation((byte)21);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      bigDecimal0.ulp();
      homeDoorOrWindow1.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homePieceOfFurniture0.getNameStyle();
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      homePieceOfFurniture0.isDoorOrWindow();
      homeDoorOrWindow0.isVisible();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.3926991F, 27.802189F, 0.0F, false, 0.3926991F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(false);
      bigDecimal0.plus();
      Float float0 = new Float((double) 27.802189F);
      homeDoorOrWindow0.isBottomLeftPointAt(0.39014146F, 0.3926991F, 3.4028235E38F);
      homeDoorOrWindow0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, 2157.891F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.getColor();
      System.setCurrentTimeMillis(1L);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 0.0F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(21.0F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.isVisible();
      homeDoorOrWindow0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setY((-912.61505F));
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DEPTH;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      homeDoorOrWindow0.setY(0.0F);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow0.setElevation((byte)21);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setNameVisible(false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homePieceOfFurniture0.setNameYOffset(2.0F);
      homeDoorOrWindow1.getCatalogId();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("sG8)Y>:D`RvwwCZ<ew");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.sG8)Y>:D`RvwwCZ<ew
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow1.getIcon();
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.getValueAddedTax();
      homeDoorOrWindow0.getWidth();
      homeDoorOrWindow1.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 137.6F, (byte)0, true, 881.242F, 137.6F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getY();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 0.0F, 129.59346F, (byte)41, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.setHeight((byte)41);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 1225.4762F, (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 0.3926991F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Level level0 = new Level((String) null, 190.92F, (-2217.4385F), 10.0F);
      homeDoorOrWindow0.isAtLevel(level0);
      homeDoorOrWindow0.getPoints();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float1 = Float.valueOf(190.92F);
      homeDoorOrWindow0.setShininess(float1);
      homeDoorOrWindow0.getShininess();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), (-1.0F), false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Level level0 = new Level("", 1114.5358F, (-1.0F), 0.0F);
      Level level1 = level0.clone();
      homeDoorOrWindow0.setLevel(level1);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      Level level2 = new Level("", (-1.0F), (-1.0F), (byte)21);
      homeDoorOrWindow0.isAtLevel(level0);
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow2.getValueAddedTax();
      homeDoorOrWindow1.setX((-1.0F));
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setHeight((-2452.1F));
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.setVisible(true);
      Level level0 = new Level((String) null, 0.0F, (-357.9F), 2.0F);
      homeDoorOrWindow1.isAtLevel(level0);
      homeDoorOrWindow1.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash((-1.0F), 0.0F, (-1.0F), (-1.0F), 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), (-1.0F), (-1.0F), 0.0F, false, (-1.0F), (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName((String) null);
      homeDoorOrWindow0.setNameYOffset(0.0F);
      homeDoorOrWindow1.setX((byte)0);
      homeDoorOrWindow0.isTexturable();
      homeDoorOrWindow1.isNameCenterPointAt((-1.0F), 0.0F, 1597.12F);
      homeDoorOrWindow1.isPointAt((-1.0F), (-1.0F), 1.0F);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1441.479F), 130.47533F, 881.242F, 0.0F, true, (-1051.1166F), 881.242F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      homeDoorOrWindow1.setModelMirrored(true);
      homeDoorOrWindow1.getNameYOffset();
      HomePieceOfFurniture.SortableProperty.values();
      Level level0 = new Level((String) null, 2665.2324F, (-1441.479F), 0.0F);
      level0.clone();
      homeDoorOrWindow1.setLevel(level0);
      homeDoorOrWindow1.setX((byte)41);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) (-1.0F));
      Float float1 = new Float((-1.0F));
      bigDecimal0.plus();
      Float float2 = new Float((double) (-1.0F));
      homeDoorOrWindow0.setAngle(2515.628F);
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.setHeight((-1.0F));
      homeDoorOrWindow0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 881.242F, 129.59346F, (byte)41, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.getElevation();
      homeDoorOrWindow0.getDescription();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.0F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      homeDoorOrWindow0.isTopRightPointAt((-1.0F), 5.310901F, 5.310901F);
      bigDecimal0.stripTrailingZeros();
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow0.setNameAngle(540.2664F);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, resourceURLContent0, 4858.0F, 540.2664F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeDoorOrWindow1.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Long long0 = Long.getLong("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", 0L);
      Float float0 = new Float((float) 0L);
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash((-1.0F), 0L, 2734.0F, 1.0F, 2399.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), (-1.0F), 1.0F, 3446.2175F, 0.3926991F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(2954.952F, 2528.0F, 0.3926991F, 1.0F, 1660.4F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(5.6732564F, (-433.34F), 1.0F, (-433.34F), (-2099.717F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(1.0F, 3446.2175F, 5.6732564F, 1.0F, 30.778921F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(1660.4F, 0.0F, (-2099.717F), 1660.4F, 41.0F);
      sashArray0[5] = sash5;
      float[][] floatArray0 = new float[8][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 2528.0F;
      floatArray1[1] = 0.3926991F;
      floatArray1[2] = 0.3926991F;
      floatArray1[3] = 0.3926991F;
      floatArray1[4] = 3446.2175F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (-1.0F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = 2528.0F;
      floatArray2[3] = 1660.4F;
      floatArray2[4] = 41.0F;
      floatArray2[5] = 2528.0F;
      floatArray2[6] = 2954.952F;
      floatArray2[7] = 2734.0F;
      floatArray2[8] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[4];
      floatArray3[0] = 2528.0F;
      floatArray3[1] = (-4363.271F);
      floatArray3[2] = 2399.0F;
      floatArray3[3] = 0.3926991F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      floatArray4[0] = 1.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 1.0F;
      floatArray5[2] = 2399.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[6];
      floatArray6[0] = 0.0F;
      floatArray6[1] = 2528.0F;
      floatArray6[2] = 0.0F;
      floatArray6[3] = 2954.952F;
      floatArray6[4] = 1660.4F;
      floatArray6[5] = (-4363.271F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = 2734.0F;
      floatArray7[1] = (-2099.717F);
      floatArray7[2] = 2954.952F;
      floatArray7[3] = (-1.0F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[1];
      floatArray8[0] = 1660.4F;
      floatArray0[7] = floatArray8;
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "com.eteks.sweethome3d.model.HomePieceOfFurniture$14", "", (String[]) null, long0, float0, uRLContent0, uRLContent0, uRLContent0, 1.0F, 1.0F, 1.0F, 0L, false, 1.0F, 1.0F, sashArray0, floatArray0, " doesn't contain texture ", true, false, true, bigDecimal0, bigDecimal1, " doesn't contain texture ");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.getX();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 13.140502F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)21;
      byteArray1[1] = (byte)21;
      byteArray1[2] = (byte)21;
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte)21;
      byteArray1[5] = (byte)21;
      byteArray1[6] = (byte)21;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      bigInteger0.flipBit(0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setName("tr");
      homeDoorOrWindow0.setY(13.140502F);
      homeDoorOrWindow0.isTopRightPointAt(0.0F, (byte)21, 0.0F);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      float float0 = 0.0F;
      float float1 = 0.0F;
      float float2 = 0.0F;
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      // Undeclared exception!
      try { 
        homeDoorOrWindow0.setHeight((-1.0F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setY((-912.61505F));
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.DEPTH;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Cbp|rW!k", true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-288.37453682));
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, 27.783936F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow2.isModelMirrored();
      homeDoorOrWindow3.isBottomLeftPointAt(706.564F, 706.564F, (-2414.02F));
      homeDoorOrWindow0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setName("tr");
      Integer integer0 = new Integer(4);
      homeDoorOrWindow0.isTopRightPointAt(777.0F, (-912.61505F), 1224.6112F);
      homeDoorOrWindow1.isTopRightPointAt(777.0F, (-912.61505F), (-837.8508F));
      homeDoorOrWindow1.setNameAngle(1224.6112F);
      homeDoorOrWindow0.setNameAngle(13.140502F);
      homeDoorOrWindow0.getElevation();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[15];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("WIDTH", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, (-1.0F), 0.0F, 0.0F, true, 1225.4762F, 0.0F, sashArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow1.setAngle(0.0F);
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[11];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ubp|)!k", "Ubp|)!k", "Ubp|)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, "Ubp|)!k", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, 3.2864308F);
      homeDoorOrWindow1.setDepth((-1.0F));
      homeDoorOrWindow0.isBottomRightPointAt((-1.0F), 462.78644F, 2577.03F);
      homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 79.993744F, 1.0F, 1.0F, 79.993744F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      Integer integer0 = new Integer((-1372));
      homeLight0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Float float0 = new Float(1224.6112F);
      Integer integer0 = new Integer((-2145994901));
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, (byte)21, (-4324.501F), 1224.6112F, false, "", integer0, (float[][]) null, false, 3.4028235E38F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isAtLevel((Level) null);
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      Float float0 = new Float((-2898.7));
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow1.getDescription();
      homeDoorOrWindow1.isPointAt(0.0F, 0.0F, (byte)21);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Integer integer0 = new Integer((byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("j", resourceURLContent0, resourceURLContent0, (byte)21, (byte)21, (-4324.501F), 1239.5669F, false, "j", integer0, (float[][]) null, false, (byte)21, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName("j");
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setWidth(1239.5669F);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.3926991F, 27.802189F, 0.0F, false, 0.3926991F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(false);
      Level level0 = new Level((String) null, 0.0F, 0.0F, 2129.0308F);
      homeDoorOrWindow0.isPointAt(0.0F, 2129.0308F, 2129.0308F);
      homeDoorOrWindow0.isNameCenterPointAt(2.0F, 0.5F, 0.5F);
      homeDoorOrWindow0.setNameAngle((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      homeDoorOrWindow2.getElevation();
      homeDoorOrWindow0.setDescription((String) null);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 1007.3F, (-1.0F), 0.0F, 0.0F, false, 1225.4762F, 0.3926991F, sashArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      bigDecimal0.toEngineeringString();
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.isBottomLeftPointAt(0.0F, 0.0F, 0.0F);
      // Undeclared exception!
      try { 
        homeDoorOrWindow1.setModelMirrored(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 79.83081F, 1.0F, 1.0F, (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      homeLight0.setMovable(true);
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      homeLight0.getDepth();
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.setMovable(true);
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      homeLight0.isBottomLeftPointAt((-1441.479F), (-1713.09F), (-2975.8F));
      System.setCurrentTimeMillis(1L);
      homeLight0.getPoints();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash sash0 = new Sash(0.0F, 130.47533F, 0.0F, 0.0F, 0.0F);
      byte[] byteArray0 = new byte[16];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 130.47533F, 130.47533F, 129.59346F, (byte)0, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      bigDecimal1.max(bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      homeDoorOrWindow0.setShininess(float0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("com.eteks.sweethome3d.model.HomePieceOfFurniture$1");
      catalogDoorOrWindow0.setCategory(furnitureCategory0);
      Float float1 = new Float((-1705.06501));
      homeDoorOrWindow0.setShininess(float1);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(2664.64F, 30.778921F, 0.5F);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.3926991F, 27.802189F, 0.0F, false, 0.3926991F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(false);
      homeDoorOrWindow0.clone();
      homeDoorOrWindow0.isTopRightPointAt(27.802189F, 6.412637F, 6.412637F);
      homeDoorOrWindow0.setNameAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 8.134591F, 1224.6112F, 8.134591F, 0.0F, false, 1224.6112F, 8.134591F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory(":8^hoR:p&X");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float(8.134591F);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setShininess(float0);
      homeDoorOrWindow0.setDescription("");
      homeDoorOrWindow1.isTexturable();
      HomePieceOfFurniture.SortableProperty.values();
      homeDoorOrWindow1.isTopRightPointAt(4.6137F, 1224.6112F, 2515.8047F);
      homeDoorOrWindow1.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 13.927503F, 13.927503F, (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.isDeformable();
      catalogLight0.getCategory();
      catalogLight0.setCategory((FurnitureCategory) null);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeLight0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeLight0.setMovable(true);
      homeLight0.getDescription();
      homeLight0.getGroundElevation();
      homeLight0.isTopRightPointAt(2.6511943F, (-1441.479F), 80.8739F);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Cbp|rW!k");
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Cbp|rW!k", true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      Float float0 = new Float((-288.37453682));
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, 27.783936F);
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow2.isModelMirrored();
      homeDoorOrWindow0.isTopRightPointAt(1083.4908F, 1611.167F, 2.0F);
      homeDoorOrWindow0.intersectsRectangle(1.0F, 1611.167F, (-918.5346F), 5.2831855F);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigDecimal0.intValue();
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("ctm.eteks.sweethome3d.model.HomePieceOf:urniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.0F, 881.242F, 129.59346F, (byte)0, true, 881.242F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.containsPoint(0, 881.242F, 881.242F);
      homeDoorOrWindow0.setModelMirrored(true);
      homeDoorOrWindow0.isModelMirrored();
      homeDoorOrWindow0.getElevation();
      homeDoorOrWindow0.getTexture();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[11];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Ubp|)!k", "Ubp|)!k", "Ubp|)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Ubp|)!k", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, (-2414.02F));
      homeDoorOrWindow0.clone();
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      homeDoorOrWindow1.setElevation(3.2864308F);
      homeDoorOrWindow1.isBottomRightPointAt(2.0F, 2.0F, 3.2864308F);
      homeDoorOrWindow0.getValueAddedTax();
      Level level0 = new Level("Ubp|)!k", 82.0F, 27.783936F, (-370.71F));
      homeDoorOrWindow0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory(":8^hoR:p&X");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(1224.6112F);
      CatalogTexture catalogTexture0 = new CatalogTexture("F2d`l80b!", resourceURLContent0, 0.0F, 1224.6112F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      Content content0 = homeTexture0.getImage();
      URLContent uRLContent0 = new URLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[3];
      Float float2 = new Float(1224.6112F);
      LightSource lightSource0 = new LightSource(2.0F, 0.0F, (-1.0F), 11, float2);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, 1523.412F, 2.0F, (-412), float1);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(0.5F, 0.0F, 1523.412F, (-412), (Float) null);
      lightSourceArray0[2] = lightSource2;
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, "", resourceURLContent0, content0, uRLContent0, 2.0F, 2.0F, 0.0F, 534.0F, false, lightSourceArray0, "", (float[][]) null, "F2d`l80b!", false, false, true, bigDecimal0, bigDecimal0, "5vr6T79l5m;");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      bigInteger0.flipBit((byte)21);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "g_5(r|#Mjc1|?%4X%4U", "com.eteks.sweethome3d.model.CatalogPieceOfFurniture", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1988.8832F, 1098.1F, 511.53F, (byte)21, true, (byte)21, 0.0F, sashArray0, (float[][]) null, "", true, false, false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 3.2864308F, 3.2864308F);
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "1");
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Cbp|rW!k", true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(3.2864308F);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setModelMirrored(false);
      homeDoorOrWindow1.setWidth((-2414.02F));
      homeDoorOrWindow0.setModelMirrored(false);
      homeDoorOrWindow0.isTopLeftPointAt(3.2864308F, 3.2864308F, (-709.0F));
      homeDoorOrWindow1.clone();
      Float float0 = new Float((double) (-709.0F));
      homeDoorOrWindow0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[2];
      LightSource lightSource0 = new LightSource(363.0677F, 363.0677F, 3.4028235E38F, 1782);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(0.0F, 0.0F, 0.0F, 1782);
      lightSourceArray0[1] = lightSource1;
      float[][] floatArray0 = new float[8][0];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 363.0677F;
      floatArray1[3] = (-1.0F);
      floatArray1[4] = (-1.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = 3.4028235E38F;
      floatArray2[1] = (-1.0F);
      floatArray2[2] = (float) 1782;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = 3.4028235E38F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 0.0F;
      floatArray3[1] = (float) 1782;
      floatArray3[2] = (float) 1782;
      floatArray3[3] = 0.0F;
      floatArray3[4] = 0.0F;
      floatArray3[5] = (-1.0F);
      floatArray3[6] = 0.0F;
      floatArray3[7] = 0.0F;
      floatArray3[8] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 0.0F;
      floatArray5[1] = 3.4028235E38F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[0];
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[0];
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[1];
      floatArray8[0] = (-182.51506F);
      floatArray0[7] = floatArray8;
      BigDecimal bigDecimal0 = new BigDecimal(1782);
      CatalogLight catalogLight0 = new CatalogLight("`~\",YY", "h=I%", "Z0YCb3k*I", (Content) null, (Content) null, (Content) null, 0.0F, 0.0F, (-1.0F), 0.0F, true, lightSourceArray0, floatArray0, "h=I%", false, false, false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.getShininess();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Float float0 = new Float(1224.6112F);
      Integer integer0 = new Integer((byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("6j", resourceURLContent0, resourceURLContent0, (byte)21, (byte)21, (-4324.501F), 1224.6112F, false, "6j", integer0, (float[][]) null, false, 3.4028235E38F, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setName("6j");
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setDepth((byte)21);
      Integer integer1 = Integer.getInteger("6j", integer0);
      homePieceOfFurniture1.setColor(integer1);
      homePieceOfFurniture1.setY((byte)21);
      homePieceOfFurniture1.getPoints();
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      homePieceOfFurniture0.isTopRightPointAt((-4324.501F), (-4324.501F), (byte)21);
      homePieceOfFurniture1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash(0.39014146F, 0.0F, 0.0F, 0.39014146F, 0.0F);
      BigInteger bigInteger0 = BigInteger.ONE;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 27.802189F, 0.3926991F, 27.802189F, 0.0F, false, 0.3926991F, 27.802189F, sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(false);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      homeDoorOrWindow0.isTopRightPointAt(27.802189F, 6.412637F, 6.412637F);
      bigInteger0.longValueExact();
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow0.setNameAngle(540.2664F);
      homeDoorOrWindow1.getElevation();
      homeDoorOrWindow1.setAngle(0.3926991F);
      homeDoorOrWindow0.getCatalogId();
      homeDoorOrWindow0.clone();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1178.67F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      Float float0 = new Float((double) (-1178.67F));
      homePieceOfFurniture0.setDepth((-1178.67F));
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      homePieceOfFurniture0.isTopRightPointAt(1225.4762F, 4865.7373F, (-253.90617F));
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.39014146F, (-894.62F), 0.0F, 0.0F, false, 1225.4762F, 612.3056F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.tools.OperatingSystem$2", false, bigDecimal0, bigDecimal0);
      Float float0 = new Float((-1.0F));
      bigInteger0.abs();
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isBottomRightPointAt(5.6732564F, 0.0F, (-3714.746F));
      homeDoorOrWindow0.getDepth();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("e,\"!hB$^", (Content) null, (Content) null, 80.8739F, 80.8739F, (-1182.1825F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setElevation(0.1684036F);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      homePieceOfFurniture0.isTexturable();
      homePieceOfFurniture0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 129.59346F, (-1.0F), 0.0F, false, 129.59346F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float float0 = new Float((double) 0.0F);
      homeDoorOrWindow0.getNameYOffset();
      homeDoorOrWindow0.isTopLeftPointAt((-1209.258F), 0.0F, 0.0F);
      homeDoorOrWindow0.move((-1.0F), 612.3056F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      Float float0 = new Float((-2898.7));
      Integer integer0 = new Integer((byte)21);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, resourceURLContent0, resourceURLContent0, (-1.0F), 610.43274F, 706.3F, (-4324.501F), true, "", integer0, (float[][]) null, true, 706.3F, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isAtLevel((Level) null);
      homePieceOfFurniture0.getPoints();
      homePieceOfFurniture0.isMovable();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeLight0.isPointAt(80.8739F, (-618.7F), (-618.7F));
      // Undeclared exception!
      try { 
        homeLight0.setHeight((-618.7F));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      byte[] byteArray0 = new byte[14];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      HomePieceOfFurniture.Property.values();
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal1 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$1", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, 677.10236F, 0.0F, 129.59346F, (byte)41, true, 0.0F, 129.59346F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, false, true, bigDecimal0, bigDecimal1);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Float float0 = new Float(0.0F);
      bigDecimal0.plus();
      Float float1 = new Float(701994.0);
      homeDoorOrWindow0.setShininess(float1);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setDepth(27.783936F);
      Float float0 = new Float((double) 27.783936F);
      homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 27.783936F, 3.2864308F);
      homeDoorOrWindow0.setNameVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      homeDoorOrWindow0.getY();
      homeDoorOrWindow0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1.0F));
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Cbp|rW!k", "Cbp|rW!k", "Cbp|rW!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, (-1.0F), 3.2864308F, (-1.0F), false, 3.2864308F, (-2414.02F), sashArray0, (float[][]) null, "Cbp|rW!k", true, bigDecimal0, bigDecimal1);
      assertEquals(0, sashArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setDepth(27.783936F);
      assertEquals(0, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(0, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getCatalogId());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-2414.02F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setModelMirrored(false);
      assertEquals(0, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getCatalogId());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-2414.02F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      
      Float float0 = new Float((-288.37453682));
      assertNotNull(float0);
      assertEquals((-288.37454F), (float)float0, 0.01F);
      
      boolean boolean0 = homeDoorOrWindow1.isBottomRightPointAt((-1.0F), 3.2864308F, 27.783936F);
      assertEquals(0, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getCatalogId());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-2414.02F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("Cbp|rW!k", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(boolean0);
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      assertEquals(0, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow2.getCatalogId());
      assertEquals("Cbp|rW!k", homeDoorOrWindow2.getName());
      assertEquals("Cbp|rW!k", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(27.783936F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(1.6432154F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow2);
      
      HomeDoorOrWindow homeDoorOrWindow3 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertEquals((-2414.02F), homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertNull(homeDoorOrWindow3.getCurrency());
      assertEquals("Cbp|rW!k", homeDoorOrWindow3.getDescription());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals(0.0F, homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow3.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow3.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow3.isResizable());
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow3.getX(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertEquals("Cbp|rW!k", homeDoorOrWindow3.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow3.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow3.getName());
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals(27.783936F, homeDoorOrWindow3.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow3.getColor());
      assertNotNull(homeDoorOrWindow3);
      
      homeDoorOrWindow0.setModelMirrored(true);
      assertEquals(0, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      
      boolean boolean1 = homeDoorOrWindow2.isModelMirrored();
      assertEquals(0, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow2.getCatalogId());
      assertEquals("Cbp|rW!k", homeDoorOrWindow2.getName());
      assertEquals("Cbp|rW!k", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals((-0.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(27.783936F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals(1.6432154F, homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(boolean1);
      
      HomeDoorOrWindow homeDoorOrWindow4 = homeDoorOrWindow0.clone();
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getDescription());
      assertEquals(0.0F, homeDoorOrWindow4.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow4.isTexturable());
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getName());
      assertFalse(homeDoorOrWindow4.isBackFaceShown());
      assertFalse(homeDoorOrWindow4.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow4.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow4.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow4.isVisible());
      assertNull(homeDoorOrWindow4.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow4.isResizable());
      assertTrue(homeDoorOrWindow4.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow4.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow4.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow4.isMovable());
      assertNull(homeDoorOrWindow4.getShininess());
      assertEquals(1.6432154F, homeDoorOrWindow4.getX(), 0.01F);
      assertTrue(homeDoorOrWindow4.isDoorOrWindow());
      assertFalse(homeDoorOrWindow4.isBoundToWall());
      assertNull(homeDoorOrWindow4.getCurrency());
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getCatalogId());
      assertNull(homeDoorOrWindow4.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow4.getWallThickness(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow4.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow4.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow4.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow4.getWallDistance(), 0.01F);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow4);
      
      float float1 = homeDoorOrWindow4.getElevation();
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow2));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getDescription());
      assertEquals(0.0F, homeDoorOrWindow4.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow4.isTexturable());
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getName());
      assertFalse(homeDoorOrWindow4.isBackFaceShown());
      assertFalse(homeDoorOrWindow4.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow4.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow4.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow4.isVisible());
      assertNull(homeDoorOrWindow4.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow4.isResizable());
      assertTrue(homeDoorOrWindow4.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow4.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow4.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow4.isMovable());
      assertNull(homeDoorOrWindow4.getShininess());
      assertEquals(1.6432154F, homeDoorOrWindow4.getX(), 0.01F);
      assertTrue(homeDoorOrWindow4.isDoorOrWindow());
      assertFalse(homeDoorOrWindow4.isBoundToWall());
      assertNull(homeDoorOrWindow4.getCurrency());
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getCatalogId());
      assertNull(homeDoorOrWindow4.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow4.getWallThickness(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow4.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow4.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow4.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow4.getWallDistance(), 0.01F);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow4.getPrice();
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow2));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getDescription());
      assertEquals(0.0F, homeDoorOrWindow4.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow4.isTexturable());
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getName());
      assertFalse(homeDoorOrWindow4.isBackFaceShown());
      assertFalse(homeDoorOrWindow4.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow4.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow4.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow4.isVisible());
      assertNull(homeDoorOrWindow4.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow4.isResizable());
      assertTrue(homeDoorOrWindow4.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow4.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow4.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow4.isMovable());
      assertNull(homeDoorOrWindow4.getShininess());
      assertEquals(1.6432154F, homeDoorOrWindow4.getX(), 0.01F);
      assertTrue(homeDoorOrWindow4.isDoorOrWindow());
      assertFalse(homeDoorOrWindow4.isBoundToWall());
      assertNull(homeDoorOrWindow4.getCurrency());
      assertEquals("Cbp|rW!k", homeDoorOrWindow4.getCatalogId());
      assertNull(homeDoorOrWindow4.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow4.getWallThickness(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow4.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow4.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow4.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow4.getWallDistance(), 0.01F);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte) (-1), bigDecimal2.byteValue());
      assertEquals((short) (-1), bigDecimal2.shortValue());
      assertEquals((short) (-1), bigDecimal0.shortValue());
      assertEquals((byte) (-1), bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getCreator());
      assertEquals("Cbp|rW!k", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-2414.02F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-2414.02F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("Cbp|rW!k", homeDoorOrWindow0.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(bigDecimal2);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[15];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("WIDTH", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 0.13771525F, (-1.0F), 0.13771525F, 0.13771525F, false, (-1.0F), 0.13771525F, sashArray0, (float[][]) null, (String) null, false, bigDecimal0, bigDecimal0);
      assertEquals(15, sashArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("WIDTH", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(15, sashArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("WIDTH", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("WIDTH", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.13771525F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.068857625F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.13771525F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.13771525F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      
      String string0 = bigDecimal0.toEngineeringString();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(string0);
      assertEquals("10", string0);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomLeftPointAt((-1.0F), (-1.0F), 1.0F);
      assertEquals(15, sashArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("WIDTH", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("WIDTH", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.13771525F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.068857625F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.13771525F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.13771525F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(boolean0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(15, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("WIDTH", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("WIDTH", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.13771525F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.068857625F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.13771525F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.13771525F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.13771525F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("WIDTH", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.13771525F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.13771525F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.068857625F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.13771525F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.13771525F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      homeDoorOrWindow1.setAngle(0.0F);
      assertEquals(15, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals("WIDTH", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.13771525F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("WIDTH", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.13771525F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.068857625F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.13771525F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.13771525F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.13771525F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.13771525F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("WIDTH", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.13771525F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.13771525F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.068857625F, homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.13771525F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.13771525F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      Float float0 = homeDoorOrWindow0.getShininess();
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(float0);
      
      float float1 = Float.max(2577.03F, 0.0F);
      assertEquals(2577.03F, float1, 0.01F);
      
      homeDoorOrWindow0.setShininess((Float) null);
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      
      boolean boolean0 = homeDoorOrWindow0.isBottomRightPointAt(2577.03F, 3.2864308F, 3.2864308F);
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertEquals(20, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((short)2, bigDecimal1.shortValue());
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Float float0 = new Float(1239.5669F);
      assertNotNull(float0);
      assertEquals(1239.5669F, (float)float0, 0.01F);
      
      Integer integer0 = new Integer((byte)21);
      assertNotNull(integer0);
      assertEquals(21, (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("6j", resourceURLContent0, resourceURLContent0, (byte)21, (byte)21, (-4324.501F), 1239.5669F, false, "6j", integer0, (float[][]) null, false, 3.4028235E38F, false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNotNull(catalogPieceOfFurniture0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(1.0F, 1.0F, 1105.921F, (-2005.819F), (byte)21);
      assertEquals(21.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-2005.819F), sash0.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash0.getYAxis(), 0.01F);
      assertEquals(1.0F, sash0.getXAxis(), 0.01F);
      assertEquals(1105.921F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      BigDecimal bigDecimal0 = new BigDecimal(8917037.165377654);
      assertEquals((byte)45, bigDecimal0.byteValue());
      assertEquals((short)4141, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("6j", "'D7\b9l\";SyHf", "com.eteks.sweethome3d.tools.OperatingSystem$3", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-4324.501F), 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, false, 1239.5669F, 1239.5669F, sashArray0, (float[][]) null, "6j", true, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)45, bigDecimal0.byteValue());
      assertEquals((short)4141, bigDecimal0.shortValue());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("6j", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("6j", catalogDoorOrWindow0.getId());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("'D7\b9l\";SyHf", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4324.501F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)45, bigDecimal0.byteValue());
      assertEquals((short)4141, bigDecimal0.shortValue());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("6j", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("6j", catalogDoorOrWindow0.getId());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("'D7\b9l\";SyHf", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4324.501F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("6j", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-4324.501F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)45, bigDecimal0.byteValue());
      assertEquals((short)4141, bigDecimal0.shortValue());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("6j", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("6j", catalogDoorOrWindow0.getId());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("'D7\b9l\";SyHf", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4324.501F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("6j", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-4324.501F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow1.getName());
      assertEquals((-4324.501F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("6j", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setDepth(1239.5669F);
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)45, bigDecimal0.byteValue());
      assertEquals((short)4141, bigDecimal0.shortValue());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("6j", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("6j", catalogDoorOrWindow0.getId());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("'D7\b9l\";SyHf", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4324.501F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("6j", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-4324.501F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow1.getName());
      assertEquals((-4324.501F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("6j", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      
      boolean boolean0 = homeDoorOrWindow1.isBottomRightPointAt(1.0F, 3.4028235E38F, 0.3926991F);
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)45, bigDecimal0.byteValue());
      assertEquals((short)4141, bigDecimal0.shortValue());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("6j", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("6j", catalogDoorOrWindow0.getId());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("'D7\b9l\";SyHf", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4324.501F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("6j", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-4324.501F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow1.getName());
      assertEquals((-4324.501F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("6j", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertFalse(boolean0);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow1.getPriceValueAddedTaxIncluded();
      assertEquals(1, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)45, bigDecimal0.byteValue());
      assertEquals((short)4141, bigDecimal0.shortValue());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("6j", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals("6j", catalogDoorOrWindow0.getId());
      assertEquals(1239.5669F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("'D7\b9l\";SyHf", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.4028235E38F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-4324.501F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("6j", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-4324.501F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.7014117E38F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1.7014117E38F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-2162.2505F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("com.eteks.sweethome3d.tools.OperatingSystem$3", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(1239.5669F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("'D7\b9l\";SyHf", homeDoorOrWindow1.getName());
      assertEquals((-4324.501F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("6j", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.4028235E38F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((byte)3, bigDecimal1.byteValue());
      assertEquals((short) (-18173), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[20];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      assertEquals(20, sashArray0.length);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(20, sashArray0.length);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setDepth(27.783936F);
      assertEquals(20, sashArray0.length);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getDescription());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      
      Float float0 = new Float((-2898.7));
      assertNotNull(float0);
      assertEquals((-2898.7F), (float)float0, 0.01F);
      
      Level level0 = new Level(")D`liDM;be{X>0lT", 0.0F, (-357.9F), 2.0F);
      assertEquals((-357.9F), level0.getFloorThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", level0.getName());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      boolean boolean0 = homeDoorOrWindow1.isBottomRightPointAt((byte)15, 3.2864308F, 3.2864308F);
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getDescription());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(boolean0);
      
      boolean boolean1 = homeDoorOrWindow0.isPointAt(2.0F, 3.2864308F, 27.783936F);
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(boolean1 == boolean0);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(boolean1);
      
      boolean boolean2 = homeDoorOrWindow1.isNameCenterPointAt(0.5F, 2.0F, (byte)15);
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getDescription());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(boolean2);
      
      boolean boolean3 = homeDoorOrWindow1.isTopRightPointAt((-3407.841F), (-3407.841F), 27.783936F);
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getDescription());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(boolean3);
      
      homeDoorOrWindow0.setNameAngle(27.783936F);
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(2.6511943F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      
      homeDoorOrWindow0.setNameAngle((-4707.2983F));
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getDescription());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(5.0906405F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setDepth(3.2864308F);
      assertEquals(20, sashArray0.length);
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      
      String string0 = bigDecimal0.toEngineeringString();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(string0);
      assertEquals("1", string0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      homeDoorOrWindow1.setAngle(3.2864308F);
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Float float0 = new Float(2815.270290107);
      assertNotNull(float0);
      assertEquals(2815.2703F, (float)float0, 0.01F);
      
      Integer integer0 = new Integer((-2145994901));
      assertNotNull(integer0);
      assertEquals((-2145994901), (int)integer0);
      
      String string0 = Integer.toUnsignedString((int) (byte)21);
      assertNotNull(string0);
      assertEquals("21", string0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", resourceURLContent0, resourceURLContent0, 1.0F, (byte)21, (-4324.501F), 1224.6112F, false, "", integer0, (float[][]) null, false, 3.4028235E38F, false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1224.6112F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2145994901), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1224.6112F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2145994901), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1224.6112F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-2145994901), (int)homePieceOfFurniture0.getColor());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1224.6112F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1224.6112F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2145994901), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1224.6112F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-4324.501F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-2145994901), (int)homePieceOfFurniture1.getColor());
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(1224.6112F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals("", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNotNull(homePieceOfFurniture1);
      
      boolean boolean0 = homePieceOfFurniture1.isAtLevel((Level) null);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1224.6112F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2145994901), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1224.6112F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-4324.501F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-2145994901), (int)homePieceOfFurniture1.getColor());
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(1224.6112F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals("", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertTrue(boolean0);
      
      float[][] floatArray0 = homePieceOfFurniture1.getPoints();
      assertEquals(4, floatArray0.length);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1224.6112F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2145994901), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(1.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1224.6112F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-4324.501F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals((-2145994901), (int)homePieceOfFurniture1.getColor());
      assertEquals("", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(1224.6112F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertEquals("", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNotNull(floatArray0);
      
      boolean boolean1 = homePieceOfFurniture0.isTopRightPointAt(1.0F, 1.0F, (byte)21);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertTrue(boolean1 == boolean0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1224.6112F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2145994901), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1224.6112F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-2145994901), (int)homePieceOfFurniture0.getColor());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1224.6112F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(boolean1);
      
      Integer integer1 = homePieceOfFurniture0.getColor();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(1.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1224.6112F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals("", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2145994901), (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1224.6112F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-2145994901), (int)homePieceOfFurniture0.getColor());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(1224.6112F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNotNull(integer1);
      assertEquals((-2145994901), (int)integer1);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      assertEquals(0.39014146F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      BigInteger bigInteger1 = bigInteger0.flipBit(0);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)20, bigInteger1.shortValue());
      assertEquals((byte)20, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger1);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setName("tr");
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("tr", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      homeDoorOrWindow0.setY(0.39014146F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.39014146F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setDepth(27.783936F);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(130.47533F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(130.47533F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setHeight((-2452.1F));
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(130.47533F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(130.47533F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      Float float0 = new Float((-2898.7));
      assertNotNull(float0);
      assertEquals((-2898.7F), (float)float0, 0.01F);
      
      homeDoorOrWindow1.setShininess(float0);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-2898.7F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(130.47533F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(130.47533F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      homeDoorOrWindow0.setVisible(true);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      Level level0 = homeDoorOrWindow0.getLevel();
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Float float0 = new Float((float) (byte)21);
      assertNotNull(float0);
      assertEquals(21.0F, (float)float0, 0.01F);
      
      Integer integer0 = new Integer((byte)21);
      assertNotNull(integer0);
      assertEquals(21, (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("6j", resourceURLContent0, resourceURLContent0, (byte)21, (byte)21, (-4324.501F), 1239.5669F, false, "6j", integer0, (float[][]) null, false, 3.4028235E38F, false);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("6j", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("6j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      homePieceOfFurniture0.setName("6j");
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("6j", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("6j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(10.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals("6j", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(1239.5669F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture1.getColor());
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("6j", homePieceOfFurniture1.getName());
      assertEquals(21.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNotNull(homePieceOfFurniture1);
      
      homePieceOfFurniture1.setHeight((-180.38414F));
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(10.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals("6j", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-180.38414F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture1.getColor());
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("6j", homePieceOfFurniture1.getName());
      assertEquals(21.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      
      homePieceOfFurniture0.setDepth((byte)21);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("6j", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("6j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      
      Integer integer1 = Integer.getInteger("6j", integer0);
      assertNotNull(integer1);
      assertEquals(21, (int)integer1);
      
      HomeTexture homeTexture0 = homePieceOfFurniture1.getTexture();
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(10.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals("6j", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-180.38414F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture1.getColor());
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("6j", homePieceOfFurniture1.getName());
      assertEquals(21.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homeTexture0);
      
      homePieceOfFurniture1.setTexture((HomeTexture) null);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(10.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals("6j", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-180.38414F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture1.getColor());
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("6j", homePieceOfFurniture1.getName());
      assertEquals(21.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      
      boolean boolean0 = homePieceOfFurniture1.isTexturable();
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(10.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertEquals("6j", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals((-180.38414F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture1.getColor());
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("6j", homePieceOfFurniture1.getName());
      assertEquals(21.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertTrue(boolean0);
      
      HomeTexture homeTexture1 = homePieceOfFurniture0.getTexture();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals("6j", catalogPieceOfFurniture0.getName());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("6j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("6j", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals("6j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homeTexture1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[1];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, 1.0F, 80.8739F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      assertEquals(1, lightSourceArray0.length);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(80.8739F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(1, lightSourceArray0.length);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(80.8739F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(80.8739F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(80.8739F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNotNull(homeLight0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      homeLight0.setDescription("");
      assertEquals(1, lightSourceArray0.length);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(80.8739F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(80.8739F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(80.8739F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      
      boolean boolean2 = homeLight0.isPointAt(80.8739F, (-618.7F), (-618.7F));
      assertEquals(1, lightSourceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(80.8739F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(80.8739F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(80.8739F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertFalse(boolean2);
      
      String string0 = homeLight0.getDescription();
      assertEquals(1, lightSourceArray0.length);
      assertNull(catalogLight0.getId());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertNull(catalogLight0.getCurrency());
      assertEquals(80.8739F, catalogLight0.getElevation(), 0.01F);
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isBackFaceShown());
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getInformation());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getGrade());
      assertTrue(catalogLight0.isProportional());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertNull(catalogLight0.getName());
      assertFalse(catalogLight0.isResizable());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(80.8739F, homeLight0.getElevation(), 0.01F);
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getName());
      assertEquals("", homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertEquals(80.8739F, homeLight0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertFalse(homeLight0.isDoorOrWindow());
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertTrue(homeLight0.isVisible());
      assertTrue(homeLight0.isDeformable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertTrue(homeLight0.isMovable());
      assertNotNull(string0);
      assertEquals("", string0);
      
      Float float0 = new Float(80.8739F);
      assertNotNull(float0);
      assertEquals(80.8739F, (float)float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)41;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)41, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertNotNull(bigDecimal0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1441.479F), 130.47533F, 881.242F, 0.0F, true, (-1051.1166F), 881.242F, sashArray0, (float[][]) null, "com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", true, bigDecimal0, bigDecimal0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)41, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getDescription());
      assertEquals((-1051.1166F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1441.479F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, sashArray0.length);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)41, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getDescription());
      assertEquals((-1051.1166F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1441.479F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(881.242F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getDescription());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-720.7395F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1441.479F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, byteArray0.length);
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)41, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getDescription());
      assertEquals((-1051.1166F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1441.479F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(881.242F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getDescription());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-720.7395F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1441.479F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getName());
      assertEquals(130.47533F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getDescription());
      assertEquals(881.242F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1441.479F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-720.7395F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNull(furnitureCategory0.getName());
      assertNotNull(furnitureCategory0);
      
      Float float0 = new Float(1291.7667459);
      assertNotNull(float0);
      assertEquals(1291.7667F, (float)float0, 0.01F);
      
      homeDoorOrWindow1.setShininess(float0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)41, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getDescription());
      assertEquals((-1051.1166F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1441.479F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(881.242F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getDescription());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-720.7395F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1441.479F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getName());
      assertEquals(130.47533F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getDescription());
      assertEquals(881.242F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1441.479F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1291.7667F, homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-720.7395F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      
      String string0 = homeDoorOrWindow0.getDescription();
      assertEquals(1, byteArray0.length);
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)41, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getDescription());
      assertEquals((-1051.1166F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1441.479F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(881.242F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getDescription());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-720.7395F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1441.479F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertNotNull(string0);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", string0);
      
      boolean boolean0 = homeDoorOrWindow1.isPointAt(0.0F, 0.0F, 0.0F);
      assertEquals(1, byteArray0.length);
      assertEquals(0, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)41, bigInteger0.byteValue());
      assertEquals((short)41, bigInteger0.shortValue());
      assertEquals((byte)41, bigDecimal0.byteValue());
      assertEquals((short)41, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getCreator());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getDescription());
      assertEquals((-1051.1166F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertEquals((-1441.479F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(881.242F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(881.242F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow0.getDescription());
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-720.7395F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1441.479F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getName());
      assertEquals(130.47533F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getDescription());
      assertEquals(881.242F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1051.1166F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1441.479F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(1291.7667F, homeDoorOrWindow1.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-720.7395F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(881.242F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$Property", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertArrayEquals(new byte[] {(byte)41}, byteArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("iFYLxsE qj=`j_'");
      assertEquals("iFYLxsE qj=`j_'", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNotNull(furnitureCategory0);
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      Float float1 = new Float(1109.3F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      assertEquals(1109.3F, (float)float1, 0.01F);
      
      Float float2 = new Float(1.1579207543382391E77);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotNull(float2);
      assertEquals(Float.POSITIVE_INFINITY, (float)float2, 0.01F);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("iFYLxsE qj=`j_'", "", "", resourceURLContent0, resourceURLContent0, resourceURLContent0, 1109.3F, 2.0F, (-1.0F), (byte)21, false, (-1.0F), 0.0F, sashArray0, (float[][]) null, (String) null, true, (BigDecimal) null, (BigDecimal) null);
      assertEquals(1, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(554.65F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean1 = homeDoorOrWindow0.isBottomRightPointAt(1109.3F, 581.28467F, 1109.3F);
      assertEquals(1, sashArray0.length);
      assertFalse(boolean1 == boolean0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(554.65F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(boolean1);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(554.65F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(2.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(21.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(554.65F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setNameYOffset(0.0F);
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(554.65F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(2.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(21.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(554.65F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      
      boolean boolean2 = homeDoorOrWindow1.isTopRightPointAt(2.0F, 2.0F, 2.0F);
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(554.65F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(2.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(21.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(554.65F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(boolean2);
      
      boolean boolean3 = homeDoorOrWindow1.isBottomLeftPointAt(1118.736F, (-713.421F), 0.0F);
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(554.65F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(1.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(2.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(21.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(554.65F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(boolean3);
      
      float float3 = homeDoorOrWindow0.getAngle();
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(21.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(2.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(1109.3F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1109.3F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(2.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(1.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(554.65F, homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("iFYLxsE qj=`j_'", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, float3, 0.01F);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.39014146F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = homeDoorOrWindow0.isTopRightPointAt(0.0F, 2458.2F, (-1.0F));
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = homeDoorOrWindow0.getTexture();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNull(homeTexture0);
      
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      homeDoorOrWindow0.setElevation(2458.2F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      homeDoorOrWindow0.setNameVisible(false);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      TextStyle textStyle0 = homeDoorOrWindow0.getNameStyle();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNull(textStyle0);
      
      homeDoorOrWindow0.setNameStyle((TextStyle) null);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2458.2F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[20];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", ")D`liDM;b{X>0lT", resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;b{X>0lT", true, bigDecimal0, bigDecimal0);
      assertEquals(20, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(20, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      Float float0 = homeDoorOrWindow0.getShininess();
      assertEquals(20, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(float0);
      
      HomeTexture homeTexture0 = homeDoorOrWindow0.getTexture();
      assertEquals(20, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeTexture0);
      
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      assertEquals(20, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      
      boolean boolean0 = homeDoorOrWindow0.isTexturable();
      assertEquals(20, sashArray0.length);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(")D`liDM;b{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 0.3926991F, (-1.0F), 0.3926991F, false, 0.3926991F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.19634955F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertNotNull(homeDoorOrWindow1);
      
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      assertEquals(1, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      
      Float float0 = new Float((double) 0.0F);
      assertNotNull(float0);
      assertEquals(0.0F, (float)float0, 0.01F);
      
      String string0 = homeDoorOrWindow0.getDescription();
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(string0);
      
      boolean boolean0 = homeDoorOrWindow0.isPointAt(0.3926991F, (-2909.2908F), 0.0F);
      assertEquals(1, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(boolean0);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getValueAddedTax();
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal1, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(bigDecimal1);
      
      boolean boolean1 = homeDoorOrWindow0.isNameCenterPointAt(4205.0F, (byte)21, (byte)21);
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal0, bigDecimal1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertTrue(boolean1 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(boolean1);
      
      BigDecimal bigDecimal2 = homeDoorOrWindow0.getValueAddedTax();
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal2, bigDecimal0);
      assertSame(bigDecimal2, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(bigDecimal2);
      
      float float1 = homeDoorOrWindow0.getWidth();
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), float1, 0.01F);
      
      homeDoorOrWindow1.setMovable(false);
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.19634955F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      
      float float2 = homeDoorOrWindow0.getX();
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotEquals(float2, float1, 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), float2, 0.01F);
      
      float float3 = homeDoorOrWindow1.getY();
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotEquals(float3, float1, 0.01F);
      assertNotEquals(float3, float2, 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.19634955F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.19634955F, float3, 0.01F);
      
      boolean boolean2 = homeDoorOrWindow1.isTopLeftPointAt(2312.0F, (byte)21, 2490.7F);
      assertEquals(1, sashArray0.length);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getName());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.3926991F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(0.3926991F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.3926991F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.19634955F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 71.176F, 1.0F, 1.0F, 71.176F, true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      assertEquals(0, lightSourceArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(71.176F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertEquals(71.176F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(0, lightSourceArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(71.176F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertEquals(71.176F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(71.176F, homeLight0.getWidth(), 0.01F);
      assertEquals(71.176F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(35.588F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(71.176F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNotNull(homeLight0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = homeLight0.getDescription();
      assertEquals(0, lightSourceArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(71.176F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertEquals(71.176F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(71.176F, homeLight0.getWidth(), 0.01F);
      assertEquals(71.176F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(35.588F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(71.176F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertNull(string0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0, lightSourceArray0.length);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(71.176F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertEquals(71.176F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(71.176F, homeLight0.getWidth(), 0.01F);
      assertEquals(71.176F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(35.588F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(71.176F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals(71.176F, float0, 0.01F);
      
      boolean boolean2 = homeLight0.isBackFaceShown();
      assertEquals(0, lightSourceArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertNull(catalogLight0.getCreationDate());
      assertEquals(71.176F, catalogLight0.getWidth(), 0.01F);
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertFalse(catalogLight0.isBackFaceShown());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertTrue(catalogLight0.isTexturable());
      assertTrue(catalogLight0.isProportional());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertNull(catalogLight0.getGrade());
      assertEquals(1.0F, catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getName());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertEquals(71.176F, catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isDeformable());
      assertFalse(homeLight0.isNameVisible());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertNull(homeLight0.getCurrency());
      assertEquals(1.0F, homeLight0.getHeight(), 0.01F);
      assertEquals(71.176F, homeLight0.getWidth(), 0.01F);
      assertEquals(71.176F, homeLight0.getGroundElevation(), 0.01F);
      assertNull(homeLight0.getShininess());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(35.588F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isMovable());
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertFalse(homeLight0.isResizable());
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertTrue(homeLight0.isVisible());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertNull(homeLight0.getName());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertEquals(71.176F, homeLight0.getElevation(), 0.01F);
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertFalse(homeLight0.isBackFaceShown());
      assertNull(homeLight0.getColor());
      assertNull(homeLight0.getCatalogId());
      assertFalse(homeLight0.isModelMirrored());
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      LightSource[] lightSourceArray0 = new LightSource[0];
      CatalogLight catalogLight0 = new CatalogLight((String) null, (String) null, (String) null, (Content) null, (Content) null, (Content) null, 80.8739F, 1.0F, (-1812.3569F), (-1441.479F), true, lightSourceArray0, (float[][]) null, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNotNull(catalogLight0);
      
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNotNull(homeLight0);
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      assertNull(furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNotNull(furnitureCategory0);
      
      catalogLight0.setCategory(furnitureCategory0);
      assertEquals(0, lightSourceArray0.length);
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertNull(furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      
      String string0 = homeLight0.getDescription();
      assertEquals(0, lightSourceArray0.length);
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertNull(string0);
      
      float float0 = homeLight0.getGroundElevation();
      assertEquals(0, lightSourceArray0.length);
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals(0.0F, homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
      assertEquals((-1441.479F), float0, 0.01F);
      
      homeLight0.setNameYOffset((-1812.3569F));
      assertEquals(0, lightSourceArray0.length);
      assertEquals((-1441.479F), catalogLight0.getElevation(), 0.01F);
      assertNull(catalogLight0.getGrade());
      assertNull(catalogLight0.getCreator());
      assertNull(catalogLight0.getDescription());
      assertFalse(catalogLight0.isDoorOrWindow());
      assertNull(catalogLight0.getName());
      assertEquals(80.8739F, catalogLight0.getWidth(), 0.01F);
      assertEquals((-1812.3569F), catalogLight0.getHeight(), 0.01F);
      assertTrue(catalogLight0.isMovable());
      assertNull(catalogLight0.getStaircaseCutOutShape());
      assertFalse(catalogLight0.isResizable());
      assertTrue(catalogLight0.isProportional());
      assertTrue(catalogLight0.isTexturable());
      assertEquals(0.3926991F, catalogLight0.getIconYaw(), 0.01F);
      assertNull(catalogLight0.getCreationDate());
      assertFalse(catalogLight0.isBackFaceShown());
      assertNull(catalogLight0.getColor());
      assertFalse(catalogLight0.isModifiable());
      assertTrue(catalogLight0.isDeformable());
      assertNull(catalogLight0.getInformation());
      assertNull(catalogLight0.getId());
      assertEquals(1.0F, catalogLight0.getDepth(), 0.01F);
      assertNull(catalogLight0.getCurrency());
      assertTrue(homeLight0.isMovable());
      assertNull(homeLight0.getShininess());
      assertNull(homeLight0.getCatalogId());
      assertEquals(0.5F, homeLight0.getPower(), 0.01F);
      assertNull(homeLight0.getDescription());
      assertEquals((-1812.3569F), homeLight0.getNameYOffset(), 0.01F);
      assertFalse(homeLight0.isNameVisible());
      assertNull(homeLight0.getName());
      assertFalse(homeLight0.isBackFaceShown());
      assertFalse(homeLight0.isModelMirrored());
      assertEquals((-1812.3569F), homeLight0.getHeight(), 0.01F);
      assertEquals(0.5F, homeLight0.getY(), 0.01F);
      assertNull(homeLight0.getColor());
      assertEquals(0.0F, homeLight0.getAngle(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getElevation(), 0.01F);
      assertTrue(homeLight0.isTexturable());
      assertNull(homeLight0.getCurrency());
      assertFalse(homeLight0.isDoorOrWindow());
      assertEquals(40.43695F, homeLight0.getX(), 0.01F);
      assertTrue(homeLight0.isDeformable());
      assertTrue(homeLight0.isVisible());
      assertEquals(0.0F, homeLight0.getNameXOffset(), 0.01F);
      assertEquals((-1441.479F), homeLight0.getGroundElevation(), 0.01F);
      assertEquals(80.8739F, homeLight0.getWidth(), 0.01F);
      assertNull(homeLight0.getStaircaseCutOutShape());
      assertFalse(homeLight0.isResizable());
      assertEquals(1.0F, homeLight0.getDepth(), 0.01F);
      assertEquals(0.0F, homeLight0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, (-1.0F), 0.0F, 0.0F, (-1.0F));
      assertEquals((-1.0F), sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 130.47533F, (-1.0F), 130.47533F, true, 130.47533F, (-1.0F), sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertEquals(130.47533F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setDepth(27.783936F);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setHeight((-2452.1F));
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(130.47533F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      TextStyle textStyle0 = new TextStyle((-1.0F), true, true);
      assertEquals((-1.0F), textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertNotNull(textStyle0);
      
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(true);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertEquals((-1.0F), textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertEquals((-1.0F), textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertTrue(textStyle1.isBold());
      assertNotNull(textStyle1);
      
      homeDoorOrWindow1.setNameStyle(textStyle1);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertSame(textStyle0, textStyle1);
      assertSame(textStyle1, textStyle0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(130.47533F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(130.47533F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), textStyle0.getFontSize(), 0.01F);
      assertTrue(textStyle0.isBold());
      assertTrue(textStyle0.isItalic());
      assertEquals((-1.0F), textStyle1.getFontSize(), 0.01F);
      assertTrue(textStyle1.isItalic());
      assertTrue(textStyle1.isBold());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      Float float0 = new Float((-2898.7));
      assertNotNull(float0);
      assertEquals((-2898.7F), (float)float0, 0.01F);
      
      homeDoorOrWindow1.setShininess(float0);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(130.47533F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(130.47533F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-2898.7F), homeDoorOrWindow1.getShininess(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(130.47533F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(65.23766F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      homeDoorOrWindow0.setVisible(true);
      assertEquals(20, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertEquals(130.47533F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals(130.47533F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(130.47533F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(65.23766F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(130.47533F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(130.47533F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      URL uRL0 = MockURL.getFileExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[11];
      BigDecimal bigDecimal0 = new BigDecimal(3.2864308F);
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("zbp|+)!k", "zbp|+)!k", "zbp|+)!k", resourceURLContent0, resourceURLContent0, (Content) null, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, "zbp|+)!k", true, bigDecimal0, bigDecimal0);
      assertEquals(11, sashArray0.length);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getName());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(11, sashArray0.length);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getName());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(11, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getName());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("zbp|+)!k", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("zbp|+)!k", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNotNull(homeDoorOrWindow1);
      
      boolean boolean0 = homeDoorOrWindow1.isBottomRightPointAt(3.2864308F, 3.2864308F, 3.2864308F);
      assertEquals(11, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getName());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("zbp|+)!k", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("zbp|+)!k", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(boolean0);
      
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertEquals(11, sashArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getName());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow2.getName());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("zbp|+)!k", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("zbp|+)!k", homeDoorOrWindow2.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertNotNull(homeDoorOrWindow2);
      
      homeDoorOrWindow2.setDescription("zbp|+)!k");
      assertEquals(11, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)3, bigDecimal0.shortValue());
      assertEquals((byte)3, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getId());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getName());
      assertEquals("zbp|+)!k", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getDescription());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getName());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(1.6432154F, homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals("zbp|+)!k", homeDoorOrWindow2.getName());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("zbp|+)!k", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertNull(homeDoorOrWindow2.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("zbp|+)!k", homeDoorOrWindow2.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isResizable());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[9];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      assertEquals(0.39014146F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      boolean boolean0 = homeDoorOrWindow0.isTopRightPointAt(0.0F, 2458.2F, (-1.0F));
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean0);
      
      HomeTexture homeTexture0 = homeDoorOrWindow0.getTexture();
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNull(homeTexture0);
      
      homeDoorOrWindow0.setTexture((HomeTexture) null);
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      
      homeDoorOrWindow0.setElevation((byte)21);
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      homeDoorOrWindow0.setNameVisible(true);
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      Float float0 = homeDoorOrWindow0.getShininess();
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNull(float0);
      
      homeDoorOrWindow0.setNameVisible(false);
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      boolean boolean2 = homeDoorOrWindow0.isBottomLeftPointAt(3115.4548F, (-5110.606F), 3115.4548F);
      assertEquals(9, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(21.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(21.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[20];
      Sash sash0 = new Sash(0.0F, 3.2864308F, 0.0F, 0.0F, 3.2864308F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals(3.2864308F, sash0.getEndAngle(), 0.01F);
      assertEquals(3.2864308F, sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)15;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((byte)15, bigInteger0.byteValue());
      assertEquals((short)15, bigInteger0.shortValue());
      assertArrayEquals(new byte[] {(byte)15}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(")D`liDM;be{X>0lT", ")D`liDM;be{X>0lT", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, 3.2864308F, 3.2864308F, 3.2864308F, 3.2864308F, true, 3.2864308F, 3.2864308F, sashArray0, (float[][]) null, ")D`liDM;be{X>0lT", true, bigDecimal0, bigDecimal0);
      assertEquals(20, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(20, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(3.2864308F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNotNull(homeDoorOrWindow0);
      
      homeDoorOrWindow0.setDepth(27.783936F);
      assertEquals(20, sashArray0.length);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(20, sashArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      
      BigDecimal bigDecimal1 = new BigDecimal(1.0);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      
      RoundingMode roundingMode0 = RoundingMode.UP;
      BigDecimal bigDecimal2 = bigDecimal0.divide(bigDecimal1, (-496), roundingMode0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal1, bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal2.byteValue());
      assertEquals((short)0, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      
      homeDoorOrWindow1.setHeight((-2452.1F));
      assertEquals(20, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      
      Float float0 = new Float((-2898.7));
      assertNotNull(float0);
      assertEquals((-2898.7F), (float)float0, 0.01F);
      
      homeDoorOrWindow0.setVisible(true);
      assertEquals(20, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      
      boolean boolean0 = homeDoorOrWindow1.isBottomLeftPointAt((-1.0F), 0.0F, 4651.194F);
      assertEquals(20, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(boolean0);
      
      Level level0 = new Level((String) null, 0.0F, (-357.9F), 2.0F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-357.9F), level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(2.0F, level0.getHeight(), 0.01F);
      assertNotNull(level0);
      
      level0.setHeight(1948.3F);
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-357.9F), level0.getFloorThickness(), 0.01F);
      assertEquals(1948.3F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      
      boolean boolean1 = homeDoorOrWindow1.isAtLevel(level0);
      assertEquals(20, sashArray0.length);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(boolean1 == boolean0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(level0.isVisible());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-357.9F), level0.getFloorThickness(), 0.01F);
      assertEquals(1948.3F, level0.getHeight(), 0.01F);
      assertNull(level0.getName());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(boolean1);
      
      BigDecimal bigDecimal3 = homeDoorOrWindow1.getValueAddedTax();
      assertEquals(20, sashArray0.length);
      assertNotSame(bigDecimal3, bigDecimal2);
      assertNotSame(bigDecimal3, bigDecimal1);
      assertSame(bigDecimal3, bigDecimal0);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(bigDecimal3.equals((Object)bigDecimal2));
      assertTrue(bigDecimal3.equals((Object)bigDecimal1));
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals((short)1, bigDecimal3.shortValue());
      assertEquals((byte)1, bigDecimal3.byteValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotNull(bigDecimal3);
      
      ResourceURLContent resourceURLContent1 = (ResourceURLContent)homeDoorOrWindow1.getModel();
      assertEquals(20, sashArray0.length);
      assertSame(resourceURLContent0, resourceURLContent1);
      assertSame(resourceURLContent1, resourceURLContent0);
      assertSame(bigDecimal0, bigDecimal3);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertNotSame(bigDecimal0, bigDecimal2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertFalse(bigDecimal0.equals((Object)bigDecimal2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent1.isMultiPartResource());
      assertFalse(resourceURLContent1.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getCreator());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(27.783936F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1.6432154F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(27.783936F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getCatalogId());
      assertEquals(3.2864308F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(")D`liDM;be{X>0lT", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(1.6432154F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(1.6432154F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(3.2864308F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3.2864308F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-2452.1F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotNull(resourceURLContent1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Integer integer0 = new Integer((byte)21);
      assertNotNull(integer0);
      assertEquals(21, (int)integer0);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("j", resourceURLContent0, resourceURLContent0, (byte)21, (byte)21, (-4324.501F), 1239.5669F, false, "j", integer0, (float[][]) null, false, (byte)21, false);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("j", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(21.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("j", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(21.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals("j", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNotNull(homePieceOfFurniture0);
      
      homePieceOfFurniture0.setName("j");
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("j", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(21.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals("j", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      homePieceOfFurniture0.setLevel((Level) null);
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("j", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(21.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals("j", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("j", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(21.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals("j", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(21.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(1239.5669F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-4324.501F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(21.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals("j", homePieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(21, (int)homePieceOfFurniture1.getColor());
      assertEquals("j", homePieceOfFurniture1.getName());
      assertEquals(1239.5669F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNotNull(homePieceOfFurniture1);
      
      boolean boolean0 = homePieceOfFurniture0.isTexturable();
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(21.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("j", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals("j", catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(21.0F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-4324.501F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(1392409281320L, (long)catalogPieceOfFurniture0.getCreationDate());
      assertEquals(21.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1239.5669F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(21, (int)catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(1239.5669F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1239.5669F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(21.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(21, (int)homePieceOfFurniture0.getColor());
      assertEquals("j", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(10.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(10.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-4324.501F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("j", homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(21.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[1];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.39014146F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      byteArray0[0] = (byte)21;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger0);
      
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      assertEquals(1, byteArray0.length);
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", (String) null, (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(homeDoorOrWindow1);
      
      homeDoorOrWindow1.setName("tr");
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("tr", homeDoorOrWindow1.getName());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      BigInteger bigInteger1 = bigInteger0.flipBit((byte)21);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(bigInteger1, bigInteger0);
      assertFalse(bigInteger1.equals((Object)bigInteger0));
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((short)21, bigInteger1.shortValue());
      assertEquals((byte)21, bigInteger1.byteValue());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertNotNull(bigInteger1);
      
      boolean boolean1 = homeDoorOrWindow0.containsPoint(0.0F, 612.3056F, (-3353.4358F));
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertTrue(boolean1 == boolean0);
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean1);
      
      Float float0 = new Float(225.848);
      assertNotNull(float0);
      assertEquals(225.848F, (float)float0, 0.01F);
      
      homeDoorOrWindow0.setShininess(float0);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(225.848F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      
      float float1 = homeDoorOrWindow0.getNameYOffset();
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(225.848F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertEquals(0.0F, float1, 0.01F);
      
      boolean boolean2 = homeDoorOrWindow1.isTopRightPointAt(0.0F, 589.50165F, 1358.887F);
      assertEquals(1, sashArray0.length);
      assertEquals(1, byteArray0.length);
      assertNotSame(bigInteger0, bigInteger1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(bigInteger0.equals((Object)bigInteger1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((short)21, bigInteger0.shortValue());
      assertEquals((byte)21, bigInteger0.byteValue());
      assertEquals((byte)21, bigDecimal0.byteValue());
      assertEquals((short)21, bigDecimal0.shortValue());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertEquals(1224.6112F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(612.3056F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(225.848F, homeDoorOrWindow0.getShininess(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1224.6112F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-0.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertEquals(1224.6112F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("tr", homeDoorOrWindow1.getName());
      assertEquals(612.3056F, homeDoorOrWindow1.getY(), 0.01F);
      assertArrayEquals(new byte[] {(byte)21}, byteArray0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      URL uRL0 = MockURL.getFtpExample();
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, false);
      Sash[] sashArray0 = new Sash[9];
      Sash sash0 = new Sash(0.0F, 0.0F, 0.39014146F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      byte[] byteArray0 = new byte[1];
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", (String) null, resourceURLContent0, resourceURLContent0, resourceURLContent0, (-1.0F), 1224.6112F, (-1.0F), 0.0F, false, 1224.6112F, (-1.0F), sashArray0, (float[][]) null, "", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.setNameVisible(true);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      homeDoorOrWindow0.getDescription();
      homeDoorOrWindow0.isPointAt(0.39014146F, 0.39014146F, (-2909.2908F));
      homeDoorOrWindow0.isNameCenterPointAt(0.0F, (-1.0F), (byte)21);
      homeDoorOrWindow0.isTopRightPointAt(6.412637F, 0.0F, (-2138.2537F));
      homeDoorOrWindow1.setNameAngle((byte)21);
      homeDoorOrWindow0.setNameAngle(0.0F);
      homeDoorOrWindow1.setVisible(false);
      assertTrue(homeDoorOrWindow0.isNameVisible());
      assertEquals(1224.6112F, homeDoorOrWindow0.getDepth(), 0.01F);
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 12:47:38 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogLight;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.LightSource;
import com.eteks.sweethome3d.model.PieceOfFurniture;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.TextStyle;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomePieceOfFurniture_ESTest extends HomePieceOfFurniture_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-167.19F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight((-4954.5F));
      homePieceOfFurniture0.isNameCenterPointAt((-1019.0581F), 911.0F, (-1019.0581F));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float float0 = (-972.4F);
      float float1 = 1433.0121F;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent0, 1433.0121F, 2030.2477F, (-972.4F), false, false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "zVbU&";
      stringArray0[1] = "zVbU&";
      stringArray0[2] = "zVbU&";
      stringArray0[3] = "zVbU&";
      stringArray0[4] = "zVbU&";
      stringArray0[5] = "zVbU&";
      stringArray0[6] = "zVbU&";
      stringArray0[7] = "";
      stringArray0[8] = "";
      Long.getLong("zVbU&");
      Float float2 = new Float(1433.0121F);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash(1514.8402F, 1.0F, 0.3926991F, 1.0F, 0.3926991F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, 1.0F, 1.0F, 1.0F, 1514.8402F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-166.88853F), (-166.88853F), 1.0F, 0.3926991F, 886.419F);
      sashArray0[2] = sash2;
      float[][] floatArray0 = new float[3][1];
      float[] floatArray1 = new float[9];
      floatArray1[0] = 0.3926991F;
      floatArray1[1] = 0.3926991F;
      floatArray1[2] = 1433.0121F;
      floatArray1[3] = 1.0F;
      floatArray1[4] = 1.0F;
      floatArray1[5] = 886.419F;
      floatArray1[6] = 1.0F;
      floatArray1[7] = 0.0F;
      floatArray1[8] = 1015.12384F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      floatArray2[0] = 886.419F;
      floatArray2[1] = 1514.8402F;
      floatArray2[2] = 1.0F;
      floatArray2[3] = (-720.2F);
      floatArray2[4] = 0.3926991F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[8];
      floatArray3[0] = 1.0F;
      floatArray3[1] = 1.0F;
      floatArray3[2] = 1.0F;
      floatArray3[3] = 0.3926991F;
      floatArray3[4] = 1.0F;
      floatArray3[5] = 1.0F;
      floatArray3[6] = (-972.4F);
      floatArray3[7] = 886.419F;
      floatArray0[2] = floatArray3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("zVbU&", "zVbU&", "", "zVbU&", stringArray0, (Long) null, float2, uRLContent0, uRLContent0, uRLContent0, 1514.8402F, (-1564.0F), (-1305.7F), (-1564.0F), false, (-1238.2604F), (-720.2F), sashArray0, floatArray0, "user.home", true, true, true, (BigDecimal) null, (BigDecimal) null, "");
      catalogPieceOfFurniture0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.containsPoint((-972.4F), (-972.4F), 1433.0121F);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
      homeFurnitureGroup0.setHeight((-972.4F));
      homeFurnitureGroup0.clone();
      homePieceOfFurniture0.isDoorOrWindow();
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.setShininess((Float) null);
      homeFurnitureGroup0.intersectsRectangle(1278.5F, 0.0F, (-972.4F), 0.0F);
      homePieceOfFurniture0.getX();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      FurnitureCategory furnitureCategory0 = new FurnitureCategory((String) null);
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setY((-2676.4976F));
      homePieceOfFurniture0.isBottomRightPointAt((-526.0F), (-2676.4976F), (-526.0F));
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, (Content) null, 1872.25F, (-4965.427F), (-1174.388F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight(0.0F);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(6);
      Integer integer1 = new Integer(6);
      linkedList1.add(integer1);
      linkedList0.removeAll(linkedList1);
      homeFurnitureGroup1.intersectsRectangle(1776.9375F, (-1174.388F), (-1174.388F), 6);
      homeFurnitureGroup0.isNameCenterPointAt(3.4028235E38F, (-1174.388F), (-1.0F));
      homeFurnitureGroup0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.isPointAt((-1.0F), 411.376F, 1.0F);
      linkedList0.add((HomePieceOfFurniture) homeFurnitureGroup0);
      // Undeclared exception!
      homeFurnitureGroup0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getLevel();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      homePieceOfFurniture1.isAtLevel((Level) null);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-167.19F), (-1336.0F), 879.0069F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup1.setElevation(879.0069F);
      homeFurnitureGroup1.isPointAt(2793.671F, 1149.0076F, (-4954.5F));
      homeFurnitureGroup2.containsPoint(0.5F, 879.0069F, (-1.0F));
      homePieceOfFurniture0.isBottomLeftPointAt((-1588.0F), 1149.0076F, 2039.9375F);
      homeFurnitureGroup1.getModelRotation();
      homeFurnitureGroup2.isVisible();
      Integer integer0 = new Integer((-2147482796));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<";
      long long0 = 131L;
      Long long1 = new Long(131L);
      Float float0 = new Float(388.8645161155293);
      float float1 = 304.629F;
      Sash[] sashArray0 = new Sash[14];
      Sash sash0 = new Sash(0.0F, (-435.96674F), 131L, (-435.96674F), 304.629F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(304.629F, (-480.77026F), (-480.77026F), 2239.0186F, (-435.96674F));
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("EI\"OT", "<", "<", "EI\"OT", stringArray0, long1, float0, (Content) null, (Content) null, (Content) null, 131L, 131L, 131L, 304.629F, true, 205.0809F, 131L, sashArray0, (float[][]) null, "<", false, false, false, bigDecimal0, bigDecimal0, "EI\"OT");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow1);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2018.1306F, 2018.1306F, 2018.1306F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(2018.1306F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
      homePieceOfFurniture0.getGroundElevation();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, 243.9104F, 3.4028235E38F, 243.9104F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setY(3.4028235E38F);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isNameCenterPointAt(243.9104F, 1.0F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isResizable();
      homePieceOfFurniture0.isTopLeftPointAt((-1517.3F), 0.19634955F, (-1949.71F));
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.getWidth();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HNmEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      ClassLoader.getSystemClassLoader();
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, (-475.0F), (-475.0F));
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.isDeformable();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-972.4F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(879.0069F, (-90.336F), (-83.595F));
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint((-2656.809F), 1824.087F, 0.0F);
      homeFurnitureGroup0.isBottomLeftPointAt((-1588.0F), 1338.2488F, 1338.2488F);
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.isVisible();
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight(223.92F);
      homeFurnitureGroup0.setHeight((-547.95F));
      homeFurnitureGroup0.getName();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HomePieceOfFurniture homePieceOfFurniture0 = null;
      try {
        homePieceOfFurniture0 = new HomePieceOfFurniture((PieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 0.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt(2030.2477F, 1.0F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt((-526.0F), (-2676.4976F), (-526.0F));
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("fQu//#", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "fQu//#");
      homeFurnitureGroup0.isBottomLeftPointAt(1.0F, 2.0F, 1.0F);
      homePieceOfFurniture0.isBottomRightPointAt(927.48F, 903.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.isTopLeftPointAt(903.0F, (-972.4F), 1780.0F);
      homePieceOfFurniture1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DoorOrWindow doorOrWindow0 = null;
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("#&]zT$V >8", uRLContent0, uRLContent0, (-327.18353F), (-1.0F), (-526.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "0K");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.isTopRightPointAt((-327.18353F), (-90.336F), (-486.2F));
      homeFurnitureGroup1.setNameAngle((-90.336F));
      homeFurnitureGroup0.getFurniture();
      homePieceOfFurniture1.isNameCenterPointAt((-2676.4976F), 665.669F, (-90.336F));
      homeFurnitureGroup1.getLevel();
      homeFurnitureGroup0.setLevel((Level) null);
      homePieceOfFurniture1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", temporaryURLContent0, temporaryURLContent0, (-167.19F), (-167.19F), (-167.19F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DOOR_OR_WINDOW");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setNameAngle((-167.19F));
      homePieceOfFurniture0.isBottomLeftPointAt((-1535.74F), (-2647.713F), (-2647.713F));
      homeFurnitureGroup0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-1336.0F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDescription("");
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-9.771909F), (-972.4F), (-263.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture1);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setX((-1053.8F));
      homeFurnitureGroup1.setNameAngle((-1.0F));
      homeFurnitureGroup0.setHeight((-1336.0F));
      homeFurnitureGroup1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q.H90VDu8<\"0v1Al*", uRLContent0, uRLContent0, (-167.19F), (-1665.4F), (-167.19F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "q.H90VDu8<\"0v1Al*");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.move(749.3909F, (-526.0F));
      homeFurnitureGroup1.setHeight((-1789.76F));
      homePieceOfFurniture0.isNameCenterPointAt((-4954.5F), (-1665.4F), (-167.19F));
      homePieceOfFurniture0.getValueAddedTaxPercentage();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "oLxsEq.Q`nfOdna");
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(false);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setMovable(true);
      homeFurnitureGroup1.isPointAt(1.0F, 2205.9F, 1.0F);
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt((-554.4F), 2030.2477F, (-554.4F));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("X_2Ls^Y:@$*:I[DIV", (Content) null, (Content) null, (-614.55F), 0.0F, (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.intersectsRectangle((-614.55F), (-3262.71F), 2793.671F, 0.0F);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "X_2Ls^Y:@$*:I[DIV");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList1, "");
      homeFurnitureGroup1.setElevation((-614.55F));
      homeFurnitureGroup2.isPointAt(2030.2477F, (-1.0F), 2793.671F);
      homeFurnitureGroup1.containsPoint((-2676.4976F), 635.32684F, 635.32684F);
      homeFurnitureGroup0.isBottomLeftPointAt((-83.595F), (-1.0F), 3.4028235E38F);
      homeFurnitureGroup2.getModelRotation();
      homeFurnitureGroup1.isVisible();
      homeFurnitureGroup2.setNameYOffset(1524.7766F);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-435.96674F), (-435.96674F), (-435.96674F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.isPointAt((-435.96674F), (-435.96674F), (-435.96674F));
      homePieceOfFurniture0.setAngle((-435.96674F));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("Windows", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2030.2477F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertEquals("Windows", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2030.2477F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      
      homePieceOfFurniture0.setDepth(2030.2477F);
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("applicationSubFolder.Mac OS X", "z| VfU&", "z| VfU&", uRLContent0, uRLContent0, uRLContent0, 665.669F, 355.77F, 2274.0F, 2274.0F, false, (-998.3967F), 0.5F, sashArray0, (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, 665.669F, 355.77F, (-972.4F), false, true);
      catalogDoorOrWindow0.compareTo(catalogPieceOfFurniture0);
      Content content0 = homeDoorOrWindow0.getPlanIcon();
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("z| VfU&", content0, content0, (-972.4F), (-1.0F), (-1443.36F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      homeDoorOrWindow0.isBottomLeftPointAt(273.76718F, 965.4861F, 1139.182F);
      homeDoorOrWindow0.isBottomRightPointAt(3152.0F, 3152.0F, (-413.69537F));
      homeDoorOrWindow0.clone();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.setVisible(true);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-435.96674F), (-435.96674F), (-435.96674F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isPointAt((-435.96674F), (-435.96674F), (-435.96674F));
      homePieceOfFurniture0.getLevel();
      Integer integer0 = new Integer((-1783));
      homePieceOfFurniture0.setColor(integer0);
      homePieceOfFurniture0.getPoints();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-435.27F), (-972.4F), 2653.235F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, (-435.27F), 0.0F, 0.0F, (-435.27F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 0.0F, 0.0F, (-435.27F), 0.0F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-435.27F), 0.0F, 2458.712F, 1713.0F, 0.0F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(0.3926991F, 2458.712F, 0.3926991F, 0.5F, 0.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(1713.0F, (-1122.05F), 208.02292F, (-1122.05F), 1885.82F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.0F, (-1122.05F), (-1122.05F), 0.3926991F, 0.0F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(2485.7983F, 1.0F, (-1.0F), 0.0F, (-2520.5F));
      sashArray0[7] = sash7;
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 0.5F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1885.82F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (-1122.05F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = 208.02292F;
      floatArray2[3] = 0.3926991F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = (-1.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.5F;
      floatArray3[2] = 2653.235F;
      floatArray3[3] = (-1122.05F);
      floatArray3[4] = 0.5F;
      floatArray3[5] = (-1.0F);
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = (-2520.5F);
      floatArray3[8] = 0.5F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 2653.235F;
      floatArray4[1] = 2458.712F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-1.0F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.5F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 0.3926991F;
      floatArray5[1] = 660.7848F;
      floatArray0[4] = floatArray5;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Tj]s8M9q:[", "Tj]s8M9q:[", "", uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, (-972.4F), 0.0F, sashArray0, floatArray0, "Tj]s8M9q:[", false, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isTopLeftPointAt(0.0F, 1.0F, 2531.0F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.URL(uRL0, "");
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-1336.0F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "8+.W*VX/T9M}:");
      homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      homeFurnitureGroup0.isPointAt((-167.19F), 1149.0076F, (-167.19F));
      homeFurnitureGroup0.containsPoint((-635.0F), 935.46313F, 2.0F);
      homeFurnitureGroup1.isNameCenterPointAt((-1336.0F), (-972.4F), 935.46313F);
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("cJs,q_/>LyQW(u", uRLContent0, uRLContent0, (-2088.93F), (-526.0F), (-2088.93F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("#&]zT$V >8", uRLContent0, uRLContent0, (-1.0F), (-2676.4976F), 1.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture1);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "0K");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isTopRightPointAt((-526.0F), (-2088.93F), 53.766193F);
      homeFurnitureGroup0.setNameAngle(1.0F);
      homeFurnitureGroup1.getFurniture();
      catalogPieceOfFurniture1.compareTo(catalogPieceOfFurniture0);
      homeFurnitureGroup0.isNameCenterPointAt((-486.2F), (-1.0F), 2.6965332F);
      homePieceOfFurniture1.getModel();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(23.13138F, (-526.0F), (-526.0F));
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("OOR_OR_WNDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "OOR_OR_WNDOW");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.isPointAt((-635.0F), (-167.19F), 1149.0076F);
      homeFurnitureGroup1.containsPoint((-1588.0F), (-167.19F), 2.0F);
      homePieceOfFurniture0.isBottomLeftPointAt((-167.19F), (-167.19F), (-635.0F));
      homeFurnitureGroup2.getModelRotation();
      HomePieceOfFurniture.Property.values();
      homeFurnitureGroup1.addPropertyChangeListener((PropertyChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "OTb#yVSS*(n~Yy 9lT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
      homeFurnitureGroup0.setHeight((-972.4F));
      homeFurnitureGroup0.isBottomLeftPointAt((-972.4F), 2030.2477F, 2030.2477F);
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, 499.46753F, (-3199.7898F));
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, 243.9104F, 3.4028235E38F, 243.9104F, true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isNameCenterPointAt(243.9104F, 1.0F, 3.4028235E38F);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homePieceOfFurniture0.getNameAngle();
      System.setCurrentTimeMillis(0L);
      homePieceOfFurniture0.intersectsRectangle(243.9104F, (-400.5F), 0.0F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomePieceOfFurniture.Property.values();
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", "", (String) null, uRLContent0, uRLContent0, uRLContent0, 0.0F, 2028.6666F, (-929.616F), 0.0F, false, "", (float[][]) null, (String) null, false, false, false, bigDecimal0, bigDecimal0, (String) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.addAll((Collection<? extends HomePieceOfFurniture>) linkedList1);
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getLevel();
      homeFurnitureGroup1.setLevel((Level) null);
      homeFurnitureGroup1.setHeight((-4954.5F));
      homeFurnitureGroup0.getNameXOffset();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("O'%%:GOLaZ;/vN", uRLContent0, uRLContent0, 1930.601F, 2.0F, 3864.9F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      homePieceOfFurniture2.isTopLeftPointAt(740.3803F, (-371.213F), 3967.0408F);
      HomePieceOfFurniture.Property.values();
      homePieceOfFurniture0.getWidth();
      homePieceOfFurniture0.setDepth(1930.601F);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset((-475.0F));
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "HEIGHT");
      homeFurnitureGroup0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setDepth(2030.2477F);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-972.4F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "8+.W*VX/T9M}:");
      homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      homeFurnitureGroup1.isNameCenterPointAt(0.5F, 665.669F, 0.5F);
      linkedList0.removeFirstOccurrence(uRL0);
      homePieceOfFurniture0.isNameCenterPointAt(243.9104F, 665.669F, 3.4028235E38F);
      homeFurnitureGroup1.getNameYOffset();
      homePieceOfFurniture0.setVisible(false);
      homeFurnitureGroup0.getCurrency();
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.model.Sash", uRLContent1, 1815.0387F, 1532.878F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", temporaryURLContent0, temporaryURLContent0, (-167.19F), (-167.19F), (-167.19F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DOOR_OR_WINDOW");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3);
      linkedList1.add(integer0);
      linkedList0.removeAll(linkedList1);
      homeFurnitureGroup0.intersectsRectangle(3, 0.0F, 2154.0F, 3);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, 0.0F, 2154.0F);
      homeFurnitureGroup0.getNameYOffset();
      homeFurnitureGroup0.getLevel();
      homeFurnitureGroup0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight(223.92F);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(6);
      linkedList1.add(integer0);
      linkedList0.removeAll(linkedList1);
      homeFurnitureGroup1.intersectsRectangle(911.0F, (-526.0F), (-526.0F), 911.0F);
      homePieceOfFurniture0.isNameCenterPointAt(23.6F, 966.1472F, 223.92F);
      homeFurnitureGroup0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.containsPoint((-167.19F), (-1336.0F), 3.4028235E38F);
      homeFurnitureGroup1.setHeight((-4954.5F));
      homeFurnitureGroup1.isNameVisible();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q.H90VDu8<\"0v1Al*", uRLContent0, uRLContent0, (-167.19F), (-1665.4F), (-167.19F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "q.H90VDu8<\"0v1Al*");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight((-1789.76F));
      homePieceOfFurniture0.isNameCenterPointAt((-4954.5F), (-1665.4F), (-167.19F));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isNameCenterPointAt(1.0F, (-10.232662F), 1.0F);
      homePieceOfFurniture1.setWidth((-10.232662F));
      CatalogTexture catalogTexture0 = new CatalogTexture("EI\"OT", "EI\"OT", (Content) null, (-10.232662F), (-2676.4976F), "EI\"OT", true);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homePieceOfFurniture1.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
      homeFurnitureGroup0.setHeight((-972.4F));
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "RkHc");
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup2.isTopRightPointAt(0.0F, 0.0F, (-2684.9019F));
      homeFurnitureGroup0.setNameAngle((-1747.7F));
      Float float0 = new Float(86.8F);
      Float float1 = new Float(2.0F);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      LightSource[] lightSourceArray0 = new LightSource[6];
      Float float0 = new Float((-4070.4663F));
      LightSource lightSource0 = new LightSource((-2991.0F), 2.0F, 1015.12384F, 1799, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(3078.66F, 1915.8926F, 1121.534F, (-2338), float0);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(1.0F, 1915.8926F, (-2991.0F), (-1094), float0);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(0.3926991F, (-3503.976F), (-4070.4663F), 0);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(1.0F, (-972.4F), 1121.534F, (-715827882), float0);
      lightSourceArray0[4] = lightSource4;
      LightSource lightSource5 = new LightSource(1.0F, 1015.12384F, 1.0F, (-1094), float0);
      lightSourceArray0[5] = lightSource5;
      float[][] floatArray0 = new float[5][6];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 2030.2477F;
      floatArray1[1] = (-972.4F);
      floatArray1[2] = 3078.66F;
      floatArray1[3] = (-2991.0F);
      floatArray1[4] = 1.0F;
      floatArray1[5] = (-3503.976F);
      floatArray1[6] = 1313.088F;
      floatArray1[7] = (float) (-2338);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = 0.3926991F;
      floatArray2[1] = 1.0F;
      floatArray2[2] = 296.89786F;
      floatArray2[3] = 1.0F;
      floatArray2[4] = (-3503.976F);
      floatArray2[5] = 1121.534F;
      floatArray2[6] = 1.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      floatArray3[0] = 296.89786F;
      floatArray3[1] = (-2991.0F);
      floatArray3[2] = (-972.4F);
      floatArray3[3] = 1.0F;
      floatArray3[4] = (float) 0;
      floatArray3[5] = (float) 0;
      floatArray3[6] = 1.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = 1121.534F;
      floatArray4[1] = 1.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 1915.8926F;
      floatArray5[2] = (float) 0;
      floatArray5[3] = (-3503.976F);
      floatArray5[4] = 1915.8926F;
      floatArray0[4] = floatArray5;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("zVbU&", "/,c", "", resourceURLContent0, uRLContent0, resourceURLContent0, (-2991.0F), (-2304.94F), 3078.66F, 2030.2477F, true, lightSourceArray0, floatArray0, "", false, bigDecimal0, bigDecimal0);
      catalogPieceOfFurniture0.compareTo((CatalogPieceOfFurniture) catalogLight0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isBottomLeftPointAt(2.0F, 2030.2477F, 2.0F);
      homePieceOfFurniture0.isBottomRightPointAt((-972.4F), 1780.0F, (-1923.7977F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopLeftPointAt(1.0F, (-1391.7878F), (-1391.7878F));
      homePieceOfFurniture1.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-435.96674F), (-435.96674F), (-435.96674F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.isPointAt((-435.96674F), (-435.96674F), (-435.96674F));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, 243.9104F, 243.9104F, 243.9104F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isNameCenterPointAt(243.9104F, 243.9104F, 243.9104F);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float float0 = (-526.0F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      Content content0 = homePieceOfFurniture0.getIcon();
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("VISIBLE", content0, uRLContent0, 1104.305F, (-526.0F), (-1906.63F), true, true);
      linkedList0.add(homePieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isTopRightPointAt(56.27385F, (-1.0F), (-1344.1F));
      homeFurnitureGroup1.setNameAngle((-526.0F));
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList1, (String) null);
      homeFurnitureGroup2.getFurniture();
      LinkedList<HomePieceOfFurniture> linkedList2 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup3 = null;
      try {
        homeFurnitureGroup3 = new HomeFurnitureGroup(linkedList2, "7;,S2Y");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setModelMirrored(false);
      homePieceOfFurniture0.setDepth(2030.2477F);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isBottomLeftPointAt(2.0F, 2030.2477F, 2.0F);
      homePieceOfFurniture0.isBottomRightPointAt(0.5F, (-1956.947F), (-972.4F));
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopLeftPointAt(881.786F, 0.0F, 1010.751F);
      homePieceOfFurniture0.isBackFaceShown();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      homePieceOfFurniture0.isPointAt((-83.595F), 2.0F, (-2647.713F));
      homeFurnitureGroup0.setHeight(223.92F);
      homePieceOfFurniture0.isNameCenterPointAt((-547.95F), 1777.45F, 911.0F);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent0, 1.8498707F, 2030.2477F, (-972.4F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt(1.8498707F, 1697.2585F, 1697.2585F);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-435.27F), (-972.4F), 2653.235F, 0.0F, 2653.235F);
      sashArray0[0] = sash0;
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, 2653.235F, (-972.4F), 0.0F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      linkedList0.add(homePieceOfFurniture0);
      homeFurnitureGroup0.clone();
      homePieceOfFurniture0.isMovable();
      homeFurnitureGroup0.setHeight(2040.45F);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-435.27F), (-972.4F), 2653.235F, 0.0F, 2653.235F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, (-435.27F), 0.0F, 0.0F, (-435.27F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 2653.235F, 0.0F, (-435.27F), 0.0F);
      sashArray0[2] = sash2;
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Tj]s8M9q:[", uRLContent0, uRLContent0, 0.0F, 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.tools.OperatingSystem$2");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setNameAngle((-167.19F));
      homeFurnitureGroup0.setHeight((-4954.5F));
      homeFurnitureGroup1.isDoorOrWindow();
      homePieceOfFurniture0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-434.0887F), (-434.0887F), (-434.0887F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopLeftPointAt(744.4422F, 0.5F, (-434.0887F));
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("COLOR", uRLContent0, uRLContent0, 2482.7295F, (-2676.4976F), (-526.0F), true, false);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash((-1.0F), (-526.0F), 635.32684F, 2482.7295F, 1986.9718F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-1.0F), 1291.0F, 1.8403562F, 3997.53F, (-875.65894F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(1939.2F, (-526.0F), 1.8403562F, 2482.7295F, 2482.7295F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1.8403562F, 1291.0F, 635.32684F, 1811.0F, (-1495.3F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(2671.7798F, (-1.0F), (-2676.4976F), (-2361.184F), 1997.4734F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(0.0F, 1.0F, 1.0F, 297.6F, (-3981.4F));
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(2671.7798F, 1986.9718F, 1.0F, 1986.9718F, 1434.5441F);
      sashArray0[6] = sash6;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("COLOR", "", "1e-", uRLContent0, uRLContent0, uRLContent0, (-526.0F), (-2676.4976F), (-1495.3F), (-2361.184F), true, 635.32684F, 2482.7295F, sashArray0, (float[][]) null, "COLOR", false, true, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      homePieceOfFurniture0.isTopLeftPointAt((-2676.4976F), 1997.4734F, 2030.2477F);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
      homeFurnitureGroup0.setHeight((-972.4F));
      homeFurnitureGroup0.isBottomLeftPointAt((-972.4F), 2030.2477F, 2030.2477F);
      homePieceOfFurniture0.getY();
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "com.eteks.sweethome3d.model.LightSource");
      homeFurnitureGroup0.isPointAt(5662.0F, 0.5F, 2.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isBottomLeftPointAt(0.5F, (-579.7839F), 2030.2477F);
      homeFurnitureGroup0.isBottomRightPointAt(781.6F, 2497.4585F, 2497.4585F);
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-167.16527F), (-1.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight(3595.891F);
      homeFurnitureGroup0.isNameCenterPointAt(3595.891F, (-1.0F), (-2676.4976F));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setNameAngle((-1336.0F));
      homeFurnitureGroup1.setHeight((-4954.5F));
      homeFurnitureGroup1.isDoorOrWindow();
      homePieceOfFurniture0.getColor();
      homeFurnitureGroup0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2.0F, (-1.0F), true, true);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.isTopRightPointAt(2.0F, 2.0F, 2.0F);
      homeFurnitureGroup1.setNameAngle(171.9637F);
      homeFurnitureGroup1.getFurniture();
      homePieceOfFurniture0.isNameCenterPointAt(171.9637F, (-1.0F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2.0F, (-167.19F), (-506.6453F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.clone();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      homeFurnitureGroup0.containsPoint(33.347996F, 2040.45F, (-1336.0F));
      homeFurnitureGroup0.setHeight((-4954.5F));
      homePieceOfFurniture0.setNameXOffset(2040.45F);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", temporaryURLContent0, temporaryURLContent0, 3.4028235E38F, 2030.2477F, 1.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.isBottomLeftPointAt(1697.0F, 1697.0F, (-2513.6F));
      homePieceOfFurniture0.isBottomRightPointAt((-968.082F), (-783.0588F), 1780.0F);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopLeftPointAt(1323.79F, 1.0F, 1780.0F);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight(223.92F);
      homePieceOfFurniture0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-972.4F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "8+.W*VX/T9M}:");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      homeFurnitureGroup2.isNameCenterPointAt(0.5F, 665.669F, 0.5F);
      homeFurnitureGroup1.getLevel();
      homeFurnitureGroup2.setLevel((Level) null);
      homeFurnitureGroup0.getGroundElevation();
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup2.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float float0 = (-1336.0F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.containsPoint(3.4028235E38F, 496.28735F, 496.28735F);
      homeFurnitureGroup1.setHeight((-1336.0F));
      homeFurnitureGroup0.getValueAddedTax();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.Property.valueOf("DOOR_OR_WINDOW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.Property.DOOR_OR_WINDOW
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight((-4954.5F));
      homeFurnitureGroup0.getColor();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-526.0F), (-526.0F), 16.673998F, true, false);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isTopRightPointAt(16.673998F, 911.0F, 16.673998F);
      homeFurnitureGroup1.setNameAngle(16.673998F);
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight((-4954.5F));
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup1.getAngle();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "aQ!S*4=']hv");
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight(223.92F);
      homePieceOfFurniture0.isNameCenterPointAt((-547.95F), 1777.45F, 911.0F);
      homePieceOfFurniture0.getHeight();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2.0F, (-167.19F), (-506.6453F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "v4JyhtD_[rHOTKe");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight(1.0F);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 2.0F, (-2647.713F));
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.getWidth();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("q.H90VDu8<\"0v1Al*", uRLContent0, uRLContent0, (-167.19F), (-1665.4F), (-167.19F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "_B+/[ We7`Uv%#HYZfT");
      homeFurnitureGroup0.setHeight((-4954.5F));
      homePieceOfFurniture0.setMovable(true);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight((-4954.5F));
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.setName("+;\"%Dc+:");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isPointAt(1.0F, 2205.9F, 1.0F);
      homeFurnitureGroup1.getPlanIcon();
      homePieceOfFurniture0.isResizable();
      homeFurnitureGroup1.isResizable();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      Float float0 = new Float((double) 1.0F);
      LightSource lightSource0 = new LightSource(1.0F, 1614.6628F, 1614.6628F, 15, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1311.8187F, 15, 0.0F, 15);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(1614.6628F);
      LightSource lightSource2 = new LightSource(1614.6628F, 1.0F, 1311.8187F, 15, float1);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(15, 1311.8187F, 0.5F, 15);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(1538.3827F, 1.0F, (-1129.5669F), (-913), float1);
      lightSourceArray0[4] = lightSource4;
      Float float2 = new Float(0.5F);
      LightSource lightSource5 = new LightSource(0.0F, 15, 2.0F, 995, float2);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1311.8187F, 2.0F, (-760.6952F), 1);
      lightSourceArray0[6] = lightSource6;
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2.0F;
      floatArray1[2] = (float) 1;
      floatArray1[3] = (-760.6952F);
      floatArray1[4] = (-1129.5669F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (-1129.5669F);
      floatArray2[1] = 2.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 1.0F;
      floatArray2[5] = 1311.8187F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = (float) 15;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.5F;
      floatArray3[3] = 1614.6628F;
      floatArray3[4] = (float) 995;
      floatArray3[5] = (-897.907F);
      floatArray3[6] = (-506.6453F);
      floatArray3[7] = 1.0F;
      floatArray3[8] = (-1129.5669F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.5F;
      floatArray5[3] = (float) 15;
      floatArray5[4] = (float) (-913);
      floatArray5[5] = (-897.907F);
      floatArray5[6] = 1.0F;
      floatArray5[7] = 1.0F;
      floatArray5[8] = (-897.907F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = (float) 15;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 1.0F;
      floatArray6[3] = (float) 1;
      floatArray6[4] = 1.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[5];
      floatArray7[0] = 1.0F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 1311.8187F;
      floatArray7[4] = 1.0F;
      floatArray0[6] = floatArray7;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("", " BWaZao_3o<ni#", "", (Content) null, (Content) null, (Content) null, 1614.6628F, 1614.6628F, 1.0F, (-506.6453F), true, lightSourceArray0, floatArray0, "WIDTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameVisible(false);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), 347.49548F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.containsPoint((-1.0F), 347.49548F, (-1593.6F));
      homeFurnitureGroup1.setHeight((-4954.5F));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, 1908.8391F, (-2676.4976F), 257.70572F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList1, "CATALOG_ID");
      homePieceOfFurniture0.isNameCenterPointAt((-526.0F), (-526.0F), (-327.18353F));
      Level level0 = new Level("TEXTURE", (-3757.02F), (-3757.02F), (-327.18353F));
      homeFurnitureGroup1.setLevel(level0);
      homeFurnitureGroup1.getGroundElevation();
      homeFurnitureGroup2.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.containsPoint((-167.19F), (-1336.0F), 347.49548F);
      homeFurnitureGroup1.setHeight((-4954.5F));
      homeFurnitureGroup1.setElevation(528.73F);
      System.setCurrentTimeMillis(857L);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle((-475.0F), false, false);
      homePieceOfFurniture0.setNameStyle(textStyle0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.isBottomLeftPointAt(2029.3259F, 2029.3259F, (-475.0F));
      homeFurnitureGroup0.setVisible(false);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.VALUE_ADDED_TAX;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      float float0 = (-2676.4976F);
      float float1 = (-368.43896F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-368.43896F), (-368.43896F), (-368.43896F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      homePieceOfFurniture0.setAngle((-9.771909F));
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "X_2Ls^Y:@$*:I[DIV");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-368.43896F), (-368.43896F), (-368.43896F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      homePieceOfFurniture0.isModelMirrored();
      homePieceOfFurniture0.isNameVisible();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", temporaryURLContent0, temporaryURLContent0, (-167.19F), (-167.19F), (-167.19F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "DOOR_OR_WINDOW");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setNameAngle((-167.19F));
      homeFurnitureGroup0.setHeight((-4954.5F));
      homeFurnitureGroup1.isDoorOrWindow();
      homePieceOfFurniture0.getX();
      homeFurnitureGroup1.setDepth((-167.19F));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "\"aL_MOWhPu");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup1.getFurniture();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(list0, "#&]zT$V >8");
      homePieceOfFurniture0.isNameCenterPointAt((-327.18353F), 0.0F, (-327.18353F));
      Level level0 = new Level("", 0.0F, (-2676.4976F), (-2676.4976F));
      homeFurnitureGroup1.setLevel(level0);
      homeFurnitureGroup0.getGroundElevation();
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-1336.0F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "'R(N4{?D|(9P#");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setNameAngle(574.5038F);
      homeFurnitureGroup0.setNameAngle(574.5038F);
      homeFurnitureGroup1.setHeight(490.25F);
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup1.setWidth(574.5038F);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      BigDecimal bigDecimal0 = homePieceOfFurniture0.getValueAddedTax();
      assertNull(bigDecimal0);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      
      HomePieceOfFurniture.Property homePieceOfFurniture_Property0 = HomePieceOfFurniture.Property.valueOf("HEIGHT");
      assertEquals(HomePieceOfFurniture.Property.HEIGHT, homePieceOfFurniture_Property0);
      
      boolean boolean0 = homePieceOfFurniture0.isModelMirrored();
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-167.19F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight((-4954.5F));
      homeFurnitureGroup1.isResizable();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "HEIGHT");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      catalogPieceOfFurniture0.getCategory();
      catalogPieceOfFurniture0.setCategory((FurnitureCategory) null);
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "|bqpgK");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = homeFurnitureGroup0.clone();
      homePieceOfFurniture1.isNameCenterPointAt((-126.2F), (-526.0F), 331.6149F);
      homePieceOfFurniture1.isNameCenterPointAt(1015.12384F, 2.0F, (-2792.8F));
      homeFurnitureGroup0.getNameYOffset();
      homeFurnitureGroup0.setVisible(true);
      homeFurnitureGroup1.getCurrency();
      homeFurnitureGroup0.getNameStyle();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getLevel();
      homeFurnitureGroup1.setLevel((Level) null);
      homeFurnitureGroup1.setHeight((-4954.5F));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Sash[] sashArray0 = new Sash[2];
      Sash sash0 = new Sash((-964.0F), (-1.0F), 0.0F, 1540.5F, (-1.0F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(2320.4443F, (-10.232662F), (-1.0F), 2.5482821F, 765.8F);
      sashArray0[1] = sash1;
      float[][] floatArray0 = new float[9][5];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-964.0F);
      floatArray1[1] = 2.5482821F;
      floatArray1[2] = (-475.0F);
      floatArray1[3] = 765.8F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = (-964.0F);
      floatArray2[1] = (-1338.2488F);
      floatArray2[2] = (-1.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 2.5482821F;
      floatArray3[1] = (-2312.1F);
      floatArray3[2] = (-475.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[2];
      floatArray4[0] = (-1.0F);
      floatArray4[1] = (-475.0F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[7];
      floatArray5[0] = (-964.0F);
      floatArray5[1] = 1540.5F;
      floatArray5[2] = (-1338.2488F);
      floatArray5[3] = 2320.4443F;
      floatArray5[4] = (-964.0F);
      floatArray5[5] = (-964.0F);
      floatArray5[6] = 2.5482821F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      floatArray6[0] = 765.8F;
      floatArray6[1] = 1216.3F;
      floatArray6[2] = 2.5482821F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      floatArray7[0] = (-964.0F);
      floatArray7[1] = (-3284.0F);
      floatArray7[2] = (-2312.1F);
      floatArray7[3] = 1216.3F;
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[1];
      floatArray8[0] = 765.8F;
      floatArray0[7] = floatArray8;
      float[] floatArray9 = new float[5];
      floatArray9[0] = (-10.232662F);
      floatArray9[1] = (-3831.8103F);
      floatArray9[2] = 2320.4443F;
      floatArray9[3] = (-3284.0F);
      floatArray9[4] = (-1.0F);
      floatArray0[8] = floatArray9;
      BigDecimal bigDecimal0 = new BigDecimal((-475.0F));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow((String) null, "com.eteks.sweethome3d.tools.OperatingSystem$1", "com.eteks.sweethome3d.tools.OperatingSystem$1", (Content) null, (Content) null, (Content) null, 1216.3F, 1216.3F, (-1338.2488F), (-475.0F), false, (-3831.8103F), (-1.0F), sashArray0, floatArray0, "={yPU7Tlt", false, true, true, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.tools.OperatingSystem$1");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      // Undeclared exception!
      try { 
        homePieceOfFurniture1.setHeight(2.5482821F);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.tools.OperatingSystem", uRLContent0, uRLContent0, 3719.711F, 1742.7347F, 1742.7347F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.isBottomLeftPointAt(1697.0F, (-3771.3F), (-3771.3F));
      homePieceOfFurniture0.setNameAngle(2.0F);
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, 3719.711F, 1780.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopLeftPointAt(2943.5F, (-968.082F), 2.0F);
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.setModelMirrored(true);
      homePieceOfFurniture0.isModelMirrored();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Windows");
      Float float0 = new Float((double) 2030.2477F);
      homeFurnitureGroup0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 2030.2477F, 615.0692F);
      homePieceOfFurniture0.isBottomRightPointAt((-1.0F), 0.3926991F, 4382.718F);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      LightSource[] lightSourceArray0 = new LightSource[5];
      LightSource lightSource0 = new LightSource(0.5F, (-1.0F), 2347.28F, 1207306657);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(2347.28F, (-526.0F), 1907.89F, 2122098180, (Float) null);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(3399.083F, 2.5482821F, 2.0F, 2122098180);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource((-1.0F), 1207306657, (-1.0F), 2);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource((-1.0F), 2, 1907.89F, 2);
      lightSourceArray0[4] = lightSource4;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogLight catalogLight0 = new CatalogLight("R<n?=tRzB", "mn6(L)y|)", (String) null, uRLContent0, uRLContent0, uRLContent0, 3399.083F, 3399.083F, 1907.89F, 0.5F, false, lightSourceArray0, (float[][]) null, "mn6(L)y|)", false, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomePieceOfFurniture homePieceOfFurniture0 = homeLight0.clone();
      // Undeclared exception!
      try { 
        linkedList0.add(1207306657, homePieceOfFurniture0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1207306657, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-435.27F), (-972.4F), 2653.235F, 0.0F, 0.0F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, (-435.27F), 0.0F, 0.0F, (-435.27F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 0.0F, 0.0F, (-435.27F), 0.0F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-435.27F), 0.0F, 2458.712F, 1713.0F, 0.0F);
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(0.3926991F, 2458.712F, 0.3926991F, 0.5F, 0.0F);
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(1713.0F, (-1122.05F), 208.02292F, (-1122.05F), 1885.82F);
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.0F, (-1122.05F), (-1122.05F), 0.3926991F, 0.0F);
      sashArray0[6] = sash6;
      Sash sash7 = new Sash(2485.7983F, 1.0F, (-1.0F), 0.0F, (-2520.5F));
      sashArray0[7] = sash7;
      float[][] floatArray0 = new float[5][9];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 2458.712F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 1885.82F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray1[5] = 0.0F;
      floatArray1[6] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (-1122.05F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = 208.02292F;
      floatArray2[3] = 0.3926991F;
      floatArray2[4] = 0.0F;
      floatArray2[5] = (-1.0F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 0.0F;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 2653.235F;
      floatArray3[3] = (-1122.05F);
      floatArray3[4] = 0.5F;
      floatArray3[5] = (-1.0F);
      floatArray3[6] = 0.3926991F;
      floatArray3[7] = (-2520.5F);
      floatArray3[8] = (-1.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 2653.235F;
      floatArray4[1] = 2458.712F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-1.0F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[2];
      floatArray5[0] = 0.3926991F;
      floatArray5[1] = 660.7848F;
      floatArray0[4] = floatArray5;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("Tj]s8M9q:[", "Tj]s8M9q:[", "", uRLContent0, uRLContent0, 0.0F, 0.0F, 0.0F, 0.0F, true, (-972.4F), 0.0F, sashArray0, floatArray0, "Tj]s8M9q:[", false, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.isTopLeftPointAt(0.0F, 1.0F, 0.3926991F);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent0, 1.8498707F, 2030.2477F, (-972.4F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setElevation(2030.2477F);
      homePieceOfFurniture0.isBottomRightPointAt(1.8498707F, 1697.2585F, 1697.2585F);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-435.96674F), (-435.96674F), (-435.96674F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isNameCenterPointAt((-1.6800091F), (-435.96674F), (-1.6800091F));
      homePieceOfFurniture1.setWidth((-435.96674F));
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-435.96674F), (-435.96674F), (-435.96674F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameXOffset((-1.0F));
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isNameCenterPointAt((-1.6800091F), (-435.96674F), (-1.6800091F));
      homePieceOfFurniture1.setWidth((-435.96674F));
      homePieceOfFurniture0.setWidth((-554.4F));
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setHeight(223.92F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(223.92F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homePieceOfFurniture0.isNameCenterPointAt((-547.95F), 1777.45F, 911.0F);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(Float.NaN, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, homePieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(Float.NaN, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Content content0 = homeFurnitureGroup0.getModel();
      assertNull(content0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(223.92F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isPointAt(1.0F, 2204.4878F, 1.0F);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup1.isDoorOrWindow();
      homeFurnitureGroup0.isVisible();
      homeFurnitureGroup1.getIcon();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("E}I\"OT", (Content) null, (Content) null, 3.4028235E38F, 3.4028235E38F, 3.4028235E38F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isPointAt(3.4028235E38F, 3.4028235E38F, 3.4028235E38F);
      homePieceOfFurniture0.getWidth();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "K%XEg'&IK+VU1f4R");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup2.setElevation((-972.4F));
      homeFurnitureGroup1.isPointAt(1987.5239F, 2.0F, (-83.13677F));
      homeFurnitureGroup0.clone();
      homeFurnitureGroup2.containsPoint((-4393.0F), (-1155.0F), (-972.4F));
      HomeFurnitureGroup homeFurnitureGroup3 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup3.isBottomLeftPointAt((-1155.0F), 682.259F, 1.0F);
      homeFurnitureGroup1.getModelRotation();
      HomeFurnitureGroup homeFurnitureGroup4 = new HomeFurnitureGroup(linkedList0, "d");
      homeFurnitureGroup4.isVisible();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, temporaryURLContent0, temporaryURLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeFurnitureGroup0.setShininess((Float) null);
      homePieceOfFurniture0.setName("U4)7\"{lFVY*");
      homePieceOfFurniture0.getY();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      LightSource[] lightSourceArray0 = new LightSource[7];
      LightSource lightSource0 = new LightSource(1.0F, 2.0F, 0.5F, 2);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource((-1.0F), 0.5F, 2106.6F, 20);
      lightSourceArray0[1] = lightSource1;
      LightSource lightSource2 = new LightSource(1.0F, (-237.5F), 2, 20);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(0.5F, 2106.6F, 20, (-1234), (Float) null);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(2, 65.5F, (-219.04198F), 2);
      lightSourceArray0[4] = lightSource4;
      Float float0 = new Float((double) 2);
      LightSource lightSource5 = new LightSource((-1234), 6.561132F, 0.25F, 980375864, float0);
      lightSourceArray0[5] = lightSource5;
      Float float1 = new Float((-1.0F));
      LightSource lightSource6 = new LightSource((-219.04198F), 475.0F, 1.0F, 1073741824, float1);
      lightSourceArray0[6] = lightSource6;
      BigDecimal bigDecimal0 = new BigDecimal(110.977);
      CatalogLight catalogLight0 = new CatalogLight("", "", "", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-237.5F), 475.0F, (-237.5F), (-219.04198F), true, lightSourceArray0, "", (float[][]) null, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      homeLight0.getPrice();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("*~q?", temporaryURLContent0, temporaryURLContent0, (-972.4F), 9.606689F, 3.4028235E38F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.setNameYOffset(9.606689F);
      homePieceOfFurniture0.isBottomLeftPointAt((-3004.8484F), (-2513.6F), 0.0F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*~q?");
      homePieceOfFurniture0.setVisible(true);
      homePieceOfFurniture0.isBottomRightPointAt(200.21F, (-2513.6F), 3.4028235E38F);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopLeftPointAt(0.0F, 9.606689F, 1436.0F);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt(2030.2477F, 752.13F, 752.13F);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight(223.92F);
      homePieceOfFurniture0.isNameCenterPointAt((-547.95F), 1776.9375F, 911.0F);
      homePieceOfFurniture0.getLevel();
      homeFurnitureGroup1.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-1336.0F), 1149.0076F, (-167.19F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "DOOR_OR_WINDOW");
      homeFurnitureGroup1.containsPoint((-1336.0F), (-167.19F), 1149.0076F);
      homeFurnitureGroup1.setHeight((-167.19F));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "HEIGHT");
      Float float0 = new Float((double) (-475.0F));
      homeFurnitureGroup0.setShininess(float0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt(2030.2477F, 752.13F, 752.13F);
      homePieceOfFurniture0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(2030.2477F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2030.2477F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("Windows", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(2030.2477F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2030.2477F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("Windows", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("Windows", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(2030.2477F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(2030.2477F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals("Windows", homePieceOfFurniture0.getName());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Windows");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1015.12384F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1015.12384F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("Windows", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2030.2477F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(2030.2477F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(2030.2477F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homePieceOfFurniture0.setDescription("Windows");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      Float float0 = new Float((-526.0F));
      homeFurnitureGroup0.setShininess(float0);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup1.setElevation(52.0023F);
      homeFurnitureGroup2.isPointAt((-3245.678F), 2030.2477F, (-3245.678F));
      homeFurnitureGroup1.containsPoint(2030.2477F, 635.32684F, (-526.0F));
      homeFurnitureGroup1.isBottomLeftPointAt(635.32684F, (-3378.3F), (-526.0F));
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.isVisible();
      homeFurnitureGroup1.isMovable();
      homeFurnitureGroup0.setAngle(0.0F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "HEIGHT");
      homeFurnitureGroup0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-167.19F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("PRICE", propertyChangeListener0);
      homeFurnitureGroup1.removePropertyChangeListener(propertyChangeListenerProxy0);
      homeFurnitureGroup1.setHeight((-4954.5F));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("{U)tC#8.'-ocBq0}P", (Content) null, (Content) null, 2030.2477F, 3.4028235E38F, 2030.2477F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("X_2Ls^Y:@$*:I[DIV", (Content) null, (Content) null, (-614.55F), 0.0F, (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "X_2Ls^Y:@$*:I[DIV");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList1, "");
      homeFurnitureGroup0.setElevation(312.39124F);
      homeFurnitureGroup1.isPointAt(2793.671F, 1149.0076F, 94.2179F);
      homeFurnitureGroup0.containsPoint(0.0F, (-1318.0F), 0.0F);
      homeFurnitureGroup2.isBottomLeftPointAt(2777.5696F, 1149.0076F, 3479.043F);
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.isVisible();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-972.4F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      TextStyle textStyle0 = new TextStyle(243.9104F, false, true);
      TextStyle textStyle1 = textStyle0.deriveItalicStyle(false);
      homePieceOfFurniture0.setNameStyle(textStyle1);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "8+.W*VX/T9M}:");
      homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      homeFurnitureGroup1.isNameCenterPointAt(0.5F, 665.669F, 0.5F);
      homeFurnitureGroup0.getLevel();
      homeFurnitureGroup1.setLevel((Level) null);
      homePieceOfFurniture0.isVisible();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("-P d~X%Y0;/z", uRLContent0, uRLContent0, (-368.43896F), (-368.43896F), (-368.43896F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<";
      long long0 = 131L;
      Long long1 = new Long(131L);
      Float float0 = new Float(388.8645161155293);
      CatalogLight catalogLight0 = new CatalogLight("<", "<", "bv-!pB", (Content) null, (Content) null, (Content) null, 0.5F, 0.5F, 0.0F, 0.5F, false, (LightSource[]) null, (float[][]) null, "EI\"OT", false, (BigDecimal) null, (BigDecimal) null);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogLight0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt(2030.2477F, 752.13F, 752.13F);
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isPointAt(1.0F, 2205.9F, 1.0F);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup1.isDoorOrWindow();
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("OOR_OR_WNDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "jTWTO.jM_]mhv");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setNameAngle((-167.19F));
      homeFurnitureGroup0.setNameAngle((-1336.0F));
      homeFurnitureGroup0.setHeight((-4954.5F));
      homeFurnitureGroup0.isDoorOrWindow();
      homeFurnitureGroup1.setWidth((-167.19F));
      homeFurnitureGroup1.getElevation();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-435.96674F), (-435.96674F), (-435.96674F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isPointAt((-435.96674F), (-435.96674F), (-435.96674F));
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2.0F, (-166.27354F), (-506.6453F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "v4JyhtD_[rHOTKe");
      homeFurnitureGroup0.setHeight(1.0F);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 2.0F, (-2647.713F));
      homeFurnitureGroup0.getModelRotation();
      homePieceOfFurniture0.setMovable(true);
      homePieceOfFurniture0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setHeight((-1.0F));
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, (String) null);
      linkedList0.removeFirstOccurrence(homeFurnitureGroup0);
      homeFurnitureGroup1.clone();
      homeFurnitureGroup1.isPointAt(1321.248F, (-1245.6664F), (-526.0F));
      homeFurnitureGroup0.isBottomRightPointAt((-526.0F), 1.0F, (-1245.6664F));
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "Y{5R)PP>1");
      homeFurnitureGroup2.getModelRotation();
      Float float0 = new Float(1.0F);
      HomeFurnitureGroup homeFurnitureGroup3 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup3.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("-P d~X%Y0;/z", uRLContent0, uRLContent0, (-387.00232F), (-387.00232F), (-387.00232F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.getPoints();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "3");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setElevation(219.9F);
      homeFurnitureGroup0.setVisible(true);
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
      homeFurnitureGroup0.setHeight((-972.4F));
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "RkHc");
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isTopRightPointAt(2.0F, (-1.0F), (-972.4F));
      homeFurnitureGroup2.setNameAngle((-972.4F));
      Float float0 = new Float(1107.89F);
      Float float1 = new Float(2793.671F);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setHeight((-4954.5F));
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash((-435.27F), 0.0F, 2653.235F, 0.0F, 2653.235F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, (-435.27F), 0.0F, 0.0F, (-435.27F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(0.0F, 2653.235F, 0.0F, (-435.27F), 0.0F);
      sashArray0[2] = sash2;
      sashArray0[3] = sash2;
      Sash sash3 = new Sash(0.0F, 2458.712F, 0.0F, 2458.712F, 0.0F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.model.HomePieceOfFurniture$13", uRLContent0, uRLContent0, 2.0F, 2.0F, 2.0F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "");
      homeFurnitureGroup0.setHeight((-525.74F));
      homePieceOfFurniture0.isBottomLeftPointAt(0.0F, (-1.0F), (-525.74F));
      homeFurnitureGroup0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isTopRightPointAt(2030.2477F, 2030.2477F, 2030.2477F);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homePieceOfFurniture0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homePieceOfFurniture1.setModelMirrored(true);
      homePieceOfFurniture0.getWidth();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setName("");
      homeFurnitureGroup1.isTopLeftPointAt((-2676.4976F), (-526.0F), (-526.0F));
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup0.isNameCenterPointAt((-1.0F), (-2318.903F), 3239.0F);
      homePieceOfFurniture0.getLevel();
      homeFurnitureGroup0.setLevel((Level) null);
      homeFurnitureGroup0.isAtLevel((Level) null);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.intersectsRectangle((-1986.267F), (-1.0F), (-2318.903F), 2883.0F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      linkedList0.add((HomePieceOfFurniture) homeFurnitureGroup0);
      homeFurnitureGroup0.isBottomLeftPointAt(2029.3259F, 2029.3259F, (-475.0F));
      // Undeclared exception!
      homeFurnitureGroup0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2686.655F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.isTopRightPointAt((-2686.655F), (-1.0F), (-1.0F));
      homeFurnitureGroup1.setNameAngle((-2686.655F));
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup0.isNameCenterPointAt((-1.0F), (-526.0F), (-526.0F));
      homePieceOfFurniture0.getLevel();
      homeFurnitureGroup0.setLevel((Level) null);
      homeFurnitureGroup0.isAtLevel((Level) null);
      homePieceOfFurniture0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<";
      Long long0 = new Long(131L);
      Float float0 = new Float((double) (-435.96674F));
      Sash[] sashArray0 = new Sash[25];
      Sash sash0 = new Sash(0.0F, (-435.96674F), 131L, (-435.96674F), 305.3774F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(305.3774F, (-480.77026F), (-480.77026F), (-480.77026F), (-435.96674F));
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("EI\"OT", "<", "<", "EI\"OT", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 131L, 131L, 131L, 305.3774F, true, 205.0809F, 131L, sashArray0, (float[][]) null, "<", false, true, true, bigDecimal0, bigDecimal0, "EI\"OT");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-1045.82F), 4025.5F, (-972.4F));
      homePieceOfFurniture0.isBottomRightPointAt((-1956.947F), 2809.1897F, 284.95F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopLeftPointAt(0.5F, 0.5F, (-1766.222F));
      homePieceOfFurniture1.isBackFaceShown();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 2030.2477F, 2030.2477F, 2030.2477F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt(2030.2477F, 2030.2477F, 2030.2477F);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "/2i`cGBOkVkF` mz");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isDoorOrWindow();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethomed.model.Sash");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", temporaryURLContent0, temporaryURLContent0, (-167.19F), (-167.19F), (-167.19F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(3);
      linkedList1.add(integer0);
      linkedList0.removeAll(linkedList1);
      homePieceOfFurniture0.isNameCenterPointAt(0.0F, 0.0F, 2154.0F);
      homePieceOfFurniture0.getIcon();
      homePieceOfFurniture0.containsPoint(1108.3F, (-167.19F), (-3303.6467F));
      homePieceOfFurniture0.setShininess((Float) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("zVbU&");
      catalogPieceOfFurniture0.setCategory(furnitureCategory0);
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "|bqpgK");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isNameCenterPointAt(2.0F, 1568.854F, 2.0F);
      linkedList1.removeFirstOccurrence(homePieceOfFurniture0);
      homeFurnitureGroup0.isNameCenterPointAt(2030.2477F, (-972.4F), 2030.2477F);
      homeFurnitureGroup1.getNameYOffset();
      homeFurnitureGroup0.setVisible(true);
      homeFurnitureGroup0.getCurrency();
      homeFurnitureGroup1.clone();
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("|bqpgK");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.|bqpgK
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("Windows", (Content) null, (Content) null, 806.9543F, 2118.156F, 806.9543F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setVisible(false);
      homePieceOfFurniture0.isPointAt(806.9543F, 2118.156F, 965.3005F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ELEVATION;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      String string0 = ")@;<";
      float float0 = (-74.16F);
      float float1 = (-2734.0557F);
      boolean boolean0 = true;
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash(0.0F, (-972.4F), 2397.9343F, (-972.4F), (-1.0F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-620.6769F), (-2734.0557F), (-972.4F), (-2651.704F), (-2734.0557F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(3.911781F, 0.0F, (-2651.704F), (-418.0F), (-83.595F));
      sashArray0[2] = sash2;
      float[][] floatArrayArray0 = null;
      BigDecimal bigDecimal0 = new BigDecimal((-3485));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("oRBi`c Qx`^Z!+t*", "", "6AwT#ny(mm}", (Content) null, (Content) null, (-74.16F), (-83.595F), (-972.4F), (-2734.0557F), true, (-418.0F), 0.0F, sashArray0, (float[][]) null, ")@;<", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getModel();
      try { 
        MockURL.URL(")@;<");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: )@;<
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isPointAt(1.0F, 2205.9F, 1.0F);
      homeFurnitureGroup0.setHeight(2.0F);
      homeFurnitureGroup1.isDoorOrWindow();
      homePieceOfFurniture0.getNameYOffset();
      homePieceOfFurniture0.getName();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("OOR_OR_WNDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "OOR_OR_WNDOW");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.isPointAt((-635.0F), (-167.19F), 1149.0076F);
      homeFurnitureGroup1.containsPoint((-1588.0F), (-167.19F), 2.0F);
      homePieceOfFurniture0.isNameCenterPointAt((-167.16527F), 2026.842F, (-167.16527F));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent0, 2.0F, 2030.2477F, 2.0F, true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isBottomLeftPointAt(0.13938226F, (-1141.8F), 1.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.setModelMirrored(true);
      linkedList0.add(homePieceOfFurniture1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Float float0 = new Float(2.0F);
      homeFurnitureGroup0.setShininess(float0);
      homeFurnitureGroup0.setShininess((Float) null);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homePieceOfFurniture0.setAngle((-475.0F));
      homeFurnitureGroup0.isBottomRightPointAt(1860.9F, 2029.3259F, 1860.9F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.getLevel();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      linkedList0.poll();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setX((-526.0F));
      linkedList0.add(homePieceOfFurniture0);
      homePieceOfFurniture0.isPointAt((-83.595F), 2.0F, (-2647.713F));
      homePieceOfFurniture0.isNameCenterPointAt((-547.95F), 1777.45F, 2.0F);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "EI\"OT";
      Long long0 = new Long(131L);
      Float float0 = new Float((double) (-435.96674F));
      Sash[] sashArray0 = new Sash[25];
      float float1 = 0.0F;
      Sash sash0 = new Sash(0.0F, (-435.96674F), 131L, (-435.96674F), 305.3774F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(305.3774F, (-480.77026F), (-480.77026F), 305.3774F, (-435.96674F));
      sashArray0[1] = sash1;
      Float.sum(2053.1416F, (-768.43176F));
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("EI\"OT", "EI\"OT", "EI\"OT", "EI\"OT", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 131L, 131L, 131L, 305.3774F, true, 205.0809F, 131L, sashArray0, (float[][]) null, "EI\"OT", false, true, true, bigDecimal0, bigDecimal0, "EI\"OT");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      homePieceOfFurniture0.getValueAddedTax();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2029.2944F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isBottomLeftPointAt(2.0F, 2029.2944F, 2.0F);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "VALUE_ADDED_TAX");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.isTopRightPointAt((-526.0F), (-1.0F), (-1.0F));
      Float float0 = new Float(5169.3727918084);
      homeFurnitureGroup0.setShininess(float0);
      homeFurnitureGroup1.setNameAngle((-526.0F));
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup0.isNameCenterPointAt((-1.0F), (-526.0F), (-526.0F));
      homePieceOfFurniture0.getLevel();
      homeFurnitureGroup0.setLevel((Level) null);
      homeFurnitureGroup0.isAtLevel((Level) null);
      homeFurnitureGroup1.getY();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
      homeFurnitureGroup0.setHeight((-972.4F));
      Level level0 = new Level("zVbU&", 2030.2477F, 499.46753F, 499.46753F);
      homeFurnitureGroup0.isBottomLeftPointAt(412.0F, 2030.2477F, 2030.2477F);
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, 499.46753F, (-3245.678F));
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, temporaryURLContent0, temporaryURLContent0, (-526.0F), (-526.0F), (-526.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.move((-526.0F), (-526.0F));
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      homeFurnitureGroup0.isPointAt((-526.0F), 1.0F, (-526.0F));
      homeFurnitureGroup0.setVisible(false);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("r!]6nf=<b;Q}0QjU.", uRLContent1, uRLContent0, (-526.0F), 1.0F, 0.0F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.isBottomLeftPointAt(1.0F, 2030.2477F, 2030.2477F);
      homePieceOfFurniture0.isBottomRightPointAt(1697.0F, 0.0F, 1697.0F);
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.isTopLeftPointAt((-526.0F), (-968.082F), (-1889.0F));
      HomePieceOfFurniture.Property.values();
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture2 = new HomePieceOfFurniture(homePieceOfFurniture1);
      homePieceOfFurniture0.setNameVisible(false);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture2.isBottomLeftPointAt((-475.0F), (-475.0F), 1779.27F);
      linkedList0.add(homePieceOfFurniture2);
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-526.0F), (-526.0F), 16.673998F, true, false);
      homePieceOfFurniture0.clone();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isTopRightPointAt(16.673998F, 911.0F, 16.673998F);
      homeFurnitureGroup1.setNameAngle(16.673998F);
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight((-4954.5F));
      homeFurnitureGroup1.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("-P d~X%Y0;/z", uRLContent0, uRLContent0, (-387.00232F), (-387.00232F), (-387.00232F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameVisible(true);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isTopRightPointAt((-387.00232F), (-387.00232F), (-387.00232F));
      homePieceOfFurniture0.clone();
      homePieceOfFurniture0.setDepth((-387.00232F));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-167.19F), (-1336.0F), 866.9752F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup1.setElevation(866.9752F);
      homePieceOfFurniture0.isBottomLeftPointAt((-1336.0F), 866.9752F, 866.9752F);
      homeFurnitureGroup2.setWidth((-167.19F));
      HomeFurnitureGroup homeFurnitureGroup3 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup1.isPointAt(0.5F, 0.5F, 0.5F);
      homePieceOfFurniture0.isBottomRightPointAt(1852.0F, (-915.64F), (-167.19F));
      homeFurnitureGroup2.getModelRotation();
      homeFurnitureGroup0.getNameAngle();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.containsPoint(3.4028235E38F, 0.3926991F, 0.0F);
      homePieceOfFurniture0.isBottomLeftPointAt(3.4028235E38F, 2.0F, 1697.0F);
      homePieceOfFurniture0.isBottomRightPointAt((-968.082F), 1780.0F, 3.4028235E38F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopLeftPointAt((-2676.4976F), 1.0F, 3.4028235E38F);
      homePieceOfFurniture0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "");
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      Sash[] sashArray0 = new Sash[6];
      Sash sash0 = new Sash((-1480.214F), (-763.8F), 1523.4943F, 1.0F, (-763.8F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1523.4943F, 3302.8027F, 3355.6F, 3355.6F, (-1900.9F));
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(121.9552F, (-1480.214F), 2059.2466F, 1.0F, 2059.2466F);
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(1.0F, 2059.2466F, (-1900.9F), (-763.8F), (-1900.9F));
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(831.64F, 831.64F, 3355.6F, (-1901.9938F), (-213.00845F));
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(2.0F, 1.0F, (-1.0F), (-475.0F), (-1900.9F));
      sashArray0[5] = sash5;
      float[][] floatArray0 = new float[4][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 3302.8027F;
      floatArray1[1] = 1523.4943F;
      floatArray1[2] = (-1178.476F);
      floatArray1[3] = 121.9552F;
      floatArray1[4] = 121.9552F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 2.0F;
      floatArray2[1] = (-1900.9F);
      floatArray2[2] = (-1900.9F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = 3302.8027F;
      floatArray3[1] = (-1.0F);
      floatArray3[2] = (-213.00845F);
      floatArray3[3] = 3355.6F;
      floatArray3[4] = 3302.8027F;
      floatArray3[5] = (-1.0F);
      floatArray3[6] = (-1.0F);
      floatArray3[7] = 831.64F;
      floatArray3[8] = (-1900.9F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 121.9552F;
      floatArray4[1] = (-1132.41F);
      floatArray4[2] = 0.0F;
      floatArray4[3] = 831.64F;
      floatArray4[4] = (-1901.9938F);
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("l#|H'x/H/", "$wwC4YG~@$WC2|X", "temporarySubFolder", temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-475.0F), 1523.4943F, 1523.4943F, 1523.4943F, false, 1523.4943F, (-475.0F), sashArray0, floatArray0, (String) null, true, false, true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.clone();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setNameAngle((-1336.0F));
      homeFurnitureGroup1.setHeight((-4954.5F));
      float[][] floatArray0 = new float[0][8];
      homeFurnitureGroup1.getValueAddedTaxPercentage();
      BigDecimal bigDecimal0 = new BigDecimal((-1364L));
      CatalogLight catalogLight0 = null;
      try {
        catalogLight0 = new CatalogLight("com.eteks.sweethome3d.model.Sash", "com.eteks.sweethome3d.model.Sash", "com.eteks.sweethome3d.model.Sash", uRLContent0, uRLContent0, uRLContent0, (-3308.5754F), 0.5F, 1652.0F, 1652.0F, false, (LightSource[]) null, "", floatArray0, "com.eteks.sweethome3d.model.Sash", true, true, true, (BigDecimal) null, bigDecimal0, (String) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.eteks.sweethome3d.model.CatalogPieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      homePieceOfFurniture0.getPoints();
      Level level0 = new Level("FEQP;TFgOk7k3$cYsW(", (-526.0F), 1.0F, 1.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isAtLevel(level0);
      homePieceOfFurniture1.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<";
      Long long0 = new Long(131L);
      Float float0 = new Float(388.8645161155293);
      Sash[] sashArray0 = new Sash[14];
      Sash sash0 = new Sash((-435.96674F), (-435.96674F), 131L, (-435.96674F), 304.629F);
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(304.629F, (-480.77026F), (-480.77026F), 2239.0186F, (-435.96674F));
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("EI\"OT", "<", "<", "EI\"OT", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 131L, 131L, 131L, 304.629F, true, 205.0809F, 131L, sashArray0, (float[][]) null, "<", false, false, false, bigDecimal0, bigDecimal0, "EI\"OT");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(homeDoorOrWindow1);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomePieceOfFurniture.Property.values();
      homeDoorOrWindow1.getValueAddedTaxPercentage();
      homePieceOfFurniture0.getNameYOffset();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.NAME;
      HomePieceOfFurniture.getFurnitureComparator(homePieceOfFurniture_SortableProperty0);
      String string0 = "OTb#yVSS*(n~Yy 9lT";
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "OTb#yVSS*(n~Yy 9lT");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setHeight(223.92F);
      homePieceOfFurniture0.isNameCenterPointAt((-547.95F), 1777.45F, 911.0F);
      HomePieceOfFurniture.SortableProperty.values();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("EI\"OT", (Content) null, (Content) null, (-435.96674F), (-435.96674F), (-435.96674F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture1.isBottomRightPointAt((-0.88686275F), (-435.96674F), (-435.96674F));
      homePieceOfFurniture0.getLevel();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, uRLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("#&]zT$V >8", uRLContent0, uRLContent0, (-327.18353F), (-1.0F), (-526.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "0K");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.isTopRightPointAt((-327.18353F), (-90.336F), (-486.2F));
      homeFurnitureGroup1.setNameAngle((-90.336F));
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup0.getFurniture();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(list0, "");
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup2.clone();
      homeFurnitureGroup3.setHeight(3595.891F);
      homeFurnitureGroup0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("#&]zT$V >8", (Content) null, uRLContent0, (-1734.0F), (-2676.4976F), (-2091.34F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "{Cts(Yrd7;7Ctd*A\",G");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isTopRightPointAt((-2091.34F), (-2091.34F), (-407.83655F));
      homeFurnitureGroup0.setNameAngle(0.0F);
      homeFurnitureGroup0.getFurniture();
      homeFurnitureGroup1.isNameCenterPointAt((-1097.4883F), (-2091.34F), 0.0F);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-972.4F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      homePieceOfFurniture0.setHeight(1920.3907F);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      linkedList0.removeFirstOccurrence(homeFurnitureGroup0);
      homePieceOfFurniture0.isNameCenterPointAt(243.9104F, (-680.17F), 243.9104F);
      homeFurnitureGroup0.setVisible(false);
      homePieceOfFurniture0.setNameYOffset((-972.4F));
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      ClassLoader.getSystemClassLoader();
      homePieceOfFurniture0.getValueAddedTax();
      HomePieceOfFurniture.Property homePieceOfFurniture_Property0 = HomePieceOfFurniture.Property.VISIBLE;
      homePieceOfFurniture0.getShininess();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("com.eteks.sweethome3d.tools.OperatingSystem", uRLContent0, uRLContent0, 2.0F, 2030.2477F, (-972.4F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomLeftPointAt((-94.3F), 2030.2477F, 2030.2477F);
      homePieceOfFurniture0.isBottomRightPointAt(2.0F, (-94.3F), (-94.3F));
      homePieceOfFurniture0.clone();
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      LightSource[] lightSourceArray0 = new LightSource[7];
      Float float0 = new Float((double) 1.0F);
      LightSource lightSource0 = new LightSource(1.0F, 1614.6628F, 1614.6628F, 15, float0);
      lightSourceArray0[0] = lightSource0;
      LightSource lightSource1 = new LightSource(1311.8187F, 15, 0.0F, 15);
      lightSourceArray0[1] = lightSource1;
      Float float1 = new Float(1614.6628F);
      LightSource lightSource2 = new LightSource(1614.6628F, 1.0F, 1311.8187F, 15, float1);
      lightSourceArray0[2] = lightSource2;
      LightSource lightSource3 = new LightSource(15, 1311.8187F, 0.5F, 15);
      lightSourceArray0[3] = lightSource3;
      LightSource lightSource4 = new LightSource(1538.3827F, 1.0F, (-1129.5669F), (-913), float1);
      lightSourceArray0[4] = lightSource4;
      Float float2 = new Float(0.5F);
      LightSource lightSource5 = new LightSource(0.0F, 15, 2.0F, 995, float2);
      lightSourceArray0[5] = lightSource5;
      LightSource lightSource6 = new LightSource(1311.8187F, 2.0F, (-760.6952F), 1);
      lightSourceArray0[6] = lightSource6;
      float[][] floatArray0 = new float[7][2];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 2.0F;
      floatArray1[2] = (float) 1;
      floatArray1[3] = (-760.6952F);
      floatArray1[4] = (-1129.5669F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      floatArray2[0] = (-1129.5669F);
      floatArray2[1] = 2.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 1.0F;
      floatArray2[5] = 1311.8187F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = (float) 15;
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.5F;
      floatArray3[3] = 1614.6628F;
      floatArray3[4] = (float) 995;
      floatArray3[5] = (-897.907F);
      floatArray3[6] = (-506.6453F);
      floatArray3[7] = 1.0F;
      floatArray3[8] = (-1129.5669F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 1.0F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.5F;
      floatArray5[3] = (float) 15;
      floatArray5[4] = (float) (-913);
      floatArray5[5] = (-897.907F);
      floatArray5[6] = 1.0F;
      floatArray5[7] = 1.0F;
      floatArray5[8] = (-897.907F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = (float) 15;
      floatArray6[1] = 0.0F;
      floatArray6[2] = 1.0F;
      floatArray6[3] = (float) 1;
      floatArray6[4] = 1.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[5];
      floatArray7[0] = 1.0F;
      floatArray7[1] = 0.0F;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 1311.8187F;
      floatArray7[4] = 1.0F;
      floatArray0[6] = floatArray7;
      BigInteger bigInteger0 = BigInteger.TEN;
      BigDecimal bigDecimal0 = new BigDecimal(bigInteger0);
      CatalogLight catalogLight0 = new CatalogLight("", " BWaZao_3o<ni#", "", (Content) null, (Content) null, (Content) null, 1614.6628F, 1614.6628F, 1.0F, (-506.6453F), true, lightSourceArray0, floatArray0, "WIDTH", true, bigDecimal0, bigDecimal0);
      HomeLight homeLight0 = new HomeLight(catalogLight0);
      HomeLight homeLight1 = homeLight0.clone();
      homeLight1.setNameVisible(true);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("8]Sf6%", temporaryURLContent0, temporaryURLContent0, (-167.19F), 1.0F, 2.0F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "m&@B@2@");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isPointAt((-312.39124F), (-312.39124F), (-167.19F));
      homeFurnitureGroup1.setHeight(96.0F);
      homeFurnitureGroup0.isNameCenterPointAt(223.92F, 935.46313F, 3.4028235E38F);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.setNameAngle((-475.0F));
      homePieceOfFurniture0.setModelMirrored(false);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.setDepth((-475.0F));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-83.595F), 3.4028235E38F, 3.4028235E38F, 2.3184705F, (-3977.599F));
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(1664.9354F, 0.0F, 3307.0F, 0.5F, 0.5F);
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(1.0F, (-67.4422F), (-3977.599F), 935.46313F, (-2491.6465F));
      sashArray0[2] = sash2;
      float[][] floatArray0 = new float[6][2];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 3.4028235E38F;
      floatArray1[1] = 3307.0F;
      floatArray1[2] = (-83.595F);
      floatArray1[3] = 2.3184705F;
      floatArray1[4] = 2671.0F;
      floatArray1[5] = (-83.595F);
      floatArray1[6] = 1664.9354F;
      floatArray1[7] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      floatArray2[0] = (-2491.6465F);
      floatArray2[1] = 0.5F;
      floatArray2[2] = 2.3184705F;
      floatArray2[3] = 2.3184705F;
      floatArray2[4] = 2.3184705F;
      floatArray2[5] = 935.46313F;
      floatArray2[6] = (-67.4422F);
      floatArray2[7] = 3.4028235E38F;
      floatArray2[8] = (-83.595F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      floatArray3[0] = (-67.4422F);
      floatArray3[1] = (-2491.6465F);
      floatArray3[2] = (-67.4422F);
      floatArray3[3] = 3.4028235E38F;
      floatArray3[4] = 935.46313F;
      floatArray3[5] = (-3977.599F);
      floatArray3[6] = 3.4028235E38F;
      floatArray3[7] = 2671.0F;
      floatArray3[8] = 0.5F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      floatArray4[0] = 1.0F;
      floatArray4[1] = 2671.0F;
      floatArray4[2] = 0.5F;
      floatArray4[3] = (-3977.599F);
      floatArray4[4] = (-3977.599F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      floatArray5[0] = 2.3184705F;
      floatArray5[1] = 1.0F;
      floatArray5[2] = 1664.9354F;
      floatArray5[3] = 1664.9354F;
      floatArray5[4] = 0.5F;
      floatArray5[5] = (-83.595F);
      floatArray5[6] = 0.5F;
      floatArray5[7] = 2.3184705F;
      floatArray5[8] = 2671.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[1];
      floatArray6[0] = (-67.4422F);
      floatArray0[5] = floatArray6;
      BigDecimal bigDecimal0 = new BigDecimal(3307.0F);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("mdT", "com.eteks.sweethome3d.tools.OperatingSystem$3", "com.eteks.sweethome3d.tools.OperatingSystem$3", (Content) null, (Content) null, 0.0F, (-67.4422F), 3.4028235E38F, 2671.0F, false, 2671.0F, 2671.0F, sashArray0, floatArray0, "com.eteks.sweethome3d.tools.OperatingSystem$3", false, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.getName();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 2.0F, (-166.27354F), (-506.6453F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "v4JyhtD_[rHOTKe");
      homeFurnitureGroup0.setHeight(1.0F);
      homePieceOfFurniture0.isBottomLeftPointAt((-1.0F), 2.0F, (-2647.713F));
      homeFurnitureGroup0.getModelRotation();
      homeFurnitureGroup0.getX();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("}eQXr#j&TU#<T9", (Content) null, (Content) null, (-475.0F), (-475.0F), (-0.5F), true, true);
      Level level0 = new Level("}eQXr#j&TU#<T9", 3.4028235E38F, 3.4028235E38F, 114.11686F);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isTopRightPointAt((-475.0F), 114.11686F, 3.4028235E38F);
      homePieceOfFurniture0.getPriceValueAddedTaxIncluded();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, 243.9104F, 243.9104F, 243.9104F, false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      homePieceOfFurniture0.setNameYOffset(243.9104F);
      homePieceOfFurniture0.isNameCenterPointAt(243.9104F, (-10.232662F), 243.9104F);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, 243.9104F, 3.4028235E38F, 243.9104F, true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isNameCenterPointAt(243.9104F, (-10.232662F), 3.4028235E38F);
      homePieceOfFurniture0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-526.0F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.setVisible(false);
      System.setCurrentTimeMillis(0L);
      Level level0 = new Level((String) null, 1606.0F, (-526.0F), 0L);
      homeFurnitureGroup1.isAtLevel(level0);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("Emv5g p-O~KZIoB", uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, true);
      homePieceOfFurniture0.getTexture();
      homePieceOfFurniture0.setTexture((HomeTexture) null);
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture1);
      homePieceOfFurniture0.setNameVisible(false);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      LinkedList<HomePieceOfFurniture> linkedList2 = new LinkedList<HomePieceOfFurniture>();
      linkedList2.add(homePieceOfFurniture1);
      homePieceOfFurniture1.getDescription();
      homePieceOfFurniture1.isPointAt((-2676.4976F), (-506.6453F), 1077.37F);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      MockURL.getHttpExample();
      URLContent uRLContent1 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-1336.0F), 243.9104F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      linkedList0.add(homePieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "8+.W*VX/T9M}:");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      homeFurnitureGroup0.isPointAt((-167.19F), 1149.0076F, (-167.19F));
      homeFurnitureGroup0.containsPoint((-635.0F), 935.46313F, 2.0F);
      homeFurnitureGroup2.isNameCenterPointAt((-1336.0F), (-972.4F), 935.46313F);
      homePieceOfFurniture0.getNameStyle();
      homeFurnitureGroup1.setNameStyle((TextStyle) null);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, temporaryURLContent0, temporaryURLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      homeFurnitureGroup0.setShininess((Float) null);
      homePieceOfFurniture0.getStaircaseCutOutShape();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture(" %|5bpxz", (Content) null, (Content) null, 2053.1416F, 3.4028235E38F, 2053.1416F, false, false);
      Level level0 = new Level("com.eteks.sweetho~e3d.model.HomePieceOfFurnitue", 2053.1416F, 3.4028235E38F, (-475.0F));
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isAtLevel(level0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, 243.9104F, 243.9104F, (-1336.0F), true, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "com.eteks.sweethome3d.model.Sash");
      homeFurnitureGroup0.clone();
      HomeFurnitureGroup homeFurnitureGroup1 = null;
      try {
        homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "v^RD2yszs+\"FH=");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homePieceOfFurniture0.isBackFaceShown();
      homeFurnitureGroup1.setHeight((-4954.5F));
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-2676.4976F), (-526.0F), (-3167.331F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.clone();
      homeFurnitureGroup1.setHeight(1.0F);
      homePieceOfFurniture0.isNameCenterPointAt(911.0F, (-547.95F), 1776.9375F);
      homeFurnitureGroup0.getLevel();
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup2.setLevel((Level) null);
      Integer integer0 = new Integer(658);
      homeFurnitureGroup1.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", temporaryURLContent0, temporaryURLContent0, 3.4028235E38F, 2030.2477F, 9.606689F, false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      homePieceOfFurniture0.isVisible();
      homePieceOfFurniture0.isBottomLeftPointAt(1697.0F, 1697.0F, (-2513.6F));
      homePieceOfFurniture0.isBottomRightPointAt((-968.082F), (-783.0588F), 1780.0F);
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      homePieceOfFurniture1.isTopLeftPointAt(9.606689F, 1780.0F, (-1851.3928F));
      HomePieceOfFurniture.Property.values();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent0, (Content) null, 1.8498707F, (-1.0F), (-1.0F), false, false);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      homePieceOfFurniture0.isBottomRightPointAt((-875.7766F), (-1.0F), 1710.08F);
      homePieceOfFurniture0.clone();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2686.655F), true, true);
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup0.isTopRightPointAt((-2686.655F), (-1.0F), (-1.0F));
      homeFurnitureGroup1.setNameAngle((-2686.655F));
      homeFurnitureGroup1.getFurniture();
      homeFurnitureGroup0.isNameCenterPointAt((-1.0F), (-526.0F), (-526.0F));
      homePieceOfFurniture0.getLevel();
      homeFurnitureGroup0.setLevel((Level) null);
      homeFurnitureGroup0.isAtLevel((Level) null);
      homePieceOfFurniture0.getDepth();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, temporaryURLContent0, temporaryURLContent0, (-516.74457F), (-516.74457F), (-2676.4976F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-258.37228F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-516.74457F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-258.37228F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-516.74457F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-258.37228F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-516.74457F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-258.37228F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-516.74457F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup1.setName("");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup1.isTopLeftPointAt((-2676.4976F), (-516.74457F), (-516.74457F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup1.getFurniture();
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(list0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homeFurnitureGroup0.isNameCenterPointAt((-1.0F), (-2318.903F), 3239.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      Level level0 = homePieceOfFurniture0.getLevel();
      assertNull(level0);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-516.74457F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-258.37228F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-516.74457F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-258.37228F), homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-516.74457F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      
      homeFurnitureGroup0.setLevel((Level) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean3 = homeFurnitureGroup0.isAtLevel((Level) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      BigDecimal bigDecimal0 = homeFurnitureGroup0.getPrice();
      assertNull(bigDecimal0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean4 = homeFurnitureGroup0.isModelMirrored();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(boolean4);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean5 = homeFurnitureGroup1.isPointAt(3239.0F, (-2318.903F), (-1646.8F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean5);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getQuery());
      assertEquals("http", uRL1.getProtocol());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-2676.4976F), 4193.668F, (-526.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(4193.668F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(4193.668F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(4193.668F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2096.834F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(uRL0.equals((Object)uRL1));
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(4193.668F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(4193.668F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2096.834F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      Object[] objectArray0 = linkedList0.toArray();
      assertNotNull(objectArray0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, objectArray0.length);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup1.isPointAt((-972.4F), 1.0F, (-488.5F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setVisible(false);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isVisible());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      float float0 = homePieceOfFurniture0.getDepth();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(4193.668F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(4193.668F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(2096.834F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNotSame(uRL0, uRL1);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals(4193.668F, float0, 0.01F);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup1.isPointAt(1.0F, 2205.9F, 312.39124F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homeFurnitureGroup1.containsPoint(935.46313F, 0.3926991F, 1149.0076F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean3 = homeFurnitureGroup0.isNameCenterPointAt(911.0F, 1.0F, 911.0F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", temporaryURLContent0, temporaryURLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(2, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "\"aL_MOWhPu");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup1.getFurniture();
      assertNotNull(list0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(list0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(list0, "#&]zT$V >8");
      assertNotNull(homeFurnitureGroup2);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertEquals("#&]zT$V >8", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(list0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homePieceOfFurniture0.isNameCenterPointAt((-327.18353F), 0.0F, (-327.18353F));
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Level level0 = new Level("", 0.0F, (-2676.4976F), (-2676.4976F));
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals((-2676.4976F), level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-2676.4976F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      
      homeFurnitureGroup1.setLevel(level0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-2676.4976F), level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertEquals((-2676.4976F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      float float0 = homeFurnitureGroup1.getGroundElevation();
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      String string0 = homeFurnitureGroup1.getCatalogId();
      assertNull(string0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("\"aL_MOWhPu", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup0.isTopLeftPointAt((-2115.41F), (-2676.4976F), 574.5038F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setHeight(223.92F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(223.92F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homePieceOfFurniture0.isNameCenterPointAt((-547.95F), 1777.45F, 911.0F);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(Float.NaN, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(Float.NaN, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(Float.NEGATIVE_INFINITY, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Level level0 = homeFurnitureGroup1.getLevel();
      assertNull(level0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(223.92F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup1.setNameXOffset((-2676.4976F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(223.92F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-2676.4976F), homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-526.0F), (-2686.655F), true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2686.655F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2686.655F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-2686.655F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2686.655F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-2686.655F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(homePieceOfFurniture0));
      
      boolean boolean1 = linkedList1.add((HomePieceOfFurniture) homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(linkedList1.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup3 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup3);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup3.isBackFaceShown());
      assertNull(homeFurnitureGroup3.getColor());
      assertFalse(homeFurnitureGroup3.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup3.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup3.isTexturable());
      assertTrue(homeFurnitureGroup3.isVisible());
      assertNull(homeFurnitureGroup3.getCatalogId());
      assertTrue(homeFurnitureGroup3.isResizable());
      assertEquals(0.0F, homeFurnitureGroup3.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup3.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup3.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup3.isMovable());
      assertNull(homeFurnitureGroup3.getShininess());
      assertEquals(0.0F, homeFurnitureGroup3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup3.getDescription());
      assertTrue(homeFurnitureGroup3.isDeformable());
      assertFalse(homeFurnitureGroup3.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup3.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup3.isNameVisible());
      assertEquals("", homeFurnitureGroup3.getName());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup2));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homeFurnitureGroup2.isTopRightPointAt((-2091.34F), 665.01F, (-2686.655F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup3);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup3));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup3.setNameVisible(true);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup3.isBackFaceShown());
      assertNull(homeFurnitureGroup3.getColor());
      assertFalse(homeFurnitureGroup3.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup3.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup3.isTexturable());
      assertTrue(homeFurnitureGroup3.isVisible());
      assertNull(homeFurnitureGroup3.getCatalogId());
      assertTrue(homeFurnitureGroup3.isResizable());
      assertEquals(0.0F, homeFurnitureGroup3.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup3.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup3.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup3.isMovable());
      assertNull(homeFurnitureGroup3.getShininess());
      assertEquals(0.0F, homeFurnitureGroup3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup3.getDescription());
      assertTrue(homeFurnitureGroup3.isDeformable());
      assertFalse(homeFurnitureGroup3.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup3.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup3.isNameVisible());
      assertEquals("", homeFurnitureGroup3.getName());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup2));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      LinkedList<HomePieceOfFurniture> linkedList2 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList2);
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertFalse(linkedList2.contains(homePieceOfFurniture0));
      
      boolean boolean3 = linkedList2.add((HomePieceOfFurniture) homeFurnitureGroup3);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup3.isBackFaceShown());
      assertNull(homeFurnitureGroup3.getColor());
      assertFalse(homeFurnitureGroup3.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup3.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup3.isTexturable());
      assertTrue(homeFurnitureGroup3.isVisible());
      assertNull(homeFurnitureGroup3.getCatalogId());
      assertTrue(homeFurnitureGroup3.isResizable());
      assertEquals(0.0F, homeFurnitureGroup3.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup3.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup3.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup3.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup3.isMovable());
      assertNull(homeFurnitureGroup3.getShininess());
      assertEquals(0.0F, homeFurnitureGroup3.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup3.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup3.getDescription());
      assertTrue(homeFurnitureGroup3.isDeformable());
      assertFalse(homeFurnitureGroup3.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup3.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup3.isNameVisible());
      assertEquals("", homeFurnitureGroup3.getName());
      assertEquals(1, linkedList2.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup3);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup3, homeFurnitureGroup2);
      assertNotSame(linkedList2, linkedList0);
      assertNotSame(linkedList2, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup3));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup3.equals((Object)homeFurnitureGroup2));
      assertFalse(linkedList2.equals((Object)linkedList0));
      assertFalse(linkedList2.equals((Object)linkedList1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(linkedList2.contains(homePieceOfFurniture0));
      
      boolean boolean4 = homeFurnitureGroup2.isDeformable();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList0, linkedList2);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList0.equals((Object)linkedList2));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup3));
      assertTrue(boolean4);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      float float0 = (-475.0F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean0 = homePieceOfFurniture0.containsPoint((-475.0F), (-475.0F), (-475.0F));
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertEquals("http", uRL1.getProtocol());
      assertNull(uRL1.getQuery());
      assertNull(uRL1.getRef());
      assertEquals((-1), uRL1.getDefaultPort());
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      URLContent uRLContent1 = new URLContent(uRL0);
      assertNotNull(uRLContent1);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent1.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", uRLContent0, uRLContent1, 2.0F, 2030.2477F, (-972.4F), true, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(uRLContent1.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent0.equals((Object)uRLContent1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(uRLContent1.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-972.4F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent0.equals((Object)uRLContent1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(uRLContent1.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-972.4F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1, linkedList0.size());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRLContent0, uRLContent1);
      assertNotSame(uRLContent1, uRLContent0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent0.equals((Object)uRLContent1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "zVbU&");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(1015.12384F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("zVbU&", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2030.2477F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup0.isPointAt((-1313.088F), 2030.2477F, 0.5F);
      assertEquals(1, linkedList0.size());
      assertEquals(1015.12384F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("zVbU&", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2030.2477F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homePieceOfFurniture0.isBottomLeftPointAt(60.9776F, 2.0F, (-1313.088F));
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(uRLContent1.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-972.4F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRLContent0, uRLContent1);
      assertNotSame(uRLContent1, uRLContent0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent0.equals((Object)uRLContent1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = homeFurnitureGroup0.isBottomRightPointAt(2497.4585F, 2030.2477F, 2497.4585F);
      assertEquals(1, linkedList0.size());
      assertEquals(1015.12384F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("zVbU&", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2030.2477F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomePieceOfFurniture homePieceOfFurniture1 = homeFurnitureGroup0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertEquals(1, linkedList0.size());
      assertEquals(1015.12384F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("zVbU&", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(2030.2477F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals("zVbU&", homePieceOfFurniture1.getName());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNull(homePieceOfFurniture1.getColor());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(2.0F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture1.getX(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(1015.12384F, homePieceOfFurniture1.getY(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNotSame(homeFurnitureGroup0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homeFurnitureGroup0);
      assertFalse(homePieceOfFurniture1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-262.2436F), (-526.0F), (-526.0F), true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-262.2436F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-262.2436F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-262.2436F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals((-131.1218F), homePieceOfFurniture0.getX(), 0.01F);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-262.2436F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-262.2436F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals((-131.1218F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homePieceOfFurniture0.setNameVisible(false);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-262.2436F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-262.2436F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals((-131.1218F), homePieceOfFurniture0.getX(), 0.01F);
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(homePieceOfFurniture0));
      
      boolean boolean1 = linkedList1.add((HomePieceOfFurniture) homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(linkedList1.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setMovable(false);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNotSame(linkedList0, linkedList1);
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("X_2Ls^Y:@$*:I[DIV", (Content) null, (Content) null, (-614.55F), 0.0F, (-2676.4976F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-614.55F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-614.55F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-307.275F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-614.55F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertFalse(linkedList1.contains(homePieceOfFurniture0));
      
      boolean boolean0 = linkedList1.add(homePieceOfFurniture0);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-614.55F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-307.275F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homePieceOfFurniture0.getName());
      assertEquals(0.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-614.55F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1, linkedList1.size());
      assertNotSame(linkedList1, linkedList0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean0);
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "X_2Ls^Y:@$*:I[DIV");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList1.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList1.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      Float float0 = new Float((-3245.678F));
      assertNotNull(float0);
      assertEquals((-3245.678F), (float)float0, 0.01F);
      
      homeFurnitureGroup0.setShininess(float0);
      assertEquals(1, linkedList1.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-3245.678F), homeFurnitureGroup0.getShininess(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList1, "");
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals("", homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertNull(homeFurnitureGroup2.getDescription());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup1.setElevation((-614.55F));
      assertEquals(1, linkedList1.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-3245.678F), homeFurnitureGroup0.getShininess(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-614.55F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-614.55F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup2.isPointAt(2030.2477F, (-1.0F), 2793.671F);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals("", homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertNull(homeFurnitureGroup2.getDescription());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homeFurnitureGroup1.containsPoint((-2676.4976F), 635.32684F, 635.32684F);
      assertEquals(1, linkedList1.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-3245.678F), homeFurnitureGroup0.getShininess(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-614.55F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-614.55F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      boolean boolean3 = homeFurnitureGroup0.isBottomLeftPointAt((-83.595F), (-1.0F), 3.4028235E38F);
      assertEquals(1, linkedList1.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-3245.678F), homeFurnitureGroup0.getShininess(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      float[][] floatArray0 = homeFurnitureGroup2.getModelRotation();
      assertNotNull(floatArray0);
      assertEquals(1, linkedList1.size());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup2.isVisible());
      assertNull(homeFurnitureGroup2.getShininess());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup2.isMovable());
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals("", homeFurnitureGroup2.getName());
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertNull(homeFurnitureGroup2.getDescription());
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertEquals(3, floatArray0.length);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
      
      boolean boolean4 = homeFurnitureGroup1.isVisible();
      assertEquals(1, linkedList1.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-3245.678F), homeFurnitureGroup0.getShininess(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-614.55F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-614.55F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals("X_2Ls^Y:@$*:I[DIV", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNotSame(linkedList1, linkedList0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(boolean4);
      assertTrue(linkedList1.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, temporaryURLContent0, temporaryURLContent0, (-526.0F), (-526.0F), (-2676.4976F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      float[][] floatArray0 = homePieceOfFurniture0.getPoints();
      assertNotNull(floatArray0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(4, floatArray0.length);
      
      Level level0 = new Level("FEQP;TFgOk7k3$cYsW(", (-526.0F), (-329.53F), (-329.53F));
      assertNotNull(level0);
      assertEquals((-526.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-329.53F), level0.getFloorThickness(), 0.01F);
      assertEquals("FEQP;TFgOk7k3$cYsW(", level0.getName());
      assertEquals((-329.53F), level0.getHeight(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals((-2676.4976F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getName());
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      
      Level level1 = homePieceOfFurniture0.getLevel();
      assertNull(level1);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      
      boolean boolean1 = homePieceOfFurniture0.isAtLevel((Level) null);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Level level2 = homePieceOfFurniture0.getLevel();
      assertNull(level2);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      
      Content content0 = homePieceOfFurniture0.getPlanIcon();
      assertNull(content0);
      assertNull(uRL0.getQuery());
      assertNull(uRL0.getUserInfo());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getRef());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      
      float float0 = (-167.16527F);
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, (-526.0F), (-167.16527F), (-1.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-167.16527F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-167.16527F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-83.582634F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-167.16527F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      
      float[][] floatArray0 = homePieceOfFurniture0.getPoints();
      assertNotNull(floatArray0);
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-167.16527F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-83.582634F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-167.16527F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals((-1.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-167.16527F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-1.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-83.582634F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals((-167.16527F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-263.0F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup0.setHeight(3595.891F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(3595.891F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup0.isNameCenterPointAt(3595.891F, (-1.0F), (-2676.4976F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(3595.891F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      // Undeclared exception!
      try { 
        HomePieceOfFurniture.SortableProperty.valueOf("?k7wWLDd2NhU+3Z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.HomePieceOfFurniture.SortableProperty.?k7wWLDd2NhU+3Z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      
      URL uRL1 = MockURL.getHttpExample();
      assertNotNull(uRL1);
      assertEquals((-1), uRL1.getDefaultPort());
      assertEquals("http", uRL1.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toExternalForm());
      assertNull(uRL1.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL1.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getHost());
      assertEquals((-1), uRL1.getPort());
      assertNull(uRL1.getUserInfo());
      assertNull(uRL1.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL1.getAuthority());
      assertNotSame(uRL1, uRL0);
      assertFalse(uRL1.equals((Object)uRL0));
      
      URLContent uRLContent1 = new URLContent(uRL0);
      assertNotNull(uRLContent1);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", uRLContent1, uRLContent1, (-972.4F), (-972.4F), 243.9104F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(243.9104F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(243.9104F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-972.4F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(243.9104F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-972.4F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-486.2F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-486.2F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(243.9104F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-972.4F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(243.9104F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-972.4F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-486.2F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-486.2F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(1, linkedList0.size());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRLContent1, uRLContent0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "8+.W*VX/T9M}:");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("8+.W*VX/T9M}:", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(243.9104F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(243.9104F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup0.isNameCenterPointAt(665.669F, (-680.1715F), 1990.2234F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("8+.W*VX/T9M}:", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(243.9104F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homeFurnitureGroup1.isVisible();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(243.9104F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean3 = homePieceOfFurniture0.isNameCenterPointAt(243.9104F, (-680.1715F), 243.9104F);
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(243.9104F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-972.4F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(243.9104F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-972.4F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-486.2F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-486.2F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRLContent1, uRLContent0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      
      float float0 = homeFurnitureGroup0.getNameYOffset();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("8+.W*VX/T9M}:", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(243.9104F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertEquals(0.0F, float0, 0.01F);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup1.setVisible(false);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(243.9104F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      String string0 = homeFurnitureGroup0.getCurrency();
      assertNull(string0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("8+.W*VX/T9M}:", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(243.9104F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      float float1 = homePieceOfFurniture0.getWidth();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(243.9104F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-972.4F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(243.9104F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-972.4F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-486.2F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-486.2F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRLContent1, uRLContent0);
      assertNotEquals(float1, float0, 0.01F);
      assertFalse(uRL0.equals((Object)uRL1));
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      assertEquals((-972.4F), float1, 0.01F);
      
      float float2 = homePieceOfFurniture0.getElevation();
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("ftp", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent1.isJAREntry());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals(243.9104F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals((-972.4F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertEquals((-972.4F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(243.9104F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals((-972.4F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals((-486.2F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-486.2F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNotSame(uRL0, uRL1);
      assertNotSame(uRLContent1, uRLContent0);
      assertFalse(uRL0.equals((Object)uRL1));
      assertEquals(float2, float0, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertTrue(uRLContent1.equals((Object)uRLContent0));
      assertEquals(0.0F, float2, 0.01F);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("DOOR_OR_WINDOW", uRLContent0, uRLContent0, (-167.19F), (-167.19F), (-1336.0F), false, true);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1336.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-167.19F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-167.19F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("DOOR_OR_WINDOW", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1336.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-167.19F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-167.19F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("DOOR_OR_WINDOW", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("DOOR_OR_WINDOW", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-167.19F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1336.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-83.595F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-83.595F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-167.19F), homePieceOfFurniture0.getWidth(), 0.01F);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals((-1336.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-167.19F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-167.19F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("DOOR_OR_WINDOW", catalogPieceOfFurniture0.getName());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("DOOR_OR_WINDOW", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-167.19F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-1336.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals((-83.595F), homePieceOfFurniture0.getY(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals((-83.595F), homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-167.19F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "Can't create temporary folder ");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("Can't create temporary folder ", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("Can't create temporary folder ", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Can't create temporary folder ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.Sash");
      assertNotNull(homeFurnitureGroup2);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getShininess());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals("com.eteks.sweethome3d.model.Sash", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isMovable());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup2.containsPoint((-1336.0F), (-1336.0F), (-167.19F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup2.getCatalogId());
      assertNull(homeFurnitureGroup2.getShininess());
      assertNull(homeFurnitureGroup2.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup2.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup2.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup2.getDescription());
      assertEquals(0.0F, homeFurnitureGroup2.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isNameVisible());
      assertTrue(homeFurnitureGroup2.isVisible());
      assertEquals(0.0F, homeFurnitureGroup2.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup2.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup2.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup2.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isDoorOrWindow());
      assertFalse(homeFurnitureGroup2.isBackFaceShown());
      assertTrue(homeFurnitureGroup2.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup2.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup2.isModelMirrored());
      assertTrue(homeFurnitureGroup2.isResizable());
      assertEquals("com.eteks.sweethome3d.model.Sash", homeFurnitureGroup2.getName());
      assertEquals(0.0F, homeFurnitureGroup2.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup2.isMovable());
      assertEquals(0.0F, homeFurnitureGroup2.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup2.getColor());
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup2, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup2.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup1.setHeight((-1336.0F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("Can't create temporary folder ", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("Can't create temporary folder ", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals((-1336.0F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup2);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup2));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup2));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = linkedList0.add(homePieceOfFurniture0);
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "HEIGHT");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("HEIGHT", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "<";
      Long long0 = new Long(131L);
      assertNotNull(long0);
      assertEquals(131L, (long)long0);
      
      Float float0 = new Float((double) (-435.96674F));
      assertNotNull(float0);
      assertEquals((-435.96674F), (float)float0, 0.01F);
      
      Sash[] sashArray0 = new Sash[25];
      Sash sash0 = new Sash(0.0F, (-435.96674F), 131L, (-435.96674F), 305.3774F);
      assertNotNull(sash0);
      assertEquals((-435.96674F), sash0.getStartAngle(), 0.01F);
      assertEquals(131.0F, sash0.getWidth(), 0.01F);
      assertEquals((-435.96674F), sash0.getYAxis(), 0.01F);
      assertEquals(305.3774F, sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getXAxis(), 0.01F);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(305.3774F, (-480.77026F), (-480.77026F), 2239.0186F, (-435.96674F));
      assertNotNull(sash1);
      assertEquals((-480.77026F), sash1.getWidth(), 0.01F);
      assertEquals(305.3774F, sash1.getXAxis(), 0.01F);
      assertEquals(2239.0186F, sash1.getStartAngle(), 0.01F);
      assertEquals((-435.96674F), sash1.getEndAngle(), 0.01F);
      assertEquals((-480.77026F), sash1.getYAxis(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      
      sashArray0[1] = sash1;
      BigDecimal bigDecimal0 = new BigDecimal(0.0);
      assertNotNull(bigDecimal0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("EI\"OT", "<", "<", "EI\"OT", stringArray0, long0, float0, (Content) null, (Content) null, (Content) null, 131L, 131L, 131L, 305.3774F, true, 205.0809F, 131L, sashArray0, (float[][]) null, "<", false, true, true, bigDecimal0, bigDecimal0, "EI\"OT");
      assertNotNull(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNotNull(homeDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("<", homeDoorOrWindow0.getDescription());
      assertEquals("<", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(305.3774F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(131.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(305.3774F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(131.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(65.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(65.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCatalogId());
      assertEquals(205.0809F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("+0HW0IrR/e9R", propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("+0HW0IrR/e9R", propertyChangeListenerProxy0.getPropertyName());
      
      homeDoorOrWindow0.addPropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("<", homeDoorOrWindow0.getDescription());
      assertEquals("<", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(305.3774F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(131.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(305.3774F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(131.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(65.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(65.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCatalogId());
      assertEquals(205.0809F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("+0HW0IrR/e9R", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogDoorOrWindow0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(65.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("<", homePieceOfFurniture0.getName());
      assertEquals(65.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("EI\"OT", homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(305.3774F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("<", homePieceOfFurniture0.getDescription());
      assertEquals(131.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(131.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("EI\"OT", homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(305.3774F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(131.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      
      Level level0 = homePieceOfFurniture0.getLevel();
      assertNull(level0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(65.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("<", homePieceOfFurniture0.getName());
      assertEquals(65.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("EI\"OT", homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(305.3774F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("<", homePieceOfFurniture0.getDescription());
      assertEquals(131.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(131.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("EI\"OT", homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(305.3774F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(131.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      
      boolean boolean0 = homeDoorOrWindow0.isAtLevel((Level) null);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("<", homeDoorOrWindow0.getDescription());
      assertEquals("<", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(305.3774F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(131.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(305.3774F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(131.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(65.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(65.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCatalogId());
      assertEquals(205.0809F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      assertTrue(boolean0);
      
      BigDecimal bigDecimal1 = homeDoorOrWindow0.getPriceValueAddedTaxIncluded();
      assertNotNull(bigDecimal1);
      assertEquals((short)0, bigDecimal1.shortValue());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("<", homeDoorOrWindow0.getDescription());
      assertEquals("<", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(305.3774F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(131.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(131.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(305.3774F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(131.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(65.5F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(65.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("EI\"OT", homeDoorOrWindow0.getCatalogId());
      assertEquals(205.0809F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      assertTrue(bigDecimal1.equals((Object)bigDecimal0));
      
      boolean boolean1 = homePieceOfFurniture0.isAtLevel((Level) null);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertEquals(131L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(131.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getCurrency());
      assertEquals("<", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-435.96674F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("EI\"OT", catalogDoorOrWindow0.getId());
      assertEquals(305.3774F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("<", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(205.0809F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals(131.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("EI\"OT", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(131.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("<", catalogDoorOrWindow0.getCreator());
      assertEquals(131.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(65.5F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("<", homePieceOfFurniture0.getName());
      assertEquals(65.5F, homePieceOfFurniture0.getX(), 0.01F);
      assertFalse(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("EI\"OT", homePieceOfFurniture0.getCurrency());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(305.3774F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals("<", homePieceOfFurniture0.getDescription());
      assertEquals(131.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDoorOrWindow());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(131.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("EI\"OT", homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(305.3774F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(131.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNotSame(bigDecimal0, bigDecimal1);
      assertEquals(1, stringArray0.length);
      assertEquals(25, sashArray0.length);
      assertTrue(boolean1 == boolean0);
      assertTrue(bigDecimal0.equals((Object)bigDecimal1));
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("HEIGHT", (Content) null, (Content) null, (-475.0F), (-475.0F), (-475.0F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("HEIGHT", (PropertyChangeListener) null);
      assertNotNull(propertyChangeListenerProxy0);
      assertEquals("HEIGHT", propertyChangeListenerProxy0.getPropertyName());
      
      homePieceOfFurniture0.removePropertyChangeListener(propertyChangeListenerProxy0);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("HEIGHT", propertyChangeListenerProxy0.getPropertyName());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals((-475.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-475.0F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("HEIGHT", catalogPieceOfFurniture0.getName());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-475.0F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-475.0F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals((-475.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals((-237.5F), homePieceOfFurniture0.getX(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals((-237.5F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals("HEIGHT", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("O'%%:GOLaZ;/vN", uRLContent0, uRLContent0, 1930.601F, 2.0F, 3864.9F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3864.9F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1930.601F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3864.9F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1930.601F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1930.601F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3864.9F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      
      HomePieceOfFurniture homePieceOfFurniture1 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture1);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3864.9F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1930.601F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1930.601F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3864.9F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(3864.9F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture1.getName());
      assertEquals(1930.601F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      
      boolean boolean0 = homePieceOfFurniture1.isTopLeftPointAt(740.3803F, 3864.9F, 3967.0408F);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3864.9F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1930.601F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1930.601F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3864.9F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(3864.9F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture1.getName());
      assertEquals(1930.601F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(boolean0);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      
      float float0 = homePieceOfFurniture0.getWidth();
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3864.9F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1930.601F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1930.601F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3864.9F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertEquals(1930.601F, float0, 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture1.clone();
      assertNotNull(homePieceOfFurniture2);
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3864.9F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(1930.601F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals(1930.601F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3864.9F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals(3864.9F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(1.0F, homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals(965.3005F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture1.getName());
      assertEquals(1930.601F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isMovable());
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture2.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture2.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture2.isNameVisible());
      assertTrue(homePieceOfFurniture2.isVisible());
      assertTrue(homePieceOfFurniture2.isDeformable());
      assertNull(homePieceOfFurniture2.getColor());
      assertEquals(1.0F, homePieceOfFurniture2.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getGroundElevation(), 0.01F);
      assertEquals(1930.601F, homePieceOfFurniture2.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture2.getShininess());
      assertFalse(homePieceOfFurniture2.isMovable());
      assertTrue(homePieceOfFurniture2.isResizable());
      assertNull(homePieceOfFurniture2.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture2.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture2.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture2.getDescription());
      assertEquals(965.3005F, homePieceOfFurniture2.getX(), 0.01F);
      assertNull(homePieceOfFurniture2.getCatalogId());
      assertEquals(0.0F, homePieceOfFurniture2.getElevation(), 0.01F);
      assertEquals(3864.9F, homePieceOfFurniture2.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture2.isTexturable());
      assertFalse(homePieceOfFurniture2.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture2.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture2.isModelMirrored());
      assertFalse(homePieceOfFurniture2.isBackFaceShown());
      assertEquals("O'%%:GOLaZ;/vN", homePieceOfFurniture2.getName());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture((String) null, uRLContent0, uRLContent0, 2.0F, 2.0F, (-2676.4976F), false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http", uRL0.getProtocol());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getName());
      assertEquals(2.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals(2.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertEquals(2.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(1.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(1.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(2.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(2.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(2.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup1.move(2.0F, (-387.00232F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(2.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(2.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals((-386.00232F), homeFurnitureGroup1.getY(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup1.isPointAt(1.0F, 2205.9F, 1.0F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(3.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(2.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(2.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertEquals((-386.00232F), homeFurnitureGroup1.getY(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      Level level0 = new Level("", 2205.9F, 1.0F, 972.4F);
      assertNotNull(level0);
      assertEquals("", level0.getName());
      assertEquals(2205.9F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(972.4F, level0.getHeight(), 0.01F);
      
      boolean boolean2 = homeFurnitureGroup0.isAtLevel(level0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", level0.getName());
      assertEquals(2205.9F, level0.getElevation(), 0.01F);
      assertEquals(1.0F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(972.4F, level0.getHeight(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      URL uRL0 = MockURL.getHttpExample();
      assertNotNull(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNotNull(uRLContent0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("LW", uRLContent0, uRLContent0, (-2676.4976F), (-526.0F), (-2676.4976F), true, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("LW", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("LW", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("LW", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture1 = new CatalogPieceOfFurniture("#&]zT$V >8", uRLContent0, uRLContent0, (-327.18353F), (-1.0F), (-526.0F), false, false);
      assertNotNull(catalogPieceOfFurniture1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture1.getColor());
      assertFalse(catalogPieceOfFurniture1.isModifiable());
      assertNull(catalogPieceOfFurniture1.getCreationDate());
      assertNull(catalogPieceOfFurniture1.getId());
      assertFalse(catalogPieceOfFurniture1.isMovable());
      assertEquals(0.0F, catalogPieceOfFurniture1.getElevation(), 0.01F);
      assertEquals((-526.0F), catalogPieceOfFurniture1.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogPieceOfFurniture1.getDepth(), 0.01F);
      assertNull(catalogPieceOfFurniture1.getCreator());
      assertNull(catalogPieceOfFurniture1.getDescription());
      assertNull(catalogPieceOfFurniture1.getCurrency());
      assertEquals((-327.18353F), catalogPieceOfFurniture1.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture1.isResizable());
      assertNull(catalogPieceOfFurniture1.getInformation());
      assertTrue(catalogPieceOfFurniture1.isDeformable());
      assertFalse(catalogPieceOfFurniture1.isBackFaceShown());
      assertEquals(0.3926991F, catalogPieceOfFurniture1.getIconYaw(), 0.01F);
      assertEquals("#&]zT$V >8", catalogPieceOfFurniture1.getName());
      assertTrue(catalogPieceOfFurniture1.isProportional());
      assertTrue(catalogPieceOfFurniture1.isTexturable());
      assertNull(catalogPieceOfFurniture1.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture1.isDoorOrWindow());
      assertNull(catalogPieceOfFurniture1.getGrade());
      assertFalse(catalogPieceOfFurniture1.equals((Object)catalogPieceOfFurniture0));
      
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("LW", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("LW", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals("LW", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-2676.4976F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals((-263.0F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals((-1338.2488F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals((-2676.4976F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("LW", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("LW", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertTrue(boolean0);
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "0K");
      assertNotNull(homeFurnitureGroup0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("0K", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertNotNull(homeFurnitureGroup1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("0K", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals("0K", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      boolean boolean1 = homeFurnitureGroup0.isTopRightPointAt((-327.18353F), (-90.336F), (-486.2F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("0K", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      homeFurnitureGroup1.setNameAngle((-90.336F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("0K", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(3.911781F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals("0K", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup0.getFurniture();
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("0K", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(list0.contains(homePieceOfFurniture1));
      assertTrue(list0.contains(homePieceOfFurniture0));
      
      boolean boolean2 = homePieceOfFurniture1.isTexturable();
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getUserInfo());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals("LW", catalogPieceOfFurniture0.getName());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals((-526.0F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals((-2676.4976F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals((-263.0F), homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertEquals((-1338.2488F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-2676.4976F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals((-526.0F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals("LW", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertEquals((-2676.4976F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertEquals((-526.0F), homePieceOfFurniture1.getDepth(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals("LW", homePieceOfFurniture1.getName());
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals((-2676.4976F), homePieceOfFurniture1.getHeight(), 0.01F);
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isMovable());
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertEquals((-263.0F), homePieceOfFurniture1.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals((-1338.2488F), homePieceOfFurniture1.getX(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertEquals((-2676.4976F), homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertNotSame(catalogPieceOfFurniture0, catalogPieceOfFurniture1);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(catalogPieceOfFurniture0.equals((Object)catalogPieceOfFurniture1));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2);
      
      boolean boolean3 = homeFurnitureGroup1.isNameVisible();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("0K", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(3.911781F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals("0K", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getCurrency());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertFalse(homeFurnitureGroup1.isDoorOrWindow());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      assertNotNull(uRL0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      assertNotNull(temporaryURLContent0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("zVbU&", temporaryURLContent0, temporaryURLContent0, 3.4028235E38F, 2030.2477F, 1.0F, false, false);
      assertNotNull(catalogPieceOfFurniture0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNotNull(homePieceOfFurniture0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(homePieceOfFurniture0));
      
      homePieceOfFurniture0.setName("zVbU&");
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      
      HomePieceOfFurniture homePieceOfFurniture1 = new HomePieceOfFurniture(homePieceOfFurniture0);
      assertNotNull(homePieceOfFurniture1);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1015.12384F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      
      homePieceOfFurniture0.setModelMirrored(true);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(1, linkedList0.size());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertFalse(linkedList0.contains(homePieceOfFurniture1));
      
      boolean boolean1 = homePieceOfFurniture0.isBottomRightPointAt((-1.0F), 1.0F, 0.0F);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      HomePieceOfFurniture homePieceOfFurniture2 = homePieceOfFurniture0.clone();
      assertNotNull(homePieceOfFurniture2);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture2.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture2.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture2.getCatalogId());
      assertTrue(homePieceOfFurniture2.isResizable());
      assertNull(homePieceOfFurniture2.getShininess());
      assertEquals(1015.12384F, homePieceOfFurniture2.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture2.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture2.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture2.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture2.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture2.getCurrency());
      assertEquals(2030.2477F, homePieceOfFurniture2.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture2.isNameVisible());
      assertNull(homePieceOfFurniture2.getColor());
      assertTrue(homePieceOfFurniture2.isModelMirrored());
      assertTrue(homePieceOfFurniture2.isVisible());
      assertEquals("zVbU&", homePieceOfFurniture2.getName());
      assertFalse(homePieceOfFurniture2.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture2.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture2.isDeformable());
      assertNull(homePieceOfFurniture2.getDescription());
      assertEquals(0.0F, homePieceOfFurniture2.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture2.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture2.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture2.isDoorOrWindow());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture0));
      
      homePieceOfFurniture2.setName("zVbU&");
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture2.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture2.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture2.getCatalogId());
      assertTrue(homePieceOfFurniture2.isResizable());
      assertNull(homePieceOfFurniture2.getShininess());
      assertEquals(1015.12384F, homePieceOfFurniture2.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture2.getHeight(), 0.01F);
      assertFalse(homePieceOfFurniture2.isMovable());
      assertEquals(1.7014117E38F, homePieceOfFurniture2.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getNameYOffset(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture2.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture2.getCurrency());
      assertEquals(2030.2477F, homePieceOfFurniture2.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture2.isNameVisible());
      assertNull(homePieceOfFurniture2.getColor());
      assertTrue(homePieceOfFurniture2.isModelMirrored());
      assertTrue(homePieceOfFurniture2.isVisible());
      assertEquals("zVbU&", homePieceOfFurniture2.getName());
      assertFalse(homePieceOfFurniture2.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture2.getAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture2.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture2.isDeformable());
      assertNull(homePieceOfFurniture2.getDescription());
      assertEquals(0.0F, homePieceOfFurniture2.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture2.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture2.getElevation(), 0.01F);
      assertFalse(homePieceOfFurniture2.isDoorOrWindow());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture2, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture2.equals((Object)homePieceOfFurniture0));
      
      boolean boolean2 = homePieceOfFurniture1.isTopLeftPointAt((-1095.0F), 2030.2477F, 2030.2477F);
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1015.12384F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      HomePieceOfFurniture.Property[] homePieceOfFurniture_PropertyArray0 = HomePieceOfFurniture.Property.values();
      assertNotNull(homePieceOfFurniture_PropertyArray0);
      assertEquals(21, homePieceOfFurniture_PropertyArray0.length);
      
      HomePieceOfFurniture.SortableProperty[] homePieceOfFurniture_SortablePropertyArray0 = HomePieceOfFurniture.SortableProperty.values();
      assertNotNull(homePieceOfFurniture_SortablePropertyArray0);
      assertEquals(19, homePieceOfFurniture_SortablePropertyArray0.length);
      
      boolean boolean3 = homePieceOfFurniture1.isDoorOrWindow();
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("ftp", uRL0.getProtocol());
      assertEquals("ftp.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getQuery());
      assertEquals("ftp://ftp.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertNull(catalogPieceOfFurniture0.getId());
      assertEquals(3.4028235E38F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertEquals("zVbU&", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertEquals(2030.2477F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1.0F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(3.4028235E38F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(2030.2477F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture0.getX(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture0.getName());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertTrue(homePieceOfFurniture0.isModelMirrored());
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getColor());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertEquals(1015.12384F, homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(1.0F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertFalse(homePieceOfFurniture0.isMovable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertFalse(homePieceOfFurniture1.isMovable());
      assertEquals(1.0F, homePieceOfFurniture1.getHeight(), 0.01F);
      assertEquals(1.7014117E38F, homePieceOfFurniture1.getX(), 0.01F);
      assertEquals(2030.2477F, homePieceOfFurniture1.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture1.getCatalogId());
      assertNull(homePieceOfFurniture1.getCurrency());
      assertEquals(0.0F, homePieceOfFurniture1.getNameXOffset(), 0.01F);
      assertTrue(homePieceOfFurniture1.isDeformable());
      assertTrue(homePieceOfFurniture1.isResizable());
      assertTrue(homePieceOfFurniture1.isVisible());
      assertNull(homePieceOfFurniture1.getStaircaseCutOutShape());
      assertNull(homePieceOfFurniture1.getShininess());
      assertEquals(0.0F, homePieceOfFurniture1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture1.getGroundElevation(), 0.01F);
      assertEquals("zVbU&", homePieceOfFurniture1.getName());
      assertEquals(0.0F, homePieceOfFurniture1.getAngle(), 0.01F);
      assertTrue(homePieceOfFurniture1.isTexturable());
      assertEquals(1015.12384F, homePieceOfFurniture1.getY(), 0.01F);
      assertNull(homePieceOfFurniture1.getColor());
      assertEquals(3.4028235E38F, homePieceOfFurniture1.getWidth(), 0.01F);
      assertFalse(homePieceOfFurniture1.isDoorOrWindow());
      assertEquals(0.0F, homePieceOfFurniture1.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture1.getDescription());
      assertFalse(homePieceOfFurniture1.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture1.getNameYOffset(), 0.01F);
      assertFalse(homePieceOfFurniture1.isModelMirrored());
      assertFalse(homePieceOfFurniture1.isBackFaceShown());
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture0, homePieceOfFurniture1);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture2);
      assertNotSame(homePieceOfFurniture1, homePieceOfFurniture0);
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture0.equals((Object)homePieceOfFurniture1));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture2));
      assertFalse(homePieceOfFurniture1.equals((Object)homePieceOfFurniture0));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }
}

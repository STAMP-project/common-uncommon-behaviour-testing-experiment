/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 10:30:59 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Button;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.HeadlessException;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import java.awt.image.IndexColorModel;
import java.awt.image.MemoryImageSource;
import java.math.BigInteger;
import javax.swing.JLayeredPane;
import jigl.image.Image;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GrayImage_ESTest extends GrayImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 0;
      GrayImage grayImage1 = grayImage0.multiply(0);
      int int1 = (-18);
      // Undeclared exception!
      try { 
        grayImage1.multiply((-18), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.multiply(0);
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = (-30);
      grayImage0.multiply((-30));
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min(rOI0);
      int int1 = (-1635);
      rOI0.setROI((-30), (-1713), (-1713), (-1635));
      ROI rOI1 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = null;
      try {
        interpolatedGrayImage2 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2624;
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      grayImage0.max();
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage0.subtract(0);
      GrayImage grayImage3 = new GrayImage(grayImage2);
      grayImage0.median(0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      GrayImage grayImage4 = interpolatedGrayImage0.clear();
      GrayImage grayImage5 = grayImage4.divide((Image<Integer>) grayImage0);
      grayImage5.clear((Integer) null);
      ROI rOI0 = new ROI();
      grayImage1.toString(rOI0);
      grayImage4.toString();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      interpolatedGrayImage2.diff(interpolatedGrayImage2);
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(2, 2);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      // Undeclared exception!
      try { 
        interpolatedGrayImage3.divide((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 0;
      GrayImage grayImage1 = grayImage0.multiply(0);
      int int1 = 4;
      grayImage0.min();
      grayImage1.addbuffer(0, 1037, 4, 4, (-675));
      ROI rOI0 = new ROI(7, 1037, 1037, 4);
      // Undeclared exception!
      try { 
        grayImage1.multiply(4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      GrayImage grayImage0 = new GrayImage(2, 109);
      interpolatedGrayImage0.max();
      interpolatedGrayImage1.addSum();
      interpolatedGrayImage2.getJavaImage();
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(109, 2);
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      grayImage1.copy();
      // Undeclared exception!
      grayImage0.median(109);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      grayImage0.max();
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage0.subtract(0);
      GrayImage grayImage3 = new GrayImage(grayImage2);
      grayImage0.median(0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      GrayImage grayImage4 = interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
      grayImage4.subtract((Image<Integer>) interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage3.add(113, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2624;
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      grayImage0.addbuffer(2, 2, 2, (-582), (int) (short)2624);
      grayImage0.max();
      ROI rOI0 = new ROI((-1844), 826, 917, 12);
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage1.addSum();
      interpolatedGrayImage1.getJavaImage();
      interpolatedGrayImage0.toString();
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(2, 2, (-1418));
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      grayImage1.max();
      interpolatedGrayImage0.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.byteSize(rOI0);
      // Undeclared exception!
      try { 
        grayImage0.median(2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      ROI rOI0 = new ROI(0, 0, (-1601), 278);
      int int0 = 11;
      GrayImage grayImage1 = grayImage0.addbuffer(2471, 2, 6, 11, 1116);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(11, 6);
      interpolatedGrayImage0.toString();
      grayImage1.absSum();
      int int1 = (-37);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((-37));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(1854, 0);
      GrayImage grayImage0 = new GrayImage(1343, 1854);
      interpolatedGrayImage2.sqrSum();
      interpolatedGrayImage0.absSum();
      ROI rOI0 = new ROI(0, 255, 128, (-1605));
      ROI rOI1 = new ROI(1977, 41, 1287, Integer.MAX_VALUE);
      InterpolatedGrayImage interpolatedGrayImage3 = null;
      try {
        interpolatedGrayImage3 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.multiply((-30));
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      ROI rOI0 = new ROI((-2936), 5, (-2129), 16);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply((-30), 5, (-30), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 10
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.multiply(0);
      int int0 = 1037;
      int int1 = 4;
      int int2 = (-675);
      grayImage0.min();
      grayImage1.addbuffer(0, 1037, 4, 4, (-675));
      GrayImage grayImage2 = grayImage1.subtract((Image<Integer>) grayImage0);
      GrayImage grayImage3 = grayImage2.add((Image<Integer>) grayImage1);
      int int3 = 0;
      int int4 = 1652;
      // Undeclared exception!
      try { 
        grayImage3.addbuffer(4, (-2407), 1037, 0, 1652);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage0.accum(0.0, 0.587, 2);
      interpolatedGrayImage0.getJavaImage();
      InterpolatedGrayImage interpolatedGrayImage2 = null;
      try {
        interpolatedGrayImage2 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.multiply((-30));
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      int int0 = new Integer((-30));
      int int1 = (-1713);
      rOI0.setROI((-30), (-1713), (-1713), (-1635));
      ROI rOI1 = new ROI();
      grayImage1.byteSize();
      ROI rOI2 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1713
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 0;
      GrayImage grayImage1 = grayImage0.multiply(0);
      grayImage0.max();
      grayImage1.toString();
      grayImage1.absSum();
      GrayImage grayImage2 = grayImage0.subtract(0);
      grayImage2.addbuffer(0, 4, 4, 0, 0);
      GrayImage grayImage3 = new GrayImage(grayImage2);
      grayImage2.median(1970);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 4);
      GrayImage grayImage4 = grayImage1.divide((Image<Integer>) null);
      grayImage4.subtract((Image<Integer>) grayImage3);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        grayImage3.add(4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      grayImage0.multiply(9);
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min(rOI0);
      rOI0.setROI(9, (-1713), (-1713), (-1635));
      ROI rOI1 = new ROI();
      grayImage0.median(11, rOI1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage1.subtract(0);
      grayImage2.min();
      grayImage2.max();
      grayImage2.byteSize();
      grayImage0.toString();
      GrayImage grayImage3 = new GrayImage(grayImage0);
      grayImage1.median((-582));
      // Undeclared exception!
      try { 
        grayImage2.get((-16777216), 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      int[] intArray0 = new int[2];
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      intArray0[0] = 2;
      ROI rOI0 = new ROI();
      interpolatedGrayImage3.add((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(2, 2, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      grayImage0.absSum();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      interpolatedGrayImage0.subtract((Image<Integer>) grayImage0, rOI0, rOI0);
      int int0 = 1250;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(6, 1250, 1436);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1250
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      int int0 = 0;
      short[] shortArray0 = new short[1];
      short short0 = (short)2624;
      shortArray0[0] = (short)2624;
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      int int1 = (-582);
      int int2 = 1412;
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      grayImage0.max();
      grayImage0.toString();
      grayImage0.absSum();
      grayImage1.getJavaImage();
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      grayImage0.toString();
      interpolatedGrayImage0.max();
      interpolatedGrayImage0.accum(0.0, 0.587, 1416);
      interpolatedGrayImage1.getJavaImage();
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.sqrSum();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage2.min();
      InterpolatedGrayImage interpolatedGrayImage4 = new InterpolatedGrayImage(1, 1250);
      interpolatedGrayImage4.copy();
      interpolatedGrayImage0.divide(2);
      ROI rOI0 = new ROI(1, (-932), 691, 1250);
      // Undeclared exception!
      try { 
        interpolatedGrayImage3.multiply((-932), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -932
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage1.subtract(0);
      grayImage2.byteSize();
      grayImage0.toString();
      GrayImage grayImage3 = new GrayImage(grayImage0);
      grayImage0.subtract((Image<Integer>) grayImage2);
      ROI rOI0 = new ROI((-582), 0, 6, 2142);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 12);
      ROI rOI1 = new ROI(0, 6, (-53), 325);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((-53), 0, 2420, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -106
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage1.toString();
      interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage2);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      GrayImage grayImage0 = interpolatedGrayImage1.subtract(2, rOI2);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      interpolatedGrayImage2.byteSize();
      ROI rOI3 = new ROI();
      interpolatedGrayImage0.clear();
      GrayImage grayImage1 = new GrayImage(bufferedImage0);
      grayImage1.add((Image<Integer>) grayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      int[][] intArray0 = new int[2][0];
      int[] intArray1 = new int[4];
      intArray1[0] = 1037;
      intArray1[1] = 2;
      intArray1[2] = 18;
      intArray1[3] = 307;
      intArray0[0] = intArray1;
      int[] intArray2 = new int[0];
      intArray0[1] = intArray2;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.copy(rOI0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage1.addSum();
      interpolatedGrayImage1.getJavaImage();
      interpolatedGrayImage0.toString();
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(2, 2, (-1418));
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      grayImage1.max();
      interpolatedGrayImage0.byteSize();
      ROI rOI1 = new ROI();
      interpolatedGrayImage0.byteSize(rOI1);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.divide((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage1.sqrSum();
      interpolatedGrayImage0.absSum();
      int int0 = (-675);
      interpolatedGrayImage1.min();
      int int1 = (-32768);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.addbuffer((-32768), (-32768), 1246, 230, 1246);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2);
      grayImage0.median((-10));
      ROI rOI0 = new ROI();
      GrayImage grayImage2 = grayImage1.multiply(16, rOI0);
      ROI rOI1 = new ROI();
      grayImage1.add((Image<Integer>) grayImage2, rOI1, rOI0);
      grayImage1.toString();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(2, 2);
      int int0 = (-1909);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.divide((-1909));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      grayImage0.absSum();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      int int0 = 1250;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(6, 1250, 1436);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1250
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.subtract(6, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      GrayImage grayImage0 = new GrayImage(2, 109);
      interpolatedGrayImage1.addSum();
      interpolatedGrayImage2.getJavaImage();
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(109, 2);
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      interpolatedGrayImage2.copy(rOI0);
      // Undeclared exception!
      grayImage0.median(109);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 255;
      intArray0[1] = 255;
      int int0 = 2;
      intArray0[2] = 2;
      intArray0[3] = 0;
      intArray0[4] = 255;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 613;
      intArray0[8] = 255;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(0, 255, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage0.accum(0.0, 0.587, 2);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage2.sqrSum();
      GrayImage grayImage0 = interpolatedGrayImage0.copy();
      grayImage0.addbuffer(2, 2, 1837);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(2, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 6;
      GrayImage grayImage0 = new GrayImage(6, 6);
      // Undeclared exception!
      try { 
        grayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      Image<Integer> image0 = new InterpolatedGrayImage(interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(12, 12);
      // Undeclared exception!
      try { 
        grayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage1.accum(0.0, 0.587, 243);
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage0.subtract(2015);
      interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage0);
      grayImage0.absSum();
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.multiply(2, rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply(8060, 11, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      GrayImage grayImage1 = new GrayImage(grayImage0);
      GrayImage grayImage2 = interpolatedGrayImage1.copy();
      Integer integer0 = interpolatedGrayImage0.max();
      grayImage1.byteSize();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      grayImage2.clear(integer0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply((-1754), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1446, 1446);
      ROI rOI0 = new ROI((-513), (-513), 801, 1446);
      ROI rOI1 = new ROI();
      rOI0.setROI((-408), (-513), 2, (-513));
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -513
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min(rOI0);
      ROI rOI1 = new ROI();
      grayImage0.median(11, rOI1);
      interpolatedGrayImage0.toString(rOI1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      int int0 = 12;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 12);
      GrayImage grayImage0 = new GrayImage(12, 12);
      short[][] shortArray0 = new short[0][6];
      GrayImage grayImage1 = new GrayImage(shortArray0);
      int int1 = Integer.MAX_VALUE;
      grayImage1.subtract(Integer.MAX_VALUE);
      int int2 = new Integer(255);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage2.diff(interpolatedGrayImage2);
      interpolatedGrayImage2.getJavaImage();
      grayImage0.addbuffer(307, 2, 307);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      interpolatedGrayImage1.max();
      interpolatedGrayImage2.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage2.byteSize(rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.divide(2, 18, 2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.min();
      int int0 = 109;
      GrayImage grayImage0 = new GrayImage(2, 109);
      interpolatedGrayImage1.max();
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.absSum();
      int int1 = (-1574);
      interpolatedGrayImage2.subtract((-1574));
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage2);
      grayImage1.addbuffer(550, 0, 550);
      // Undeclared exception!
      try { 
        grayImage0.median(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage1.subtract(2);
      GrayImage grayImage1 = interpolatedGrayImage1.multiply((Image<Integer>) grayImage0);
      interpolatedGrayImage0.absSum();
      ROI rOI0 = new ROI();
      grayImage1.multiply(11, rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply(0, 2045, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2045
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 12);
      GrayImage grayImage0 = new GrayImage(12, 12);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      interpolatedGrayImage2.byteSize();
      ROI rOI0 = new ROI();
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      // Undeclared exception!
      try { 
        grayImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 255);
      int int0 = 13;
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(255, 13);
      ROI rOI0 = new ROI(16, 16, 2790, (-1601));
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(10, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1601
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      int int0 = 240;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(240, 12);
      Integer integer0 = new Integer(240);
      int int1 = 10;
      ROI rOI0 = new ROI(240, 10, 10, 10);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(12, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      interpolatedGrayImage0.copy();
      interpolatedGrayImage0.max();
      interpolatedGrayImage0.max();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.median(2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage0.diff(interpolatedGrayImage1);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      int int0 = (-112);
      interpolatedGrayImage1.accum(0.587, 0.0, (-112));
      interpolatedGrayImage1.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage0.diff(interpolatedGrayImage2);
      int int1 = 444;
      // Undeclared exception!
      try { 
        grayImage0.addbuffer((-112), 307, 444);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage0.max();
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage1 = interpolatedGrayImage2.diff(grayImage0);
      ROI rOI0 = new ROI();
      rOI0.setROI(875, 343, 3410, 2657);
      ROI rOI1 = new ROI();
      rOI0.setROI(152, 152, 3410, 152);
      interpolatedGrayImage1.divide(3, rOI1);
      interpolatedGrayImage0.byteSize();
      ROI rOI2 = new ROI();
      GrayImage grayImage2 = new GrayImage(grayImage1);
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(bufferedImage0);
      interpolatedGrayImage3.byteSize();
      interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage1.addSum();
      interpolatedGrayImage0.toString();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.multiply((-30));
      // Undeclared exception!
      try { 
        grayImage1.multiply((-30), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage1.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage2.diff(interpolatedGrayImage2);
      interpolatedGrayImage1.getJavaImage();
      GrayImage grayImage1 = grayImage0.addbuffer(307, 2, 307);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      interpolatedGrayImage1.max();
      interpolatedGrayImage2.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage2.byteSize(rOI0);
      // Undeclared exception!
      try { 
        grayImage1.median(2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      interpolatedGrayImage0.max();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      int int1 = (-354);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(0, (-354), (Integer) null, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -354
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      int int0 = 255;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 255);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage1.sqrSum();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      interpolatedGrayImage1.median(5, rOI0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min();
      interpolatedGrayImage0.copy();
      Integer integer0 = new Integer(2);
      interpolatedGrayImage0.byteSize();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(2115, 8, 8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      int int0 = 12;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 12);
      GrayImage grayImage0 = new GrayImage(12, 12);
      short[][] shortArray0 = new short[0][6];
      GrayImage grayImage1 = new GrayImage(shortArray0);
      int int1 = Integer.MAX_VALUE;
      GrayImage grayImage2 = grayImage1.subtract(Integer.MAX_VALUE);
      grayImage2.multiply((Image<Integer>) interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      rOI0.setROI(2254, 282, (-2889), (-1095));
      rOI0.setROI(4, 2000, 2254, 1019);
      short[][] shortArray0 = new short[0][5];
      GrayImage grayImage0 = new GrayImage(shortArray0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      grayImage1.clip((-2956), 1788);
      ROI rOI2 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1075, 1);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(1, (-299), (-299), rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -299
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      int int1 = (-238);
      ROI rOI0 = new ROI();
      rOI0.setROI(292, 416, 283, 416);
      int int2 = 8;
      rOI0.setROI(3, 8, (-238), 128);
      ROI rOI1 = new ROI();
      int int3 = 9;
      interpolatedGrayImage0.divide(0);
      rOI1.setROI(1, 9, 16, 0);
      int int4 = 255;
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.multiply(255, 0, 14, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.max();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 11;
      int int1 = 1534;
      GrayImage grayImage0 = new GrayImage(11, 1534);
      int int2 = 0;
      // Undeclared exception!
      grayImage0.byteSize();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(2, 305, (short[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1792, 1792);
      int int0 = 1;
      // Undeclared exception!
      try { 
        grayImage0.addbuffer(2, (-836), 2, 1, 1792);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      interpolatedGrayImage1.interpolationMethod = interpolationMethod0;
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage2.diff(interpolatedGrayImage2);
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage1 = grayImage0.addbuffer(307, 2, 307);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      interpolatedGrayImage1.max();
      interpolatedGrayImage2.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage2.byteSize(rOI0);
      interpolatedGrayImage1.addbuffer(770, 2, 2);
      interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage2, rOI0, rOI0);
      // Undeclared exception!
      try { 
        grayImage1.divide(0, 764, 764);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 764
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(8, 8, 8);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      int int0 = 109;
      GrayImage grayImage0 = new GrayImage(8, 109);
      interpolatedGrayImage0.max();
      interpolatedGrayImage2.addSum();
      interpolatedGrayImage2.getJavaImage();
      grayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(8, 4016);
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage1);
      GrayImage grayImage2 = new GrayImage(bufferedImage0);
      grayImage2.copy();
      // Undeclared exception!
      interpolatedGrayImage1.median(1530);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      int int0 = (-8);
      int[] intArray0 = new int[2];
      intArray0[1] = (-8);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-8), (-8));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      short[][] shortArray0 = new short[9][0];
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short) (-888);
      shortArray1[1] = (short) (-856);
      shortArray1[2] = (short)110;
      shortArray0[0] = shortArray1;
      short[] shortArray2 = new short[5];
      shortArray2[0] = (short) (-856);
      shortArray2[1] = (short)110;
      shortArray2[2] = (short) (-856);
      shortArray2[3] = (short) (-2384);
      shortArray2[4] = (short)110;
      shortArray0[1] = shortArray2;
      short[] shortArray3 = new short[6];
      shortArray3[0] = (short) (-2384);
      shortArray3[1] = (short) (-856);
      shortArray3[2] = (short) (-888);
      shortArray3[3] = (short)110;
      shortArray3[4] = (short)110;
      shortArray3[5] = (short) (-2384);
      shortArray0[2] = shortArray3;
      short[] shortArray4 = new short[0];
      shortArray0[3] = shortArray4;
      short[] shortArray5 = new short[0];
      shortArray0[4] = shortArray5;
      short[] shortArray6 = new short[5];
      shortArray6[0] = (short) (-856);
      shortArray6[1] = (short)110;
      shortArray6[2] = (short) (-856);
      shortArray6[3] = (short) (-2384);
      shortArray6[4] = (short) (-2384);
      shortArray0[5] = shortArray6;
      short[] shortArray7 = new short[1];
      shortArray7[0] = (short) (-2384);
      shortArray0[6] = shortArray7;
      short[] shortArray8 = new short[8];
      shortArray8[0] = (short) (-2384);
      shortArray8[1] = (short) (-856);
      shortArray8[2] = (short)110;
      shortArray8[3] = (short) (-856);
      shortArray8[4] = (short) (-856);
      shortArray8[5] = (short) (-888);
      shortArray8[6] = (short) (-888);
      shortArray8[7] = (short) (-888);
      shortArray0[7] = shortArray8;
      short[] shortArray9 = new short[7];
      shortArray9[0] = (short) (-888);
      shortArray9[1] = (short) (-2384);
      shortArray9[2] = (short) (-2177);
      shortArray9[3] = (short) (-888);
      shortArray9[4] = (short)16;
      shortArray9[5] = (short) (-888);
      shortArray9[6] = (short) (-888);
      shortArray0[8] = shortArray9;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      int int0 = 2;
      GrayImage grayImage0 = new GrayImage(2, 2);
      // Undeclared exception!
      try { 
        grayImage0.subtract(285);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      grayImage0.median((-10));
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage2.diff(interpolatedGrayImage2);
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage1 = grayImage0.addbuffer(307, 2, 307);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      interpolatedGrayImage1.max();
      interpolatedGrayImage2.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage2.byteSize(rOI0);
      // Undeclared exception!
      grayImage1.median(1140, rOI0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.absSum();
      GrayImage grayImage0 = interpolatedGrayImage0.subtract(0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      grayImage1.median(0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage1);
      GrayImage grayImage2 = interpolatedGrayImage2.clear();
      GrayImage grayImage3 = grayImage2.copy();
      // Undeclared exception!
      try { 
        grayImage3.addbuffer(0, (-16777216), 16);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((-7), 0, shortArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(2, 109);
      interpolatedGrayImage0.toString();
      interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      GrayImage grayImage1 = interpolatedGrayImage0.subtract(109, rOI0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      interpolatedGrayImage0.byteSize();
      ROI rOI1 = new ROI();
      interpolatedGrayImage1.max();
      grayImage1.byteSize();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage0, rOI0, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      GrayImage grayImage0 = new GrayImage(2, 109);
      interpolatedGrayImage2.toString();
      interpolatedGrayImage0.absSum();
      interpolatedGrayImage0.byteSize();
      GrayImage grayImage1 = new GrayImage(bufferedImage0);
      ROI rOI0 = new ROI(501, (-3445), 4, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.add((-1518), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3445
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.median(670);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage1.sqrSum();
      interpolatedGrayImage0.absSum();
      int int0 = 41;
      ROI rOI0 = new ROI((-737), 12, (-95), 1017);
      ROI rOI1 = new ROI(0, (-892), 1023, 993);
      InterpolatedGrayImage interpolatedGrayImage3 = null;
      try {
        interpolatedGrayImage3 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      int[] intArray0 = new int[2];
      intArray0[1] = 0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(7, 590, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      interpolatedGrayImage0.max();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      ROI rOI0 = new ROI(0, 1594, 16, 545);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 545
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      int int0 = 1444;
      int int1 = 2387;
      GrayImage grayImage0 = new GrayImage(1444, 2387);
      ROI rOI0 = new ROI(1444, 1133, 2387, 1133);
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1446, 1446);
      ROI rOI0 = new ROI((-482), (-482), 801, 1446);
      // Undeclared exception!
      try { 
        grayImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -482
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      int int0 = 0;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage1.subtract(0);
      grayImage2.byteSize();
      GrayImage grayImage3 = new GrayImage(grayImage0);
      grayImage1.median((-582));
      // Undeclared exception!
      try { 
        grayImage2.get((-16777216), 12);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      interpolatedGrayImage1.addSum();
      bufferedImage0.getGraphics();
      interpolatedGrayImage1.getJavaImage();
      interpolatedGrayImage0.toString();
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      Integer.getInteger("2:2\n0 0 \n0 0 \n");
      Integer.toUnsignedLong((-1973));
      interpolatedGrayImage1.set(0, 0, (Integer) null, rOI0);
      InterpolatedGrayImage interpolatedGrayImage3 = null;
      try {
        interpolatedGrayImage3 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 2;
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      int int1 = (-2956);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.clip((-2956), 1266);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage0.accum(0.0, 0.587, 2);
      interpolatedGrayImage0.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage0.diff(interpolatedGrayImage0);
      interpolatedGrayImage1.max();
      grayImage0.multiply((Image<Integer>) interpolatedGrayImage0);
      interpolatedGrayImage0.absSum();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.divide(0, 604, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 604
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      interpolatedGrayImage0.toString();
      interpolatedGrayImage0.add((Image<Integer>) grayImage0);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        grayImage0.subtract(6, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage1 = interpolatedGrayImage1.diff(interpolatedGrayImage0);
      interpolatedGrayImage2.subtract(2136);
      GrayImage grayImage2 = new GrayImage(grayImage1);
      interpolatedGrayImage2.copy();
      interpolatedGrayImage1.max();
      grayImage0.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage1.byteSize(rOI0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      // Undeclared exception!
      try { 
        grayImage0.byteSize((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      grayImage0.toString();
      GrayImage grayImage2 = grayImage1.addbuffer(2, 0, 2, 674, (-1051));
      grayImage2.subtract((Image<Integer>) grayImage0);
      GrayImage grayImage3 = grayImage2.add((Image<Integer>) grayImage1);
      grayImage0.addbuffer(12, 2, (-3017), 5, 2);
      ROI rOI0 = new ROI();
      grayImage1.subtract((-582), rOI0);
      GrayImage grayImage4 = grayImage1.multiply((Image<Integer>) grayImage0);
      grayImage4.absSum();
      ROI rOI1 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1, 5);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      grayImage3.add((Image<Integer>) interpolatedGrayImage1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      GrayImage grayImage0 = new GrayImage(2, 109);
      interpolatedGrayImage0.toString();
      interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage2);
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(bufferedImage0);
      ROI rOI0 = new ROI(109, 109, 3394, 3394);
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.divide((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 109
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      int[][] intArray0 = new int[1][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      grayImage0.copy(rOI0);
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      interpolatedGrayImage0.max();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage1.clear();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(2, (-354), (Integer) null, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -354
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = new GrayImage(0, 0, (short[]) null);
      GrayImage grayImage2 = grayImage1.addbuffer(1, 1, 7, 7, (-582));
      grayImage0.toString();
      grayImage2.absSum();
      grayImage0.subtract(1);
      GrayImage grayImage3 = new GrayImage(intArray0);
      grayImage3.byteSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min();
      GrayImage grayImage1 = interpolatedGrayImage0.copy();
      GrayImage grayImage2 = grayImage0.add((Image<Integer>) grayImage1);
      // Undeclared exception!
      try { 
        grayImage2.divide((Image<Integer>) grayImage1);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      grayImage1.subtract(5061, rOI0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      interpolatedGrayImage0.copy(rOI1);
      interpolatedGrayImage0.byteSize();
      interpolatedGrayImage0.clear();
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage((java.awt.Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage1.accum(0.0, 0.0, 2);
      interpolatedGrayImage1.getJavaImage();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage2);
      GrayImage grayImage0 = interpolatedGrayImage1.diff(interpolatedGrayImage0);
      interpolatedGrayImage1.getJavaImage();
      grayImage0.max();
      interpolatedGrayImage2.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage3.byteSize(rOI0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.divide(18, 18, 18, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 18
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 12);
      GrayImage grayImage0 = new GrayImage(12, 12);
      short[][] shortArray0 = new short[0][6];
      GrayImage grayImage1 = new GrayImage(shortArray0);
      GrayImage grayImage2 = grayImage1.subtract(Integer.MAX_VALUE);
      grayImage2.multiply((Image<Integer>) interpolatedGrayImage0);
      ROI rOI0 = new ROI(327, 1005, 1010, 41);
      int int0 = 1011;
      int int1 = 2;
      ROI rOI1 = new ROI(1011, (-5175), 7, 2);
      GrayImage grayImage3 = null;
      try {
        grayImage3 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(16, 16);
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      interpolatedGrayImage0.median(6);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage0.addSum();
      ROI rOI0 = new ROI(2, 0, 0, 2);
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      GrayImage grayImage1 = interpolatedGrayImage0.subtract((-248), rOI2);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      grayImage1.byteSize();
      GrayImage grayImage2 = interpolatedGrayImage0.clear();
      GrayImage grayImage3 = new GrayImage(bufferedImage0);
      grayImage3.add((Image<Integer>) grayImage2);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage3);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage0 = interpolatedGrayImage2.diff(interpolatedGrayImage2);
      interpolatedGrayImage2.getJavaImage();
      grayImage0.addbuffer(307, 2, 307);
      ROI rOI0 = new ROI();
      GrayImage grayImage1 = new GrayImage(bufferedImage0);
      // Undeclared exception!
      try { 
        grayImage1.divide((Image<Integer>) interpolatedGrayImage2, rOI0, rOI0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(295, 295);
      ROI rOI0 = new ROI();
      grayImage0.toString(rOI0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(5, 5);
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      interpolatedGrayImage3.clip(5, 5);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI(245, (-2956), 1475, (-2956));
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(5, 5, 5525, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2951
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.addSum();
      InterpolatedGrayImage interpolatedGrayImage1 = null;
      try {
        interpolatedGrayImage1 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      grayImage0.clear(integer0);
      interpolatedGrayImage2.diff(grayImage0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      intArray0[1] = 2;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(2, 2, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      int int0 = 12;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(12, 12);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.addbuffer(128, (-3922), 12);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(2, 2);
      // Undeclared exception!
      try { 
        grayImage0.median(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.add((Image<Integer>) grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage1 = interpolatedGrayImage1.diff(interpolatedGrayImage0);
      GrayImage grayImage2 = interpolatedGrayImage2.subtract(2136);
      GrayImage grayImage3 = grayImage0.multiply((Image<Integer>) grayImage2);
      grayImage1.absSum();
      ROI rOI0 = new ROI();
      grayImage3.multiply(159, rOI0);
      // Undeclared exception!
      try { 
        grayImage0.multiply(78, (-2373), 142);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2373
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      GrayImage grayImage1 = new GrayImage(grayImage0);
      interpolatedGrayImage1.copy();
      interpolatedGrayImage0.max();
      grayImage1.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage1.byteSize(rOI0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 255);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(255, 13);
      Integer integer0 = new Integer(255);
      int int0 = 16;
      ROI rOI0 = new ROI(16, 16, 2790, (-1601));
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(10, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1601
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ROI rOI0 = null;
      int int0 = 255;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 12);
      long long0 = new Integer(255);
      ROI rOI1 = new ROI(255, 10, 10, 10);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(12, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage0.addSum();
      bufferedImage0.getGraphics();
      interpolatedGrayImage0.getJavaImage();
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      interpolatedGrayImage1.max();
      interpolatedGrayImage0.byteSize();
      ROI rOI0 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage1.clear();
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.subtract((Image<Integer>) interpolatedGrayImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.min();
      GrayImage grayImage1 = interpolatedGrayImage0.copy();
      interpolatedGrayImage0.divide(3);
      // Undeclared exception!
      try { 
        grayImage1.multiply(3, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      interpolatedGrayImage0.accum(0.0, 0.587, 2);
      interpolatedGrayImage0.getJavaImage();
      interpolatedGrayImage0.diff(interpolatedGrayImage0);
      interpolatedGrayImage1.max();
      InterpolatedGrayImage interpolatedGrayImage2 = null;
      try {
        interpolatedGrayImage2 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.multiply(2, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      rOI0.setROI(2153, 1, 1019, 1018);
      ROI rOI2 = new ROI();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1018, 1094);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((-32768), 1, (-32768), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -31749
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      interpolatedGrayImage0.clear();
      ROI rOI0 = new ROI();
      interpolatedGrayImage0.addbuffer(0, 16, 307);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(307, (-2245), 559);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 559
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      short[][] shortArray0 = new short[9][0];
      short[] shortArray1 = new short[3];
      shortArray1[0] = (short) (-888);
      shortArray1[1] = (short) (-856);
      short short0 = (short) (-2177);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.absSum();
      interpolatedGrayImage0.max();
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 12);
      Integer integer0 = new Integer(12);
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage0.subtract(0);
      GrayImage grayImage3 = new GrayImage(grayImage2);
      grayImage0.median(0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(1412, 12);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.subtract((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(12, 7, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage0.addSum();
      bufferedImage0.getGraphics();
      interpolatedGrayImage0.getJavaImage();
      interpolatedGrayImage0.toString();
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      interpolatedGrayImage1.max();
      interpolatedGrayImage0.byteSize();
      ROI rOI0 = new ROI();
      rOI0.setROI(2, 2, 0, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.diff(interpolatedGrayImage0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      interpolatedGrayImage2.subtract(2);
      InterpolatedGrayImage interpolatedGrayImage4 = new InterpolatedGrayImage(interpolatedGrayImage1);
      ROI rOI0 = new ROI();
      interpolatedGrayImage4.copy(rOI0);
      interpolatedGrayImage0.absSum();
      InterpolatedGrayImage interpolatedGrayImage5 = new InterpolatedGrayImage(interpolatedGrayImage3);
      interpolatedGrayImage5.max();
      interpolatedGrayImage4.byteSize();
      ROI rOI1 = new ROI(2, 2, 1718, 32767);
      ROI rOI2 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage4.divide((Image<Integer>) interpolatedGrayImage1, rOI1, rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      interpolatedGrayImage0.copy();
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      grayImage0.max();
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage0.subtract(0);
      GrayImage grayImage3 = new GrayImage(grayImage2);
      grayImage0.median(0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
      ROI rOI0 = new ROI(2, (-582), 0, (-4524));
      // Undeclared exception!
      try { 
        grayImage0.median(2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4524
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      ROI rOI0 = new ROI();
      rOI0.setROI(136, 5, 2826, 136);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage1 = interpolatedGrayImage2.diff(grayImage0);
      interpolatedGrayImage1.byteSize();
      ROI rOI0 = new ROI();
      interpolatedGrayImage1.byteSize();
      GrayImage grayImage2 = new GrayImage(grayImage1);
      interpolatedGrayImage0.byteSize();
      grayImage2.add((Image<Integer>) grayImage0);
      // Undeclared exception!
      try { 
        GrayImage.main((String[]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      interpolatedGrayImage2.diff(grayImage0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      interpolatedGrayImage2.subtract(2);
      interpolatedGrayImage0.multiply((Image<Integer>) grayImage0);
      interpolatedGrayImage1.absSum();
      ROI rOI0 = new ROI();
      interpolatedGrayImage1.multiply(0, rOI0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      int[][] intArray0 = new int[3][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = (-4);
      // Undeclared exception!
      try { 
        grayImage0.multiply((-4));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      GrayImage grayImage2 = grayImage1.copy();
      grayImage1.subtract(1);
      grayImage2.byteSize();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      short short0 = (short)0;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((short[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      int int0 = (-18);
      ROI rOI0 = null;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((GrayImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage2);
      ROI rOI0 = new ROI(2, 2, 2, 2);
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      interpolatedGrayImage1.copy();
      interpolatedGrayImage0.subtract(20);
      interpolatedGrayImage0.byteSize();
      int int0 = 4;
      int int1 = (-3404);
      int int2 = (-921);
      ROI rOI3 = new ROI(2, 4, (-3404), (-921));
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.add(20, 20, 4, rOI3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -901
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      int int0 = 288;
      int int1 = 3787;
      GrayImage grayImage0 = new GrayImage(304, 304);
      // Undeclared exception!
      grayImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(2, 2);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      ROI rOI0 = new ROI();
      // Undeclared exception!
      grayImage0.addbuffer(255, 307, 255);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int[][] intArray0 = new int[1][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      int int0 = 0;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(grayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = 255;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 255);
      int int1 = 13;
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(255, 13);
      Integer integer0 = new Integer(255);
      int int2 = 10;
      int int3 = 16;
      int int4 = (-1601);
      ROI rOI0 = new ROI(16, 16, 2790, (-1601));
      int int5 = 12;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.min(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1601
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(305, 305);
      // Undeclared exception!
      grayImage0.addbuffer(840, 2317, 2, 2, (-1478));
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      interpolatedGrayImage2.diff(interpolatedGrayImage0);
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      GrayImage grayImage0 = interpolatedGrayImage2.subtract(2);
      GrayImage grayImage1 = interpolatedGrayImage0.multiply((Image<Integer>) interpolatedGrayImage1);
      interpolatedGrayImage1.absSum();
      interpolatedGrayImage0.byteSize();
      int int0 = 818;
      ROI rOI0 = new ROI(818, 818, (-126), (-1));
      grayImage0.divide((-1));
      rOI0.setROI(818, 7, (-2954), 2);
      // Undeclared exception!
      try { 
        grayImage1.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2848, 10);
      // Undeclared exception!
      interpolatedGrayImage0.max();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage1.addSum();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.diff(grayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      int int0 = 128;
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(128, 128, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      interpolatedGrayImage0.toString();
      GrayImage grayImage1 = interpolatedGrayImage0.add((Image<Integer>) grayImage0);
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      // Undeclared exception!
      try { 
        grayImage1.subtract((-549), rOI2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      ROI rOI0 = new ROI();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      ROI rOI3 = new ROI((-2575), (-4784), (-2575), (-3445));
      // Undeclared exception!
      try { 
        grayImage0.add(2, rOI3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4784
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      interpolatedGrayImage0.toString();
      GrayImage grayImage1 = interpolatedGrayImage0.add((Image<Integer>) grayImage0);
      interpolatedGrayImage0.toString();
      GrayImage grayImage2 = new GrayImage(grayImage1);
      GrayImage grayImage3 = grayImage2.copy();
      // Undeclared exception!
      try { 
        grayImage3.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      grayImage0.toString();
      grayImage0.absSum();
      GrayImage grayImage2 = grayImage1.subtract(0);
      grayImage2.byteSize();
      grayImage0.toString();
      GrayImage grayImage3 = new GrayImage(grayImage0);
      grayImage0.subtract((Image<Integer>) grayImage2);
      ROI rOI0 = new ROI();
      grayImage1.add(6, rOI0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      int int0 = 1571;
      ROI rOI0 = new ROI(0, 0, (-238), 1);
      int int1 = 0;
      int int2 = 8;
      rOI0.setROI(0, 8, (-238), 128);
      ROI rOI1 = new ROI();
      int int3 = 9;
      rOI1.setROI(1, 9, 16, 0);
      int int4 = 255;
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.multiply(255, 0, 14, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 17
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage2.getJavaImage();
      GrayImage grayImage1 = interpolatedGrayImage2.diff(grayImage0);
      grayImage1.addbuffer(307, 2, 307);
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      BufferedImage bufferedImage1 = null;
      try {
        bufferedImage1 = new BufferedImage(1989, (-2245), 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (1989) and height (-2245) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      grayImage0.median(0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      interpolatedGrayImage0.clear();
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      int int0 = 436;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(1017, 0, 1017);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 1017
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      int int0 = 6;
      int[] intArray0 = new int[2];
      GrayImage grayImage0 = new GrayImage(0, 6);
      grayImage0.addSum();
      // Undeclared exception!
      try { 
        grayImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      grayImage0.max();
      grayImage0.toString();
      int int0 = 128;
      int int1 = (-3043);
      grayImage1.addbuffer(11, 0, 2, (-3043), 2);
      ROI rOI0 = new ROI();
      int[] intArray0 = new int[0];
      BigInteger bigInteger0 = BigInteger.TEN;
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel(2, 1412, intArray0, 1005, 11, bigInteger0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // transferType must be eitherDataBuffer.TYPE_BYTE or DataBuffer.TYPE_USHORT
         //
         verifyException("java.awt.image.IndexColorModel", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      GrayImage grayImage0 = interpolatedGrayImage2.copy();
      interpolatedGrayImage1.max();
      interpolatedGrayImage2.diff(grayImage0);
      int int0 = 1571;
      ROI rOI0 = new ROI(2, 0, 2, 0);
      rOI0.setROI(0, (-2602), 0, 8);
      rOI0.setROI((-2602), 0, 8, 0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply((-2602), 1571, 2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1571
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      int int0 = 255;
      GrayImage grayImage0 = new GrayImage(255, 255);
      GrayImage grayImage1 = new GrayImage(grayImage0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(2, 2);
      int int0 = 806;
      // Undeclared exception!
      try { 
        grayImage0.add(806, 2, 806);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "H6KpM1^";
      stringArray0[1] = "VMiQMnP}d|~";
      stringArray0[2] = "XI^L";
      stringArray0[3] = "U?[<G)1W[`W6:dFk~/";
      stringArray0[4] = "kLkK+";
      stringArray0[5] = "!4)Lazsxi=;|@k+";
      stringArray0[6] = "jigl.image.types.KernelType";
      stringArray0[7] = "";
      // Undeclared exception!
      try { 
        GrayImage.main(stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      interpolatedGrayImage2.getJavaImage();
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.subtract((-932));
      interpolatedGrayImage2.multiply((Image<Integer>) interpolatedGrayImage3);
      interpolatedGrayImage3.absSum();
      interpolatedGrayImage3.byteSize();
      ROI rOI0 = new ROI(109, 255, (-6994), 255);
      int int0 = 7;
      interpolatedGrayImage0.divide((-932));
      rOI0.setROI((-33), 255, 7, 9);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 9
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      int int0 = 0;
      int int1 = 16;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage1.absSum();
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2624;
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (int) (short)2624);
      grayImage0.max();
      grayImage0.toString();
      grayImage0.absSum();
      grayImage1.getJavaImage();
      ROI rOI0 = new ROI();
      grayImage1.toString(rOI0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "12:0\n\n\n\n\n\n\n\n\n\n\n\n\n";
      try { 
        Integer.parseUnsignedInt("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"12:0
         // 
         // 
         // 
         // 
         // 
         // 
         // 
         // 
         // 
         // 
         // 
         // 
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      GrayImage grayImage1 = grayImage0.multiply(2);
      grayImage0.min();
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 283);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.byteSize();
      ROI rOI0 = new ROI();
      bufferedImage0.createGraphics();
      ROI rOI1 = new ROI();
      rOI1.setROI((-2174), 0, 0, (-366));
      interpolatedGrayImage0.byteSize(rOI0);
      // Undeclared exception!
      try { 
        grayImage1.median(0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -366
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      int int0 = 1446;
      GrayImage grayImage0 = new GrayImage(1446, 1446);
      ROI rOI0 = new ROI((-513), (-513), 801, 1446);
      ROI rOI1 = new ROI();
      GrayImage grayImage1 = new GrayImage(grayImage0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      short[][] shortArray0 = new short[9][0];
      short[] shortArray1 = new short[2];
      shortArray1[0] = (short) (-888);
      shortArray1[0] = (short) (-888);
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage(shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(2, 2);
      interpolatedGrayImage0.max();
      interpolatedGrayImage1.addSum();
      interpolatedGrayImage0.toString();
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(2, 2, (-1418));
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      grayImage1.max();
      int int0 = 279;
      interpolatedGrayImage0.clip(279, (-447));
      ROI rOI0 = new ROI();
      int int1 = (-490);
      InterpolatedGrayImage interpolatedGrayImage2 = null;
      try {
        interpolatedGrayImage2 = new InterpolatedGrayImage((-3111), (-490));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.clear();
      interpolatedGrayImage0.toString();
      interpolatedGrayImage1.absSum();
      GrayImage grayImage0 = interpolatedGrayImage0.subtract(0);
      GrayImage grayImage1 = new GrayImage(grayImage0);
      grayImage0.median(182);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage1);
      interpolatedGrayImage2.clear();
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 16;
      floatArray0[1] = (float) 16;
      floatArray0[2] = 445.58F;
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(182, (-23), 436);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown image type 436
         //
         verifyException("java.awt.image.BufferedImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      ROI rOI0 = new ROI(5, 5, 840, 840);
      ROI rOI1 = new ROI();
      int int0 = (-2797);
      rOI0.setROI((-2797), 1, 840, 2);
      grayImage0.max(rOI1);
      // Undeclared exception!
      try { 
        grayImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2797
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      int int0 = 255;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(255, 255);
      GrayImage grayImage0 = new GrayImage(255, 255);
      // Undeclared exception!
      grayImage0.min();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(2, 2);
      interpolatedGrayImage0.toString();
      GrayImage grayImage1 = interpolatedGrayImage0.add((Image<Integer>) grayImage0);
      interpolatedGrayImage0.toString();
      grayImage1.copy();
      // Undeclared exception!
      try { 
        grayImage1.subtract((-1238));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      grayImage0.clip((-2956), (-2956));
      ROI rOI0 = new ROI();
      rOI0.setROI(2, 4382, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(12, 12);
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.subtract(4382, 12, 2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 14
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(764, 3792);
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      ROI rOI0 = new ROI(1036, 1035, 1419, 1036);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(1033, 3746, integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4781
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(4, 0, shortArray0);
      ROI rOI0 = null;
      int[] intArray0 = new int[0];
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(0, 3307, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.clear();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage1);
      ROI rOI0 = new ROI(2, 2, 2, 2);
      ROI rOI1 = new ROI();
      ROI rOI2 = new ROI();
      GrayImage grayImage0 = interpolatedGrayImage0.subtract(2, rOI2);
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      interpolatedGrayImage1.byteSize();
      interpolatedGrayImage0.clear();
      GrayImage grayImage1 = new GrayImage(bufferedImage0);
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.multiply(0);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, intArray0.length);
      
      int int0 = 4;
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertSame(grayImage0, grayImage1);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 1037, 4, 4, (-675));
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(1037, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.X());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage3 = grayImage2.addbuffer(4, 1037, 0, 1025, 1037);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(1037, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.X());
      assertEquals(4460630612L, grayImage3.sqrSum());
      assertEquals(1037, grayImage3.Y());
      assertEquals(4301476, grayImage3.absSum());
      assertEquals(4, grayImage3.X());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage4 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotNull(grayImage4);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage4);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage4, grayImage0);
      assertSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage5 = grayImage4.add((Image<Integer>) grayImage1);
      assertNotNull(grayImage5);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage5.absSum());
      assertEquals(0L, grayImage5.sqrSum());
      assertEquals(0, grayImage5.addSum());
      assertEquals(0, grayImage5.X());
      assertEquals(0, grayImage5.Y());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage2));
      assertFalse(grayImage5.equals((Object)grayImage3));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage4);
      assertSame(grayImage0, grayImage5);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage4);
      assertSame(grayImage1, grayImage5);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage4, grayImage0);
      assertSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage2);
      assertSame(grayImage4, grayImage5);
      assertNotSame(grayImage5, grayImage2);
      assertSame(grayImage5, grayImage1);
      assertSame(grayImage5, grayImage0);
      assertNotSame(grayImage5, grayImage3);
      assertSame(grayImage5, grayImage4);
      assertEquals(0, intArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage5.addbuffer(4, (-2407), 1037, 0, 4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.multiply(0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertSame(grayImage0, grayImage1);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 1037, 4, 4, (-675));
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(1037, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage3 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotNull(grayImage3);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage3);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage3);
      assertSame(grayImage3, grayImage0);
      assertSame(grayImage3, grayImage1);
      assertNotSame(grayImage3, grayImage2);
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(305, 305);
      assertNotNull(grayImage0);
      assertEquals(305, grayImage0.X());
      assertEquals(305, grayImage0.Y());
      
      // Undeclared exception!
      grayImage0.addbuffer(840, 2317, 2, 2, 305);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.copy();
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage1.diff(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int1 = 2210;
      int int2 = 0;
      int int3 = 47;
      ROI rOI1 = new ROI(2210, 0, 47, (-1265));
      assertNotNull(rOI1);
      assertEquals(1266, rOI1.Y());
      assertEquals(2164, rOI1.X());
      assertEquals((-1265), rOI1.uy());
      assertEquals(47, rOI1.ux());
      assertEquals(2210, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add((Image<Integer>) interpolatedGrayImage3, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 47
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI(255, 255, 255, 5);
      assertNotNull(rOI0);
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(5, rOI0.uy());
      assertEquals(251, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(12, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(5648, interpolatedGrayImage0.absSum());
      assertEquals(7974976L, interpolatedGrayImage0.sqrSum());
      assertEquals(5648, interpolatedGrayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      grayImage0.median(0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(5648, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(7974976L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(5648, interpolatedGrayImage1.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.divide((Image<Integer>) grayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(5648, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(7974976L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(5648, interpolatedGrayImage1.absSum());
      assertEquals(7974976L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(5648, interpolatedGrayImage2.addSum());
      assertEquals(5648, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertEquals(1, shortArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply((-4524), rOI0);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals((-6383652), interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals((-1365197520L), interpolatedGrayImage0.sqrSum());
      assertEquals(6392124, interpolatedGrayImage0.absSum());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(6392124, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals((-1365197520L), interpolatedGrayImage3.sqrSum());
      assertEquals((-6383652), interpolatedGrayImage3.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertEquals(1, shortArray0.length);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1446, 1446);
      assertNotNull(grayImage0);
      assertEquals(1446, grayImage0.Y());
      assertEquals(1446, grayImage0.X());
      
      ROI rOI0 = new ROI((-513), (-513), 801, 1446);
      assertNotNull(rOI0);
      assertEquals(801, rOI0.lx());
      assertEquals(1315, rOI0.X());
      assertEquals(1446, rOI0.ly());
      assertEquals(1960, rOI0.Y());
      assertEquals((-513), rOI0.ux());
      assertEquals((-513), rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      rOI0.setROI((-408), (-513), 2, (-2797));
      assertEquals(2, rOI0.lx());
      assertEquals((-408), rOI0.ux());
      assertEquals((-513), rOI0.ly());
      assertEquals((-2797), rOI0.uy());
      assertEquals(411, rOI0.X());
      assertEquals(2285, rOI0.Y());
      assertFalse(rOI0.equals((Object)rOI1));
      assertNotSame(rOI0, rOI1);
      
      // Undeclared exception!
      try { 
        grayImage0.max(rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.Y());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      assertNotNull(grayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      ROI rOI3 = new ROI((-2575), (-4784), (-2575), (-3445));
      assertNotNull(rOI3);
      assertEquals((-2575), rOI3.lx());
      assertEquals(1340, rOI3.Y());
      assertEquals((-4784), rOI3.uy());
      assertEquals((-2575), rOI3.ux());
      assertEquals(1, rOI3.X());
      assertEquals((-3445), rOI3.ly());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      
      rOI3.setROI((-2575), 140, (-4784), 8);
      assertEquals((-2575), rOI3.lx());
      assertEquals(8, rOI3.uy());
      assertEquals(133, rOI3.Y());
      assertEquals((-4784), rOI3.ux());
      assertEquals(2210, rOI3.X());
      assertEquals(140, rOI3.ly());
      assertFalse(rOI3.equals((Object)rOI1));
      assertFalse(rOI3.equals((Object)rOI2));
      assertFalse(rOI3.equals((Object)rOI0));
      assertNotSame(rOI3, rOI1);
      assertNotSame(rOI3, rOI2);
      assertNotSame(rOI3, rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.add(2, rOI3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNotNull(integer0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      int int0 = interpolatedGrayImage1.addSum();
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(0, int0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(2, 2, (-1418));
      assertNotNull(grayImage1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(grayImage1, grayImage0);
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      Integer integer1 = grayImage1.max();
      assertNotNull(integer1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertTrue(integer1.equals((Object)int0));
      assertEquals(0, (int)integer1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(grayImage1, grayImage0);
      
      interpolatedGrayImage0.clip(279, (-447));
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1116, interpolatedGrayImage0.absSum());
      assertEquals(311364L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1116, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      interpolatedGrayImage0.byteSize(rOI1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(837, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(233523L, interpolatedGrayImage0.sqrSum());
      assertEquals(837, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(rOI1, rOI0);
      
      // Undeclared exception!
      try { 
        grayImage0.median(279, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(4, 0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(4, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)375;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(4, 4, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.copy();
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      GrayImage grayImage0 = interpolatedGrayImage3.addbuffer(4, 2, (-4784), 4, 1742);
      assertNotNull(grayImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(13936, grayImage0.addSum());
      assertEquals(24276512L, grayImage0.sqrSum());
      assertEquals(13936, grayImage0.absSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(4, grayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage2.subtract(1742, rOI0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(3034568L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals((-1740), interpolatedGrayImage2.addSum());
      assertEquals(1744, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals((-1740), interpolatedGrayImage4.addSum());
      assertEquals(1744, interpolatedGrayImage4.absSum());
      assertEquals(3034568L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      interpolatedGrayImage1.byteSize();
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.ly());
      assertEquals(0, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      GrayImage grayImage1 = new GrayImage(bufferedImage0);
      assertNotNull(grayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      // Undeclared exception!
      try { 
        grayImage1.divide((Image<Integer>) interpolatedGrayImage1, rOI1, rOI2);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(12, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage2);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(12, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(12, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      grayImage0.median(0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertEquals(1, shortArray0.length);
      
      Integer integer1 = grayImage1.max();
      assertNotNull(integer1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(1412, (int)integer1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(5648, interpolatedGrayImage0.absSum());
      assertEquals(5648, interpolatedGrayImage0.addSum());
      assertEquals(7974976L, interpolatedGrayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(5648, interpolatedGrayImage0.absSum());
      assertEquals(5648, interpolatedGrayImage0.addSum());
      assertEquals(7974976L, interpolatedGrayImage0.sqrSum());
      assertEquals(5648, interpolatedGrayImage1.absSum());
      assertEquals(7974976L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(5648, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.LINEAR;
      interpolatedGrayImage1.interpolationMethod = interpolationMethod0;
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(5648, interpolatedGrayImage0.absSum());
      assertEquals(5648, interpolatedGrayImage0.addSum());
      assertEquals(7974976L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(5648, interpolatedGrayImage1.absSum());
      assertEquals(7974976L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(5648, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.subtract((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(5648, interpolatedGrayImage0.absSum());
      assertEquals(5648, interpolatedGrayImage0.addSum());
      assertEquals(7974976L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.LINEAR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertEquals(1, shortArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(12, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage2);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(12, grayImage2.X());
      assertEquals(12, grayImage3.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      grayImage0.median(0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, interpolatedGrayImage0.addSum());
      assertEquals(7974976L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(5648, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, interpolatedGrayImage0.addSum());
      assertEquals(7974976L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(5648, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(5648, interpolatedGrayImage1.absSum());
      assertEquals(7974976L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(5648, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertEquals(1, shortArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.subtract((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertEquals(1, shortArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      GrayImage grayImage0 = null;
      try {
        grayImage0 = new GrayImage((int[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.util.ArrayUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      int int0 = 12;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(7, 12);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(7, interpolatedGrayImage0.X());
      
      int int1 = 1002;
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(7, interpolatedGrayImage0.X());
      assertEquals("7:12\nnull null null null null null null null null null null null \nnull null null null null null null null null null null null \nnull null null null null null null null null null null null \nnull null null null null null null null null null null null \nnull null null null null null null null null null null null \nnull null null null null null null null null null null null \nnull null null null null null null null null null null null \n", string0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(12, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(7, interpolatedGrayImage0.X());
      assertEquals(7, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(12, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.add((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage0.accum(0.0, 0.587, 2);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ImageProducer imageProducer0 = interpolatedGrayImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage0.diff(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      
      Integer integer0 = interpolatedGrayImage1.max();
      assertNotNull(integer0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      Integer integer1 = interpolatedGrayImage0.max();
      assertNotNull(integer1);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals(0, (int)integer1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      int int0 = interpolatedGrayImage0.absSum();
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals(0, int0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage3.subtract((Image<Integer>) interpolatedGrayImage0, rOI0, rOI0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage2);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.divide(0, 604, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 604
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      int int0 = 1281;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1281, 1281);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1281, interpolatedGrayImage0.Y());
      assertEquals(1281, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      int int1 = 0;
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.accum(0.0, (double) 1281, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1281
         //
         verifyException("jigl.image.types.InterpolatedGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNotNull(integer0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      int int1 = interpolatedGrayImage1.addSum();
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      Graphics graphics0 = bufferedImage0.getGraphics();
      assertNotNull(graphics0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      ImageProducer imageProducer0 = interpolatedGrayImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(2, 2, (-1418));
      assertNotNull(grayImage1);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(grayImage1, grayImage0);
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      Integer integer1 = grayImage1.max();
      assertNotNull(integer1);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertEquals(0, (int)integer1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(grayImage1, grayImage0);
      
      interpolatedGrayImage0.byteSize();
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      assertNotNull(graphics2D0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      rOI0.setROI(0, 2, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(3, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, image0.Y());
      assertEquals(2, image0.X());
      assertSame(interpolatedGrayImage0, image0);
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertSame(interpolatedGrayImage0, image0);
      
      int int1 = interpolatedGrayImage0.absSum();
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertSame(interpolatedGrayImage0, image0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(1972);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals((-7888), interpolatedGrayImage0.addSum());
      assertEquals(15555136L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(7888, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(15555136L, interpolatedGrayImage1.sqrSum());
      assertEquals(7888, interpolatedGrayImage1.absSum());
      assertEquals((-7888), interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertSame(interpolatedGrayImage0, image0);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage1, image0);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals((-7888), interpolatedGrayImage0.addSum());
      assertEquals(15555136L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(7888, interpolatedGrayImage0.absSum());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(15555136L, grayImage0.sqrSum());
      assertEquals((-7888), grayImage0.addSum());
      assertEquals(7888, grayImage0.absSum());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.median(1993);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals((-2328), grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(2328, grayImage1.absSum());
      assertEquals(1354896L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int1 = (-1);
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      GrayImage grayImage2 = grayImage1.divide((-1), rOI0);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(2328, grayImage1.absSum());
      assertEquals((-1164), grayImage1.addSum());
      assertEquals(1354896L, grayImage1.sqrSum());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals((-1164), grayImage2.addSum());
      assertEquals(1354896L, grayImage2.sqrSum());
      assertEquals(2328, grayImage2.absSum());
      assertEquals(2, grayImage2.Y());
      assertEquals(2, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, shortArray0.length);
      
      grayImage2.byteSize();
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(255, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(65025L, grayImage1.sqrSum());
      assertEquals(255, grayImage1.addSum());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(255, grayImage2.absSum());
      assertEquals(65025L, grayImage2.sqrSum());
      assertEquals(2, grayImage2.Y());
      assertEquals(2, grayImage2.X());
      assertEquals(255, grayImage2.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, shortArray0.length);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      GrayImage grayImage3 = new GrayImage(grayImage1);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(255, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(65025L, grayImage1.sqrSum());
      assertEquals(255, grayImage1.addSum());
      assertEquals(65025L, grayImage3.sqrSum());
      assertEquals(255, grayImage3.absSum());
      assertEquals(2, grayImage3.X());
      assertEquals(255, grayImage3.addSum());
      assertEquals(2, grayImage3.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      grayImage2.byteSize();
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(255, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(65025L, grayImage1.sqrSum());
      assertEquals(255, grayImage1.addSum());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(255, grayImage2.absSum());
      assertEquals(65025L, grayImage2.sqrSum());
      assertEquals(2, grayImage2.Y());
      assertEquals(2, grayImage2.X());
      assertEquals(255, grayImage2.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertNotSame(rOI0, rOI1);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage3);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, shortArray0.length);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      GrayImage grayImage4 = null;
      try {
        grayImage4 = new GrayImage(12, 2, intArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      int int0 = 6;
      int[] intArray0 = new int[2];
      intArray0[0] = 16;
      intArray0[1] = 6;
      GrayImage grayImage0 = new GrayImage(6, 6);
      assertNotNull(grayImage0);
      assertEquals(6, grayImage0.X());
      assertEquals(6, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      
      interpolatedGrayImage3.clip((-2956), 3360);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      InterpolatedGrayImage interpolatedGrayImage4 = new InterpolatedGrayImage(interpolatedGrayImage3);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      
      short[] shortArray0 = new short[3];
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      
      shortArray0[0] = (short)302;
      shortArray0[1] = (short) (-4726);
      shortArray0[2] = (short)2;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(12, 3360, shortArray0);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(16, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(16, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply(1888, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(16, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(16, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      
      int int0 = 0;
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(292, 416, 283, 416);
      assertEquals(416, rOI0.ly());
      assertEquals(283, rOI0.ux());
      assertEquals(292, rOI0.lx());
      assertEquals(10, rOI0.X());
      assertEquals(416, rOI0.uy());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(3, 8, (-238), 128);
      assertEquals(8, rOI0.uy());
      assertEquals(128, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertEquals(121, rOI0.Y());
      assertEquals((-238), rOI0.ux());
      assertEquals(242, rOI0.X());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.add((Image<Integer>) interpolatedGrayImage0, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      int int0 = 12;
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int1 = grayImage0.absSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage1.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(5648, grayImage2.addSum());
      assertEquals(2, grayImage2.Y());
      assertEquals(2, grayImage2.X());
      assertEquals(5648, grayImage2.absSum());
      assertEquals(7974976L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      grayImage2.byteSize();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(2, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(2, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage0);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(12, grayImage3.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int2 = (-16777216);
      // Undeclared exception!
      try { 
        grayImage1.median(1412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage1.accum(0.0, 0.587, 2);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage1.copy();
      assertNotNull(interpolatedGrayImage2);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage1.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage1.subtract(2);
      assertNotNull(interpolatedGrayImage3);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(6, interpolatedGrayImage1.absSum());
      assertEquals((-6), interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(12L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(12L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(6, interpolatedGrayImage3.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals((-6), interpolatedGrayImage3.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply((Image<Integer>) interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage4);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(6, interpolatedGrayImage1.absSum());
      assertEquals((-6), interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(12L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage0);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      ROI rOI0 = new ROI(7, (-3988), 255, (-1787));
      assertNotNull(rOI0);
      assertEquals(7, rOI0.ux());
      assertEquals(255, rOI0.lx());
      assertEquals(249, rOI0.X());
      assertEquals((-3988), rOI0.uy());
      assertEquals(2202, rOI0.Y());
      assertEquals((-1787), rOI0.ly());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage4.set(343, 7, integer0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3981
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      
      GrayImage grayImage0 = new GrayImage(2, 109);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(109, grayImage0.Y());
      
      int int0 = interpolatedGrayImage1.addSum();
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(0, int0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      ImageProducer imageProducer0 = interpolatedGrayImage2.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(109, 2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(109, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      // Undeclared exception!
      grayImage0.median(109);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String[] stringArray0 = new String[0];
      int int0 = 1021;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1021, 1021);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(1021, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1021, interpolatedGrayImage0.X());
      
      // Undeclared exception!
      interpolatedGrayImage0.toString();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      
      grayImage0.clip((-2956), (-2956));
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(34951744L, grayImage0.sqrSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      assertEquals(11824, grayImage0.absSum());
      assertEquals((-11824), grayImage0.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((-2956), (-2956), 2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2956
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(2, 109);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(109, grayImage0.Y());
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(109, rOI0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals((-109), interpolatedGrayImage0.addSum());
      assertEquals(109, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(11881L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals((-109), interpolatedGrayImage4.addSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(109, interpolatedGrayImage4.absSum());
      assertEquals(11881L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      interpolatedGrayImage2.byteSize();
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals((-109), interpolatedGrayImage0.addSum());
      assertEquals(109, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(11881L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      GrayImage grayImage1 = new GrayImage(bufferedImage0);
      assertNotNull(grayImage1);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage5 = (InterpolatedGrayImage)interpolatedGrayImage0.divide((Image<Integer>) interpolatedGrayImage3, rOI0, rOI2);
      assertNotNull(interpolatedGrayImage5);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1, interpolatedGrayImage0.addSum());
      assertEquals(1, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(1L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(1, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(1, interpolatedGrayImage3.addSum());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(1, interpolatedGrayImage5.absSum());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(1, interpolatedGrayImage5.addSum());
      assertEquals(1L, interpolatedGrayImage5.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage2);
      
      InterpolatedGrayImage interpolatedGrayImage6 = (InterpolatedGrayImage)interpolatedGrayImage0.clear();
      assertNotNull(interpolatedGrayImage6);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage6.sqrSum());
      assertEquals(2, interpolatedGrayImage6.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage6.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage6.addSum());
      assertEquals(0, interpolatedGrayImage6.absSum());
      assertEquals(2, interpolatedGrayImage6.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage6, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage6, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage6, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage6, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage2);
      
      InterpolatedGrayImage interpolatedGrayImage7 = (InterpolatedGrayImage)interpolatedGrayImage4.add((Image<Integer>) interpolatedGrayImage5);
      assertNotNull(interpolatedGrayImage7);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage7.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage7.sqrSum());
      assertEquals(2, interpolatedGrayImage7.X());
      assertEquals(2, interpolatedGrayImage7.Y());
      assertEquals(0, interpolatedGrayImage7.addSum());
      assertEquals(0, interpolatedGrayImage7.absSum());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, interpolatedGrayImage5.absSum());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(0L, interpolatedGrayImage5.sqrSum());
      assertEquals(0, interpolatedGrayImage5.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(rOI0.equals((Object)rOI2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertNotSame(rOI0, rOI1);
      assertNotSame(rOI0, rOI2);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage7);
      assertNotSame(rOI2, rOI1);
      assertNotSame(rOI2, rOI0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage7);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage3.divide((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(1354896L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2328, grayImage1.absSum());
      assertEquals((-2328), grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage1.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(1354896L, grayImage1.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2328, grayImage1.absSum());
      assertEquals((-2328), grayImage1.addSum());
      assertEquals((-2328), grayImage2.addSum());
      assertEquals(1354896L, grayImage2.sqrSum());
      assertEquals(2328, grayImage2.absSum());
      assertEquals(2, grayImage2.Y());
      assertEquals(2, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, shortArray0.length);
      
      grayImage2.byteSize();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(2, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(2, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage0);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        grayImage1.divide(0, rOI0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.copy();
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage2.diff(interpolatedGrayImage3);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage2);
      
      GrayImage grayImage0 = interpolatedGrayImage3.addbuffer(4, 2, (-4784), 4, 1742);
      assertNotNull(grayImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(24276512L, grayImage0.sqrSum());
      assertEquals(4, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(13936, grayImage0.absSum());
      assertEquals(13936, grayImage0.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      InterpolatedGrayImage interpolatedGrayImage5 = (InterpolatedGrayImage)interpolatedGrayImage2.subtract(1742, rOI0);
      assertNotNull(interpolatedGrayImage5);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(1742, interpolatedGrayImage2.absSum());
      assertEquals(3034564L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals((-1742), interpolatedGrayImage2.addSum());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(3034564L, interpolatedGrayImage5.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(1742, interpolatedGrayImage5.absSum());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals((-1742), interpolatedGrayImage5.addSum());
      assertEquals(2, interpolatedGrayImage5.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage4);
      
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer0);
      assertEquals(0, (int)integer0);
      
      interpolatedGrayImage1.byteSize();
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      GrayImage grayImage1 = new GrayImage(bufferedImage0);
      assertNotNull(grayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      GrayImage grayImage2 = grayImage1.divide((Image<Integer>) interpolatedGrayImage4, rOI1, rOI2);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage2.absSum());
      assertEquals(2, grayImage2.X());
      assertEquals(2, grayImage2.Y());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(1742, interpolatedGrayImage2.absSum());
      assertEquals(3034564L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals((-1742), interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(1742, interpolatedGrayImage4.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(3034564L, interpolatedGrayImage4.sqrSum());
      assertEquals((-1742), interpolatedGrayImage4.addSum());
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI2.Y());
      assertEquals(1, rOI2.X());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.lx());
      assertEquals(0, rOI2.ly());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(rOI1.equals((Object)rOI2));
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(rOI1, rOI2);
      assertNotSame(rOI1, rOI0);
      assertNotSame(rOI2, rOI0);
      assertNotSame(rOI2, rOI1);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage6 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage4);
      assertNotNull(interpolatedGrayImage6);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3034564L, interpolatedGrayImage6.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage6.getInterpolationMethod());
      assertEquals((-1742), interpolatedGrayImage6.addSum());
      assertEquals(2, interpolatedGrayImage6.Y());
      assertEquals(2, interpolatedGrayImage6.X());
      assertEquals(1742, interpolatedGrayImage6.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(1742, interpolatedGrayImage2.absSum());
      assertEquals(3034564L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals((-1742), interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(1742, interpolatedGrayImage4.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(3034564L, interpolatedGrayImage4.sqrSum());
      assertEquals((-1742), interpolatedGrayImage4.addSum());
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      
      InterpolatedGrayImage interpolatedGrayImage7 = (InterpolatedGrayImage)interpolatedGrayImage3.clear();
      assertNotNull(interpolatedGrayImage7);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage7.X());
      assertEquals(2, interpolatedGrayImage7.Y());
      assertEquals(0L, interpolatedGrayImage7.sqrSum());
      assertEquals(0, interpolatedGrayImage7.addSum());
      assertEquals(0, interpolatedGrayImage7.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage7.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(1742, interpolatedGrayImage2.absSum());
      assertEquals(3034564L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals((-1742), interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage5);
      
      InterpolatedGrayImage interpolatedGrayImage8 = new InterpolatedGrayImage(interpolatedGrayImage4);
      assertNotNull(interpolatedGrayImage8);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(1742, interpolatedGrayImage8.absSum());
      assertEquals(2, interpolatedGrayImage8.X());
      assertEquals(2, interpolatedGrayImage8.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage8.getInterpolationMethod());
      assertEquals(3034564L, interpolatedGrayImage8.sqrSum());
      assertEquals((-1742), interpolatedGrayImage8.addSum());
      assertEquals(1742, interpolatedGrayImage2.absSum());
      assertEquals(3034564L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals((-1742), interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(1742, interpolatedGrayImage4.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(3034564L, interpolatedGrayImage4.sqrSum());
      assertEquals((-1742), interpolatedGrayImage4.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage3.multiply(1742, 1000, 1742, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1000
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(5, 5, 5);
      assertNotNull(bufferedImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(5, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(5, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(5, interpolatedGrayImage2.Y());
      assertEquals(5, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      
      long long0 = interpolatedGrayImage1.sqrSum();
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(5, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertEquals(0L, long0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage3);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(5, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(5, interpolatedGrayImage3.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      
      interpolatedGrayImage2.byteSize();
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(5, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(5, bufferedImage0.getTileWidth());
      assertEquals(5, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(5, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(5, bufferedImage0.getType());
      assertEquals(5, interpolatedGrayImage0.Y());
      assertEquals(5, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(5, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(5, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(5, interpolatedGrayImage2.Y());
      assertEquals(5, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNotNull(integer0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, (int)integer0);
      
      int int0 = interpolatedGrayImage0.addSum();
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, int0);
      
      Graphics graphics0 = bufferedImage0.getGraphics();
      assertNotNull(graphics0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      
      int int1 = 745;
      ROI rOI0 = new ROI(5, 745, 0, (-1));
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(745, rOI0.ly());
      assertEquals(6, rOI0.X());
      assertEquals(747, rOI0.Y());
      assertEquals(5, rOI0.lx());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract((Image<Integer>) grayImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.diff(interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      
      GrayImage grayImage0 = interpolatedGrayImage3.addbuffer(307, 2, 307);
      assertNotNull(grayImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(187270, grayImage0.addSum());
      assertEquals(57491890L, grayImage0.sqrSum());
      assertEquals(307, grayImage0.X());
      assertEquals(187270, grayImage0.absSum());
      assertEquals(2, grayImage0.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      interpolatedGrayImage2.byteSize();
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(2, 2, 2);
      assertNotNull(grayImage1);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(grayImage1, grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage2, rOI0, rOI0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage5 = null;
      try {
        interpolatedGrayImage5 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals("2:2\nnull null \nnull null \n", string0);
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNotNull(integer0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      interpolatedGrayImage0.accum(0.0, 0.587, 1416);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ImageProducer imageProducer0 = interpolatedGrayImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage0.diff(interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage3);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(1416, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(1416, interpolatedGrayImage3.addSum());
      assertEquals(2005056L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      
      Integer integer1 = interpolatedGrayImage3.min();
      assertNotNull(integer1);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(1416, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(1416, interpolatedGrayImage3.addSum());
      assertEquals(2005056L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertEquals(0, (int)integer1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage4 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage3);
      assertNotNull(interpolatedGrayImage4);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(1416, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(1416, interpolatedGrayImage3.addSum());
      assertEquals(2005056L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(1416, interpolatedGrayImage4.addSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2005056L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(1416, interpolatedGrayImage4.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      
      Integer integer2 = interpolatedGrayImage4.max();
      assertNotNull(integer2);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(1416, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(1416, interpolatedGrayImage3.addSum());
      assertEquals(2005056L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(1416, interpolatedGrayImage4.addSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2005056L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(1416, interpolatedGrayImage4.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(1416, (int)integer2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      
      interpolatedGrayImage2.clip(1416, 0);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2005056L, interpolatedGrayImage0.sqrSum());
      assertEquals(1416, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(1416, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(5664, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(5664, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(8020224L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertFalse(rOI1.equals((Object)rOI0));
      
      int int0 = 2792;
      rOI1.setROI(2792, 230, 230, 1416);
      assertEquals(2563, rOI1.X());
      assertEquals(1187, rOI1.Y());
      assertEquals(2792, rOI1.lx());
      assertEquals(1416, rOI1.ly());
      assertEquals(230, rOI1.ux());
      assertEquals(230, rOI1.uy());
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(rOI1, rOI0);
      
      ROI rOI2 = new ROI(4, (-2149), 1416, 1416);
      assertNotNull(rOI2);
      assertEquals(1416, rOI2.ly());
      assertEquals(4, rOI2.ux());
      assertEquals(1413, rOI2.X());
      assertEquals((-2149), rOI2.uy());
      assertEquals(3566, rOI2.Y());
      assertEquals(1416, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI1));
      assertFalse(rOI2.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.byteSize(rOI2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2149
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      assertNotNull(grayImage1);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(12, grayImage2.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage2);
      assertNotNull(grayImage3);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(12, grayImage2.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(12, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage4 = grayImage3.copy();
      assertNotNull(grayImage4);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(12, grayImage2.X());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(12, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(12, grayImage4.X());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.Y());
      assertEquals(0L, grayImage4.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage2, grayImage3);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage3, grayImage4);
      assertNotSame(grayImage3, grayImage2);
      assertNotSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage1);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage1);
      assertEquals(1, shortArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        grayImage3.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      short[] shortArray0 = new short[1];
      shortArray0[0] = (short)2624;
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), 1412);
      assertNotNull(grayImage1);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(7974976L, grayImage1.sqrSum());
      assertEquals(5648, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(5648, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      Integer integer0 = grayImage0.max();
      assertNull(integer0);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int0 = grayImage0.absSum();
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals(0, int0);
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage0.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(12, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage2);
      assertNotNull(grayImage3);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(12, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(12, grayImage3.X());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      grayImage0.median(0);
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertArrayEquals(new short[] {(short)2624}, shortArray0);
      assertNotSame(grayImage0, grayImage3);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      // Undeclared exception!
      try { 
        grayImage2.get((short)2624, 1036);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1036
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNotNull(integer0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, (int)integer0);
      
      ImageProducer imageProducer0 = interpolatedGrayImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      Integer integer1 = interpolatedGrayImage1.max();
      assertNotNull(integer1);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(0, (int)integer1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      interpolatedGrayImage0.byteSize();
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      interpolatedGrayImage0.byteSize(rOI0);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 16);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(16, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      ROI rOI0 = new ROI(0, 0, 0, 3);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(4, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(3, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertFalse(rOI1.equals((Object)rOI0));
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNull(integer0);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      Integer integer1 = interpolatedGrayImage1.max();
      assertNull(integer1);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(16, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply((Image<Integer>) interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(16, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.X());
      assertEquals(16, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      
      int int1 = interpolatedGrayImage0.absSum();
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(16, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      
      ROI rOI2 = new ROI();
      assertNotNull(rOI2);
      assertEquals(0, rOI2.ux());
      assertEquals(0, rOI2.uy());
      assertEquals(0, rOI2.ly());
      assertEquals(1, rOI2.X());
      assertEquals(1, rOI2.Y());
      assertEquals(0, rOI2.lx());
      assertFalse(rOI2.equals((Object)rOI0));
      assertFalse(rOI2.equals((Object)rOI1));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.subtract((Image<Integer>) interpolatedGrayImage2, rOI1, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(1446, 1446);
      assertNotNull(grayImage0);
      assertEquals(1446, grayImage0.Y());
      assertEquals(1446, grayImage0.X());
      
      // Undeclared exception!
      grayImage0.copy();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.copy();
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage2.diff(interpolatedGrayImage3);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 2;
      InterpolatedGrayImage interpolatedGrayImage5 = (InterpolatedGrayImage)interpolatedGrayImage2.subtract(2);
      assertNotNull(interpolatedGrayImage5);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals((-8), interpolatedGrayImage2.addSum());
      assertEquals(16L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(8, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(8, interpolatedGrayImage5.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(16L, interpolatedGrayImage5.sqrSum());
      assertEquals((-8), interpolatedGrayImage5.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage4);
      
      InterpolatedGrayImage interpolatedGrayImage6 = (InterpolatedGrayImage)interpolatedGrayImage0.multiply((Image<Integer>) interpolatedGrayImage3);
      assertNotNull(interpolatedGrayImage6);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals((-8), interpolatedGrayImage2.addSum());
      assertEquals(16L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(8, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(0L, interpolatedGrayImage6.sqrSum());
      assertEquals(2, interpolatedGrayImage6.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage6.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage6.absSum());
      assertEquals(2, interpolatedGrayImage6.Y());
      assertEquals(0, interpolatedGrayImage6.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage5));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage6, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage5);
      
      int int0 = interpolatedGrayImage1.absSum();
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertEquals(0, int0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      
      Integer integer0 = interpolatedGrayImage2.max();
      assertNotNull(integer0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals((-8), interpolatedGrayImage2.addSum());
      assertEquals(16L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(8, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals((-2), (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      interpolatedGrayImage0.byteSize();
      assertEquals(0, bufferedImage0.getMinTileX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ROI rOI0 = new ROI(818, 818, (-126), (-1));
      assertNotNull(rOI0);
      assertEquals(818, rOI0.lx());
      assertEquals(818, rOI0.ly());
      assertEquals((-126), rOI0.ux());
      assertEquals((-1), rOI0.uy());
      assertEquals(945, rOI0.X());
      assertEquals(820, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage6.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.copy();
      assertNotNull(interpolatedGrayImage3);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage2.diff(interpolatedGrayImage3);
      assertNotNull(interpolatedGrayImage4);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      
      int int1 = (-2602);
      int int2 = 1571;
      int int3 = 0;
      ROI rOI0 = new ROI(2, 0, 2, 0);
      assertNotNull(rOI0);
      assertEquals(2, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(2, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int4 = 8;
      // Undeclared exception!
      try { 
        interpolatedGrayImage4.splat(334.0, 0.0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 334
         //
         verifyException("jigl.image.types.InterpolatedGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      int[][] intArray0 = new int[1][4];
      int[] intArray1 = new int[1];
      intArray1[0] = 21;
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(21, grayImage0.absSum());
      assertEquals(21, grayImage0.addSum());
      assertEquals(441L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      GrayImage grayImage1 = grayImage0.copy(rOI0);
      assertNotNull(grayImage1);
      assertEquals(21, grayImage0.absSum());
      assertEquals(21, grayImage0.addSum());
      assertEquals(441L, grayImage0.sqrSum());
      assertEquals(1, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, grayImage1.X());
      assertEquals(441L, grayImage1.sqrSum());
      assertEquals(1, grayImage1.Y());
      assertEquals(21, grayImage1.absSum());
      assertEquals(21, grayImage1.addSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      int int0 = (-612);
      rOI0.setROI(21, 3365, 2106, 3365);
      assertEquals(1, rOI0.Y());
      assertEquals(2106, rOI0.lx());
      assertEquals(3365, rOI0.uy());
      assertEquals(21, rOI0.ux());
      assertEquals(2086, rOI0.X());
      assertEquals(3365, rOI0.ly());
      
      // Undeclared exception!
      try { 
        grayImage0.divide(1407, (-612), (-612));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -612
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      assertEquals("2:2\nnull null \nnull null \n", string0);
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNotNull(integer0);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      GrayImage grayImage1 = new GrayImage(interpolatedGrayImage1);
      assertNotNull(grayImage1);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage1.equals((Object)grayImage0));
      
      grayImage1.clip(2, 2795);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(8, grayImage1.addSum());
      assertEquals(8, grayImage1.absSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage1.X());
      assertEquals(16L, grayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(grayImage1, grayImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      Button button0 = null;
      try {
        button0 = new Button("2:2\nnull null \nnull null \n");
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      short[][] shortArray1 = new short[3][5];
      shortArray1[0] = shortArray0;
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      shortArray1[1] = shortArray0;
      shortArray1[2] = shortArray0;
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(shortArray1);
        fail("Expecting exception: ArrayStoreException");
      
      } catch(ArrayStoreException e) {
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(0, 0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.absSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[0];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.multiply(2);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.X());
      assertEquals(1, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(1, intArray0.length);
      
      int int1 = 1037;
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.X());
      assertEquals(1, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertSame(grayImage0, grayImage1);
      assertEquals(1, intArray0.length);
      
      GrayImage grayImage2 = null;
      try {
        grayImage2 = new GrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      int int0 = 8;
      ROI rOI0 = new ROI(1002, 1742, 16, 1742);
      assertNotNull(rOI0);
      assertEquals(16, rOI0.ux());
      assertEquals(1742, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1002, rOI0.lx());
      assertEquals(987, rOI0.X());
      assertEquals(1742, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1742
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      assertNotNull(grayImage0);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, grayImage0.absSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 255);
      assertNotNull(grayImage1);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, grayImage0.absSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      
      grayImage0.median((-10));
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, grayImage0.absSum());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage1);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      InterpolatedGrayImage interpolatedGrayImage0 = null;
      try {
        interpolatedGrayImage0 = new InterpolatedGrayImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(1431, 1431);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(1431, interpolatedGrayImage0.Y());
      assertEquals(1431, interpolatedGrayImage0.X());
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      int int0 = 0;
      int[] intArray0 = new int[1];
      intArray0[0] = 1431;
      GrayImage grayImage0 = new GrayImage(4993, 0, intArray0);
      assertNotNull(grayImage0);
      assertEquals(4993, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertArrayEquals(new int[] {1431}, intArray0);
      assertEquals(1, intArray0.length);
      
      // Undeclared exception!
      interpolatedGrayImage0.divide((Image<Integer>) grayImage0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(0, 14);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(14, interpolatedGrayImage0.Y());
      
      Integer integer0 = interpolatedGrayImage0.max();
      assertNull(integer0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(14, interpolatedGrayImage0.Y());
      
      Image<Integer> image0 = interpolatedGrayImage0.clear();
      assertNotNull(image0);
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(14, interpolatedGrayImage0.Y());
      assertEquals(0, image0.X());
      assertEquals(14, image0.Y());
      assertSame(interpolatedGrayImage0, image0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.set(14, (-354), (Integer) null, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -354
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      
      Integer integer0 = new Integer(2);
      assertNotNull(integer0);
      assertEquals(2, (int)integer0);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      assertEquals("2:2\nnull null \nnull null \n", string0);
      
      GrayImage grayImage1 = interpolatedGrayImage0.addbuffer(2, 2, (int) integer0);
      assertNotNull(grayImage1);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage1, grayImage0);
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      Integer integer1 = grayImage1.max();
      assertNotNull(integer1);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      assertNotSame(grayImage1, grayImage0);
      
      interpolatedGrayImage0.byteSize();
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      interpolatedGrayImage0.byteSize(rOI0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage0.divide((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      
      long long0 = interpolatedGrayImage1.sqrSum();
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals(0L, long0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage3.copy();
      assertNotNull(interpolatedGrayImage4);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage1.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage5 = (InterpolatedGrayImage)interpolatedGrayImage2.diff(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage5);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage5.absSum());
      assertEquals(0L, interpolatedGrayImage5.sqrSum());
      assertEquals(0, interpolatedGrayImage5.addSum());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      
      InterpolatedGrayImage interpolatedGrayImage6 = (InterpolatedGrayImage)interpolatedGrayImage3.subtract(2);
      assertNotNull(interpolatedGrayImage6);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(16L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage3.absSum());
      assertEquals((-8), interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(2, interpolatedGrayImage6.Y());
      assertEquals(2, interpolatedGrayImage6.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage6.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage6.absSum());
      assertEquals((-8), interpolatedGrayImage6.addSum());
      assertEquals(16L, interpolatedGrayImage6.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage6, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage1);
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      interpolatedGrayImage0.interpolationMethod = interpolationMethod0;
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage7 = (InterpolatedGrayImage)interpolatedGrayImage5.multiply((Image<Integer>) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage7);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage5.absSum());
      assertEquals(0L, interpolatedGrayImage5.sqrSum());
      assertEquals(0, interpolatedGrayImage5.addSum());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage7.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage7.addSum());
      assertEquals(2, interpolatedGrayImage7.Y());
      assertEquals(0L, interpolatedGrayImage7.sqrSum());
      assertEquals(2, interpolatedGrayImage7.X());
      assertEquals(0, interpolatedGrayImage7.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage1);
      
      int int0 = interpolatedGrayImage4.absSum();
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(16L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage3.absSum());
      assertEquals((-8), interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertEquals(0, int0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage8 = (InterpolatedGrayImage)interpolatedGrayImage5.multiply(8, rOI0);
      assertNotNull(interpolatedGrayImage8);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage5.absSum());
      assertEquals(0L, interpolatedGrayImage5.sqrSum());
      assertEquals(0, interpolatedGrayImage5.addSum());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0L, interpolatedGrayImage8.sqrSum());
      assertEquals(2, interpolatedGrayImage8.Y());
      assertEquals(0, interpolatedGrayImage8.addSum());
      assertEquals(2, interpolatedGrayImage8.X());
      assertEquals(0, interpolatedGrayImage8.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage8.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage8.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage8);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage8);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage8);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage8);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage8, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage8, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage8, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage8, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage8, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage8, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage8, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage8, interpolatedGrayImage2);
      
      Integer integer0 = interpolatedGrayImage7.min();
      assertNotNull(integer0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage5.absSum());
      assertEquals(0L, interpolatedGrayImage5.sqrSum());
      assertEquals(0, interpolatedGrayImage5.addSum());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage7.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage7.addSum());
      assertEquals(2, interpolatedGrayImage7.Y());
      assertEquals(0L, interpolatedGrayImage7.sqrSum());
      assertEquals(2, interpolatedGrayImage7.X());
      assertEquals(0, interpolatedGrayImage7.absSum());
      assertTrue(integer0.equals((Object)int0));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage8));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage7));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage8));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage1));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage8);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage8);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage8);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage7);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage8);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage5);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage8);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage1);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage7.divide((-1), 1035, 1004);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1035
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      interpolatedGrayImage0.byteSize();
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage1.accum(0.0, 0.0, 2);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      ImageProducer imageProducer0 = interpolatedGrayImage1.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = new InterpolatedGrayImage(interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage1.diff(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage4.sqrSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2, interpolatedGrayImage4.addSum());
      assertEquals(2, interpolatedGrayImage4.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage1.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(memoryImageSource0.equals((Object)imageProducer0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(memoryImageSource0, imageProducer0);
      
      Integer integer0 = interpolatedGrayImage4.max();
      assertNotNull(integer0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage4.sqrSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2, interpolatedGrayImage4.addSum());
      assertEquals(2, interpolatedGrayImage4.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertEquals(2, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      
      interpolatedGrayImage2.byteSize();
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      interpolatedGrayImage3.byteSize(rOI0);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.divide((Image<Integer>) interpolatedGrayImage4);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      short[] shortArray0 = new short[1];
      GrayImage grayImage0 = new GrayImage(12, 0, shortArray0);
      assertNotNull(grayImage0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int0 = (-582);
      GrayImage grayImage1 = grayImage0.addbuffer(2, 2, 2, (-582), (-582));
      assertNotNull(grayImage1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(1354896L, grayImage1.sqrSum());
      assertEquals(2328, grayImage1.absSum());
      assertEquals((-2328), grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage0);
      assertEquals(1, shortArray0.length);
      
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string0);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      int int1 = grayImage0.absSum();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(int1 == int0);
      assertEquals(0, int1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage2 = grayImage1.subtract(0);
      assertNotNull(grayImage2);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(1354896L, grayImage1.sqrSum());
      assertEquals(2328, grayImage1.absSum());
      assertEquals((-2328), grayImage1.addSum());
      assertEquals(2, grayImage1.X());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage2.X());
      assertEquals(2, grayImage2.Y());
      assertEquals(1354896L, grayImage2.sqrSum());
      assertEquals((-2328), grayImage2.addSum());
      assertEquals(2328, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      grayImage2.byteSize();
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage2.X());
      assertEquals(2, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(1, shortArray0.length);
      
      String string1 = grayImage0.toString();
      assertNotNull(string1);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertTrue(string1.equals((Object)string0));
      assertEquals("12:0\n\n\n\n\n\n\n\n\n\n\n\n\n", string1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage3 = new GrayImage(grayImage0);
      assertNotNull(grayImage3);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(12, grayImage3.X());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0L, grayImage3.sqrSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage1));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage0));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      GrayImage grayImage4 = grayImage0.subtract((Image<Integer>) grayImage2);
      assertNotNull(grayImage4);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.absSum());
      assertEquals(2, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(2, grayImage1.Y());
      assertEquals(2, grayImage2.X());
      assertEquals(2, grayImage2.Y());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0, grayImage4.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(12, grayImage4.X());
      assertEquals(0, grayImage4.Y());
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertFalse(grayImage1.equals((Object)grayImage3));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertSame(grayImage0, grayImage4);
      assertNotSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage1, grayImage4);
      assertNotSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertNotSame(grayImage1, grayImage3);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage3);
      assertSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage4);
      assertNotSame(grayImage4, grayImage1);
      assertNotSame(grayImage4, grayImage2);
      assertSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage3);
      assertEquals(1, shortArray0.length);
      
      int int2 = 6;
      int int3 = 2142;
      ROI rOI0 = new ROI(int0, int1, int2, int3);
      assertNotNull(rOI0);
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(12, grayImage0.X());
      assertEquals(589, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(6, rOI0.lx());
      assertEquals((-582), rOI0.ux());
      assertEquals(2143, rOI0.Y());
      assertEquals(2142, rOI0.ly());
      assertFalse(grayImage0.equals((Object)grayImage3));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertArrayEquals(new short[] {(short)0}, shortArray0);
      assertEquals(1, shortArray0.length);
      
      int int4 = 659;
      // Undeclared exception!
      try { 
        grayImage3.median(int4, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      
      int int0 = 806;
      String string0 = grayImage0.toString();
      assertNotNull(string0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals("2:2\nnull null \nnull null \n", string0);
      
      // Undeclared exception!
      try { 
        grayImage0.add(806, 2, 806);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      GrayImage grayImage0 = new GrayImage(interpolatedGrayImage0);
      assertNotNull(grayImage0);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      
      String string0 = interpolatedGrayImage1.toString();
      assertNotNull(string0);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      int int0 = grayImage0.absSum();
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.addSum());
      assertEquals(2, grayImage0.X());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertEquals(0, int0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage0.subtract(2);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals((-8), interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(16L, interpolatedGrayImage0.sqrSum());
      assertEquals(8, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(16L, interpolatedGrayImage2.sqrSum());
      assertEquals(8, interpolatedGrayImage2.absSum());
      assertEquals((-8), interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      
      interpolatedGrayImage2.byteSize();
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(3, 3, 3);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 3);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.absSum());
      assertEquals(9L, interpolatedGrayImage2.sqrSum());
      assertEquals(3, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.diff(interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage3.X());
      assertEquals(3, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      
      GrayImage grayImage0 = interpolatedGrayImage3.addbuffer(307, 3, 307);
      assertNotNull(grayImage0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage3.X());
      assertEquals(3, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(85955088L, grayImage0.sqrSum());
      assertEquals(279984, grayImage0.addSum());
      assertEquals(279984, grayImage0.absSum());
      assertEquals(3, grayImage0.Y());
      assertEquals(307, grayImage0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      Integer integer0 = interpolatedGrayImage1.max();
      assertNotNull(integer0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      
      interpolatedGrayImage2.byteSize();
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      interpolatedGrayImage2.byteSize(rOI0);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(770, 3, 3);
      assertNotNull(grayImage1);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(20709L, grayImage1.sqrSum());
      assertEquals(770, grayImage1.X());
      assertEquals(3, grayImage1.Y());
      assertEquals(6903, grayImage1.absSum());
      assertEquals(6903, grayImage1.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(grayImage1, grayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage2, rOI0, rOI0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(3, interpolatedGrayImage4.X());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(3, interpolatedGrayImage4.Y());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      
      GrayImage grayImage2 = grayImage0.subtract((Image<Integer>) interpolatedGrayImage2);
      assertNotNull(grayImage2);
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(3, bufferedImage0.getTransparency());
      assertTrue(bufferedImage0.isAlphaPremultiplied());
      assertEquals(3, bufferedImage0.getTileHeight());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(3, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(3, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(3, bufferedImage0.getTileWidth());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(3, interpolatedGrayImage1.X());
      assertEquals(3, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage2.X());
      assertEquals(3, interpolatedGrayImage2.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(3, interpolatedGrayImage3.X());
      assertEquals(3, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(85955088L, grayImage0.sqrSum());
      assertEquals(279984, grayImage0.addSum());
      assertEquals(279984, grayImage0.absSum());
      assertEquals(3, grayImage0.Y());
      assertEquals(307, grayImage0.X());
      assertEquals(279984, grayImage2.absSum());
      assertEquals(85955088L, grayImage2.sqrSum());
      assertEquals(3, grayImage2.Y());
      assertEquals(307, grayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertSame(grayImage2, grayImage0);
      
      ROI rOI1 = new ROI();
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      assertFalse(rOI1.equals((Object)rOI0));
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.multiply(0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage2 = grayImage0.add((Image<Integer>) grayImage1);
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = grayImage2.min();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(0, grayImage2.Y());
      assertEquals(0, grayImage2.X());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertSame(grayImage2, grayImage0);
      assertSame(grayImage2, grayImage1);
      assertEquals(0, intArray0.length);
      
      int int0 = grayImage0.addSum();
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, int0);
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertEquals(0, intArray0.length);
      
      Integer integer1 = grayImage1.min();
      assertNull(integer1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertSame(grayImage1, grayImage2);
      assertEquals(0, intArray0.length);
      
      Integer integer2 = grayImage0.min();
      assertNull(integer2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.Y());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage0, grayImage2);
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI(0, 5, 289, 0);
      assertNotNull(rOI0);
      assertEquals(290, rOI0.X());
      assertEquals(6, rOI0.Y());
      assertEquals(289, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(5, rOI0.ly());
      
      // Undeclared exception!
      try { 
        grayImage2.subtract(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      int[][] intArray0 = new int[4][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(4, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(4, grayImage0.X());
      assertEquals(4, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.multiply(9);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(4, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(4, grayImage0.X());
      assertEquals(4, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(4, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(4, intArray0.length);
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage1);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(4, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(4, grayImage0.X());
      assertEquals(4, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(4, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(4, interpolatedGrayImage0.X());
      assertEquals(4, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(4, intArray0.length);
      
      GrayImage grayImage2 = new GrayImage(grayImage1);
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(4, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(4, grayImage0.X());
      assertEquals(4, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(4, grayImage1.X());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage2.absSum());
      assertEquals(4, grayImage2.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(4, grayImage2.Y());
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertEquals(4, intArray0.length);
      
      grayImage1.clip(9, (-3892));
      assertEquals(1296L, grayImage0.sqrSum());
      assertEquals(144, grayImage0.addSum());
      assertEquals(4, grayImage0.Y());
      assertEquals(144, grayImage0.absSum());
      assertEquals(4, grayImage0.X());
      assertEquals(4, grayImage1.Y());
      assertEquals(144, grayImage1.absSum());
      assertEquals(4, grayImage1.X());
      assertEquals(1296L, grayImage1.sqrSum());
      assertEquals(144, grayImage1.addSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertEquals(4, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.subtract(5498, 5498, 5498, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5498
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      ImageProducer imageProducer0 = interpolatedGrayImage2.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage1.subtract(2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(8, interpolatedGrayImage1.absSum());
      assertEquals((-8), interpolatedGrayImage1.addSum());
      assertEquals(16L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(8, interpolatedGrayImage3.absSum());
      assertEquals(16L, interpolatedGrayImage3.sqrSum());
      assertEquals((-8), interpolatedGrayImage3.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage1.multiply((Image<Integer>) interpolatedGrayImage3);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(16, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(16, interpolatedGrayImage1.addSum());
      assertEquals(64L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(64L, interpolatedGrayImage3.sqrSum());
      assertEquals(16, interpolatedGrayImage3.absSum());
      assertEquals(16, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(16, interpolatedGrayImage4.addSum());
      assertEquals(16, interpolatedGrayImage4.absSum());
      assertEquals(64L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage3);
      
      int int0 = interpolatedGrayImage0.absSum();
      assertEquals(2, bufferedImage0.getType());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(3, bufferedImage0.getTransparency());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertEquals(0, int0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      int int1 = (-472);
      ROI rOI1 = new ROI((-472), (-4581), (-472), (-4581));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals((-4581), rOI1.ly());
      assertEquals((-472), rOI1.ux());
      assertEquals((-4581), rOI1.uy());
      assertEquals((-472), rOI1.lx());
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage0.divide(0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      GrayImage grayImage0 = new GrayImage(bufferedImage0);
      assertNotNull(grayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(grayImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      
      Integer integer0 = interpolatedGrayImage0.min();
      assertNotNull(integer0);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0, (int)integer0);
      
      InterpolatedGrayImage interpolatedGrayImage1 = (InterpolatedGrayImage)interpolatedGrayImage0.copy();
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      
      GrayImage grayImage1 = interpolatedGrayImage1.addbuffer(1639, 3, (-20));
      assertNotNull(grayImage1);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(1639, grayImage1.X());
      assertEquals(3, grayImage1.Y());
      assertEquals(1965200L, grayImage1.sqrSum());
      assertEquals(98260, grayImage1.absSum());
      assertEquals((-98260), grayImage1.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(grayImage1.equals((Object)grayImage0));
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(grayImage1, grayImage0);
      
      GrayImage grayImage2 = interpolatedGrayImage0.addbuffer(2, 25, (-1161), 2771, 0);
      assertNotNull(grayImage2);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(0L, grayImage2.sqrSum());
      assertEquals(0, grayImage2.addSum());
      assertEquals(2, grayImage2.X());
      assertEquals(0, grayImage2.absSum());
      assertEquals(25, grayImage2.Y());
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertNotSame(grayImage2, grayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage2 = (InterpolatedGrayImage)interpolatedGrayImage0.divide((-20));
      assertNotNull(interpolatedGrayImage2);
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage0.equals((Object)grayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertNotSame(grayImage0, grayImage2);
      assertNotSame(grayImage0, grayImage1);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage1.multiply((-20), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      
      int[][] intArray0 = new int[1][7];
      int[] intArray1 = new int[1];
      intArray0[0] = intArray1;
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      
      // Undeclared exception!
      try { 
        grayImage0.multiply(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinX());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.Y());
      assertEquals(2, grayImage0.X());
      
      GrayImage grayImage1 = null;
      try {
        grayImage1 = new GrayImage(2, (-1614), (int[]) null);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      int int0 = 2;
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage0.accum(0.0, 0.587, 2);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(4L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      ImageProducer imageProducer0 = interpolatedGrayImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(4L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(2, 2);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      Integer integer0 = interpolatedGrayImage1.max();
      assertNotNull(integer0);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(4L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(0, (int)integer0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      
      Integer integer1 = interpolatedGrayImage0.max();
      assertNotNull(integer1);
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getMinY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, interpolatedGrayImage0.absSum());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(4L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.addSum());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(2, (int)integer1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage2.multiply((Image<Integer>) interpolatedGrayImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      
      interpolatedGrayImage2.accum(0.0, 0.587, 2);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage2.copy();
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(4L, interpolatedGrayImage3.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      
      MemoryImageSource memoryImageSource0 = (MemoryImageSource)interpolatedGrayImage2.getJavaImage();
      assertNotNull(memoryImageSource0);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(4L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      
      InterpolatedGrayImage interpolatedGrayImage4 = (InterpolatedGrayImage)interpolatedGrayImage1.diff(interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage4);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      
      InterpolatedGrayImage interpolatedGrayImage5 = (InterpolatedGrayImage)interpolatedGrayImage2.subtract(2136);
      assertNotNull(interpolatedGrayImage5);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals((-8542), interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(8542, interpolatedGrayImage2.absSum());
      assertEquals(18241444L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(8542, interpolatedGrayImage5.absSum());
      assertEquals(18241444L, interpolatedGrayImage5.sqrSum());
      assertEquals((-8542), interpolatedGrayImage5.addSum());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage4));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage4);
      
      InterpolatedGrayImage interpolatedGrayImage6 = (InterpolatedGrayImage)interpolatedGrayImage3.multiply((Image<Integer>) interpolatedGrayImage5);
      assertNotNull(interpolatedGrayImage6);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals((-8542), interpolatedGrayImage2.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(8542, interpolatedGrayImage2.absSum());
      assertEquals(18241444L, interpolatedGrayImage2.sqrSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals((-4268), interpolatedGrayImage3.addSum());
      assertEquals(4268, interpolatedGrayImage3.absSum());
      assertEquals(18215824L, interpolatedGrayImage3.sqrSum());
      assertEquals(8542, interpolatedGrayImage5.absSum());
      assertEquals(18241444L, interpolatedGrayImage5.sqrSum());
      assertEquals((-8542), interpolatedGrayImage5.addSum());
      assertEquals(2, interpolatedGrayImage5.X());
      assertEquals(2, interpolatedGrayImage5.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage5.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage6.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage6.X());
      assertEquals(2, interpolatedGrayImage6.Y());
      assertEquals(18215824L, interpolatedGrayImage6.sqrSum());
      assertEquals(4268, interpolatedGrayImage6.absSum());
      assertEquals((-4268), interpolatedGrayImage6.addSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage5.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage6.equals((Object)interpolatedGrayImage4));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage0);
      assertSame(interpolatedGrayImage5, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage5, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage6, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage6, interpolatedGrayImage4);
      
      int int0 = interpolatedGrayImage4.absSum();
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0, interpolatedGrayImage4.addSum());
      assertEquals(0, interpolatedGrayImage4.absSum());
      assertEquals(2, interpolatedGrayImage4.Y());
      assertEquals(2, interpolatedGrayImage4.X());
      assertEquals(0L, interpolatedGrayImage4.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage4.getInterpolationMethod());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage4.equals((Object)interpolatedGrayImage6));
      assertEquals(0, int0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage4, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage4, interpolatedGrayImage6);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      InterpolatedGrayImage interpolatedGrayImage7 = (InterpolatedGrayImage)interpolatedGrayImage2.multiply((-302), rOI0);
      assertNotNull(interpolatedGrayImage7);
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals((-480263580L), interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(638666, interpolatedGrayImage2.addSum());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(651478, interpolatedGrayImage2.absSum());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-480263580L), interpolatedGrayImage7.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage7.getInterpolationMethod());
      assertEquals(638666, interpolatedGrayImage7.addSum());
      assertEquals(2, interpolatedGrayImage7.Y());
      assertEquals(2, interpolatedGrayImage7.X());
      assertEquals(651478, interpolatedGrayImage7.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage5));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage4));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage3));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage6));
      assertFalse(interpolatedGrayImage7.equals((Object)interpolatedGrayImage0));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage1, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage6);
      assertSame(interpolatedGrayImage2, interpolatedGrayImage7);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage4);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage3);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage7, interpolatedGrayImage5);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage6);
      assertNotSame(interpolatedGrayImage7, interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        interpolatedGrayImage6.multiply((-339), 2, (-1050));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(2, bufferedImage0.getWidth());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(2, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      
      GrayImage grayImage0 = new GrayImage(2, 2);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(2, grayImage0.Y());
      
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      assertNotNull(sunHints_LCDContrastKey0);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        grayImage0.median(2, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      int[][] intArray0 = new int[0][4];
      GrayImage grayImage0 = new GrayImage(intArray0);
      assertNotNull(grayImage0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage1 = grayImage0.multiply(0);
      assertNotNull(grayImage1);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertSame(grayImage0, grayImage1);
      assertSame(grayImage1, grayImage0);
      assertEquals(0, intArray0.length);
      
      Integer integer0 = grayImage0.min();
      assertNull(integer0);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertSame(grayImage0, grayImage1);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage2 = grayImage1.addbuffer(0, 1037, 4, 4, (-675));
      assertNotNull(grayImage2);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage2.X());
      assertEquals(0, grayImage2.addSum());
      assertEquals(1037, grayImage2.Y());
      assertEquals(0, grayImage2.absSum());
      assertEquals(0L, grayImage2.sqrSum());
      assertFalse(grayImage2.equals((Object)grayImage1));
      assertFalse(grayImage2.equals((Object)grayImage0));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertNotSame(grayImage2, grayImage1);
      assertNotSame(grayImage2, grayImage0);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage3 = grayImage1.subtract((Image<Integer>) grayImage0);
      assertNotNull(grayImage3);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage1.sqrSum());
      assertEquals(0, grayImage1.Y());
      assertEquals(0, grayImage1.absSum());
      assertEquals(0, grayImage1.X());
      assertEquals(0, grayImage1.addSum());
      assertEquals(0, grayImage3.absSum());
      assertEquals(0, grayImage3.addSum());
      assertEquals(0, grayImage3.X());
      assertEquals(0, grayImage3.Y());
      assertEquals(0L, grayImage3.sqrSum());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage1.equals((Object)grayImage2));
      assertFalse(grayImage3.equals((Object)grayImage2));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage3);
      assertSame(grayImage1, grayImage3);
      assertSame(grayImage1, grayImage0);
      assertNotSame(grayImage1, grayImage2);
      assertSame(grayImage3, grayImage0);
      assertNotSame(grayImage3, grayImage2);
      assertSame(grayImage3, grayImage1);
      assertEquals(0, intArray0.length);
      
      GrayImage grayImage4 = grayImage0.addbuffer(0, 10, 1652, 1037, 0);
      assertNotNull(grayImage4);
      assertEquals(0L, grayImage0.sqrSum());
      assertEquals(0, grayImage0.addSum());
      assertEquals(0, grayImage0.Y());
      assertEquals(0, grayImage0.X());
      assertEquals(0, grayImage0.absSum());
      assertEquals(0L, grayImage4.sqrSum());
      assertEquals(0, grayImage4.addSum());
      assertEquals(0, grayImage4.X());
      assertEquals(0, grayImage4.absSum());
      assertEquals(10, grayImage4.Y());
      assertFalse(grayImage0.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage2));
      assertFalse(grayImage4.equals((Object)grayImage0));
      assertFalse(grayImage4.equals((Object)grayImage3));
      assertFalse(grayImage4.equals((Object)grayImage1));
      assertSame(grayImage0, grayImage1);
      assertNotSame(grayImage0, grayImage2);
      assertSame(grayImage0, grayImage3);
      assertNotSame(grayImage0, grayImage4);
      assertNotSame(grayImage4, grayImage2);
      assertNotSame(grayImage4, grayImage0);
      assertNotSame(grayImage4, grayImage3);
      assertNotSame(grayImage4, grayImage1);
      assertEquals(0, intArray0.length);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        grayImage1.subtract(0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(2, 2, 2);
      assertNotNull(bufferedImage0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(bufferedImage0);
      assertNotNull(interpolatedGrayImage0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      
      InterpolatedGrayImage interpolatedGrayImage1 = new InterpolatedGrayImage((GrayImage) interpolatedGrayImage0);
      assertNotNull(interpolatedGrayImage1);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      
      InterpolatedGrayImage interpolatedGrayImage2 = new InterpolatedGrayImage(interpolatedGrayImage1);
      assertNotNull(interpolatedGrayImage2);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      
      int int0 = 109;
      GrayImage grayImage0 = new GrayImage(2, 109);
      assertNotNull(grayImage0);
      assertEquals(2, grayImage0.X());
      assertEquals(109, grayImage0.Y());
      
      String string0 = interpolatedGrayImage0.toString();
      assertNotNull(string0);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertEquals("2:2\n0 0 \n0 0 \n", string0);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      InterpolatedGrayImage interpolatedGrayImage3 = (InterpolatedGrayImage)interpolatedGrayImage0.add((Image<Integer>) interpolatedGrayImage2);
      assertNotNull(interpolatedGrayImage3);
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(2, bufferedImage0.getWidth());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(3, bufferedImage0.getTransparency());
      assertEquals(2, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(2, bufferedImage0.getType());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(2, bufferedImage0.getTileWidth());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(2, bufferedImage0.getHeight());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage0.X());
      assertEquals(2, interpolatedGrayImage0.Y());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage1.addSum());
      assertEquals(2, interpolatedGrayImage1.X());
      assertEquals(2, interpolatedGrayImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage1.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage1.sqrSum());
      assertEquals(0, interpolatedGrayImage1.absSum());
      assertEquals(0L, interpolatedGrayImage2.sqrSum());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage2.getInterpolationMethod());
      assertEquals(2, interpolatedGrayImage2.X());
      assertEquals(2, interpolatedGrayImage2.Y());
      assertEquals(0, interpolatedGrayImage2.addSum());
      assertEquals(0, interpolatedGrayImage2.absSum());
      assertEquals(0, interpolatedGrayImage3.absSum());
      assertEquals(2, interpolatedGrayImage3.Y());
      assertEquals(0, interpolatedGrayImage3.addSum());
      assertEquals(2, interpolatedGrayImage3.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage3.getInterpolationMethod());
      assertEquals(0L, interpolatedGrayImage3.sqrSum());
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage0.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage1.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage0));
      assertFalse(interpolatedGrayImage2.equals((Object)interpolatedGrayImage1));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage2));
      assertFalse(interpolatedGrayImage3.equals((Object)interpolatedGrayImage1));
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage0, interpolatedGrayImage2);
      assertSame(interpolatedGrayImage0, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage1, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage0);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage1);
      assertNotSame(interpolatedGrayImage2, interpolatedGrayImage3);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage2);
      assertNotSame(interpolatedGrayImage3, interpolatedGrayImage1);
      assertSame(interpolatedGrayImage3, interpolatedGrayImage0);
      
      Button button0 = null;
      try {
        button0 = new Button();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}

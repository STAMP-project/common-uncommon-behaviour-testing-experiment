/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 14:05:40 GMT 2019
 */

package ghm.follow.search;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ghm.follow.search.LineResult;
import ghm.follow.search.SearchableTextPane;
import java.awt.Font;
import java.util.List;
import java.util.regex.PatternSyntaxException;
import javax.swing.JScrollPane;
import javax.swing.plaf.TextUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.StringContent;
import javax.swing.text.Style;
import javax.swing.text.StyleContext;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SearchableTextPane_ESTest extends SearchableTextPane_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("", 0, 0);
      SearchableTextPane searchableTextPane0 = new SearchableTextPane(font0, 0);
      int int0 = searchableTextPane0.search("BadLocationException in SearchableTextPane", (-1));
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, 10);
      // Undeclared exception!
      try { 
        searchableTextPane0.search((String) null, 10);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, (-25));
      // Undeclared exception!
      try { 
        searchableTextPane0.highlight("X{[^s\"iY9", (-25));
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Illegal repetition near index 0
         // X{[^s\"iY9
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, (-31));
      searchableTextPane0.setUI((TextUI) null);
      // Undeclared exception!
      try { 
        searchableTextPane0.highlight("", (-31));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ghm.follow.search.SearchableTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, (-8));
      // Undeclared exception!
      try { 
        searchableTextPane0.highlight("|", (-8));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown search strategy requested [flags=-8
         //
         verifyException("ghm.follow.search.SearchEngine", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, 2);
      searchableTextPane0.setUI((TextUI) null);
      JScrollPane jScrollPane0 = new JScrollPane(searchableTextPane0);
      // Undeclared exception!
      try { 
        searchableTextPane0.getScrollableTracksViewportWidth();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ghm.follow.search.SearchableTextPane", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("", 0, 0);
      SearchableTextPane searchableTextPane0 = new SearchableTextPane(font0, (-1999));
      searchableTextPane0.removeHighlights();
      assertFalse(searchableTextPane0.isFocusCycleRoot());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("", 0, 0);
      SearchableTextPane searchableTextPane0 = new SearchableTextPane(font0, (-1999));
      List<LineResult> list0 = searchableTextPane0.highlight("FW", 1283);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, 6);
      int int0 = searchableTextPane0.search("ghm.follow.search.SearchableTextPane");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("", 0, 0);
      SearchableTextPane searchableTextPane0 = new SearchableTextPane(font0, (-1999));
      int int0 = searchableTextPane0.search("");
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, (-34));
      int int0 = searchableTextPane0.search((String) null);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, (-6));
      List<LineResult> list0 = searchableTextPane0.highlight("", (-6));
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, 19);
      List<LineResult> list0 = searchableTextPane0.highlight((String) null, 19);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, 1487);
      searchableTextPane0.setLineWrap(true);
      JScrollPane jScrollPane0 = new JScrollPane(searchableTextPane0);
      boolean boolean0 = searchableTextPane0.getScrollableTracksViewportWidth();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SearchableTextPane searchableTextPane0 = new SearchableTextPane((Font) null, 6);
      JScrollPane jScrollPane0 = new JScrollPane(searchableTextPane0);
      boolean boolean0 = searchableTextPane0.getScrollableTracksViewportWidth();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("", 0, 0);
      SearchableTextPane searchableTextPane0 = new SearchableTextPane(font0, (-1999));
      boolean boolean0 = searchableTextPane0.getScrollableTracksViewportWidth();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringContent stringContent0 = new StringContent(0);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(stringContent0, styleContext0);
      Style style0 = defaultStyledDocument0.getLogicalStyle(0);
      Font font0 = defaultStyledDocument0.getFont(style0);
      SearchableTextPane searchableTextPane0 = new SearchableTextPane(font0, 0);
      int int0 = searchableTextPane0.search("", 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StyleContext styleContext0 = new StyleContext();
      Font font0 = styleContext0.getFont("", 0, 0);
      SearchableTextPane searchableTextPane0 = new SearchableTextPane(font0, (-1999));
      List<LineResult> list0 = searchableTextPane0.highlight("|", 51);
      assertEquals(1, list0.size());
  }
}

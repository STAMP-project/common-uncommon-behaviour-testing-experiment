/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 00:31:54 GMT 2019
 */

package de.progra.charting.render;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.CoordSystem;
import de.progra.charting.PointToPixelTranslator;
import de.progra.charting.model.ChartDataModel;
import de.progra.charting.model.DataSet;
import de.progra.charting.model.DefaultChartDataModel;
import de.progra.charting.model.DefaultDataSet;
import de.progra.charting.model.EditableChartDataModel;
import de.progra.charting.model.EditableDataSet;
import de.progra.charting.model.ObjectChartDataModel;
import de.progra.charting.render.BarChartRenderer;
import de.progra.charting.render.LineChartRenderer;
import de.progra.charting.render.PieChartRenderer;
import de.progra.charting.render.RadarChartRenderer;
import de.progra.charting.render.RowColorModel;
import de.progra.charting.render.StackedBarChartRenderer;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.Rectangle;
import java.awt.geom.AffineTransform;
import java.awt.image.BufferedImage;
import java.text.DecimalFormat;
import java.text.DecimalFormatSymbols;
import javax.swing.text.AttributeSet;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.SimpleAttributeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractChartRenderer_ESTest extends AbstractChartRenderer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      int[][] intArray0 = new int[1][7];
      double[] doubleArray0 = new double[5];
      String[] stringArray0 = new String[5];
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel(intArray0, doubleArray0, stringArray0);
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, "", "");
      LineChartRenderer lineChartRenderer0 = new LineChartRenderer(coordSystem0, editableChartDataModel0);
      CoordSystem coordSystem1 = new CoordSystem(editableChartDataModel0, "'~S?^b5", "** Ticks: ");
      lineChartRenderer0.setCoordSystem(coordSystem1);
      assertTrue(coordSystem1.isPaintAltTick());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      EditableDataSet editableDataSet0 = new EditableDataSet();
      DataSet[] dataSetArray0 = new DataSet[2];
      dataSetArray0[0] = (DataSet) editableDataSet0;
      dataSetArray0[1] = (DataSet) editableDataSet0;
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel(dataSetArray0);
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0);
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, defaultChartDataModel0);
      radarChartRenderer0.setChartDataModel(editableChartDataModel0);
      assertFalse(editableChartDataModel0.isAutoScale());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, "Export Image file ...", "Export Image file ...");
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(coordSystem0, editableChartDataModel0);
      AffineTransform affineTransform0 = pieChartRenderer0.getTransform(20);
      assertNull(affineTransform0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(defaultChartDataModel0);
      RowColorModel rowColorModel0 = radarChartRenderer0.getRowColorModel();
      assertNull(rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0, "de.progra.charting.render.AbstractChartRenderer", "Bo`R\",h@Q^~q_Hx2s");
      LineChartRenderer lineChartRenderer0 = new LineChartRenderer(coordSystem0, defaultChartDataModel0);
      RowColorModel rowColorModel0 = RowColorModel.getInstance(defaultChartDataModel0);
      lineChartRenderer0.setRowColorModel(rowColorModel0);
      RowColorModel rowColorModel1 = lineChartRenderer0.getRowColorModel();
      assertSame(rowColorModel1, rowColorModel0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0, "de.progra.charting.render.AbstractChartRenderer", "Bo`R\",h@Q^~q_Hx2s");
      LineChartRenderer lineChartRenderer0 = new LineChartRenderer(coordSystem0, defaultChartDataModel0);
      CoordSystem coordSystem1 = lineChartRenderer0.getCoordSystem();
      assertTrue(coordSystem1.isPaintLabels());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0, decimalFormat0, false, false, false);
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, defaultChartDataModel0);
      CoordSystem coordSystem1 = radarChartRenderer0.getCoordSystem();
      assertTrue(coordSystem1.isPaintLabels());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(objectChartDataModel0, "de.progra.charting.render.shape.Triangle2D", "de.progra.charting.render.AbstractChartRenderer");
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      BarChartRenderer barChartRenderer0 = new BarChartRenderer(coordSystem0, (ChartDataModel) null, (DecimalFormat) null, font0, 169.21178F);
      ChartDataModel chartDataModel0 = barChartRenderer0.getChartDataModel();
      assertNull(chartDataModel0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataSet[] dataSetArray0 = new DataSet[2];
      DefaultDataSet defaultDataSet0 = new DefaultDataSet(640);
      dataSetArray0[0] = (DataSet) defaultDataSet0;
      EditableDataSet editableDataSet0 = new EditableDataSet();
      dataSetArray0[1] = (DataSet) editableDataSet0;
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel(dataSetArray0);
      defaultChartDataModel0.setManualScale(true);
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0);
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, defaultChartDataModel0);
      ChartDataModel chartDataModel0 = radarChartRenderer0.getChartDataModel();
      assertEquals(2, chartDataModel0.getDataSetNumber());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ObjectChartDataModel objectChartDataModel0 = new ObjectChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(objectChartDataModel0, "de.progra.charting.render.shape.Triangle2D", "de.progra.charting.render.AbstractChartRenderer");
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance();
      DecimalFormat decimalFormat0 = new DecimalFormat("1998", decimalFormatSymbols0);
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument();
      AttributeSet attributeSet0 = SimpleAttributeSet.EMPTY;
      Font font0 = defaultStyledDocument0.getFont(attributeSet0);
      BarChartRenderer barChartRenderer0 = new BarChartRenderer(coordSystem0, objectChartDataModel0, decimalFormat0, font0, 169.21178F);
      ChartDataModel chartDataModel0 = barChartRenderer0.getChartDataModel();
      assertSame(objectChartDataModel0, chartDataModel0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.setMinimumColumnValue(5554);
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0, "Export Image file ...", "Export Image file ...");
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(coordSystem0, editableChartDataModel0);
      ChartDataModel chartDataModel0 = pieChartRenderer0.getChartDataModel();
      assertSame(chartDataModel0, editableChartDataModel0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      editableChartDataModel0.setMaximumColumnValue(1903.8812046076598);
      CoordSystem coordSystem0 = new CoordSystem(editableChartDataModel0);
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(coordSystem0, editableChartDataModel0);
      ChartDataModel chartDataModel0 = radarChartRenderer0.getChartDataModel();
      assertTrue(chartDataModel0.isColumnNumeric());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      defaultChartDataModel0.setMaximumColumnValue((-4244.351));
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(defaultChartDataModel0);
      ChartDataModel chartDataModel0 = pieChartRenderer0.getChartDataModel();
      assertSame(defaultChartDataModel0, chartDataModel0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      Rectangle rectangle0 = new Rectangle();
      pieChartRenderer0.setBounds(rectangle0);
      Rectangle rectangle1 = pieChartRenderer0.getBounds();
      assertEquals(0.0, rectangle1.getMaxY(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      Rectangle rectangle0 = new Rectangle(0, (-300), 0, (-700));
      pieChartRenderer0.setBounds(rectangle0);
      Rectangle rectangle1 = pieChartRenderer0.getBounds();
      assertEquals((-300), rectangle1.y);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      // Undeclared exception!
      try { 
        pieChartRenderer0.getTransform((-2057));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.AbstractChartRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      Rectangle rectangle0 = pieChartRenderer0.getBounds();
      assertNull(rectangle0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      RadarChartRenderer radarChartRenderer0 = new RadarChartRenderer(editableChartDataModel0);
      CoordSystem coordSystem0 = radarChartRenderer0.getCoordSystem();
      assertNull(coordSystem0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      CoordSystem coordSystem0 = new CoordSystem(defaultChartDataModel0);
      StackedBarChartRenderer stackedBarChartRenderer0 = new StackedBarChartRenderer(coordSystem0, defaultChartDataModel0, 20);
      PointToPixelTranslator pointToPixelTranslator0 = coordSystem0.getPointToPixelTranslator((-2254));
      stackedBarChartRenderer0.setPointToPixelTranslator(pointToPixelTranslator0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultChartDataModel defaultChartDataModel0 = new DefaultChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(defaultChartDataModel0);
      PointToPixelTranslator pointToPixelTranslator0 = pieChartRenderer0.getPointToPixelTranslator();
      assertNull(pointToPixelTranslator0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      Rectangle rectangle0 = new Rectangle();
      pieChartRenderer0.setBounds(rectangle0);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      pieChartRenderer0.render(graphics2D0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      Dimension dimension0 = pieChartRenderer0.getPreferredSize();
      assertEquals(Integer.MIN_VALUE, dimension0.height);
      assertEquals(Integer.MIN_VALUE, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      PieChartRenderer pieChartRenderer0 = new PieChartRenderer(editableChartDataModel0);
      BufferedImage bufferedImage0 = new BufferedImage(1, 1, 1);
      Graphics2D graphics2D0 = bufferedImage0.createGraphics();
      // Undeclared exception!
      try { 
        pieChartRenderer0.render(graphics2D0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.AbstractChartRenderer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      EditableChartDataModel editableChartDataModel0 = new EditableChartDataModel();
      LineChartRenderer lineChartRenderer0 = new LineChartRenderer((CoordSystem) null, editableChartDataModel0);
      // Undeclared exception!
      try { 
        lineChartRenderer0.renderChart((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.render.AbstractChartRenderer", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 12:29:54 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.ThinRect2Symbol;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ThinRect2Symbol_ESTest extends ThinRect2Symbol_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      int[] intArray0 = new int[1];
      thinRect2Symbol0.xPoints = intArray0;
      // Undeclared exception!
      try { 
        thinRect2Symbol0.generatePoints(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.ThinRect2Symbol", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      thinRect2Symbol0.generatePoints(13, 0);
      int[] intArray0 = new int[5];
      thinRect2Symbol0.xPoints = intArray0;
      int[] intArray1 = new int[2];
      thinRect2Symbol0.xPoints = intArray1;
      // Undeclared exception!
      try { 
        thinRect2Symbol0.generatePoints(1010, 1024);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jahuwaldt.plot.ThinRect2Symbol", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      thinRect2Symbol0.generatePoints(1167, 1167);
      thinRect2Symbol0.generatePoints(1, 200);
      assertEquals(8, thinRect2Symbol0.getSize());
  }
}

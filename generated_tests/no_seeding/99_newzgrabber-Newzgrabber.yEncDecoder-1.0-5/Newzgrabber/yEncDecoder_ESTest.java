/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 12:23:08 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import Newzgrabber.yEncDecoder;
import java.io.File;
import java.io.IOException;
import java.io.PrintStream;
import java.util.Locale;
import javax.swing.DebugGraphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class yEncDecoder_ESTest extends yEncDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      yEncDecoder.main(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      yEncDecoder yEncDecoder0 = new yEncDecoder((BufferedCustomInputStream) null);
      try { 
        yEncDecoder0.decodeStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.yEncDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      File file0 = MockFile.createTempFile("Naiting for news socket...", "Naiting for news socket...");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
      PrintStream printStream0 = DebugGraphics.logStream();
      yEncDecoder yEncDecoder0 = new yEncDecoder(bufferedCustomInputStream0, printStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.println((-1405));
      yEncDecoder0.setBegin(true);
      yEncDecoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-9995), mockFileInputStream0.available());
      //  // Unstable assertion: assertEquals(1L, yEncDecoder0.getLineCount());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      String[] stringArray0 = new String[1];
      MockPrintStream mockPrintStream0 = new MockPrintStream("file.enc");
      Locale locale0 = new Locale("=yU", "=yU");
      mockPrintStream0.format(locale0, "=yU", (Object[]) stringArray0);
      mockPrintStream0.println('+');
      yEncDecoder.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      File file0 = MockFile.createTempFile("Naiting for news socket...", "Naiting for news socket...");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, false);
      yEncDecoder yEncDecoder0 = new yEncDecoder(bufferedCustomInputStream0);
      Newzgrabber.IsBatch = true;
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      mockPrintStream0.println();
      yEncDecoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-10000), mockFileInputStream0.available());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      File file0 = MockFile.createTempFile("Naiting for news socket...", "Naiting for news socket...");
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(mockFileInputStream0, true);
      yEncDecoder yEncDecoder0 = new yEncDecoder(bufferedCustomInputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Object[] objectArray0 = new Object[7];
      mockPrintStream0.format(locale0, "=y8", objectArray0);
      mockPrintStream0.println();
      yEncDecoder0.decodeStream();
      //  // Unstable assertion: assertEquals((-9997), mockFileInputStream0.available());
      //  // Unstable assertion: assertEquals(1L, yEncDecoder0.getLineCount());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 11:15:59 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.ConcurrentModificationException;
import java.util.LinkedList;
import java.util.List;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.tree.AbstractBranch;
import org.dom4j.tree.BackedList;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.ContentListFacade;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ContentListFacade_ESTest extends ContentListFacade_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NamespaceStack namespaceStack0 = new NamespaceStack();
      Namespace namespace0 = namespaceStack0.createNamespace("/processing-instruction()", "");
      BaseElement baseElement0 = new BaseElement("org.dom4j.tree.ContentListFacade", namespace0);
      List<Namespace> list0 = baseElement0.additionalNamespaces("org.dom4j.tree.ContentListFacade");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(baseElement0, list0);
      contentListFacade0.add(0, namespace0);
      assertFalse(namespace0.supportsParent());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanElement beanElement0 = new BeanElement("", dOMDocument0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMDocument0, beanAttributeList0);
      contentListFacade0.clear();
      assertEquals(1, contentListFacade0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement("D0^y.I#elDZaB9");
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMElement0, list0);
      Node[] nodeArray0 = new Node[8];
      Node[] nodeArray1 = contentListFacade0.toArray(nodeArray0);
      assertSame(nodeArray0, nodeArray1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("This ProcessingInstruction is read only");
      List<Namespace> list0 = nonLazyElement0.getNamespacesForURI("This ProcessingInstruction is read only");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      Node[] nodeArray0 = new Node[0];
      Node[] nodeArray1 = contentListFacade0.toArray(nodeArray0);
      assertEquals(0, nodeArray1.length);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DefaultDocument defaultDocument0 = new DefaultDocument(dOMDocumentType0);
      BeanElement beanElement0 = new BeanElement("y]KZ;CiDXVuAt", defaultDocument0);
      List<Namespace> list0 = beanElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, list0);
      int int0 = contentListFacade0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", "");
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(beanElement0, beanAttributeList0);
      int int0 = contentListFacade0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      Namespace namespace0 = namespaceStack0.addNamespace("", "");
      BeanElement beanElement0 = new BeanElement((String) null, namespace0, defaultDocumentFactory0);
      LinkedList<DOMNamespace> linkedList0 = new LinkedList<DOMNamespace>();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(beanElement0, linkedList0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(beanElement0, "8tW`", "");
      contentListFacade0.add(dOMNamespace0);
      contentListFacade0.set(0, dOMNamespace0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument((String) null);
      QName qName0 = QName.get("-H3%S.", "");
      DOMElement dOMElement0 = new DOMElement(qName0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, list0);
      Namespace namespace0 = Namespace.get("Ko'L}V.S31", "Ko'L}V.S31");
      boolean boolean0 = contentListFacade0.add(namespace0);
      boolean boolean1 = contentListFacade0.remove(namespace0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      linkedList0.add(namespace0);
      QName qName0 = QName.get("org.dom4j.tree.ContentListFacade");
      DefaultElement defaultElement0 = new DefaultElement(qName0, 1);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, linkedList0);
      int int0 = contentListFacade0.lastIndexOf(namespace0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      int int0 = contentListFacade0.lastIndexOf(namespace0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement((String) null);
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "");
      linkedList0.addLast(dOMNamespace0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, linkedList0);
      int int0 = contentListFacade0.indexOf((Namespace) dOMNamespace0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.get("", "Invalid node type: ");
      NonLazyElement nonLazyElement0 = new NonLazyElement("", namespace0);
      DOMNamespace dOMNamespace0 = new DOMNamespace(nonLazyElement0, "", "5");
      linkedList0.addLast(dOMNamespace0);
      Namespace namespace1 = Namespace.NO_NAMESPACE;
      linkedList0.offerFirst(namespace1);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      int int0 = contentListFacade0.indexOf((Namespace) dOMNamespace0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement("6g6Q", object0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, (List<Namespace>) null);
      List<Namespace> list0 = contentListFacade0.getBackingList();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultElement defaultElement0 = new DefaultElement((QName) null);
      List<Namespace> list0 = defaultElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultElement0, list0);
      ContentListFacade<Namespace> contentListFacade1 = new ContentListFacade<Namespace>(defaultElement0, contentListFacade0);
      List<Namespace> list1 = contentListFacade1.getBackingList();
      assertTrue(list1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("", (String) null);
      BeanElement beanElement0 = new BeanElement("org.dom4j.tree.ContentListFacade", dOMNamespace0, "org.dom4j.tree.ContentListFacade");
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(beanElement0, beanAttributeList0);
      ContentListFacade<DOMNamespace> contentListFacade1 = new ContentListFacade<DOMNamespace>(beanElement0, contentListFacade0);
      List<DOMNamespace> list0 = contentListFacade1.getBackingList();
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      linkedList0.add(namespace0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      Namespace namespace1 = contentListFacade0.get(0);
      assertSame(namespace1, namespace0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      IndexedElement indexedElement0 = new IndexedElement("xmlns");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.toArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>((AbstractBranch) null, (List<DOMNamespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.size();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.set(741, (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("v_`X:K.x;");
      LinkedList<DOMNamespace> linkedList0 = new LinkedList<DOMNamespace>();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(userDataElement0, linkedList0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "");
      // Undeclared exception!
      try { 
        contentListFacade0.set(4638, dOMNamespace0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4638, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      Namespace namespace0 = new Namespace("", "");
      NonLazyElement nonLazyElement0 = new NonLazyElement("", namespace0);
      List<Namespace> list0 = nonLazyElement0.getNamespacesForURI("");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(dOMDocument0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.set(629, namespace0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 629
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", "");
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      contentListFacade0.removeAll(beanAttributeList0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      // Undeclared exception!
      try { 
        contentListFacade0.remove(namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(947);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(11);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 11, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<q~E}VE6U5Tf");
      List<Namespace> list0 = nonLazyElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove((-2172));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2,172, Size: 0
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("", "");
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove(1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to org.dom4j.Node
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList((BeanElement) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove((-15));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument("");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument("/7Gm");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.indexOf((Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement((QName) null);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(userDataElement0, (List<DOMNamespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.get(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.get(1353);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1353, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      List<Namespace> list0 = nonLazyElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.get(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.dom4j.tree.LazyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(dOMDocument0, (List<DOMNamespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.containsAll((Collection<?>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("L0&z@]");
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.contains((Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack(defaultDocumentFactory0);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = namespaceStack0.pushQName("class", "class", namespace0, (String) null);
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      BaseElement baseElement0 = new BaseElement(qName0);
      List<Namespace> list0 = baseElement0.additionalNamespaces((String) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(indexedElement0, list0);
      BeanElement beanElement0 = new BeanElement(qName0);
      Class<String> class0 = String.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0, beanMetaData0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) beanAttributeList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The node \"org.dom4j.bean.BeanAttribute@0000000023\" could not be added to the element \"xml:class\" because: The Node already has an existing parent of \"xml:class\"
         //
         verifyException("org.dom4j.tree.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      linkedList0.offerFirst((Namespace) null);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanElement beanElement0 = new BeanElement("L*rAk8", "");
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) beanAttributeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((Collection<? extends Namespace>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<q~E}VE6U5Tf");
      List<Namespace> list0 = nonLazyElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      LinkedList<DOMNamespace> linkedList0 = new LinkedList<DOMNamespace>();
      DOMNamespace dOMNamespace0 = new DOMNamespace("wBTq|wN<q~E}VE6U5Tf", "5em");
      linkedList0.add(dOMNamespace0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(0, (Collection<? extends Namespace>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The node \"org.dom4j.dom.DOMNamespace@0000000007\" could not be added to the element \"wBTq|wN<q~E}VE6U5Tf\" because: The Node already has an existing parent of \"wBTq|wN<q~E}VE6U5Tf\"
         //
         verifyException("org.dom4j.tree.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      linkedList0.offerFirst((Namespace) null);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(1, (Collection<? extends Namespace>) linkedList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("ben>Vmh-9pqjhY&$", "ben>Vmh-9pqjhY&$");
      BeanElement beanElement0 = new BeanElement("ben>Vmh-9pqjhY&$", dOMDocumentType0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(32, (Collection<? extends Namespace>) beanAttributeList0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(int,Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, (List<Namespace>) null);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(12, (Collection<? extends Namespace>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      linkedList0.offerFirst((Namespace) null);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll((-1), (Collection<? extends Namespace>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1, Size: 1
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<q~E}VE6U5Tf");
      List<Namespace> list0 = nonLazyElement0.declaredNamespaces();
      LinkedList<DOMNamespace> linkedList0 = new LinkedList<DOMNamespace>();
      DOMNamespace dOMNamespace0 = new DOMNamespace(";fq0yBvj", "[");
      linkedList0.add(dOMNamespace0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.addAll(198, (Collection<? extends Namespace>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index value: 198 cannot be greater than the size: 0
         //
         verifyException("org.dom4j.tree.BackedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      QName qName0 = QName.get((String) null, (String) null, (String) null);
      IndexedElement indexedElement0 = new IndexedElement(qName0, 1178);
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BaseElement baseElement0 = new BaseElement("", namespace0);
      BackedList<DOMNamespace> backedList0 = baseElement0.createResultList();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(indexedElement0, backedList0);
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "");
      // Undeclared exception!
      try { 
        contentListFacade0.add(dOMNamespace0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The node \"org.dom4j.dom.DOMNamespace@0000000013\" could not be added to the element \"xml:\" because: The Node already has an existing parent of \"\"
         //
         verifyException("org.dom4j.tree.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("ben>Vmh-9pqjhY&$", "ben>Vmh-9pqjhY&$");
      BeanElement beanElement0 = new BeanElement("ben>Vmh-9pqjhY&$", dOMDocumentType0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.add((Namespace) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.add((Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("O", "O");
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      Namespace namespace0 = Namespace.get("O");
      // Undeclared exception!
      try { 
        contentListFacade0.add((-3914), namespace0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // add(int,Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("wBTq|wN<q~E}VE6U5Tf", (Namespace) null);
      List<Namespace> list0 = baseElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.add(Integer.MAX_VALUE, (Namespace) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<~EPVEU5Tf", (Namespace) null);
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.add(6, (Namespace) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<q~E}VE6U5Tf");
      List<Namespace> list0 = nonLazyElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.add(Integer.MAX_VALUE, (Namespace) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index value: 2147483647 cannot be greater than the size: 0
         //
         verifyException("org.dom4j.tree.BackedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DefaultDocument defaultDocument0 = new DefaultDocument(dOMDocumentType0);
      BeanElement beanElement0 = new BeanElement("y]KZ;CiDXVuAt", defaultDocument0);
      List<Namespace> list0 = beanElement0.declaredNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, list0);
      boolean boolean0 = contentListFacade0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.get("org.dom4j.xpath.DefaultXPath", "\"wLF\"zQ5A-n `D_");
      QName qName0 = new QName(" [DocumentType: ", namespace0, " [DocumentType: ");
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, object0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>((AbstractBranch) null, beanAttributeList0);
      boolean boolean0 = contentListFacade0.containsAll(linkedList0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      BeanElement beanElement0 = new BeanElement("Ya3^s", "Ya3^s");
      LinkedList<DOMNamespace> linkedList0 = new LinkedList<DOMNamespace>();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(beanElement0, linkedList0);
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      boolean boolean0 = contentListFacade0.containsAll(beanAttributeList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      linkedList0.add(namespace0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      boolean boolean0 = contentListFacade0.contains(namespace0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.get("org.dom4j.xpath.DefaultXPath", "\"wLF\"zQ5A-n `D_");
      QName qName0 = new QName(" [DocumentType: ", namespace0, " [DocumentType: ");
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, object0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, linkedList0);
      boolean boolean0 = contentListFacade0.contains(namespace0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Namespace namespace0 = Namespace.get("org.dom4j.xpath.DefaultXPath", "\"wLF\"zQ5A-n `D_");
      QName qName0 = new QName(" [DocumentType: ", namespace0, " [DocumentType: ");
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, object0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>((AbstractBranch) null, beanAttributeList0);
      boolean boolean0 = contentListFacade0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("S");
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, linkedList0);
      contentListFacade0.add((Namespace) null);
      boolean boolean0 = contentListFacade0.removeAll(contentListFacade0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Class<Integer> class0 = Integer.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList((BeanElement) null);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.removeAll(beanAttributeList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("S");
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, linkedList0);
      boolean boolean0 = contentListFacade0.removeAll(contentListFacade0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      linkedList0.add(namespace0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.get("org.dom4j.xpath.DefaultXPath", "\"wLF\"zQ5A-n `D_");
      QName qName0 = new QName(" [DocumentType: ", namespace0, " [DocumentType: ");
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, object0);
      Class<Object> class0 = Object.class;
      BeanMetaData beanMetaData0 = new BeanMetaData(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, linkedList0);
      boolean boolean0 = contentListFacade0.addAll(0, (Collection<? extends Namespace>) beanAttributeList0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<q~E}VE6U5Tf");
      DOMNamespace dOMNamespace0 = new DOMNamespace("kP))$", "wBTq|wN<q~E}VE6U5Tf");
      QName qName0 = QName.get("wBTq|wN<q~E}VE6U5Tf", (Namespace) null, "kP))$");
      BeanElement beanElement0 = new BeanElement(qName0, dOMNamespace0);
      List<Namespace> list0 = beanElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      boolean boolean0 = contentListFacade0.addAll(4, (Collection<? extends Namespace>) list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<q~E}VE6U5Tf");
      DOMNamespace dOMNamespace0 = new DOMNamespace("kP))$", "wBTq|wN<q~E}VE6U5Tf");
      QName qName0 = QName.get("wBTq|wN<q~E}VE6U5Tf", (Namespace) null, "kP))$");
      BeanElement beanElement0 = new BeanElement(qName0, dOMNamespace0);
      List<Namespace> list0 = beanElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      boolean boolean0 = contentListFacade0.addAll((Collection<? extends Namespace>) list0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      linkedList0.add(namespace0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.remove((Object) namespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("org.dom4j.tree.DefaultNamespace");
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("QT", "", "QT");
      DefaultDocument defaultDocument0 = new DefaultDocument("org.dom4j.tree.DefaultNamespace", baseElement0, dOMDocumentType0);
      BeanElement beanElement0 = new BeanElement("", baseElement0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, beanAttributeList0);
      Namespace namespace0 = contentListFacade0.remove(2);
      assertNull(namespace0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      QName qName0 = new QName("Invalid node type: ");
      BeanElement beanElement0 = new BeanElement(qName0);
      BeanAttributeList beanAttributeList0 = new BeanAttributeList(beanElement0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, beanAttributeList0);
      // Undeclared exception!
      try { 
        contentListFacade0.set(47, (Namespace) null);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // set(int,Object) unsupported
         //
         verifyException("org.dom4j.bean.BeanAttributeList", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      Namespace namespace0 = Namespace.get("org.dom4j.xpath.DefaultXPath", "\"wLF\"zQ5A-n `D_");
      QName qName0 = new QName(" [DocumentType: ", namespace0, " [DocumentType: ");
      Object object0 = new Object();
      BeanElement beanElement0 = new BeanElement(qName0, object0);
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(beanElement0, linkedList0);
      int int0 = contentListFacade0.indexOf(namespace0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.toArray((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultDocument defaultDocument0 = new DefaultDocument((String) null);
      QName qName0 = QName.get("-H3%S.", "");
      DOMElement dOMElement0 = new DOMElement(qName0);
      List<Namespace> list0 = dOMElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, list0);
      Namespace namespace0 = Namespace.get("Ko'L}V.S31", "Ko'L}V.S31");
      boolean boolean0 = contentListFacade0.remove(namespace0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("wBTq|wN<q~E}VE6U5Tf");
      DOMNamespace dOMNamespace0 = new DOMNamespace("kP))$", "wBTq|wN<q~E}VE6U5Tf");
      QName qName0 = QName.get("wBTq|wN<q~E}VE6U5Tf", (Namespace) null, "kP))$");
      BeanElement beanElement0 = new BeanElement(qName0, dOMNamespace0);
      List<Namespace> list0 = beanElement0.additionalNamespaces();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(nonLazyElement0, list0);
      // Undeclared exception!
      try { 
        contentListFacade0.add(0, (Namespace) dOMNamespace0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The node \"org.dom4j.dom.DOMNamespace@0000000004\" could not be added to the element \"kP))$\" because: The Node already has an existing parent of \"wBTq|wN<q~E}VE6U5Tf\"
         //
         verifyException("org.dom4j.tree.AbstractElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      ContentListFacade<DOMNamespace> contentListFacade0 = new ContentListFacade<DOMNamespace>(dOMDocument0, (List<DOMNamespace>) null);
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "The Node already has an existing document: ");
      // Undeclared exception!
      try { 
        contentListFacade0.lastIndexOf(dOMNamespace0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      linkedList0.offerFirst((Namespace) null);
      DefaultDocument defaultDocument0 = new DefaultDocument();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>(defaultDocument0, linkedList0);
      // Undeclared exception!
      contentListFacade0.addAll((Collection<? extends Namespace>) contentListFacade0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LinkedList<Namespace> linkedList0 = new LinkedList<Namespace>();
      ContentListFacade<Namespace> contentListFacade0 = new ContentListFacade<Namespace>((AbstractBranch) null, linkedList0);
      // Undeclared exception!
      try { 
        contentListFacade0.toArray();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // [Ljava.lang.Object; cannot be cast to [Lorg.dom4j.Node;
         //
         verifyException("org.dom4j.tree.ContentListFacade", e);
      }
  }
}

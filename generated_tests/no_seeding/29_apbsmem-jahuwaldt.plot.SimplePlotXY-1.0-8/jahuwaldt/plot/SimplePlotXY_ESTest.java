/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 13:25:42 GMT 2019
 */

package jahuwaldt.plot;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import jahuwaldt.plot.CircleSymbol;
import jahuwaldt.plot.LinearAxisScale;
import jahuwaldt.plot.PlotAxis;
import jahuwaldt.plot.PlotRunList;
import jahuwaldt.plot.PlotSymbol;
import jahuwaldt.plot.PlotXAxis;
import jahuwaldt.plot.SimplePlotXY;
import jahuwaldt.plot.TabDSymbol;
import jahuwaldt.plot.ThinRect2Symbol;
import java.awt.Component;
import java.text.ChoiceFormat;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.text.DefaultCaret;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimplePlotXY_ESTest extends SimplePlotXY_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      NumberFormat numberFormat0 = NumberFormat.getCurrencyInstance();
      Locale locale0 = Locale.KOREA;
      NumberFormat numberFormat1 = NumberFormat.getPercentInstance(locale0);
      ThinRect2Symbol thinRect2Symbol0 = new ThinRect2Symbol();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "&8", "&8", "&8", numberFormat0, numberFormat1, thinRect2Symbol0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      double[] doubleArray1 = new double[5];
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      NumberFormat numberFormat0 = mockSimpleDateFormat0.getNumberFormat();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "jahuwaldt.plot.SimplePlotXY", (String) null, (String) null, numberFormat0, numberFormat0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double[] doubleArray0 = new double[9];
      double[] doubleArray1 = new double[5];
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray1, "", "", "", (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistant array sizes.
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double[] doubleArray0 = new double[2];
      NumberFormat numberFormat0 = NumberFormat.getPercentInstance();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "", numberFormat0, numberFormat0, (PlotSymbol) null);
      simplePlotXY0.getVerticalAxis();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double[] doubleArray0 = new double[8];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", (String) null, (String) null, (NumberFormat) null, (NumberFormat) null);
      simplePlotXY0.setTitle((String) null);
      simplePlotXY0.getTitle();
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      ChoiceFormat choiceFormat0 = new ChoiceFormat("");
      DecimalFormat decimalFormat0 = new DecimalFormat("");
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(plotRunList0, "sfur5L4k>gUq>zh]8A%", "sfur5L4k>gUq>zh]8A%", "sfur5L4k>gUq>zh]8A%", choiceFormat0, decimalFormat0);
      simplePlotXY0.getTitle();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY((PlotRunList) null, (String) null, "", "", (NumberFormat) null, (NumberFormat) null);
      PlotRunList plotRunList0 = simplePlotXY0.getRuns();
      assertNull(plotRunList0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotRunList plotRunList0 = simplePlotXY0.getRuns();
      assertEquals(0, plotRunList0.size());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxis plotAxis0 = simplePlotXY0.getHorizontalAxis();
      assertNull(plotAxis0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "}+S(y/(GvqaVX", (NumberFormat) null, (NumberFormat) null);
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      PlotXAxis plotXAxis0 = new PlotXAxis("}+S(y/(GvqaVX", linearAxisScale0, (NumberFormat) null, (-830));
      PlotRunList plotRunList0 = new PlotRunList();
      plotXAxis0.setAxisBounds(plotRunList0);
      simplePlotXY0.setHorizontalAxis(plotXAxis0);
      simplePlotXY0.getHorizontalAxis();
      assertEquals("", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "}+S(y/(GvqaVX", (NumberFormat) null, (NumberFormat) null);
      LinearAxisScale linearAxisScale0 = new LinearAxisScale();
      PlotXAxis plotXAxis0 = new PlotXAxis("}+S(y/(GvqaVX", linearAxisScale0, (NumberFormat) null, (-830));
      simplePlotXY0.setHorizontalAxis(plotXAxis0);
      simplePlotXY0.getHorizontalAxis();
      assertEquals("", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      // Undeclared exception!
      try { 
        simplePlotXY0.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DecimalFormat decimalFormat0 = new DecimalFormat();
      CircleSymbol circleSymbol0 = new CircleSymbol();
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY((double[]) null, (double[]) null, "", "", "eX{b5o8_0<%", decimalFormat0, decimalFormat0, circleSymbol0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      double[] doubleArray0 = new double[14];
      DecimalFormat decimalFormat0 = new DecimalFormat();
      double[] doubleArray1 = new double[0];
      TabDSymbol tabDSymbol0 = new TabDSymbol();
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY(doubleArray1, doubleArray0, "-e)e!k)UyVlG@W&`", "", (String) null, decimalFormat0, decimalFormat0, tabDSymbol0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Inconsistant array sizes.
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = null;
      try {
        simplePlotXY0 = new SimplePlotXY((double[]) null, (double[]) null, (String) null, (String) null, (String) null, (NumberFormat) null, (NumberFormat) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jahuwaldt.plot.SimplePlotXY", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(plotRunList0, "j6&tq>{Yis^-2;mIbJ", "j6&tq>{Yis^-2;mIbJ", "j6&tq>{Yis^-2;mIbJ", (NumberFormat) null, (NumberFormat) null);
      // Undeclared exception!
      try { 
        simplePlotXY0.draw(debugGraphics0, (Component) null, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "}+S(y/(GvqaVX", (NumberFormat) null, (NumberFormat) null);
      PlotAxis plotAxis0 = simplePlotXY0.getHorizontalAxis();
      assertEquals("", simplePlotXY0.getTitle());
      assertEquals(2, plotAxis0.getGridStyle());
      assertEquals("", plotAxis0.getLabel());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      PlotAxis plotAxis0 = simplePlotXY0.getVerticalAxis();
      assertNull(plotAxis0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PlotRunList plotRunList0 = new PlotRunList();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(plotRunList0, (String) null, (String) null, (String) null, (NumberFormat) null, (NumberFormat) null);
      // Undeclared exception!
      try { 
        simplePlotXY0.draw(debugGraphics0, (Component) null, defaultCaret0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "}+S(y/(GvqaVX", (NumberFormat) null, (NumberFormat) null);
      simplePlotXY0.getRuns();
      assertEquals("", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "}+S(y/(GvqaVX", (NumberFormat) null, (NumberFormat) null);
      SimplePlotXY simplePlotXY1 = (SimplePlotXY)simplePlotXY0.clone();
      assertEquals("", simplePlotXY1.getTitle());
      assertNotSame(simplePlotXY1, simplePlotXY0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      Locale locale0 = new Locale("idie ");
      NumberFormat numberFormat0 = NumberFormat.getIntegerInstance(locale0);
      CircleSymbol circleSymbol0 = new CircleSymbol();
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "", numberFormat0, numberFormat0, circleSymbol0);
      String string0 = simplePlotXY0.getTitle();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      double[] doubleArray0 = new double[3];
      SimplePlotXY simplePlotXY0 = new SimplePlotXY(doubleArray0, doubleArray0, "", "", "}+S(y/(GvqaVX", (NumberFormat) null, (NumberFormat) null);
      PlotRunList plotRunList0 = new PlotRunList();
      simplePlotXY0.setRuns(plotRunList0);
      assertEquals("", simplePlotXY0.getTitle());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimplePlotXY simplePlotXY0 = new SimplePlotXY();
      simplePlotXY0.setVerticalAxis((PlotAxis) null);
      assertNull(simplePlotXY0.getTitle());
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 14:27:54 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.FurnitureCategory;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HomeFurnitureGroup_ESTest extends HomeFurnitureGroup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[1] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[18];
      floatArray1[1] = (-11.308048F);
      floatArray1[1] = (-1642.05F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      URL uRL0 = resourceURLContent0.getJAREntryURL();
      assertNull(uRL0.getRef());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getAuthority());
      assertEquals("", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(uRL0);
      
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-11.308048F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-11.308048F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-11.308048F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-11.308048F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-11.308048F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-11.308048F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-11.308048F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-11.308048F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-11.308048F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-11.308048F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(11.308048F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setElevation((-1063.3756F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1063.3756F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(11.308048F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      Integer integer0 = new Integer(3);
      assertEquals(3, (int)integer0);
      assertNotNull(integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1063.3756F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(11.308048F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(3, (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      homeFurnitureGroup0.setY(3);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1063.3756F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(11.308048F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(3.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(3, (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1063.3756F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(11.308048F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(3.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(3, (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1063.3756F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(11.308048F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(3.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(3, (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2635.0789F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1063.3756F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setElevation(0.0F);
      Integer integer0 = new Integer((-369));
      homeFurnitureGroup1.setColor(integer0);
      homeFurnitureGroup1.setY(228.3F);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setWidth((-1437L));
      homeFurnitureGroup0.isResizable();
      homeFurnitureGroup0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[15];
      stringArray0[3] = "";
      Long long0 = new Long(2080L);
      Float float0 = new Float((float) 2080L);
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, 2080L, 2080L, 2080L, 2080L, true, 2080L, 2080L, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setDepth(2080L);
      homeFurnitureGroup0.setElevation(2728.952F);
      Integer.getInteger("com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[3][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1063.3756F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (float) (-1437L);
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 3629.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (-2397.05F);
      floatArray2[1] = 0.5F;
      floatArray2[2] = 3629.0F;
      floatArray2[3] = (-774.1604F);
      floatArray2[4] = (-1063.3756F);
      floatArray2[5] = (-1.0F);
      floatArray2[6] = (float) (-1437L);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.5F;
      floatArray3[1] = (-2298.796F);
      floatArray3[2] = (float) (-1437L);
      floatArray3[3] = 3629.0F;
      floatArray3[4] = 3629.0F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", temporaryURLContent0, resourceURLContent0, resourceURLContent0, (-2298.796F), (-2397.05F), (-2397.05F), (-2397.05F), true, 3629.0F, (-1.0F), sashArray0, floatArray0, "Soq]^Jl>c", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      linkedList0.add(homePieceOfFurniture0);
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      float[][] floatArray4 = new float[4][3];
      resourceURLContent0.getJAREntryName();
      float[] floatArray5 = new float[11];
      floatArray5[0] = (-1642.05F);
      floatArray5[2] = (-135.21051F);
      floatArray5[3] = (-1063.3756F);
      floatArray4[1] = floatArray4[0];
      floatArray4[3] = floatArray4[0];
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray4, "", true, true, true, bigDecimal1, bigDecimal1, "");
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow3);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.isNameCenterPointAt(2606.44F, 0.0F, (-1642.05F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setAngle(692.862F);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getIcon();
      homeFurnitureGroup0.getFurniture();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setHeight(0.0F);
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.setMovable(false);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[9][3];
      float[] floatArray1 = new float[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "~[[`:gHu~q|VqCe", "~[[`:gHu~q|VqCe", "", stringArray0, long0, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-135.21051F), 0.0F, true, 169.025F, (-1437L), sashArray0, floatArray0, "~[[`:gHu~q|VqCe", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "7)`x)j'?4");
      homeFurnitureGroup1.isModelMirrored();
      homeFurnitureGroup0.setDepth(0.0F);
      homeFurnitureGroup1.setElevation(1574.52F);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[1] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[1] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setElevation((-1370.1353F));
      homeFurnitureGroup0.setElevation(559.0F);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup((List<HomePieceOfFurniture>) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeFurnitureGroup", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[22][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      catalogDoorOrWindow0.setCategory((FurnitureCategory) null);
      homeFurnitureGroup0.setX((-1.0F));
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 1543.5392F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNotNull(homeFurnitureGroup0);
      
      Integer integer0 = homeFurnitureGroup0.getColor();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(integer0);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      
      Integer integer1 = new Integer((-1));
      assertEquals((-1), (int)integer1);
      assertNotNull(integer1);
      
      homeFurnitureGroup0.setColor(integer1);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1), (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup1.getName());
      assertEquals(1437.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals((-1), (int)homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals((-1437.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1), (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.2751F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.isModelMirrored();
      homeFurnitureGroup0.setDepth((-1.0F));
      homeFurnitureGroup0.setElevation(0.0F);
      homeFurnitureGroup0.setX(0.0F);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 26.133795F);
      sashArray0[0] = sash0;
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "~[[`:gHu~q|VqCe", "~[[`:gHu~q|VqCe", "", stringArray0, long0, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1642.05F), (-135.21051F), (-1370.1353F), true, 169.025F, (-1063.3756F), sashArray0, floatArray0, "~[[`:gHu~q|VqCe", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "");
      homeFurnitureGroup0.setWidth((-861.82F));
      homeFurnitureGroup0.isResizable();
      homeFurnitureGroup0.isBackFaceShown();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      BigDecimal bigDecimal1 = new BigDecimal(2146115267);
      bigDecimal0.max(bigDecimal1);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "os.name");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.setX(313.3091F);
      homeFurnitureGroup1.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-135.21051F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.setModelMirrored(false);
      homeFurnitureGroup0.containsPoint(589.12F, 589.12F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setDepth(589.12F);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      CatalogTexture catalogTexture0 = new CatalogTexture("Au", "Au", resourceURLContent0, (-1909.1F), 0.0F, "");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      homeFurnitureGroup0.setTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setDepth((-1.0F));
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(class0, "");
      TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent1);
      Long.getLong("");
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow1.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setHeight(589.12F);
      homeFurnitureGroup0.setAngle((-499.8F));
      Integer integer0 = new Integer((-1344));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setDepth((-1063.3756F));
      homeFurnitureGroup0.getDepth();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setWidth(1189.06F);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[22][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), 589.12F, true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setDepth(589.12F);
      homeFurnitureGroup0.setElevation(2);
      Random.setNextRandom(2);
      Integer.getInteger("");
      homeFurnitureGroup0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Long.compare(471L, 471L);
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setHeight(0.0F);
      homeFurnitureGroup0.setAngle((-2125.444F));
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Long.getLong("");
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow1.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setHeight(589.12F);
      homeFurnitureGroup0.setAngle((-499.8F));
      Integer integer0 = new Integer((-1344));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setDepth((-135.21051F));
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[11];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setWidth(2062.223F);
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "iu,Y,{qM vnODgajy]t");
      homeFurnitureGroup0.setY(0.0F);
      HomeFurnitureGroup homeFurnitureGroup2 = homeFurnitureGroup0.clone();
      homeFurnitureGroup2.isDeformable();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[3][6];
      float[] floatArray1 = new float[5];
      floatArray1[0] = (-1063.3756F);
      floatArray1[1] = (-1.0F);
      floatArray1[2] = (float) (-1437L);
      floatArray1[3] = (-1.0F);
      floatArray1[4] = 3629.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = (-1.0F);
      floatArray2[1] = 0.5F;
      floatArray2[2] = 3629.0F;
      floatArray2[3] = (-774.1604F);
      floatArray2[4] = (-1063.3756F);
      floatArray2[5] = (-1.0F);
      floatArray2[6] = (float) (-1437L);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 0.5F;
      floatArray3[1] = (-2298.796F);
      floatArray3[2] = (float) (-1437L);
      floatArray3[3] = 3629.0F;
      floatArray3[4] = 3629.0F;
      floatArray0[2] = floatArray3;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", temporaryURLContent0, resourceURLContent0, resourceURLContent0, (-2298.796F), (-2298.796F), (-2298.796F), (-2298.796F), true, 3629.0F, (-1.0F), sashArray0, floatArray0, "Soq]^Jl>c", true, bigDecimal0, bigDecimal0);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow1.clone();
      linkedList0.add(homePieceOfFurniture0);
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      float[][] floatArray4 = new float[4][3];
      resourceURLContent0.getJAREntryName();
      float[] floatArray5 = new float[11];
      floatArray5[2] = (-135.21051F);
      floatArray5[3] = (-1063.3756F);
      floatArray4[1] = floatArray4[0];
      floatArray4[3] = floatArray4[0];
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray4, "", true, true, true, bigDecimal1, bigDecimal1, "");
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow3);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.isNameCenterPointAt(2606.44F, 0.0F, (-1642.05F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setHeight(0.0F);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1419L));
      Float float0 = new Float((float) (-1419L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[4];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1419L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1419L), (-1419L), (-15.015028F), 589.12F, true, (-15.015028F), (-1419L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      Float float1 = new Float(1000.0F);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "s,1V?Wis^ `pw@9P", "", "", stringArray0, long0, float1, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1419L), 589.12F, 589.12F, 589.12F, true, 589.12F, (-15.015028F), sashArray0, floatArray0, "MbBD\nY/up_Lt", true, true, false, bigDecimal0, bigDecimal1, "");
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setHeight((-15.015028F));
      homeFurnitureGroup0.setHeight((-15.015028F));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), 2606.44F, 2606.44F, (-1437L), (-1437L));
      sashArray0[1] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1.0F);
      floatArray1[1] = (-1642.05F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setElevation((-1063.3756F));
      Integer integer0 = new Integer(3);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setY(3);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[3] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.getLevel();
      homeFurnitureGroup0.setLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[3] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      Level level0 = new Level("", 3.4028235E38F, (-1437L), (-902.9137F));
      homeDoorOrWindow0.setLevel(level0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[9][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "~[[`:gHu~q|VqCe", "~[[`:gHu~q|VqCe", "", stringArray0, long0, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1642.05F), (-135.21051F), (-1642.05F), true, 169.025F, (-1437L), sashArray0, floatArray0, "~[[`:gHu~q|VqCe", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(298);
      // Undeclared exception!
      try { 
        homeFurnitureGroup1.setColor(integer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't texturable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.clone();
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[5];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-15.015028F), 589.12F, true, (-15.015028F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow1.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.isMovable();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long(1819L);
      Float float0 = new Float((float) 1819L);
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, 1819L, 1819L, (-1063.3756F), 566.24646F, true, (-1063.3756F), 1819L, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.containsPoint(0.0F, (-1063.3756F), 1189.06F);
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup1.setTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2");
      homeFurnitureGroup0.setWidth(2606.44F);
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setX((-1437.0F));
      homeFurnitureGroup0.setModelMirrored(true);
      homeFurnitureGroup0.getPrice();
      homeFurnitureGroup0.setX(0.0F);
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.0F), (-1.0F), true, (-1063.0F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.getDepth();
      homeFurnitureGroup0.isDoorOrWindow();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.getCurrency();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[5];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), 589.12F, true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setDepth(589.12F);
      homeFurnitureGroup0.setElevation(2);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1416L));
      Float float0 = new Float((float) (-1416L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1416L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1416L), (-1416L), (-1416L), (-1416L), true, (-1416L), (-1416L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      Level level0 = new Level("", (-1416L), (-1416L), (-1416L));
      level0.clone();
      homeDoorOrWindow0.setLevel(level0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setLevel(level0);
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.getWidth();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[9][3];
      float[] floatArray1 = new float[4];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "~[[`:gHu~q|VqCe", "~[[`:gHu~q|VqCe", "", stringArray0, long0, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1642.05F), (-135.21051F), 0.0F, true, 169.025F, (-1437L), sashArray0, floatArray0, "~[[`:gHu~q|VqCe", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(0.0F);
      homeFurnitureGroup0.isResizable();
      linkedList0.offerFirst(homeDoorOrWindow0);
      homeFurnitureGroup0.isBackFaceShown();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[6][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(6, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNotNull(homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(string0);
      
      homeFurnitureGroup0.setDepth((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      
      boolean boolean1 = homeFurnitureGroup0.isDeformable();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[9][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      resourceURLContent0.getJAREntryName();
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "~[[`:gHu~q|VqCe", "~[[`:gHu~q|VqCe", "", stringArray0, long0, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1642.05F), (-135.21051F), (-1642.05F), true, 169.025F, (-1437L), sashArray0, floatArray0, "~[[`:gHu~q|VqCe", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth(1.0F);
      homeFurnitureGroup0.isResizable();
      linkedList0.offerFirst(homeDoorOrWindow0);
      homeFurnitureGroup0.isBackFaceShown();
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.getWidth();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[4];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.move(1.0F, (-1063.3756F));
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      System.setCurrentTimeMillis((-1437L));
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      float float1 = (-1.0F);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), false, (-1437L), (-1437L), sashArray0, floatArray0, "", false, false, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[11];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      Long long1 = new Long(0L);
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", (String) null, stringArray0, long1, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), 0L, 0L, (-1063.3756F), true, (-1063.3756F), 1124.87F, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, (String) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth((-1437L));
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
      homeFurnitureGroup0.setY((-1612.887F));
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[13];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      homeDoorOrWindow1.setAngle((-1437L));
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setWidth(2606.44F);
      homeFurnitureGroup0.getColor();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      Integer integer0 = new Integer(298);
      homeFurnitureGroup1.setColor(integer0);
      homeFurnitureGroup1.setY(2.0F);
      homeFurnitureGroup0.getValueAddedTaxPercentage();
      homeFurnitureGroup1.setDepth(2606.44F);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow3);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getTexture();
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      Integer integer0 = new Integer(17);
      homeFurnitureGroup0.setColor(integer0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1060.9003F), (-1.0F), true, (-1060.9003F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.push(homeDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setHeight((-1437L));
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      ResourceURLContent resourceURLContent1 = new ResourceURLContent(class0, "");
      TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent1);
      Long.getLong("");
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      homeDoorOrWindow1.clone();
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setHeight(589.12F);
      homeFurnitureGroup0.setAngle((-499.8F));
      Integer integer0 = new Integer((-1344));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setDepth((-1063.3756F));
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[19];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[13];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), 602.997F, true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setDepth(602.997F);
      homeFurnitureGroup0.setElevation(2);
      Integer.getInteger("");
      homeFurnitureGroup0.setColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-1063.3756F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 566.24646F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      BigDecimal bigDecimal1 = BigDecimal.TEN;
      bigDecimal0.max(bigDecimal1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup2 = new HomeFurnitureGroup(linkedList0, "applicationSubFolder.Mac OS X");
      homeFurnitureGroup2.setHeight((-1891.1808F));
      homeFurnitureGroup1.setAngle((-1063.3756F));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1416L));
      Float float0 = new Float((float) (-1416L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1416L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1416L), (-1416L), (-1416L), (-1416L), true, (-1416L), (-1416L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      Level level0 = new Level("", (-1416L), (-1416L), (-1416L));
      level0.clone();
      homeDoorOrWindow0.setLevel(level0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.getIcon();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[11];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setAngle((-1.0F));
      homeFurnitureGroup0.getPlanIcon();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      homeFurnitureGroup0.addPropertyChangeListener(propertyChangeListenerProxy0);
      homeFurnitureGroup0.getWidth();
      homeFurnitureGroup0.setWidth((-1063.3756F));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[10];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      Long.divideUnsigned(744L, (-90L));
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.isDeformable();
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      resourceURLContent0.getJAREntryURL();
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.setWidth((-1437L));
      homeFurnitureGroup0.getModelRotation();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2");
      homeFurnitureGroup0.setWidth(319.68082F);
      homeFurnitureGroup0.getColor();
      Integer integer0 = new Integer((-2144713273));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setY((-1437.0F));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getHeight();
      homeFurnitureGroup0.setDepth(0.3926991F);
      homeFurnitureGroup0.getModel();
      homeFurnitureGroup0.getCatalogId();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 2.899492F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(2.899492F, 2.899492F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setY((-1437L));
      homeFurnitureGroup0.setHeight(0.0F);
      homeFurnitureGroup0.isTexturable();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setX((-1.0F));
      homeFurnitureGroup0.isDoorOrWindow();
      System.setCurrentTimeMillis(0L);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[13];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), 589.12F, true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      Integer integer0 = new Integer(2);
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.setDepth(2);
      homeFurnitureGroup0.setElevation(589.12F);
      Integer.getInteger("");
      Integer integer1 = Integer.getInteger("", 2);
      homeFurnitureGroup0.setColor(integer1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-135.21051F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setX((-1.0F));
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.}teks.sweethome3d.model.HomfPieceOfFurnituAe$2");
      homeFurnitureGroup0.setWidth(2606.44F);
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setAngle((-1.0F));
      homeFurnitureGroup0.getPlanIcon();
      homeFurnitureGroup0.getWidth();
      homeFurnitureGroup0.getValueAddedTax();
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setX((-1.0F));
      homeFurnitureGroup0.setModelMirrored(true);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setDepth((-1.0F));
      homeFurnitureGroup0.getValueAddedTax();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[13];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setWidth(2606.44F);
      homeFurnitureGroup0.getColor();
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setWidth((-3467.57F));
      homeFurnitureGroup1.getColor();
      homeFurnitureGroup1.setColor((Integer) null);
      homeFurnitureGroup1.setY((-1.0F));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[9][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "~[[`:gHu~q|VqCe", "~[[`:gHu~q|VqCe", "", stringArray0, long0, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1642.05F), (-135.21051F), (-1370.1353F), true, 169.025F, (-1437L), sashArray0, floatArray0, "~[[`:gHu~q|VqCe", true, true, false, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      LinkedList<HomePieceOfFurniture> linkedList1 = new LinkedList<HomePieceOfFurniture>();
      linkedList1.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList1, "");
      homeFurnitureGroup0.setWidth((-135.21051F));
      homeFurnitureGroup0.isResizable();
      homeFurnitureGroup0.isBackFaceShown();
      homeFurnitureGroup0.clone();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(string0);
      
      homeFurnitureGroup0.setY((-1437L));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      
      homeFurnitureGroup0.setHeight(0.0F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      
      Content content0 = homeFurnitureGroup0.getModel();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethomeCd.model.HomePieceOfFurniture$<", "com.eteks.sweethomeCd.model.HomePieceOfFurniture$<", "com.eteks.sweethomeCd.model.HomePieceOfFurniture$<", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethomeCd.model.HomePieceOfFurniture$<");
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
      Integer integer0 = new Integer((-1));
      homeFurnitureGroup0.setColor(integer0);
      homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      homeFurnitureGroup0.getPrice();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[3] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      Level level0 = new Level("`<0F'TV7WIk~fYE", (-1437L), (-1437L), (-448.9707F));
      Level level1 = level0.clone();
      homeDoorOrWindow0.setLevel(level1);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setColor((Integer) null);
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      homeFurnitureGroup1.isMovable();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.containsPoint(0.0F, 0.0F, 0.0F);
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setDepth((-1063.3756F));
      homeFurnitureGroup0.intersectsRectangle(1063.3756F, 1453.04F, (-1642.05F), (-1.0F));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.getPlanIcon();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      int int0 = Long.compare(471L, 471L);
      assertEquals(0, int0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNotNull(homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setElevation((-1437L));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float1 = homeFurnitureGroup0.getDepth();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, float1, 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[10];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(10, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(10, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(10, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(10, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "|[-");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("|[-", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.isModelMirrored();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("|[-", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup0.setDepth(228.3F);
      assertEquals(1, linkedList0.size());
      assertEquals(228.3F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("|[-", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      
      homeFurnitureGroup0.setElevation((-1437.0F));
      assertEquals(1, linkedList0.size());
      assertEquals(228.3F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("|[-", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[11];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(string0);
      
      homeFurnitureGroup0.setHeight(0.0F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      
      homeFurnitureGroup0.setHeight((-1063.3756F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(string0);
      
      homeFurnitureGroup0.setX((-1.0F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      homeFurnitureGroup0.setHeight((-2257.766F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2257.766F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      homeFurnitureGroup0.setX((-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-2257.766F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isTexturable());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[5];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), 589.12F, true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(5, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(5, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(5, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(5, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(589.12F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(589.12F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getShininess());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(5, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "wOClL|JXOoNf");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals("wOClL|JXOoNf", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(589.12F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(589.12F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-589.12F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNotNull(homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setHeight(2);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup1.setAngle(0.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals("wOClL|JXOoNf", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(589.12F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(589.12F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals((-589.12F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray0[0] = floatArray1;
      floatArray0[3] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      
      Integer integer0 = homeFurnitureGroup0.getColor();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(integer0);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      
      homeFurnitureGroup0.setY((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertEquals(589.12F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("", homeDoorOrWindow2.getName());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight(589.12F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      homeFurnitureGroup0.setAngle((-499.8F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      homeFurnitureGroup0.setDepth((-1437L));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      homeFurnitureGroup0.setElevation((-1437L));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      String string0 = homeFurnitureGroup0.getCurrency();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals("", string0);
      assertNotNull(string0);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((byte)99, bigDecimal1.byteValue());
      assertEquals((short) (-1437), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 1543.5392F);
      assertEquals(1543.5392F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.isResizable();
      assertEquals(1, linkedList0.size());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight((-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-135.21051F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      
      homeFurnitureGroup0.setAngle((-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-135.21051F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(3.0195665F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-135.21051F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(3.0195665F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-135.21051F), float1, 0.01F);
      
      boolean boolean1 = homeFurnitureGroup0.isDoorOrWindow();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-135.21051F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(3.0195665F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar/.eteks/sweethome3d/work/3700-00000000-0100-4000-8200-000003000000/temp0.jar!/com/eteks/sweethome3d/model");
      boolean boolean0 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "1X5OK");
      assertTrue(boolean0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean2 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(string0);
      
      homeFurnitureGroup0.move(1.0F, (-1063.3756F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      
      HomeTexture homeTexture0 = homeFurnitureGroup0.getTexture();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeTexture0);
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      
      System.setCurrentTimeMillis((-1437L));
      homeFurnitureGroup0.setAngle(3.4028235E38F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1.5746664F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.2751F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.2751F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1642.2751F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1642.2751F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup0.setDepth((-1.0F));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1642.2751F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1642.2751F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      homeFurnitureGroup0.setElevation(0.0F);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1642.2751F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[9][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "~[[`:gHu~q|VqCe", "~[[`:gHu~q|VqCe", "", stringArray0, long0, float0, resourceURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1642.05F), (-135.21051F), (-1370.1353F), true, 169.025F, (-1437L), sashArray0, floatArray0, "~[[`:gHu~q|VqCe", true, true, false, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(169.025F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1642.05F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-135.21051F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(169.025F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1642.05F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-135.21051F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1642.05F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-135.21051F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1370.1353F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1370.1353F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(169.025F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow0.getName());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow0.getDescription());
      assertEquals((-821.025F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((-1370.1353F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(169.025F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1642.05F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-821.025F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1370.1353F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-135.21051F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(169.025F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1642.05F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-135.21051F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1642.05F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-135.21051F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1370.1353F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1370.1353F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(169.025F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow0.getName());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow0.getDescription());
      assertEquals((-821.025F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals((-1370.1353F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(169.025F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1642.05F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-821.025F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1370.1353F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-135.21051F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(169.025F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1642.05F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-135.21051F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("~[[`:gHu~q|VqCe", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1642.05F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-135.21051F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1370.1353F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1370.1353F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(169.025F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow0.getName());
      assertEquals("~[[`:gHu~q|VqCe", homeDoorOrWindow0.getDescription());
      assertEquals((-821.025F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(9, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(1370.1353F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth((-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(1370.1353F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      boolean boolean1 = homeFurnitureGroup0.isResizable();
      assertEquals(1, linkedList0.size());
      assertEquals(1370.1353F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = homeFurnitureGroup0.isBackFaceShown();
      assertEquals(1, linkedList0.size());
      assertEquals(1370.1353F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertEquals(1, linkedList0.size());
      assertEquals(1370.1353F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup1.isTexturable());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals((-135.21051F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertEquals((-1370.1353F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getName());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(1370.1353F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup0.setDepth(169.025F);
      assertEquals(1, linkedList0.size());
      assertEquals(169.025F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1370.1353F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Long long1 = Long.getLong("");
      assertNull(long1);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals(589.12F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight(589.12F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      
      homeFurnitureGroup0.setAngle((-499.8F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      
      Integer integer0 = new Integer((-1344));
      assertEquals((-1344), (int)integer0);
      assertNotNull(integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      
      homeFurnitureGroup0.setAngle(1.0F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((short)31916, bigDecimal1.shortValue());
      assertEquals((byte) (-84), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[15];
      stringArray0[3] = "";
      Long long0 = new Long(2080L);
      assertEquals(2080L, (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) 2080L);
      assertEquals(2080.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, 2080L, 2080L, 2080L, 2080L, true, 2080L, 2080L, sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals(2080.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2080.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2080L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(2080.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(2080.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(15, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals(2080.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2080.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2080L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(2080.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(2080.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(2080.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals(2080.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals(2080.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2080.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1040.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1040.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2080.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2080.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2080.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(15, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals(2080.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2080.0F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2080L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(2080.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(2080.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(2080.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(2080.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals(2080.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals(2080.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(2080.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(1040.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(1040.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(2080.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(2080.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(2080.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(boolean0);
      assertEquals(15, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(2080.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2080.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(2080.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2080.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(1040.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1040.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2080.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "xom.eteks.sweethome3d.model.momeFurnitureGroup");
      assertEquals(1040.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2080.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(2080.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1040.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2080.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertEquals(2080.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2080.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotNull(homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(2080.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(2080.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(2080.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2080.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(1040.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1040.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(2080.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(string0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      homeFurnitureGroup1.setWidth((-1.0F));
      assertEquals(1040.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2080.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1040.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2080.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertEquals(2080.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2080.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setWidth((-1.0F));
      assertEquals(1040.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2080.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1040.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2080.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertEquals(2080.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2080.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Content content0 = homeFurnitureGroup1.getIcon();
      assertEquals(1040.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2080.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1040.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2080.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertEquals(2080.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2080.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNull(content0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      float float1 = homeFurnitureGroup1.getHeight();
      assertEquals(1040.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals(2080.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals(1040.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(2080.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertEquals(2080.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(2080.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals(2080.0F, float1, 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(589.12F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals((-589.12F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      boolean boolean1 = homeFurnitureGroup1.containsPoint(0.0F, 0.0F, 1189.06F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(589.12F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals((-589.12F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertFalse(boolean1);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup1.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(589.12F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals((-589.12F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(string0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      HomeTexture homeTexture0 = homeFurnitureGroup1.getTexture();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(589.12F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals((-589.12F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNull(homeTexture0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setTexture((HomeTexture) null);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertEquals(589.12F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertEquals((-589.12F), homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1416L));
      assertEquals((-1416L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1416L));
      assertEquals((-1416.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      floatArray0[1] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1416L));
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1416L), (-1416L), (-1416L), (-1416L), true, (-1416L), (-1416L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      Level level0 = new Level("", (-448.9707F), (-1416L), (-448.9707F));
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-448.9707F), level0.getHeight(), 0.01F);
      assertEquals((-448.9707F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-448.9707F), level0.getHeight(), 0.01F);
      assertEquals((-448.9707F), level0.getElevation(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-448.9707F), level1.getElevation(), 0.01F);
      assertEquals((-1416.0F), level1.getFloorThickness(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals((-448.9707F), level1.getHeight(), 0.01F);
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      
      homeDoorOrWindow0.setLevel(level0);
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-448.9707F), level0.getHeight(), 0.01F);
      assertEquals((-448.9707F), level0.getElevation(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1864.9707F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotSame(level0, level1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(2, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1864.9707F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(boolean1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNotNull(homeFurnitureGroup0);
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1416.0F, float1, 0.01F);
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(content0);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPrice();
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((short) (-2832), bigDecimal1.shortValue());
      assertEquals((byte) (-16), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNotNull(homeFurnitureGroup0);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals((byte)2, bigDecimal1.byteValue());
      assertEquals((short)2, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray0[0] = floatArray1;
      floatArray0[3] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      Integer integer0 = homeFurnitureGroup0.getColor();
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(integer0);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      homeFurnitureGroup0.setY((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      float float1 = homeFurnitureGroup0.getWidth();
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1437.0F), float1, 0.01F);
      
      String string0 = homeFurnitureGroup0.getCurrency();
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      Sash[] sashArray0 = new Sash[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "ro[yH9-ZP/.Vkb", "", (Content) null, resourceURLContent0, (Content) null, 12.8F, 12.8F, 2420.0F, 241.1F, false, (-59.34F), 0.0F, sashArray0, floatArray0, "Application Data", true, true, false, bigDecimal0, bigDecimal0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(12.8F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(12.8F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("ro[yH9-ZP/.Vkb", catalogDoorOrWindow0.getName());
      assertEquals("Application Data", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(241.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-59.34F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2420.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(12.8F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(12.8F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("ro[yH9-ZP/.Vkb", catalogDoorOrWindow0.getName());
      assertEquals("Application Data", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(241.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-59.34F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2420.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("ro[yH9-ZP/.Vkb", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(12.8F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2420.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(12.8F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-59.34F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(6.4F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(6.4F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(241.1F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(241.1F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(12.8F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(12.8F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("ro[yH9-ZP/.Vkb", catalogDoorOrWindow0.getName());
      assertEquals("Application Data", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(241.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-59.34F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2420.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("ro[yH9-ZP/.Vkb", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(12.8F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2420.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(12.8F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-59.34F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(6.4F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(6.4F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(241.1F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(241.1F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("ro[yH9-ZP/.Vkb", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(12.8F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(2420.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(6.4F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(241.1F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(6.4F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-59.34F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(12.8F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(241.1F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals(12.8F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(12.8F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("ro[yH9-ZP/.Vkb", catalogDoorOrWindow0.getName());
      assertEquals("Application Data", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(241.1F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-59.34F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(2420.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("ro[yH9-ZP/.Vkb", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(12.8F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(2420.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(12.8F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals((-59.34F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(6.4F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(6.4F, homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(241.1F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(241.1F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("ro[yH9-ZP/.Vkb", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(12.8F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(2420.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(6.4F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(241.1F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(6.4F, homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-59.34F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(12.8F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(241.1F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(0, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      BigDecimal bigDecimal1 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(2420.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(241.1F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(6.4F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(6.4F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(12.8F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(241.1F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(12.8F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(2420.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1635.65F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-128.81052F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(241.1F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(12.8F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(241.1F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(12.8F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(2420.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1635.65F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-128.81052F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(241.1F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(12.8F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(241.1F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(12.8F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(2420.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1635.65F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-128.81052F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(241.1F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(12.8F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(241.1F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(12.8F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(string0);
      
      homeFurnitureGroup0.setDepth((-1.0F));
      assertEquals(1, linkedList0.size());
      assertEquals(2420.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1635.65F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-128.81052F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(241.1F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(241.1F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(12.8F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      homeFurnitureGroup0.setDepth((-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(2420.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1635.65F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-128.81052F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(241.1F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-135.21051F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(241.1F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(12.8F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[2] = (-135.21051F);
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1, linkedList0.size());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setModelMirrored(true);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(589.12F, 589.12F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(string0);
      
      HomeTexture homeTexture0 = homeFurnitureGroup0.getTexture();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(homeDoorOrWindow1);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow2);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow3.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getCurrency());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertNull(homeDoorOrWindow3.getShininess());
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertEquals((-718.5F), homeDoorOrWindow3.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow3.getX(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow3.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getDescription());
      assertEquals("", homeDoorOrWindow3.getName());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals("", homeDoorOrWindow3.getCatalogId());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow3.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      
      HomeDoorOrWindow homeDoorOrWindow4 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(homeDoorOrWindow4.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow4.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow4.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow4.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow4.getX(), 0.01F);
      assertFalse(homeDoorOrWindow4.isBackFaceShown());
      assertNull(homeDoorOrWindow4.getColor());
      assertFalse(homeDoorOrWindow4.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow4.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow4.getDescription());
      assertEquals("", homeDoorOrWindow4.getName());
      assertFalse(homeDoorOrWindow4.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow4.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow4.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow4.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow4.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow4.isMovable());
      assertFalse(homeDoorOrWindow4.isBoundToWall());
      assertTrue(homeDoorOrWindow4.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow4.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow4.getCatalogId());
      assertNull(homeDoorOrWindow4.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow4.getShininess());
      assertTrue(homeDoorOrWindow4.isVisible());
      assertTrue(homeDoorOrWindow4.isResizable());
      assertTrue(homeDoorOrWindow4.isDeformable());
      assertEquals("", homeDoorOrWindow4.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow4.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow2);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow2));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow3);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow3.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow3.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getCurrency());
      assertTrue(homeDoorOrWindow3.isResizable());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertTrue(homeDoorOrWindow3.isMovable());
      assertNull(homeDoorOrWindow3.getShininess());
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertEquals((-718.5F), homeDoorOrWindow3.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow3.getX(), 0.01F);
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow3.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getDescription());
      assertEquals("", homeDoorOrWindow3.getName());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow3.isTexturable());
      assertNull(homeDoorOrWindow3.getColor());
      assertEquals("", homeDoorOrWindow3.getCatalogId());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow3.getHeight(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow4);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.isTopRightPointAt(1.0F, (-135.21051F), 0.0F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      HomeTexture homeTexture0 = homeFurnitureGroup0.getTexture();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeTexture0);
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNotNull(homeFurnitureGroup0);
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(1.0F, float1, 0.01F);
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertEquals(1, linkedList0.size());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Long long1 = Long.getLong("");
      assertNull(long1);
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[12][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(12, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(12, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(12, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(12, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(12, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "kk");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("kk", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight(589.12F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("kk", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/pderakhshanfar/.eteks");
      boolean boolean1 = FileSystemHandling.appendStringToFile(evoSuiteFile0, "(%!=#ou8?U");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = homeFurnitureGroup0.isModelMirrored();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("kk", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      homeFurnitureGroup0.setDepth((-903.886F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-903.886F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("kk", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      
      homeFurnitureGroup0.setElevation((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-903.886F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("kk", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-903.886F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("kk", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(589.12F, float1, 0.01F);
      
      homeFurnitureGroup0.setWidth((-903.886F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-903.886F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-903.886F), homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("kk", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(string0);
      
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup0.getFurniture();
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-57.497055F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-57.497055F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-57.497055F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-57.497055F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-57.497055F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-57.497055F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-57.497055F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-57.497055F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(57.497055F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-57.497055F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-57.497055F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(57.497055F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-57.497055F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-57.497055F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(string0);
      
      Integer integer0 = new Integer((-1));
      assertEquals((-1), (int)integer0);
      assertNotNull(integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(57.497055F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1), (int)homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-57.497055F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-57.497055F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, 0.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(string0);
      
      String string1 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(string1);
      
      homeFurnitureGroup0.setDepth((-1063.3756F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      homeFurnitureGroup0.setVisible(true);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1063.3756F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(string0);
      
      homeFurnitureGroup0.setX((-1.0F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPrice();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((short)1, bigDecimal1.shortValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNotNull(homeFurnitureGroup0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "xom.eteks.sweethome3d.model.momeFurnitureGroup");
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1437.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotNull(homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(string0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      
      boolean boolean1 = homeFurnitureGroup1.intersectsRectangle((-3692.219F), 307.828F, 2.0F, (-3692.219F));
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1437.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup1.setWidth((-1.0F));
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1437.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      Content content0 = homeFurnitureGroup1.getPlanIcon();
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals("xom.eteks.sweethome3d.model.momeFurnitureGroup", homeFurnitureGroup1.getName());
      assertTrue(homeFurnitureGroup1.isMovable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals(1437.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup1.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals((-1437.0F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertNull(content0);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ZERO;
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup0.setDepth((-1.0F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((byte)0, bigDecimal1.byteValue());
      assertEquals((short)0, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(string0);
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(1.0F, float1, 0.01F);
      
      List<HomePieceOfFurniture> list0 = homeFurnitureGroup0.getFurniture();
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Long long1 = Long.getLong("");
      assertNull(long1);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      float float1 = Float.sum(3.4028235E38F, 2057.425F);
      assertEquals(3.4028235E38F, float1, 0.01F);
      
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotEquals((float)float0, (float)float1, 0.01F);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(6, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals(589.12F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(6, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight(589.12F);
      assertEquals(1, linkedList0.size());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      homeFurnitureGroup0.setAngle((-499.8F));
      assertEquals(1, linkedList0.size());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      Integer integer0 = new Integer((-1344));
      assertEquals((-1344), (int)integer0);
      assertNotNull(integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPrice();
      assertEquals(1, linkedList0.size());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((byte)99, bigDecimal1.byteValue());
      assertEquals((short) (-1437), bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Float float0 = new Float(2.8548367F);
      assertEquals(2.8548367F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      Long long0 = new Long(2581L);
      assertEquals(2581L, (long)long0);
      assertNotNull(long0);
      
      Sash[] sashArray0 = new Sash[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "X", stringArray0, long0, float0, temporaryURLContent0, resourceURLContent0, resourceURLContent0, 2581L, 599.20374F, 2581L, 1485.0F, false, (-1063.3756F), 4542.0F, sashArray0, (float[][]) null, "", true, true, false, bigDecimal0, bigDecimal0, "com.eteks.sweethome3d.model.HomeFurnitureGroup");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(299.60187F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(4542.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(1290.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(599.20374F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(299.60187F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(4542.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(1290.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(599.20374F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(2581.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(299.60187F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(2581.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(4542.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(1485.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow1.getCurrency());
      assertEquals(1290.5F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(599.20374F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow2 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(599.20374F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(1290.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow2.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(2581.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(1485.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(1485.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(4542.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals(2581.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(299.60187F, homeDoorOrWindow2.getY(), 0.01F);
      assertNotNull(homeDoorOrWindow2);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = homeDoorOrWindow2.isPointAt(1.0F, 1.0F, 1.0F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(599.20374F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(1290.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow2.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(2581.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(1485.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(1485.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(4542.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals(2581.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(299.60187F, homeDoorOrWindow2.getY(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow3 = homeDoorOrWindow2.clone();
      assertEquals(2581.0F, homeDoorOrWindow3.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow3.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow3.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow3.getShininess());
      assertTrue(homeDoorOrWindow3.isVisible());
      assertTrue(homeDoorOrWindow3.isDeformable());
      assertEquals(299.60187F, homeDoorOrWindow3.getY(), 0.01F);
      assertTrue(homeDoorOrWindow3.isResizable());
      assertEquals("", homeDoorOrWindow3.getCatalogId());
      assertNull(homeDoorOrWindow3.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow3.getColor());
      assertTrue(homeDoorOrWindow3.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow3.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow3.isMovable());
      assertEquals(1290.5F, homeDoorOrWindow3.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow3.getCurrency());
      assertEquals(1485.0F, homeDoorOrWindow3.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow3.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow3.getWallThickness(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow3.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow3.getNameXOffset(), 0.01F);
      assertEquals(4542.0F, homeDoorOrWindow3.getWallDistance(), 0.01F);
      assertEquals(2581.0F, homeDoorOrWindow3.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow3.isBackFaceShown());
      assertFalse(homeDoorOrWindow3.isModelMirrored());
      assertEquals(599.20374F, homeDoorOrWindow3.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow3.getDescription());
      assertEquals("", homeDoorOrWindow3.getName());
      assertEquals(0.0F, homeDoorOrWindow3.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow3.isNameVisible());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertFalse(homeDoorOrWindow2.isTexturable());
      assertEquals(599.20374F, homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(1290.5F, homeDoorOrWindow2.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow2.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(2581.0F, homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals(1485.0F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isVisible());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertEquals(1485.0F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isResizable());
      assertFalse(homeDoorOrWindow2.isMovable());
      assertEquals(4542.0F, homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals(2581.0F, homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertNull(homeDoorOrWindow2.getColor());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertEquals(299.60187F, homeDoorOrWindow2.getY(), 0.01F);
      assertNotNull(homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow3, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow3.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow4 = new HomeDoorOrWindow(homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow4.isMovable());
      assertEquals(4542.0F, homeDoorOrWindow4.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameYOffset(), 0.01F);
      assertEquals(2581.0F, homeDoorOrWindow4.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow4.getCatalogId());
      assertFalse(homeDoorOrWindow4.isNameVisible());
      assertEquals("", homeDoorOrWindow4.getName());
      assertNull(homeDoorOrWindow4.getColor());
      assertFalse(homeDoorOrWindow4.isBackFaceShown());
      assertFalse(homeDoorOrWindow4.isBoundToWall());
      assertFalse(homeDoorOrWindow4.isModelMirrored());
      assertEquals(299.60187F, homeDoorOrWindow4.getY(), 0.01F);
      assertEquals(599.20374F, homeDoorOrWindow4.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow4.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow4.getWallThickness(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow4.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow4.getCurrency());
      assertEquals("", homeDoorOrWindow4.getDescription());
      assertEquals(0.0F, homeDoorOrWindow4.getAngle(), 0.01F);
      assertEquals(1290.5F, homeDoorOrWindow4.getX(), 0.01F);
      assertEquals(2581.0F, homeDoorOrWindow4.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow4.isResizable());
      assertTrue(homeDoorOrWindow4.isDoorOrWindow());
      assertTrue(homeDoorOrWindow4.isDeformable());
      assertEquals(1485.0F, homeDoorOrWindow4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow4.isVisible());
      assertNull(homeDoorOrWindow4.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow4.getShininess());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(299.60187F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(4542.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(1290.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(599.20374F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNotNull(homeDoorOrWindow4);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow4);
      assertEquals(1, linkedList0.size());
      assertFalse(homeDoorOrWindow4.isMovable());
      assertEquals(4542.0F, homeDoorOrWindow4.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameYOffset(), 0.01F);
      assertEquals(2581.0F, homeDoorOrWindow4.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow4.getCatalogId());
      assertFalse(homeDoorOrWindow4.isNameVisible());
      assertEquals("", homeDoorOrWindow4.getName());
      assertNull(homeDoorOrWindow4.getColor());
      assertFalse(homeDoorOrWindow4.isBackFaceShown());
      assertFalse(homeDoorOrWindow4.isBoundToWall());
      assertFalse(homeDoorOrWindow4.isModelMirrored());
      assertEquals(299.60187F, homeDoorOrWindow4.getY(), 0.01F);
      assertEquals(599.20374F, homeDoorOrWindow4.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow4.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow4.getWallThickness(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow4.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow4.getCurrency());
      assertEquals("", homeDoorOrWindow4.getDescription());
      assertEquals(0.0F, homeDoorOrWindow4.getAngle(), 0.01F);
      assertEquals(1290.5F, homeDoorOrWindow4.getX(), 0.01F);
      assertEquals(2581.0F, homeDoorOrWindow4.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow4.isResizable());
      assertTrue(homeDoorOrWindow4.isDoorOrWindow());
      assertTrue(homeDoorOrWindow4.isDeformable());
      assertEquals(1485.0F, homeDoorOrWindow4.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow4.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow4.isVisible());
      assertNull(homeDoorOrWindow4.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow4.getShininess());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals("X", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(4542.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(599.20374F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(2581.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(1485.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2581.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.8548367F, catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(2581L, (long)catalogDoorOrWindow0.getCreationDate());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(299.60187F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(2581.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(4542.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1485.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(1290.5F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(599.20374F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertTrue(boolean1);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow4, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow3);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow4);
      assertEquals(4, stringArray0.length);
      assertEquals(0, sashArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow4));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow3));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow4.equals((Object)homeDoorOrWindow2));
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$13");
      assertEquals(1, linkedList0.size());
      assertEquals(599.20374F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(1485.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(299.60187F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2581.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2581.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1485.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1290.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$13", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth(599.20374F);
      assertEquals(1, linkedList0.size());
      assertEquals(599.20374F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(599.20374F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1485.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(299.60187F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2581.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1485.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1290.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$13", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      HomeFurnitureGroup homeFurnitureGroup1 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(599.20374F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(2581.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals(299.60187F, homeFurnitureGroup1.getY(), 0.01F);
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1290.5F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1485.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(599.2036F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isTexturable());
      assertEquals(1485.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setY((-1063.3756F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertEquals(599.20374F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertEquals((-1063.3756F), homeFurnitureGroup1.getY(), 0.01F);
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup1.getCurrency());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isDeformable());
      assertEquals(2581.0F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertFalse(homeFurnitureGroup1.isMovable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertEquals("", homeFurnitureGroup1.getName());
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(1290.5F, homeFurnitureGroup1.getX(), 0.01F);
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(1485.0F, homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getShininess());
      assertEquals(599.2036F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup1.isTexturable());
      assertEquals(1485.0F, homeFurnitureGroup1.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      boolean boolean2 = homeFurnitureGroup0.isDeformable();
      assertEquals(1, linkedList0.size());
      assertEquals(599.20374F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(599.20374F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1485.0F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(299.60187F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(2581.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomeFurnitureGroup", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertFalse(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1485.0F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(1290.5F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$13", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(boolean2);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(string0);
      
      homeFurnitureGroup0.setY((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      
      homeFurnitureGroup0.setHeight(0.0F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$2";
      stringArray0[2] = "com.eteks.sweethome3d.model.HomePieceOfFurniture$2";
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1.0F), (-1437L), 0.0F, (-1642.05F), (-135.21051F));
      assertEquals(0.0F, sash0.getWidth(), 0.01F);
      assertEquals((-1642.05F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1.0F), sash0.getXAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getYAxis(), 0.01F);
      assertEquals((-135.21051F), sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals(0.0F, sash1.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash1.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash1.getYAxis(), 0.01F);
      assertEquals((-1437.0F), sash1.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash1.getEndAngle(), 0.01F);
      assertNotNull(sash1);
      assertFalse(sash1.equals((Object)sash0));
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-1063.3756F), (-1437L), 0.5F, (-1063.3756F), 0.0F);
      assertEquals((-1437.0F), sash2.getYAxis(), 0.01F);
      assertEquals((-1063.3756F), sash2.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash2.getEndAngle(), 0.01F);
      assertEquals(0.5F, sash2.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash2.getXAxis(), 0.01F);
      assertNotNull(sash2);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      
      sashArray0[2] = sash2;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = 0.5F;
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[6];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = (-1642.05F);
      floatArray2[2] = (-1642.05F);
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.5F;
      floatArray2[5] = 0.5F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[7];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (-1.0F);
      floatArray3[1] = 0.5F;
      floatArray3[2] = (-1642.05F);
      floatArray3[3] = 2606.44F;
      floatArray3[4] = (-1.0F);
      floatArray3[5] = 0.0F;
      floatArray3[6] = 2606.44F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (-1063.3756F);
      floatArray4[1] = (-1.0F);
      floatArray4[2] = 0.0F;
      floatArray4[3] = (-1642.05F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.0F;
      floatArray0[3] = floatArray4;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "[6!89}@H#-PS>JY7Hl", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, (String) null, true, true, true, bigDecimal0, bigDecimal0, "is");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("[6!89}@H#-PS>JY7Hl", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("is", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("[6!89}@H#-PS>JY7Hl", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("is", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("is", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("[6!89}@H#-PS>JY7Hl", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(3, sashArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("[6!89}@H#-PS>JY7Hl", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("is", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("is", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("[6!89}@H#-PS>JY7Hl", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("[6!89}@H#-PS>JY7Hl", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("is", homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(3, sashArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("[6!89}@H#-PS>JY7Hl", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("is", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("is", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("[6!89}@H#-PS>JY7Hl", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals("[6!89}@H#-PS>JY7Hl", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("is", homeDoorOrWindow1.getCurrency());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, floatArray0.length);
      assertEquals(3, sashArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "jar:");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("jar:", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("is", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[1] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setElevation((-1370.1353F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1060.9003F), (-1060.9003F), true, (-1060.9003F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1060.9003F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1060.9003F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1060.9003F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1060.9003F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      linkedList0.push(homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1060.9003F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1060.9003F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1060.9003F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1060.9003F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(4, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(2, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1060.9003F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1060.9003F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1060.9003F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1060.9003F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1060.9003F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals((-1060.9003F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1060.9003F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1060.9003F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2, linkedList0.size());
      assertNotNull(homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals((-1060.9003F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1060.9003F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1060.9003F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2, linkedList0.size());
      assertNull(string0);
      
      boolean boolean1 = homeFurnitureGroup0.isTexturable();
      assertEquals((-1060.9003F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1060.9003F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(1060.9003F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2, linkedList0.size());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("", (Content) null, (Content) null, 1416.0F, 1416.0F, (-1720.6278F), true, true);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1720.6278F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1416.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1416.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1720.6278F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1416.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1416.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1416.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(708.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(708.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1720.6278F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1416.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertNotNull(homePieceOfFurniture0);
      
      boolean boolean0 = linkedList0.add(homePieceOfFurniture0);
      assertEquals(1, linkedList0.size());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isMovable());
      assertEquals((-1720.6278F), catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("", catalogPieceOfFurniture0.getName());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertNull(catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertNull(catalogPieceOfFurniture0.getId());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals(1416.0F, catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(1416.0F, catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertEquals(1416.0F, homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertTrue(homePieceOfFurniture0.isMovable());
      assertEquals("", homePieceOfFurniture0.getName());
      assertEquals(708.0F, homePieceOfFurniture0.getX(), 0.01F);
      assertNull(homePieceOfFurniture0.getDescription());
      assertEquals(708.0F, homePieceOfFurniture0.getY(), 0.01F);
      assertTrue(homePieceOfFurniture0.isVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals((-1720.6278F), homePieceOfFurniture0.getHeight(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals(1416.0F, homePieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNull(homePieceOfFurniture0.getCurrency());
      assertNull(homePieceOfFurniture0.getCatalogId());
      assertNull(homePieceOfFurniture0.getColor());
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertTrue(boolean0);
      
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      String string0 = resourceURLContent0.getJAREntryName();
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals("com/eteks/sweethome3d/model/", string0);
      assertNotNull(string0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "ig_zcS %Q", "", stringArray0, (Long) null, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-1437L), (-1.0F), (-1437L), (-1437L), false, 2.0F, 905.197F, sashArray0, floatArray0, "ig_zcS %Q", false, true, false, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("ig_zcS %Q", catalogDoorOrWindow0.getCreator());
      assertEquals(905.197F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("ig_zcS %Q", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(905.197F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("ig_zcS %Q", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("ig_zcS %Q", catalogDoorOrWindow0.getCreator());
      assertEquals(905.197F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("ig_zcS %Q", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertFalse(homeDoorOrWindow0.isTexturable());
      assertEquals(2.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(905.197F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-0.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals("ig_zcS %Q", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(2, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertEquals(2.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("ig_zcS %Q", catalogDoorOrWindow0.getCreator());
      assertEquals(905.197F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("ig_zcS %Q", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(linkedList0.contains(homePieceOfFurniture0));
      assertTrue(boolean1);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[11];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray0[0];
      floatArray0[1] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(11, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(11, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(11, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(11, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(string0);
      
      homeFurnitureGroup0.setAngle((-1.0F));
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      Content content0 = homeFurnitureGroup0.getPlanIcon();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(content0);
      
      float float1 = homeFurnitureGroup0.getWidth();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, float1, 0.01F);
      
      homeFurnitureGroup0.setY(0.0F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      float float2 = homeFurnitureGroup0.getHeight();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(5.2831855F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(1437.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertTrue(homeDoorOrWindow2.isVisible());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(589.12F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertNull(homeDoorOrWindow2.getColor());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight(589.12F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      homeFurnitureGroup0.setAngle((-499.8F));
      assertEquals(1, linkedList0.size());
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      homeFurnitureGroup0.setAngle(2.0F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(string0);
      
      homeFurnitureGroup0.setHeight(3107.1233F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(3107.1233F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTax();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(3107.1233F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((short) (-32183), bigDecimal1.shortValue());
      assertEquals((byte)73, bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      BigDecimal bigDecimal2 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(3107.1233F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((byte) (-84), bigDecimal2.byteValue());
      assertEquals((short)31916, bigDecimal2.shortValue());
      assertNotNull(bigDecimal2);
      assertNotSame(bigDecimal2, bigDecimal0);
      assertNotSame(bigDecimal2, bigDecimal1);
      assertFalse(bigDecimal2.equals((Object)bigDecimal0));
      assertFalse(bigDecimal2.equals((Object)bigDecimal1));
      
      boolean boolean1 = homeFurnitureGroup0.isMovable();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(3107.1233F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(2.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth(2606.44F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2606.44F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      
      homeFurnitureGroup0.setHeight(3.4028235E38F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(2606.44F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(3.4028235E38F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1416L));
      assertEquals((-1416L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1416L));
      assertEquals((-1416.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1416L));
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1416L), (-1416L), (-1416L), (-1416L), true, (-1416L), (-1416L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      Level level0 = new Level("", (-1416L), (-1416L), (-1416L));
      assertEquals((-1416.0F), level0.getHeight(), 0.01F);
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1416.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals((-1416.0F), level0.getHeight(), 0.01F);
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1416.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level1.getFloorThickness(), 0.01F);
      assertEquals("", level1.getName());
      assertEquals((-1416.0F), level1.getElevation(), 0.01F);
      assertEquals((-1416.0F), level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      
      homeDoorOrWindow0.setLevel(level0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2832.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), level0.getHeight(), 0.01F);
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("", level0.getName());
      assertEquals((-1416.0F), level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotSame(level0, level1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(2, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2832.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(boolean1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNotNull(homeFurnitureGroup0);
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(1416.0F, float1, 0.01F);
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(content0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      BigDecimal bigDecimal1 = bigDecimal0.abs();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((byte)1, bigDecimal1.byteValue());
      assertEquals((short)1, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal0, bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals(1, linkedList0.size());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertSame(bigDecimal0, bigDecimal1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "0Zb");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("0Zb", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.isModelMirrored();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("0Zb", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup0.setDepth(2606.44F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("0Zb", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2606.44F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      
      homeFurnitureGroup0.setElevation((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("0Zb", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2606.44F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      
      boolean boolean2 = homeFurnitureGroup0.isMovable();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("0Zb", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2606.44F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      float float1 = homeFurnitureGroup0.getDepth();
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("0Zb", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(2606.44F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(2606.44F, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), 2606.44F, 2606.44F, (-1437L), (-1437L));
      assertEquals(2606.44F, sash0.getYAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1437.0F), sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1.0F);
      floatArray1[1] = (-1642.05F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setElevation((-1370.1353F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals((-1370.1353F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(string0);
      
      boolean boolean2 = homeFurnitureGroup0.isMovable();
      assertEquals(1, linkedList0.size());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(string0);
      
      homeFurnitureGroup0.setDepth((-1.0F));
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1416L));
      assertEquals((-1416L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1416L));
      assertEquals((-1416.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      BigDecimal bigDecimal0 = new BigDecimal((-1416L));
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1416L), (-1416L), (-1416L), (-1416L), true, (-1416L), (-1416L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      Level level0 = new Level("", (-1416L), (-1416L), (-1416L));
      assertEquals("", level0.getName());
      assertEquals((-1416.0F), level0.getHeight(), 0.01F);
      assertEquals((-1416.0F), level0.getElevation(), 0.01F);
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals("", level0.getName());
      assertEquals((-1416.0F), level0.getHeight(), 0.01F);
      assertEquals((-1416.0F), level0.getElevation(), 0.01F);
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-1416.0F), level1.getFloorThickness(), 0.01F);
      assertEquals((-1416.0F), level1.getHeight(), 0.01F);
      assertEquals((-1416.0F), level1.getElevation(), 0.01F);
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      
      homeDoorOrWindow0.setLevel(level0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2832.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals("", level0.getName());
      assertEquals((-1416.0F), level0.getHeight(), 0.01F);
      assertEquals((-1416.0F), level0.getElevation(), 0.01F);
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotSame(level0, level1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(2, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short) (-1416), bigDecimal0.shortValue());
      assertEquals((byte)120, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-2832.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(boolean1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNotNull(homeFurnitureGroup0);
      
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1416.0F, float1, 0.01F);
      
      CatalogTexture catalogTexture0 = new CatalogTexture("", temporaryURLContent0, (-1416L), (-1416L), false);
      assertEquals("", catalogTexture0.getName());
      assertEquals((-1416.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1416.0F), catalogTexture0.getWidth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogTexture0);
      
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      assertEquals("", catalogTexture0.getName());
      assertEquals((-1416.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1416.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertEquals((-1416.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1416.0F), homeTexture0.getWidth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeTexture0);
      
      homeFurnitureGroup0.setTexture(homeTexture0);
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", catalogTexture0.getName());
      assertEquals((-1416.0F), catalogTexture0.getHeight(), 0.01F);
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-1416.0F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("", homeTexture0.getName());
      assertEquals((-1416.0F), homeTexture0.getHeight(), 0.01F);
      assertTrue(homeTexture0.isLeftToRightOriented());
      assertEquals((-1416.0F), homeTexture0.getWidth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      
      Content content0 = homeFurnitureGroup0.getIcon();
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(content0);
      
      float float2 = homeFurnitureGroup0.getWidth();
      assertEquals(2, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(string0);
      
      homeFurnitureGroup0.setModelMirrored(false);
      assertEquals(1, linkedList0.size());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[7];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), (-1.0F), (-1437L), 0.0F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals((-1.0F), sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[1] = floatArray0[0];
      floatArray0[2] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(7, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(7, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(7, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(7, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertTrue(homeDoorOrWindow2.isMovable());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(7, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(2, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertEquals(7, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow2));
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNotNull(homeFurnitureGroup0);
      
      HomeTexture homeTexture0 = homeFurnitureGroup0.getTexture();
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeTexture0);
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(2, linkedList0.size());
      assertNull(homeFurnitureGroup0.getColor());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isDeformable());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[10];
      floatArray0[0] = floatArray1;
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      Integer integer0 = homeFurnitureGroup0.getColor();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(integer0);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      String string0 = homeFurnitureGroup0.getCurrency();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", ":>Wf>rK4-Hcm'z", ":>Wf>rK4-Hcm'z", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, temporaryURLContent0, (-1.0F), 0.3926991F, 0.3926991F, (-1078.6F), true, 0.3926991F, 0.3926991F, sashArray0, floatArray0, (String) null, true, false, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1078.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1078.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(":>Wf>rK4-Hcm'z", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1078.6F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1078.6F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1078.6F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertFalse(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-0.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals(":>Wf>rK4-Hcm'z", homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1078.6F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1078.6F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.19634955F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.3926991F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(boolean0);
      assertEquals(6, stringArray0.length);
      assertEquals(8, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$3");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1078.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1078.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1078.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1078.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1078.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1078.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(string0);
      
      HomeFurnitureGroup homeFurnitureGroup1 = homeFurnitureGroup0.clone();
      assertEquals(1, linkedList0.size());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(1078.6F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals(0.0F, homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-1078.6F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals((-1078.6F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1078.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1078.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1078.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotNull(homeFurnitureGroup1);
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      
      homeFurnitureGroup1.setDepth((-1437L));
      assertEquals(1, linkedList0.size());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup1.getName());
      assertEquals(0.0F, homeFurnitureGroup1.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getX(), 0.01F);
      assertNull(homeFurnitureGroup1.getDescription());
      assertEquals(1078.6F, homeFurnitureGroup1.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup1.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup1.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup1.isMovable());
      assertNull(homeFurnitureGroup1.getShininess());
      assertTrue(homeFurnitureGroup1.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup1.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup1.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup1.getCatalogId());
      assertTrue(homeFurnitureGroup1.isVisible());
      assertEquals(0.0F, homeFurnitureGroup1.getNameYOffset(), 0.01F);
      assertEquals((-1078.6F), homeFurnitureGroup1.getGroundElevation(), 0.01F);
      assertFalse(homeFurnitureGroup1.isNameVisible());
      assertFalse(homeFurnitureGroup1.isBackFaceShown());
      assertEquals((-1078.6F), homeFurnitureGroup1.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup1.getColor());
      assertFalse(homeFurnitureGroup1.isDeformable());
      assertFalse(homeFurnitureGroup1.isModelMirrored());
      assertEquals("", homeFurnitureGroup1.getCurrency());
      assertTrue(homeFurnitureGroup1.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getDescription());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-1078.6F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals((-1078.6F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(1078.6F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$3", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNotSame(homeFurnitureGroup1, homeFurnitureGroup0);
      assertNotSame(homeFurnitureGroup0, homeFurnitureGroup1);
      assertFalse(homeFurnitureGroup1.equals((Object)homeFurnitureGroup0));
      assertFalse(homeFurnitureGroup0.equals((Object)homeFurnitureGroup1));
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray0[0] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", "", "com.eteks.sweethome3d.io.HomeURLContent", "", stringArray0, long0, float0, resourceURLContent0, resourceURLContent0, temporaryURLContent0, 899.86743F, (-1437L), (-1437L), (-1437L), true, 899.86743F, 899.86743F, sashArray0, floatArray0, "com.eteks.sweethome3d.io.HomeURLContent", true, true, false, bigDecimal0, bigDecimal0, ":>Wf>rK4-Hcm'z");
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getCreator());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("", catalogDoorOrWindow1.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getGrade(), 0.01F);
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      
      FurnitureCategory furnitureCategory0 = new FurnitureCategory("");
      assertEquals("", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertNotNull(furnitureCategory0);
      
      boolean boolean1 = furnitureCategory0.equals("com.eteks.sweethome3d.io.HomeURLContent");
      assertEquals("", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      catalogDoorOrWindow1.setCategory(furnitureCategory0);
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getCreator());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("", catalogDoorOrWindow1.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getGrade(), 0.01F);
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals("", furnitureCategory0.getName());
      assertEquals(0, furnitureCategory0.getFurnitureCount());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow1 = new HomeDoorOrWindow(catalogDoorOrWindow1);
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getCreator());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("", catalogDoorOrWindow1.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getGrade(), 0.01F);
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(449.93372F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(899.86743F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(899.86743F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(":>Wf>rK4-Hcm'z", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(899.86743F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean2 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(2, linkedList0.size());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getColor());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getCreator());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", catalogDoorOrWindow1.getDescription());
      assertEquals("", catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals("", catalogDoorOrWindow1.getId());
      assertEquals(0.3926991F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getName());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getGrade(), 0.01F);
      assertEquals(":>Wf>rK4-Hcm'z", catalogDoorOrWindow1.getCurrency());
      assertFalse(catalogDoorOrWindow1.isModifiable());
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow1.getCreationDate());
      assertFalse(catalogDoorOrWindow1.isTexturable());
      assertEquals(899.86743F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(449.93372F, homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow1.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals(899.86743F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(899.86743F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isVisible());
      assertEquals(":>Wf>rK4-Hcm'z", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals("com.eteks.sweethome3d.io.HomeURLContent", homeDoorOrWindow1.getDescription());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(899.86743F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertTrue(boolean2);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, ":>Wf>rK4-Hcm'z");
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(":>Wf>rK4-Hcm'z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(":>Wf>rK4-Hcm'z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertNull(string0);
      
      homeFurnitureGroup0.setHeight(2318.8F);
      assertEquals(2, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(":>Wf>rK4-Hcm'z", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCurrency());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isTexturable());
      assertEquals(2318.8F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth(2606.44F);
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(2606.44F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      
      String string0 = homeFurnitureGroup0.getStaircaseCutOutShape();
      assertEquals(1, linkedList0.size());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(2606.44F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[2] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1.0F), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      Integer integer0 = new Integer(2146660365);
      assertEquals(2146660365, (int)integer0);
      assertNotNull(integer0);
      
      CatalogDoorOrWindow catalogDoorOrWindow1 = new CatalogDoorOrWindow("", resourceURLContent0, resourceURLContent0, 1.0F, 1.0F, (-135.21051F), (-1642.05F), true, (-1642.05F), (-1437.0F), sashArray0, integer0, floatArray0, true, 2344.78F, true);
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals((-135.21051F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals((-1642.05F), catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(2344.78F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertEquals(1.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getId());
      assertEquals((-1642.05F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(2146660365, (int)catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(catalogDoorOrWindow1);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      
      int int0 = catalogDoorOrWindow0.compareTo((CatalogPieceOfFurniture) catalogDoorOrWindow1);
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isMovable());
      assertTrue(catalogDoorOrWindow1.isResizable());
      assertNull(catalogDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(catalogDoorOrWindow1.getGrade());
      assertEquals((-135.21051F), catalogDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow1.getName());
      assertNull(catalogDoorOrWindow1.getInformation());
      assertTrue(catalogDoorOrWindow1.isDeformable());
      assertEquals((-1642.05F), catalogDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isModifiable());
      assertNull(catalogDoorOrWindow1.getCreator());
      assertTrue(catalogDoorOrWindow1.isDoorOrWindow());
      assertEquals(2344.78F, catalogDoorOrWindow1.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow1.isProportional());
      assertTrue(catalogDoorOrWindow1.isTexturable());
      assertNull(catalogDoorOrWindow1.getCurrency());
      assertTrue(catalogDoorOrWindow1.isBackFaceShown());
      assertEquals(1392409281320L, (long)catalogDoorOrWindow1.getCreationDate());
      assertEquals(1.0F, catalogDoorOrWindow1.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow1.getWallDistance(), 0.01F);
      assertNull(catalogDoorOrWindow1.getId());
      assertEquals((-1642.05F), catalogDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(1.0F, catalogDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(2146660365, (int)catalogDoorOrWindow1.getColor());
      assertNull(catalogDoorOrWindow1.getDescription());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1), int0);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow1, catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(catalogDoorOrWindow1.equals((Object)catalogDoorOrWindow0));
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertTrue(boolean0);
      assertNotSame(catalogDoorOrWindow0, catalogDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(catalogDoorOrWindow0.equals((Object)catalogDoorOrWindow1));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      homeFurnitureGroup0.setDepth((-1.0F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      
      homeFurnitureGroup0.setDepth((-1437.0F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getName());
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getColor());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNotNull(homeFurnitureGroup0);
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(589.12F, 589.12F, 589.12F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(string0);
      
      HomeTexture homeTexture0 = homeFurnitureGroup0.getTexture();
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertNull(homeTexture0);
      
      homeFurnitureGroup0.setTexture((HomeTexture) null);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      homeFurnitureGroup0.setWidth(589.12F);
      assertEquals(1, linkedList0.size());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(589.12F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals("", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      
      System.setCurrentTimeMillis((-2476L));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Long long1 = Long.getLong("");
      assertNull(long1);
      
      Sash[] sashArray0 = new Sash[4];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = new BigDecimal((-1437L));
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), 589.12F, true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      
      HomeDoorOrWindow homeDoorOrWindow2 = homeDoorOrWindow1.clone();
      assertEquals(589.12F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getDescription());
      assertEquals(589.12F, homeDoorOrWindow2.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow2.getName());
      assertEquals(0.0F, homeDoorOrWindow2.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getAngle(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow2.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow2.isTexturable());
      assertNull(homeDoorOrWindow2.getShininess());
      assertTrue(homeDoorOrWindow2.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow2.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow2.isMovable());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow2.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDoorOrWindow());
      assertTrue(homeDoorOrWindow2.isVisible());
      assertNull(homeDoorOrWindow2.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow2.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow2.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow2.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow2.isDeformable());
      assertFalse(homeDoorOrWindow2.isNameVisible());
      assertEquals("", homeDoorOrWindow2.getCurrency());
      assertFalse(homeDoorOrWindow2.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow2.getHeight(), 0.01F);
      assertNull(homeDoorOrWindow2.getColor());
      assertEquals("", homeDoorOrWindow2.getCatalogId());
      assertFalse(homeDoorOrWindow2.isBoundToWall());
      assertFalse(homeDoorOrWindow2.isModelMirrored());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((byte)99, bigDecimal0.byteValue());
      assertEquals((short) (-1437), bigDecimal0.shortValue());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(589.12F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(589.12F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getName());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(589.12F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNotNull(homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow2);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow2, homeDoorOrWindow1);
      assertEquals(4, stringArray0.length);
      assertEquals(4, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow0));
      assertFalse(homeDoorOrWindow2.equals((Object)homeDoorOrWindow1));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals((-589.12F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight(589.12F);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      
      homeFurnitureGroup0.setAngle((-499.8F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      
      Integer integer0 = new Integer((-1344));
      assertEquals((-1344), (int)integer0);
      assertNotNull(integer0);
      
      homeFurnitureGroup0.setColor(integer0);
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getPriceValueAddedTaxIncluded();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals((short)31916, bigDecimal1.shortValue());
      assertEquals((byte) (-84), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(589.12F, homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(589.12F, homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals("", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals((-1344), (int)homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(2.8548367F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getColor());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isResizable());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow1.getDescription());
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setWidth(2606.44F);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(2606.44F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      
      boolean boolean1 = homeFurnitureGroup0.intersectsRectangle((-302.0F), (-135.21051F), (-1437L), (-1642.05F));
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertEquals(2606.44F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1416L));
      assertEquals((-1416L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1416L));
      assertEquals((-1416.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      floatArray0[1] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1416L), (-1416L), (-1416L), (-1416L), true, (-1416L), (-1416L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(boolean0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      Level level0 = new Level("", (-448.9707F), (-1416L), (-448.9707F));
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals((-448.9707F), level0.getElevation(), 0.01F);
      assertEquals((-448.9707F), level0.getHeight(), 0.01F);
      assertEquals("", level0.getName());
      assertNotNull(level0);
      
      level0.setName("_il}]%");
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("_il}]%", level0.getName());
      assertEquals((-448.9707F), level0.getElevation(), 0.01F);
      assertEquals((-448.9707F), level0.getHeight(), 0.01F);
      
      Level level1 = level0.clone();
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("_il}]%", level0.getName());
      assertEquals((-448.9707F), level0.getElevation(), 0.01F);
      assertEquals((-448.9707F), level0.getHeight(), 0.01F);
      assertEquals((-448.9707F), level1.getElevation(), 0.01F);
      assertEquals("_il}]%", level1.getName());
      assertTrue(level1.isVisible());
      assertEquals((-448.9707F), level1.getHeight(), 0.01F);
      assertEquals((-1416.0F), level1.getFloorThickness(), 0.01F);
      assertNotNull(level1);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertFalse(level1.equals((Object)level0));
      
      homeDoorOrWindow0.setLevel(level0);
      assertTrue(level0.isVisible());
      assertEquals((-1416.0F), level0.getFloorThickness(), 0.01F);
      assertEquals("_il}]%", level0.getName());
      assertEquals((-448.9707F), level0.getElevation(), 0.01F);
      assertEquals((-448.9707F), level0.getHeight(), 0.01F);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1864.9707F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertNotSame(level0, level1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(level0.equals((Object)level1));
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(2, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertNull(catalogDoorOrWindow0.getColor());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1416.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals((-1416L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1416.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertEquals((-708.0F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals((-708.0F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1416.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-1864.9707F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertEquals((-1416.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1416.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1416.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(boolean1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, (String) null);
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals(1416.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.setHeight((-1416L));
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      String string0 = homeFurnitureGroup0.getStaircaseCutOutShape();
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(string0);
      
      String string1 = homeFurnitureGroup0.getCurrency();
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", string1);
      assertNotNull(string1);
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTax();
      assertEquals(2, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getHeight(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1416.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals((-1416.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertNull(homeFurnitureGroup0.getShininess());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertNull(homeFurnitureGroup0.getName());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals((short)200, bigDecimal1.shortValue());
      assertEquals((byte) (-56), bigDecimal1.byteValue());
      assertNotNull(bigDecimal1);
      assertNotSame(bigDecimal1, bigDecimal0);
      assertFalse(bigDecimal1.equals((Object)bigDecimal0));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      assertEquals(2606.44F, sash0.getWidth(), 0.01F);
      assertEquals(0.0F, sash0.getEndAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getYAxis(), 0.01F);
      assertEquals((-1437.0F), sash0.getStartAngle(), 0.01F);
      assertEquals((-1063.3756F), sash0.getXAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[1] = sash0;
      sashArray0[2] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[2] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertNotNull(homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      boolean boolean0 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      assertEquals(1, linkedList0.size());
      assertEquals((short)1, bigDecimal0.shortValue());
      assertEquals((byte)1, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals("", catalogDoorOrWindow0.getDescription());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertEquals("", catalogDoorOrWindow0.getName());
      assertEquals((-1063.3756F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals("", catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getDescription());
      assertEquals((-1.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-1.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertEquals((-1063.3756F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow1.getShininess());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals((-1437.0F), homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals("", homeDoorOrWindow1.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertEquals("", homeDoorOrWindow1.getName());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertNull(homeDoorOrWindow1.getColor());
      assertEquals((-1.0F), homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals((-1063.3756F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow1.getY(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getCurrency());
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals((-1.0F), homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals("", homeDoorOrWindow1.getDescription());
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals((-1437.0F), homeDoorOrWindow1.getDepth(), 0.01F);
      assertTrue(boolean0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNotNull(homeFurnitureGroup0);
      
      homeFurnitureGroup0.move((-1642.05F), (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      
      boolean boolean1 = homeFurnitureGroup0.containsPoint(0.0F, 0.0F, (-135.21051F));
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string0 = homeFurnitureGroup0.getCatalogId();
      assertEquals(1, linkedList0.size());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals((-1.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertEquals((-135.21051F), homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals(1.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertNull(homeFurnitureGroup0.getShininess());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertEquals("", homeFurnitureGroup0.getName());
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals((-1.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals((-1642.05F), homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      assertEquals((-1437L), (long)long0);
      assertNotNull(long0);
      
      Float float0 = new Float((float) (-1437L));
      assertEquals((-1437.0F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertNotNull(temporaryURLContent0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Sash[] sashArray0 = new Sash[3];
      float[][] floatArray0 = new float[4][3];
      floatArray0[3] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertNotNull(catalogDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertNotNull(homeDoorOrWindow0);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      
      boolean boolean1 = linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      assertEquals(1, linkedList0.size());
      assertTrue(resourceURLContent0.isJAREntry());
      assertFalse(resourceURLContent0.isMultiPartResource());
      assertFalse(temporaryURLContent0.isJAREntry());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getGrade(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertEquals("", catalogDoorOrWindow0.getId());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals((-1437L), (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getName());
      assertEquals((-1437.0F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("", catalogDoorOrWindow0.getCurrency());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", catalogDoorOrWindow0.getInformation());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals((-718.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertEquals((-718.5F), homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertEquals((-1437.0F), homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getElevation(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getDescription());
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("", homeDoorOrWindow0.getCatalogId());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals("", homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertEquals((-1437.0F), homeDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeDoorOrWindow0.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(boolean1);
      assertEquals(4, stringArray0.length);
      assertEquals(3, sashArray0.length);
      assertEquals(4, floatArray0.length);
      assertTrue(boolean1 == boolean0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertNotNull(homeFurnitureGroup0);
      
      Integer integer0 = homeFurnitureGroup0.getColor();
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertNull(integer0);
      
      homeFurnitureGroup0.setColor((Integer) null);
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      
      BigDecimal bigDecimal1 = homeFurnitureGroup0.getValueAddedTaxPercentage();
      assertEquals(0.0F, homeFurnitureGroup0.getNameYOffset(), 0.01F);
      assertNull(homeFurnitureGroup0.getColor());
      assertTrue(homeFurnitureGroup0.isVisible());
      assertEquals(0.0F, homeFurnitureGroup0.getY(), 0.01F);
      assertFalse(homeFurnitureGroup0.isModelMirrored());
      assertEquals(0.0F, homeFurnitureGroup0.getX(), 0.01F);
      assertTrue(homeFurnitureGroup0.isTexturable());
      assertEquals("", homeFurnitureGroup0.getCurrency());
      assertTrue(homeFurnitureGroup0.isDoorOrWindow());
      assertFalse(homeFurnitureGroup0.isNameVisible());
      assertFalse(homeFurnitureGroup0.isBackFaceShown());
      assertEquals(0.0F, homeFurnitureGroup0.getAngle(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.HomePieceOfFurniture$2", homeFurnitureGroup0.getName());
      assertTrue(homeFurnitureGroup0.isResizable());
      assertEquals((-1437.0F), homeFurnitureGroup0.getElevation(), 0.01F);
      assertNull(homeFurnitureGroup0.getDescription());
      assertEquals(0.0F, homeFurnitureGroup0.getDepth(), 0.01F);
      assertNull(homeFurnitureGroup0.getStaircaseCutOutShape());
      assertEquals(0.0F, homeFurnitureGroup0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getNameAngle(), 0.01F);
      assertEquals((-1437.0F), homeFurnitureGroup0.getGroundElevation(), 0.01F);
      assertTrue(homeFurnitureGroup0.isDeformable());
      assertEquals(1437.0F, homeFurnitureGroup0.getHeight(), 0.01F);
      assertEquals(0.0F, homeFurnitureGroup0.getWidth(), 0.01F);
      assertNull(homeFurnitureGroup0.getShininess());
      assertTrue(homeFurnitureGroup0.isMovable());
      assertNull(homeFurnitureGroup0.getCatalogId());
      assertEquals(1, linkedList0.size());
      assertEquals((byte)10, bigDecimal1.byteValue());
      assertEquals((short)10, bigDecimal1.shortValue());
      assertNotNull(bigDecimal1);
      assertSame(bigDecimal1, bigDecimal0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[13];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      sashArray0[2] = sashArray0[1];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (float) (-1437L);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[0] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1437L), (-1437L), true, (-1437L), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setWidth(2606.44F);
      homeFurnitureGroup0.getColor();
      homeFurnitureGroup0.setWidth(2606.44F);
      homeFurnitureGroup0.isResizable();
      linkedList0.offerFirst(homeDoorOrWindow1);
      homeFurnitureGroup0.isBackFaceShown();
      homeFurnitureGroup0.clone();
      assertEquals(2606.44F, homeFurnitureGroup0.getWidth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), 2606.44F, 2606.44F, (-1437L), (-1437L));
      sashArray0[1] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[1] = (-1.0F);
      floatArray1[1] = (-1642.05F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      homeFurnitureGroup0.setElevation((-1370.1353F));
      homeFurnitureGroup0.getIcon();
      assertEquals((-1370.1353F), homeFurnitureGroup0.getElevation(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      long long0 = (-1437L);
      Long long1 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[11];
      floatArray1[0] = (-1.0F);
      floatArray1[3] = (-1063.0F);
      floatArray0[1] = floatArray0[0];
      floatArray0[3] = floatArray0[0];
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("F|(e8", "F|(e8", "]g|_KRZhQ?lwvI8zba", temporaryURLContent0, resourceURLContent0, (-1967.2349F), (-1063.0F), 0.3926991F, (-1.0F), true, (-1.0F), 307.93F, sashArray0, floatArray0, (String) null, false, (BigDecimal) null, (BigDecimal) null);
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      homeDoorOrWindow0.clone();
      HomePieceOfFurniture homePieceOfFurniture0 = homeDoorOrWindow0.clone();
      linkedList0.add(homePieceOfFurniture0);
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "}TdK&#Z|K{t");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Piece isn't resizable
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      Long long0 = new Long((-1439L));
      Float float0 = new Float((float) (-1439L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[8];
      float[][] floatArray0 = new float[4][3];
      floatArray0[0] = floatArray0[0];
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "", "", "", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1439L), (-1439L), (-1439L), (-1.0F), true, (-1439L), (-1439L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow0);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "");
      homeFurnitureGroup0.getCatalogId();
      homeFurnitureGroup0.setDepth((-1.0F));
      homeFurnitureGroup0.getStaircaseCutOutShape();
      assertEquals((-1.0F), homeFurnitureGroup0.getDepth(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      String[] stringArray0 = new String[4];
      stringArray0[3] = "";
      Long long0 = new Long((-1437L));
      Float float0 = new Float((float) (-1437L));
      Class<CatalogDoorOrWindow> class0 = CatalogDoorOrWindow.class;
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(class0, "");
      TemporaryURLContent temporaryURLContent0 = TemporaryURLContent.copyToTemporaryURLContent(resourceURLContent0);
      Sash[] sashArray0 = new Sash[3];
      Sash sash0 = new Sash((-1063.3756F), (-1063.3756F), 2606.44F, (-1437L), 0.0F);
      sashArray0[1] = sash0;
      sashArray0[1] = sash0;
      float[][] floatArray0 = new float[4][3];
      float[] floatArray1 = new float[4];
      floatArray1[0] = (-1642.05F);
      floatArray1[1] = (-135.21051F);
      floatArray1[1] = (-135.21051F);
      floatArray1[3] = (-1063.3756F);
      floatArray0[0] = floatArray1;
      floatArray0[1] = floatArray1;
      floatArray0[2] = floatArray1;
      floatArray0[3] = floatArray1;
      BigDecimal bigDecimal0 = BigDecimal.ONE;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", "com.eteks.sweethome3d.model.HomePieceOfFurniture$2", stringArray0, long0, float0, temporaryURLContent0, temporaryURLContent0, resourceURLContent0, (-1437L), (-1437L), (-1063.3756F), (-1.0F), true, (-1063.3756F), (-1437L), sashArray0, floatArray0, "", true, true, true, bigDecimal0, bigDecimal0, "");
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      linkedList0.add((HomePieceOfFurniture) homeDoorOrWindow1);
      HomeFurnitureGroup homeFurnitureGroup0 = new HomeFurnitureGroup(linkedList0, "com.eteks.sweethome3d.model.HomePieceOfFurniture$2");
      float float1 = homeFurnitureGroup0.getHeight();
      assertEquals(1.0F, float1, 0.01F);
      assertTrue(homeFurnitureGroup0.isMovable());
      assertTrue(homeFurnitureGroup0.isVisible());
  }
}

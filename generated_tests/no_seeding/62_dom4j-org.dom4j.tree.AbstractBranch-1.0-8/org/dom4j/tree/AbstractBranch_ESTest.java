/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 13:29:07 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Iterator;
import org.dom4j.Comment;
import org.dom4j.Element;
import org.dom4j.Node;
import org.dom4j.NodeType;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.bean.BeanElement;
import org.dom4j.dom.DOMComment;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.dom.DOMProcessingInstruction;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.DefaultDocumentType;
import org.dom4j.tree.DefaultElement;
import org.dom4j.util.IndexedElement;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AbstractBranch_ESTest extends AbstractBranch_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      UserDataElement userDataElement0 = new UserDataElement("P,{>#5Ndvp1jwK~r");
      userDataElement0.appendContent(userDataElement0);
      assertEquals(NodeType.ELEMENT_NODE, userDataElement0.getNodeTypeEnum());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      DefaultDocumentType defaultDocumentType0 = new DefaultDocumentType("uqdIiY]I)=<b", ",FWV.", "");
      DefaultDocument defaultDocument0 = new DefaultDocument(defaultDocumentType0);
      defaultDocument0.contentRemoved();
      assertNull(defaultDocument0.getXMLEncoding());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      BeanElement beanElement0 = new BeanElement("Ws7vN", nonLazyElement0);
      beanElement0.add((Element) nonLazyElement0);
      assertEquals("Element", nonLazyElement0.getNodeTypeName());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("}B*>*/f1HV", "");
      QName qName0 = new QName("", dOMNamespace0);
      DOMElement dOMElement0 = new DOMElement(qName0, (-1438));
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType("", "Invalid node type. Cannot add node: ");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      DOMComment dOMComment0 = new DOMComment((String) null);
      dOMDocument0.add((Comment) dOMComment0);
      assertEquals("Comment", dOMComment0.getNodeTypeName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement(",Aji8g.s$");
      Element element0 = nonLazyElement0.addElement("", "");
      assertTrue(element0.supportsParent());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      QName qName0 = new QName("");
      IndexedElement indexedElement0 = new IndexedElement(qName0);
      DOMProcessingInstruction dOMProcessingInstruction0 = new DOMProcessingInstruction("ZCu==OWk%Fsfnqbp/", "");
      indexedElement0.add((ProcessingInstruction) dOMProcessingInstruction0);
      boolean boolean0 = indexedElement0.remove((ProcessingInstruction) dOMProcessingInstruction0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DOMElement dOMElement0 = new DOMElement((QName) null, 5707);
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0);
      boolean boolean0 = dOMDocument0.remove((Element) dOMElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      DOMDocument dOMDocument0 = new DOMDocument();
      DefaultElement defaultElement0 = new DefaultElement("org.dom4j.tree.AbstractBranch$1");
      boolean boolean0 = dOMDocument0.remove((Element) defaultElement0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      DOMNamespace dOMNamespace0 = new DOMNamespace("", "");
      DOMElement dOMElement0 = new DOMElement("|CN-'].-wB?*AdG", dOMNamespace0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType();
      DOMDocument dOMDocument0 = new DOMDocument("", dOMElement0, dOMDocumentType0);
      Iterator<Node> iterator0 = dOMDocument0.nodeIterator();
      assertNotNull(iterator0);
  }
}

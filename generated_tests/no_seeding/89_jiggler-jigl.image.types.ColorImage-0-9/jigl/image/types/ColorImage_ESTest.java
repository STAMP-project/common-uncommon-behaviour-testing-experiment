/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 05 10:39:19 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Image;
import javax.swing.JLayeredPane;
import jigl.image.ColorModel;
import jigl.image.InterpolationMethod;
import jigl.image.ROI;
import jigl.image.types.ColorImage;
import jigl.image.types.GrayImage;
import jigl.image.types.InterpolatedColorImage;
import jigl.image.types.InterpolatedGrayImage;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ColorImage_ESTest extends ColorImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get((-3736), (-3736));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[9];
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage0.multiply(intArray0);
      assertEquals(9, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.Y());
      assertNotNull(interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage1);
      assertSame(interpolatedColorImage2, interpolatedColorImage0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(457, 457, 457);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(0, (-16777216), (-16777216), 0);
      assertEquals((-16777216), rOI0.ux());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(16777217, rOI0.X());
      assertEquals(16777217, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.byteSize(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[2];
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer((int) integerArray0[0]);
      assertEquals(2, integerArray0.length);
      assertNotNull(integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertEquals((-30000), (int)integer1);
      
      integerArray0[1] = integer1;
      ROI rOI0 = new ROI(0, (-1), 0, (int) integerArray0[0]);
      assertEquals(2, integerArray0.length);
      assertEquals(30000, rOI0.Y());
      assertEquals((-30000), rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals((-1), rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(Integer.MAX_VALUE, Integer.MAX_VALUE, integerArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-3381), (-3381), (-3381), 12, 12, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.InitFromImage((Image) null, 0, (-18), 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.image.PixelGrabber", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(140, 140, 140, 140, 140);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      int int0 = 0;
      int int1 = 128;
      ColorImage colorImage0 = new ColorImage(0, 128);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(128, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(128, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(128, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      ColorImage colorImage2 = colorImage1.multiply(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(128, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(128, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(128, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotNull(colorImage2);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage1, colorImage0);
      assertSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage0));
      
      int int2 = 12;
      ColorImage colorImage3 = colorImage2.subtract(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(128, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(128, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(128, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(ColorModel.RGB, colorImage3.getColorModel());
      assertEquals(128, colorImage3.Y());
      assertEquals(0, colorImage3.X());
      assertNotNull(colorImage3);
      assertNotSame(colorImage0, colorImage3);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage1, colorImage0);
      assertSame(colorImage1, colorImage3);
      assertSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertSame(colorImage2, colorImage3);
      assertSame(colorImage3, colorImage2);
      assertNotSame(colorImage3, colorImage0);
      assertSame(colorImage3, colorImage1);
      assertFalse(colorImage0.equals((Object)colorImage2));
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertFalse(colorImage3.equals((Object)colorImage0));
      
      int int3 = (-9);
      // Undeclared exception!
      try { 
        colorImage3.min((-9));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -9
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 128;
      int int1 = 1194;
      Integer[] integerArray0 = null;
      ROI rOI0 = new ROI(1194, 0, 0, 128);
      assertEquals(129, rOI0.Y());
      assertEquals(1194, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(128, rOI0.ly());
      assertEquals(1195, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 128);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 442;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 1315;
      intArray0[4] = 128;
      intArray0[5] = (-2636);
      intArray0[6] = 32767;
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0, (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 544;
      intArray0[1] = 16;
      intArray0[2] = 16;
      intArray0[3] = 544;
      intArray0[4] = 544;
      intArray0[5] = 16;
      intArray0[6] = 544;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(544, 544, 16, 16, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, (-252));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ColorImage colorImage1 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      // Undeclared exception!
      try { 
        colorImage1.subtract(colorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[9];
      intArray0[0] = 2651;
      intArray0[1] = 4;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[4] = 2651;
      intArray0[5] = 4;
      intArray0[6] = 2651;
      intArray0[7] = 2651;
      intArray0[8] = 4;
      // Undeclared exception!
      try { 
        colorImage0.addbuffer(4, 2651, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI(2, 1, Integer.MIN_VALUE, 675);
      assertEquals(Integer.MIN_VALUE, rOI0.ux());
      assertEquals(1, rOI0.uy());
      assertEquals(675, rOI0.Y());
      assertEquals((-2147483645), rOI0.X());
      assertEquals(2, rOI0.lx());
      assertEquals(675, rOI0.ly());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(847, 847);
      assertEquals(847, interpolatedColorImage0.Y());
      assertEquals(847, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(colorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483648
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI(2665, (-1111), 2665, 2665);
      assertEquals((-1111), rOI0.uy());
      assertEquals(2665, rOI0.ly());
      assertEquals(2665, rOI0.lx());
      assertEquals(3777, rOI0.Y());
      assertEquals(2665, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(2665, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2665
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(2360, 0, (-3189), 2360);
      assertEquals((-3189), rOI0.ux());
      assertEquals(2361, rOI0.Y());
      assertEquals(5550, rOI0.X());
      assertEquals(2360, rOI0.ly());
      assertEquals(2360, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, 0, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.add(intArray0);
      assertEquals(8, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0, 0, 0, 0, 0, 0}, intArray0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      
      int int0 = 0;
      ROI rOI0 = new ROI(0, 0, (-1697), 0);
      assertEquals(0, rOI0.uy());
      assertEquals((-1697), rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1698, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI((-889), 0, 664, 1);
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(664, rOI0.lx());
      assertEquals(1554, rOI0.X());
      assertEquals((-889), rOI0.ux());
      assertEquals(2, rOI0.Y());
      
      int int1 = (-1811);
      rOI0.setROI((-1697), 0, (-1811), 1);
      assertEquals((-1811), rOI0.ux());
      assertEquals(1, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals((-1697), rOI0.lx());
      assertEquals(2, rOI0.Y());
      assertEquals(115, rOI0.X());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip(0, 128, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage1 = new ColorImage(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      ROI rOI0 = new ROI(0, 0, 0, 2);
      assertEquals(3, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(2, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(colorImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(1226, 2877, 1226, 2877, 1226, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      int int0 = 1226;
      ColorImage colorImage0 = new ColorImage(1226, 1226);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1226, colorImage0.Y());
      assertEquals(1226, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = null;
      int[] intArray0 = new int[10];
      intArray0[0] = 1226;
      intArray0[1] = 1226;
      // Undeclared exception!
      colorImage0.max();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(colorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(11, 11);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(11, interpolatedColorImage0.Y());
      assertEquals(11, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      String string0 = interpolatedColorImage0.toString(rOI0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(11, interpolatedColorImage0.Y());
      assertEquals(11, interpolatedColorImage0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(string0);
      assertEquals("11:11\nnull \n11:11\nnull \n11:11\nnull \n", string0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1730, 4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1730
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1226, 1226);
      assertEquals(1226, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1226, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(1226, 2877, 1226, 2877, 1226, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2877
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      int int0 = 448;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(5, 448);
      assertEquals(5, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(448, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(5, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(448, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(5, interpolatedColorImage1.X());
      assertEquals(448, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[7];
      intArray0[0] = 5;
      intArray0[1] = 448;
      intArray0[2] = 448;
      intArray0[3] = 448;
      intArray0[4] = 448;
      intArray0[5] = 5;
      intArray0[6] = 448;
      ROI rOI0 = new ROI(2, 1864, 448, 448);
      assertEquals(448, rOI0.uy());
      assertEquals(2, rOI0.ux());
      assertEquals(447, rOI0.X());
      assertEquals(1864, rOI0.ly());
      assertEquals(448, rOI0.lx());
      assertEquals(1417, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 448
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide((-27), (-27), (-27), (-27), (-27));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 0, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.divide(0, 0, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      int int0 = 2;
      ColorImage colorImage0 = new ColorImage(2, 2);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int1 = 2;
      // Undeclared exception!
      try { 
        colorImage0.subtract(2, (-417), 2, (-1546), 1509);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -417
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = ColorModel.YIQ;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.YIQ, interpolatedColorImage0.getColorModel());
      
      int int0 = (-1356);
      int[] intArray0 = new int[3];
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.YIQ, interpolatedColorImage0.getColorModel());
      
      intArray0[0] = (-1356);
      intArray0[1] = (-1356);
      intArray0[2] = (-1356);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-1356), (-1356), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(179);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 179
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      int int0 = 1226;
      ColorImage colorImage0 = new ColorImage(1226, 1226);
      assertEquals(1226, colorImage0.X());
      assertEquals(1226, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int int1 = 2877;
      // Undeclared exception!
      colorImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.diff(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.X());
      assertNotNull(interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(128, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = new ColorImage(32767, 452);
      assertEquals(32767, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(452, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(colorImage0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      int int0 = 1928;
      int int1 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1928, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(1928, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(1928, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(1928, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 3526, 3526);
      assertEquals(3526, rOI0.ly());
      assertEquals(3526, rOI0.lx());
      assertEquals(3527, rOI0.Y());
      assertEquals(3527, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 32, 3526, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 4);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = Integer.MIN_VALUE;
      intArray0[2] = 4;
      intArray0[3] = 4;
      intArray0[2] = 4;
      intArray0[5] = 0;
      intArray0[6] = 4;
      ColorImage colorImage1 = colorImage0.multiply(intArray0);
      assertEquals(7, intArray0.length);
      assertArrayEquals(new int[] {4, Integer.MIN_VALUE, 4, 4, 0, 0, 4}, intArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.X());
      assertEquals(4, colorImage1.Y());
      assertNotNull(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      
      ColorImage colorImage2 = new ColorImage(4, 2166);
      assertEquals(2166, colorImage2.Y());
      assertEquals(4, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotNull(colorImage2);
      assertFalse(colorImage2.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage1));
      
      // Undeclared exception!
      colorImage2.byteSize();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 3526, 3526);
      assertEquals(0, rOI0.ux());
      assertEquals(3526, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(3526, rOI0.lx());
      assertEquals(3527, rOI0.Y());
      assertEquals(3527, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.add(0, 0, (-2040));
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 3548;
      ColorImage colorImage0 = new ColorImage(int0, int0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 82;
      // Undeclared exception!
      try { 
        colorImage0.multiply(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = new ColorImage(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage1.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.subtract(3526, 3526, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = 1364;
      int int2 = 3269;
      Integer[] integerArray0 = new Integer[6];
      int int3 = (-1303);
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.divide((-3004), 3269, (-1303));
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int2));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int3));
      assertEquals(200, (int)integer0);
      
      jigl.image.Image<Integer[]> image0 = interpolatedColorImage0.clear(integerArray0);
      assertEquals(6, integerArray0.length);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, image0.X());
      assertEquals(0, image0.Y());
      assertNotNull(image0);
      assertSame(interpolatedColorImage0, image0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int2));
      assertFalse(integer1.equals((Object)int0));
      assertFalse(integer1.equals((Object)int3));
      assertFalse(integer1.equals((Object)int1));
      assertEquals(200, (int)integer1);
      
      Integer integer2 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)int1));
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int2));
      assertFalse(integer2.equals((Object)int3));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(300, (int)integer2);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 1364, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 15;
      // Undeclared exception!
      colorImage0.addbuffer(15, 3242, intArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[2];
      ROI rOI0 = new ROI(530, 1074, 1074, 530);
      assertEquals(530, rOI0.ux());
      assertEquals(530, rOI0.uy());
      assertEquals(545, rOI0.X());
      assertEquals(545, rOI0.Y());
      assertEquals(1074, rOI0.ly());
      assertEquals(1074, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = (-699);
      ColorModel colorModel0 = ColorModel.RGB;
      colorImage0.colorModel = colorModel0;
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      
      // Undeclared exception!
      try { 
        colorImage0.divide(128, (-699), 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(integerArray0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = (-757);
      int[] intArray0 = new int[4];
      intArray0[0] = (-757);
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = (-2960);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-757), (-2960), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2960
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(9, 9);
      assertEquals(9, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(9, colorImage0.X());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(9, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(9, colorImage0.X());
      assertNotNull(integerArray0);
      
      ColorImage colorImage1 = colorImage0.copy();
      assertEquals(9, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(9, colorImage0.X());
      assertEquals(9, colorImage1.X());
      assertEquals(9, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.byteSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear((Integer[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0, (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = new ColorImage(2313, 1527);
      assertEquals(1527, colorImage0.Y());
      assertEquals(2313, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      colorImage0.min(0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer0);
      assertEquals(200, (int)integer0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1086, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(1086, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(integerArray0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = interpolatedColorImage0.getColorModel();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, colorModel0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ColorImage colorImage0 = null;
      try {
        colorImage0 = new ColorImage((Image) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.AbstractImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.sqrSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(893, 893, 0, 0);
      assertEquals(0, rOI0.uy());
      assertEquals(893, rOI0.ly());
      assertEquals(893, rOI0.lx());
      assertEquals(894, rOI0.Y());
      assertEquals(894, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(colorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(462, 1370);
      assertEquals(1370, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(462, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      Integer[] integerArray0 = new Integer[4];
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertEquals(400, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(200, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(200, (int)integer3);
      
      integerArray0[3] = integer3;
      interpolatedColorImage1.set(0, 0, integerArray0);
      assertEquals(4, integerArray0.length);
      assertEquals(1370, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(462, interpolatedColorImage1.X());
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(1819, 128, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1819
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 4);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 4, 255, 255);
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(256, rOI0.X());
      assertEquals(252, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.add((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(7, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, (int[]) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1226, 46);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1226, colorImage0.X());
      assertEquals(46, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      colorImage0.min();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1, 1, 1, 0);
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1, 1, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      // Undeclared exception!
      try { 
        colorImage0.add((-2180), (-2180), intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(5, 5);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(5, interpolatedColorImage0.Y());
      assertEquals(5, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(5, interpolatedColorImage0.Y());
      assertEquals(5, interpolatedColorImage0.X());
      assertEquals(5, interpolatedColorImage1.X());
      assertEquals(5, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI(1976, 3, 3, 1799);
      assertEquals(1797, rOI0.Y());
      assertEquals(1974, rOI0.X());
      assertEquals(1799, rOI0.ly());
      assertEquals(1976, rOI0.lx());
      assertEquals(3, rOI0.uy());
      assertEquals(3, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.add(1799, 3, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1799
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(12, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(12, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract((ColorImage) interpolatedColorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage0 = null;
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((ColorImage) null, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(289, 0);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(289, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((ColorImage) interpolatedColorImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage((ColorImage) interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(0, interpolatedColorImage2.Y());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      
      InterpolatedColorImage interpolatedColorImage3 = (InterpolatedColorImage)interpolatedColorImage2.add((ColorImage) interpolatedColorImage1);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage3.X());
      assertEquals(0, interpolatedColorImage3.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage3.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage3.getInterpolationMethod());
      assertNotNull(interpolatedColorImage3);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage1);
      assertSame(interpolatedColorImage3, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage3, interpolatedColorImage0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage0));
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clip((-2146), (-2146));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = (-2642);
      int int1 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[5];
      Integer[] integerArray0 = new Integer[3];
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertEquals(100, (int)integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(0);
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)int0));
      assertTrue(integer1.equals((Object)int1));
      assertFalse(integer1.equals((Object)integer0));
      assertEquals(0, (int)integer1);
      
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertFalse(integer2.equals((Object)int1));
      assertEquals(200, (int)integer2);
      
      integerArray0[2] = integer2;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear(integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      int int0 = 235;
      int int1 = 16;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(235, 16);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(16, interpolatedColorImage0.Y());
      assertEquals(235, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      interpolatedColorImage0.getJavaImage();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ROI rOI0 = new ROI(1, 1, 1, 0);
      assertEquals(1, rOI0.X());
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.lx());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = new ColorImage(1, 3);
      assertEquals(3, colorImage0.Y());
      assertEquals(1, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(1141, 0, 2217, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        colorImage0.divide(11, 11, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1226, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1226, colorImage0.X());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[3] = 0;
      intArray0[2] = 1226;
      intArray0[3] = 0;
      ColorImage colorImage1 = colorImage0.subtract(intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 1226, 0}, intArray0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1226, colorImage0.X());
      assertEquals(1226, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      
      int int0 = (-1180);
      int int1 = 0;
      // Undeclared exception!
      try { 
        colorImage1.addbuffer((-802), 8, 0, 0, intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 713);
      assertEquals(713, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.multiply(0, 3);
      assertEquals(713, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(713, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertNotNull(interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(12, 12, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 255, 255);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(255, rOI0.ly());
      assertEquals(255, rOI0.lx());
      assertEquals(256, rOI0.Y());
      assertEquals(256, rOI0.X());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 4);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage1 = new ColorImage(colorImage0);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 893;
      intArray0[2] = 893;
      intArray0[3] = 0;
      intArray0[4] = 893;
      intArray0[5] = 893;
      ColorImage colorImage2 = colorImage1.multiply(893, 0, 11);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(4, colorImage2.Y());
      assertEquals(0, colorImage2.X());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertNotNull(colorImage2);
      assertNotSame(colorImage0, colorImage2);
      assertNotSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage1, colorImage0);
      assertSame(colorImage2, colorImage1);
      assertNotSame(colorImage2, colorImage0);
      assertFalse(colorImage0.equals((Object)colorImage1));
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage0));
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1226, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(1226, colorImage0.X());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(1226, colorImage0.X());
      assertNotNull(integerArray0);
      
      Integer[] integerArray1 = colorImage0.max();
      assertEquals(3, integerArray1.length);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(1226, colorImage0.X());
      assertNotNull(integerArray1);
      assertNotSame(integerArray1, integerArray0);
      assertFalse(integerArray1.equals((Object)integerArray0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 944;
      intArray0[1] = 51;
      intArray0[2] = (-1096);
      // Undeclared exception!
      try { 
        colorImage0.add(1813, 944, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 944
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(0, 0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(11, 11);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 11
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[2];
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 3526, 3526);
      assertEquals(3527, rOI0.Y());
      assertEquals(3527, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(3526, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(3526, rOI0.ly());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.min(128);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-1158), (-2180), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[9];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      intArray0[8] = 0;
      ROI rOI0 = new ROI(0, 0, 3, 0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(4, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(3, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.add(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(3387, 3387, intArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.minComponent();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ROI rOI0 = new ROI(891, 891, 5, 891);
      assertEquals(1, rOI0.Y());
      assertEquals(891, rOI0.uy());
      assertEquals(887, rOI0.X());
      assertEquals(5, rOI0.ux());
      assertEquals(891, rOI0.ly());
      assertEquals(891, rOI0.lx());
      assertNotNull(rOI0);
      
      Integer integer0 = new Integer(5);
      assertNotNull(integer0);
      assertEquals(5, (int)integer0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.multiply((ColorImage) interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertNotNull(interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      ROI rOI0 = new ROI(1979, 1979, 1979, 1979);
      assertEquals(1979, rOI0.lx());
      assertEquals(1979, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1979, rOI0.ux());
      assertEquals(1979, rOI0.uy());
      assertNotNull(rOI0);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set((-4911), (-4911), integerArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 4);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[10];
      intArray0[3] = 12;
      intArray0[1] = 4;
      ColorImage colorImage1 = colorImage0.clear();
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(4, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertNotNull(colorImage1);
      assertSame(colorImage0, colorImage1);
      assertSame(colorImage1, colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.subtract(128, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 128
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(integerArray0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      
      InterpolatedColorImage interpolatedColorImage3 = new InterpolatedColorImage(interpolatedColorImage1);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage3.X());
      assertEquals(0, interpolatedColorImage3.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage3.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage3.getInterpolationMethod());
      assertNotNull(interpolatedColorImage3);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage2));
      assertFalse(interpolatedColorImage3.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = interpolatedColorImage0.addSum();
      assertEquals(3, intArray0.length);
      assertArrayEquals(new int[] {0, 0, 0}, intArray0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(intArray0);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage3);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage3));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage2));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = 0;
      InterpolatedGrayImage interpolatedGrayImage0 = new InterpolatedGrayImage(3583, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedGrayImage0.getInterpolationMethod());
      assertEquals(0, interpolatedGrayImage0.addSum());
      assertEquals(0, interpolatedGrayImage0.absSum());
      assertEquals(3583, interpolatedGrayImage0.X());
      assertEquals(0L, interpolatedGrayImage0.sqrSum());
      assertEquals(0, interpolatedGrayImage0.Y());
      assertNotNull(interpolatedGrayImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.setPlane(1200, interpolatedGrayImage0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1200
         //
         verifyException("jigl.image.types.InterpolatedColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, (-651), 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(3516, 0, 0, 0, 3516);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-4187);
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract((-1892), (-4187), intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ROI rOI0 = new ROI(6, 255, 0, (-2198));
      assertEquals((-2198), rOI0.uy());
      assertEquals(255, rOI0.ly());
      assertEquals(6, rOI0.lx());
      assertEquals(2454, rOI0.Y());
      assertEquals(7, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 11);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(11, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      ROI rOI1 = new ROI((-1016), (-16777216), (-742), 0);
      assertEquals(0, rOI1.ly());
      assertEquals(16777217, rOI1.Y());
      assertEquals((-1016), rOI1.ux());
      assertEquals(275, rOI1.X());
      assertEquals((-742), rOI1.lx());
      assertEquals((-16777216), rOI1.uy());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.min(0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(891, 891, 891, 891);
      assertEquals(891, rOI0.ly());
      assertEquals(891, rOI0.lx());
      assertEquals(891, rOI0.uy());
      assertEquals(891, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(891, 891, 891, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ColorImage colorImage1 = new ColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertNotNull(colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      ColorImage colorImage2 = colorImage1.clear();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, colorImage1.X());
      assertEquals(0, colorImage1.Y());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(ColorModel.RGB, colorImage2.getColorModel());
      assertEquals(0, colorImage2.X());
      assertEquals(0, colorImage2.Y());
      assertNotNull(colorImage2);
      assertSame(colorImage1, colorImage2);
      assertNotSame(colorImage1, colorImage0);
      assertNotSame(colorImage2, colorImage0);
      assertSame(colorImage2, colorImage1);
      assertFalse(colorImage1.equals((Object)colorImage0));
      assertFalse(colorImage2.equals((Object)colorImage0));
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.subtract(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      Integer integer0 = colorImage0.minComponent();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNull(integer0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(1881, 1530);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1881
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(891, 891, 891, 891);
      assertEquals(891, rOI0.ux());
      assertEquals(891, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(891, rOI0.lx());
      assertEquals(891, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(891, 891, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 891
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 0;
      // Undeclared exception!
      try { 
        colorImage0.divide(0, 0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(integerArray0);
      
      ColorImage colorImage1 = colorImage0.copy();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage1.getColorModel());
      assertEquals(0, colorImage1.Y());
      assertEquals(0, colorImage1.X());
      assertNotNull(colorImage1);
      assertNotSame(colorImage0, colorImage1);
      assertNotSame(colorImage1, colorImage0);
      assertFalse(colorImage1.equals((Object)colorImage0));
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        colorImage0.subtract(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      InterpolatedColorImage interpolatedColorImage2 = new InterpolatedColorImage((ColorImage) interpolatedColorImage1);
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(0, interpolatedColorImage2.X());
      assertNotNull(interpolatedColorImage2);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((ColorImage) interpolatedColorImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.toString(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.divide(intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      ColorImage colorImage1 = null;
      try {
        colorImage1 = new ColorImage(colorImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 713);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(713, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, 0, 0, (-6888));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(1007, 2807, 1007, 389, (int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      int int0 = 533;
      rOI0.setROI(9, 1721, (-1234), 9);
      assertEquals(1244, rOI0.X());
      assertEquals(9, rOI0.lx());
      assertEquals((-1234), rOI0.ux());
      assertEquals(1721, rOI0.ly());
      assertEquals(9, rOI0.uy());
      assertEquals(1713, rOI0.Y());
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[0];
      ROI rOI0 = new ROI(2198, (-16777216), 3156, 39);
      assertEquals(16777256, rOI0.Y());
      assertEquals(3156, rOI0.lx());
      assertEquals(2198, rOI0.ux());
      assertEquals(959, rOI0.X());
      assertEquals((-16777216), rOI0.uy());
      assertEquals(39, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        colorImage0.multiply(2198, (-16777216), intArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      int[] intArray0 = new int[3];
      ColorModel colorModel0 = ColorModel.CMY;
      colorImage0.setColorModel(colorModel0);
      assertEquals(ColorModel.CMY, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        colorImage0.add(0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      int int0 = 2198;
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int int1 = 1999;
      rOI0.setROI(2198, 2198, 2198, 1999);
      assertEquals(2198, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(2198, rOI0.ly());
      assertEquals(2198, rOI0.lx());
      assertEquals(200, rOI0.Y());
      assertEquals(1999, rOI0.uy());
      
      int int2 = 0;
      // Undeclared exception!
      try { 
        colorImage0.multiply(3, (-659), 2129, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-298), (-298));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -298
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      int int0 = 1226;
      ColorImage colorImage0 = new ColorImage(1226, 1226);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(1226, colorImage0.Y());
      assertEquals(1226, colorImage0.X());
      assertNotNull(colorImage0);
      
      ROI rOI0 = null;
      int[] intArray0 = new int[10];
      intArray0[0] = 1226;
      intArray0[1] = 1226;
      // Undeclared exception!
      colorImage0.minComponent();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 1;
      ROI rOI0 = new ROI(1, 1, 1, 0);
      assertEquals(2, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(1, rOI0.lx());
      assertNotNull(rOI0);
      
      int int1 = 0;
      int int2 = 466;
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      GrayImage grayImage0 = interpolatedColorImage0.plane(1);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNull(grayImage0);
      
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.accum((double) 0, 4264.0104, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      int int0 = 5;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(5, 5);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(5, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(5, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(5, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(5, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(5, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(5, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[3];
      intArray0[0] = 672;
      intArray0[1] = 5;
      intArray0[2] = 672;
      // Undeclared exception!
      interpolatedColorImage1.addbuffer(5, 672, intArray0);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int int0 = interpolatedColorImage1.Y();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(integerArray0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage1.set(0, 0, integerArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = (-4097);
      int int1 = (-32768);
      int int2 = (-1389);
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1389), (-1988));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1389
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(12, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 12
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 4);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(4, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(0, 4, 255, 255);
      assertEquals(255, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(252, rOI0.Y());
      assertEquals(4, rOI0.uy());
      assertEquals(256, rOI0.X());
      assertEquals(255, rOI0.lx());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI();
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      interpolatedColorImage1.clip(0, (-238));
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(integerArray0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.set(0, 0, integerArray0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(727, 114);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(727, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(114, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(114, 0, (-1703), (-1703));
      assertEquals(1704, rOI0.Y());
      assertEquals(1818, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals((-1703), rOI0.ux());
      assertEquals((-1703), rOI0.uy());
      assertEquals(114, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.subtract(727, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 727
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 321;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 0, 0, 0, (-3381), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      int int0 = 1928;
      int int1 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(1928, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(1928, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(1928, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(1928, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int int2 = 255;
      int int3 = 0;
      int int4 = (-1925);
      Integer[] integerArray0 = interpolatedColorImage1.min();
      assertEquals(3, integerArray0.length);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(1928, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(1928, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertNotNull(integerArray0);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      // Undeclared exception!
      interpolatedColorImage1.toString();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      int int0 = 1370;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertEquals(400, (int)integer0);
      
      Integer integer1 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer1);
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(integer1.equals((Object)int0));
      assertEquals(200, (int)integer1);
      
      Integer integer2 = JLayeredPane.DEFAULT_LAYER;
      assertNotNull(integer2);
      assertFalse(integer2.equals((Object)integer0));
      assertFalse(integer2.equals((Object)int0));
      assertFalse(integer2.equals((Object)integer1));
      assertEquals(0, (int)integer2);
      
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      assertNotNull(integer3);
      assertFalse(integer3.equals((Object)integer2));
      assertFalse(integer3.equals((Object)int0));
      assertFalse(integer3.equals((Object)integer0));
      assertEquals(200, (int)integer3);
      
      Integer[] integerArray0 = new Integer[0];
      // Undeclared exception!
      try { 
        colorImage0.set(1370, 0, integerArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.absSum();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-3381), (-3381), (-3381), (-3381), (-3381), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE, Integer.MAX_VALUE);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add((-3381), (-3381), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3381
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      ROI rOI1 = new ROI(3526, 235, 0, 1317);
      assertEquals(1083, rOI1.Y());
      assertEquals(235, rOI1.uy());
      assertEquals(3527, rOI1.X());
      assertEquals(0, rOI1.ux());
      assertEquals(3526, rOI1.lx());
      assertEquals(1317, rOI1.ly());
      assertNotNull(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(0, 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 235
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      int int0 = 0;
      int int1 = 4;
      ColorImage colorImage0 = new ColorImage(0, 4);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 0, 0, 0, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.addbuffer(0, 1, intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      rOI0.setROI((-645), 3053, (-645), 1145);
      assertEquals(1909, rOI0.Y());
      assertEquals((-645), rOI0.ux());
      assertEquals(3053, rOI0.ly());
      assertEquals(1145, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals((-645), rOI0.lx());
      
      rOI0.setROI((-645), 0, 0, (-645));
      assertEquals(646, rOI0.Y());
      assertEquals(646, rOI0.X());
      assertEquals((-645), rOI0.ux());
      assertEquals((-645), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 4);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(4, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.get(0, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.add(0, 0);
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      
      String string0 = interpolatedColorImage1.toString();
      assertEquals(0, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(string0);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage1.subtract(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[3];
      intArray0[0] = 1203;
      intArray0[1] = 1203;
      intArray0[2] = 0;
      ROI rOI0 = new ROI(2167, (-53), 1203, 402);
      assertEquals(1203, rOI0.ux());
      assertEquals(456, rOI0.Y());
      assertEquals(2167, rOI0.lx());
      assertEquals((-53), rOI0.uy());
      assertEquals(402, rOI0.ly());
      assertEquals(965, rOI0.X());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(128, (-1825), intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply((-1685), 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1685
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      assertNotNull(integer0);
      assertEquals((-30000), (int)integer0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(0, 4);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertNotNull(colorImage0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertNotNull(rOI0);
      
      long[] longArray0 = interpolatedColorImage0.sqrSum();
      assertEquals(3, longArray0.length);
      assertArrayEquals(new long[] {0L, 0L, 0L}, longArray0);
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(4, colorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(4, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(longArray0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      int int0 = 0;
      ColorImage colorImage0 = new ColorImage(0, 0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(colorImage0);
      
      Integer[] integerArray0 = colorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(integerArray0);
      
      String string0 = colorImage0.toString();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertNotNull(string0);
      assertEquals("0:0\n0:0\n0:0\n", string0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(colorImage0);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertEquals(0, colorImage0.X());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = 3;
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        colorImage0.toString((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage(1090, 2274);
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2274, colorImage0.Y());
      assertEquals(1090, colorImage0.X());
      assertNotNull(colorImage0);
      
      ColorModel colorModel0 = colorImage0.getColorModel();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(2274, colorImage0.Y());
      assertEquals(1090, colorImage0.X());
      assertEquals(ColorModel.RGB, colorModel0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      int[] intArray0 = new int[6];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      ColorModel colorModel0 = ColorModel.RGB;
      interpolatedColorImage0.setColorModel(colorModel0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      
      int[] intArray0 = new int[0];
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(11, 11, intArray0, (ROI) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int int0 = interpolatedColorImage1.X();
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertEquals(0, int0);
      
      int[] intArray0 = new int[7];
      intArray0[0] = 11;
      intArray0[1] = 11;
      intArray0[2] = 11;
      intArray0[3] = 11;
      intArray0[4] = (-682);
      intArray0[5] = 11;
      intArray0[6] = 11;
      // Undeclared exception!
      try { 
        interpolatedColorImage1.accum(1.965841, 0.0, intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.InterpolatedColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide((ColorImage) interpolatedColorImage0, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 1110);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(1110, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2;
      intArray0[1] = 1110;
      intArray0[2] = 2;
      intArray0[3] = 2;
      ColorImage colorImage0 = interpolatedColorImage0.addbuffer(0, 2, intArray0);
      assertEquals(4, intArray0.length);
      assertArrayEquals(new int[] {2, 1110, 2, 2}, intArray0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, colorImage0.X());
      assertEquals(2, colorImage0.Y());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertNotNull(colorImage0);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      
      Integer[] integerArray0 = interpolatedColorImage1.max();
      assertEquals(3, integerArray0.length);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(1110, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNotNull(integerArray0);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      Integer integer0 = interpolatedColorImage1.minComponent();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(1110, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertNull(integer0);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage0.multiply((ColorImage) interpolatedColorImage1);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(1, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(1110, interpolatedColorImage1.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(1, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertNotNull(interpolatedColorImage2);
      assertSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage1);
      assertSame(interpolatedColorImage2, interpolatedColorImage0);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage1));
      
      // Undeclared exception!
      try { 
        interpolatedColorImage2.addbuffer((-594), 0, 0, (-1), intArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertNotNull(interpolatedColorImage0);
      
      ROI rOI0 = new ROI(1, 1, 2576, (-2548));
      assertEquals(2550, rOI0.Y());
      assertEquals(1, rOI0.ly());
      assertEquals(2576, rOI0.lx());
      assertEquals(2576, rOI0.X());
      assertEquals(1, rOI0.ux());
      assertEquals((-2548), rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 2576, 2254, 0, 0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(2198, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2198, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      InterpolationMethod interpolationMethod0 = InterpolationMethod.NEIGHBOR;
      Integer[] integerArray0 = interpolatedColorImage0.max();
      assertEquals(3, integerArray0.length);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2198, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(integerArray0);
      
      int[] intArray0 = new int[5];
      intArray0[0] = 0;
      intArray0[1] = 2198;
      intArray0[2] = 0;
      intArray0[3] = 2198;
      intArray0[4] = 2198;
      InterpolatedColorImage interpolatedColorImage1 = (InterpolatedColorImage)interpolatedColorImage0.add(intArray0);
      assertEquals(5, intArray0.length);
      assertArrayEquals(new int[] {0, 2198, 0, 2198, 2198}, intArray0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2198, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(2198, interpolatedColorImage1.X());
      assertNotNull(interpolatedColorImage1);
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      assertSame(interpolatedColorImage1, interpolatedColorImage0);
      
      interpolatedColorImage0.setInterpolationMethod(interpolationMethod0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(2198, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertSame(interpolatedColorImage0, interpolatedColorImage1);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.divide(0, 2198, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      Integer[] integerArray0 = interpolatedColorImage0.min();
      assertEquals(3, integerArray0.length);
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(integerArray0);
      
      ROI rOI0 = new ROI(123, 0, 128, 0);
      assertEquals(128, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(123, rOI0.ux());
      assertEquals(6, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertNotNull(rOI0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.multiply(123, 0, 0, 0, 123, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertNotNull(interpolatedColorImage0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.max(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(0, 0, 0, 9, 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.GrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      int int0 = 0;
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      int[] intArray0 = new int[1];
      intArray0[0] = 0;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage(0, 0);
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      assertNotNull(integer0);
      assertEquals(300, (int)integer0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.add(8, (-3532), 0, (-3532), (-3532), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertNotNull(rOI0);
      
      int int0 = (-1396);
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertNotNull(interpolatedColorImage0);
      
      int int1 = 3894;
      // Undeclared exception!
      try { 
        interpolatedColorImage0.InitFromImage((Image) null, (-1234), (-1234), (-1396), 3894);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage();
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      // Undeclared exception!
      try { 
        interpolatedColorImage0.clear();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      InterpolatedColorImage interpolatedColorImage0 = new InterpolatedColorImage(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertNotNull(interpolatedColorImage0);
      
      InterpolatedColorImage interpolatedColorImage1 = new InterpolatedColorImage((ColorImage) interpolatedColorImage0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertNotNull(interpolatedColorImage1);
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      InterpolatedColorImage interpolatedColorImage2 = (InterpolatedColorImage)interpolatedColorImage1.divide(0, 0);
      assertEquals(0, interpolatedColorImage0.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage0.getColorModel());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage0.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage0.Y());
      assertEquals(0, interpolatedColorImage1.X());
      assertEquals(ColorModel.RGB, interpolatedColorImage1.getColorModel());
      assertEquals(0, interpolatedColorImage1.Y());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage1.getInterpolationMethod());
      assertEquals(0, interpolatedColorImage2.Y());
      assertEquals(ColorModel.RGB, interpolatedColorImage2.getColorModel());
      assertEquals(0, interpolatedColorImage2.X());
      assertEquals(InterpolationMethod.NEIGHBOR, interpolatedColorImage2.getInterpolationMethod());
      assertNotNull(interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage0, interpolatedColorImage1);
      assertNotSame(interpolatedColorImage1, interpolatedColorImage0);
      assertSame(interpolatedColorImage1, interpolatedColorImage2);
      assertNotSame(interpolatedColorImage2, interpolatedColorImage0);
      assertSame(interpolatedColorImage2, interpolatedColorImage1);
      assertFalse(interpolatedColorImage0.equals((Object)interpolatedColorImage1));
      assertFalse(interpolatedColorImage1.equals((Object)interpolatedColorImage0));
      assertFalse(interpolatedColorImage2.equals((Object)interpolatedColorImage0));
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(0, colorImage0.X());
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      // Undeclared exception!
      try { 
        colorImage0.add(3526, 3526, 3526, 3526, 3526);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ColorImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      ColorImage colorImage0 = new ColorImage();
      assertEquals(ColorModel.RGB, colorImage0.getColorModel());
      assertEquals(0, colorImage0.X());
      assertEquals(0, colorImage0.Y());
      assertNotNull(colorImage0);
      
      ROI rOI0 = new ROI();
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertNotNull(rOI0);
      
      rOI0.setROI((-3301), (-3301), 16, 846);
      assertEquals(3318, rOI0.X());
      assertEquals(4148, rOI0.Y());
      assertEquals(846, rOI0.ly());
      assertEquals(16, rOI0.lx());
      assertEquals((-3301), rOI0.ux());
      assertEquals((-3301), rOI0.uy());
      
      // Undeclared exception!
      colorImage0.copy(rOI0);
  }
}

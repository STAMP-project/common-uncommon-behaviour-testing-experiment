/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 13:50:35 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.CatalogTexture;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.HomeTexture;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.TextureImage;
import com.eteks.sweethome3d.model.TexturesCategory;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.TemporaryURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Wall_ESTest extends Wall_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-4250.644F), 0.0F, 328.83344F, (-354.8003F));
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer((-1678));
      Integer integer1 = new Integer(1291);
      wall1.setRightSideColor(integer1);
      Wall wall2 = wall0.clone();
      wall2.getThickness();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.move(0.0F, 1737.6F);
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall1);
      wall0.setThickness((-3488.6F));
      wall0.containsPoint((-3488.6F), (-3171.64F), (-91.0F));
      wall1.getXEnd();
      wall0.getLeftSideShininess();
      wall0.setYEnd((-3488.6F));
      wall1.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      Integer integer0 = new Integer(1613);
      wall0.setLeftSideColor(integer0);
      wall0.setLeftSideColor(integer0);
      Float float0 = new Float((float) 1613);
      wall0.setArcExtent(float0);
      wall0.setYStart(0.1F);
      Float float1 = wall0.getHeight();
      wall0.setHeight(float1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Wall wall0 = new Wall(4361.929F, 2668.251F, (-3488.6F), 50.0F, 0.0F);
      Level level0 = new Level("5VmdclfM>FDU(:", 389.4222F, 0.0F, 0.0F);
      wall0.setLevel(level0);
      wall0.getLength();
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("5VmdclfM>FDU(:", propertyChangeListener0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy("5VmdclfM>FDU(:", propertyChangeListenerProxy0);
      wall0.getPoints();
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, 3449.74F);
      wall0.setLeftSideShininess(1603.36F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float(1145.1);
      wall1.setArcExtent(float0);
      Wall wall2 = new Wall(3401.94F, 728.45105F, 3235.4019F, 1603.36F, 1603.36F, 1603.36F);
      wall2.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall1.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Level level0 = new Level("A?HI?E;28|fW5aHdDl", 1.0F, (-2641.6494F), (-2641.6494F));
      wall0.setLevel(level0);
      wall0.intersectsRectangle(1.0F, 1.0F, 1.0F, 1.0F);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((-4874.2197F));
      Wall wall0 = new Wall((-4874.2197F), 269.71F, 2361.2463F, (-4874.2197F), 269.71F);
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent((URL) null);
      CatalogTexture catalogTexture0 = new CatalogTexture("RIGHT_SIDE_TEXTURE", temporaryURLContent0, 46.90524F, (-4874.2197F));
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.containsWallEndAt((-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, (-1.0F));
      Level level0 = new Level("dQrD^11#", (-1.0F), (-1.0F), 0.1F);
      Level level1 = level0.clone();
      wall0.isAtLevel(level1);
      wall0.containsWallStartAt(0.0F, 0.1F, 0.1F);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, 3449.74F);
      wall0.setLeftSideShininess(1603.36F);
      Level level0 = new Level("5VmdclfM>FDU(:", 728.45105F, 3401.94F, (-1.0F));
      wall0.setHeight((Float) null);
      wall0.setThickness(0.0F);
      wall0.containsPoint((-2353.9397F), (-1234.2F), (-4250.644F));
      wall0.getXEnd();
      wall0.getLeftSideShininess();
      wall0.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), 799.7838F, (-659.0F), (-246.16826F), 0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = new Wall((-1.0F), 799.7838F, (-0.85220087F), 676.6987F, 2.0F, (-47.493576F));
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXEnd((-246.16826F));
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, 3449.74F);
      Level level0 = new Level("5VmdclfM>FDU(:", 728.45105F, 3401.94F, (-1.0F));
      wall0.setLevel(level0);
      wall0.getLength();
      wall0.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy0);
      wall0.getPoints();
      wall0.getXEnd();
      wall0.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 406.8562F, 426.67F, 426.67F, 2.0F);
      wall0.setRightSideShininess((-2072.1023F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.0F, 0.0F, 0.1F, 0.1F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall(1.0F, 0.0F, (-1285.18F), 3179.8867F, 3179.8867F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float((double) (-2882.97F));
      Float.min(0.0F, 0.1F);
      Float.min((-2829.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Wall wall0 = new Wall((-897.60583F), (-3488.6F), (-897.60583F), (-897.60583F), (-3488.6F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-897.60583F), (-3488.6F), (-3488.6F), (-897.60583F), (-897.60583F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.setWallAtStart(wall1);
      wall1.setRightSideShininess(1912.802F);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float(0.0F);
      Float.max(0.0F, (-2.4635031F));
      Float float1 = new Float(2421.074F);
      Wall wall2 = wall1.getWallAtEnd();
      wall2.setArcExtent(float0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Y_END");
      wall1.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float2 = new Float(0.3115457F);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setXEnd((-0.7972705F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 681.91F, 623.741F, (-888.9F));
      Wall wall1 = wall0.clone();
      wall0.setYStart(1926.592F);
      Wall wall2 = new Wall((-1059.7491F), 0.0F, 0.0F, 0.2F, 35.233F, (-177.457F));
      wall2.getPattern();
      wall1.setPattern((TextureImage) null);
      wall0.setRightSideShininess(623.741F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-925.11804F), 0.0F, (-925.11804F), (-925.11804F));
      wall0.setRightSideShininess((-1.2317516F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      Float float0 = new Float((double) 0.22488791F);
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setRightSideShininess((-1327.748F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(19.254047F);
      wall1.setArcExtent(float0);
      wall1.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Wall wall0 = new Wall((-555.9136F), (-854.57F), (-555.9136F), 844.7879F, (-854.57F), 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.containsWallStartAt(861.9F, 861.9F, (-1327.748F));
      wall0.getYArcCircleCenter();
      wall0.getWallAtEnd();
      wall0.getXEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 406.8562F, 426.67F, 426.67F, 406.8562F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(2147169061);
      wall1.setRightSideColor(integer0);
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Float float0 = Float.valueOf((-0.7972705F));
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.move(0.0F, 1737.6F);
      wall0.setWallAtEnd(wall1);
      wall0.containsPoint((-3488.6F), (-3171.64F), (-91.0F));
      wall1.getXEnd();
      wall0.getLeftSideShininess();
      wall0.setYEnd((-3488.6F));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.setYStart((-1.2317516F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      Float float0 = new Float(Float.NEGATIVE_INFINITY);
      wall0.getLevel();
      wall0.setLevel((Level) null);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setLeftSideShininess((-47.493576F));
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Wall wall0 = new Wall(1092.0F, 1092.0F, 1092.0F, 1092.0F, 1092.0F);
      Float float0 = new Float((double) 1092.0F);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall(1882.8022F, 1.0F, (-777.9148F), (-392.61304F), 1.0F, 1691.7F);
      wall0.setWallAtStart(wall1);
      wall0.setRightSideShininess(0.0F);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float((-2829.0F));
      Float.max((-2591.9988F), 1691.7F);
      Float float1 = new Float(42.40293F);
      wall0.setArcExtent(float1);
      wall0.getPoints();
      Float float2 = new Float((-888.9F));
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), (-47.493576F), (-47.493576F));
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 1.0F, 1.0F, 406.8562F);
      Wall wall1 = new Wall(406.8562F, 1114.1F, 1.0F, 1114.1F, 1993.4481F);
      wall0.setLeftSideShininess(406.8562F);
      Integer integer0 = new Integer((-5));
      wall1.move(1993.4481F, 1993.4481F);
      Integer integer1 = Integer.getInteger("Linux", integer0);
      wall1.setRightSideColor(integer1);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      wall0.getWallAtEnd();
      wall1.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float((double) (-2829.0F));
      Float.min((-2829.0F), (-2882.97F));
      Float.min(96.3975F, 19.254047F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(19.254047F, 4018.743F, (-2829.0F), (-3416.827F), (-3416.827F));
      wall0.setWallAtEnd(wall1);
      Float float1 = wall0.getArcExtent();
      wall1.setArcExtent(float1);
      wall1.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 37.74111F, 0.1F, 0.1F, 37.74111F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 37.74111F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXEnd(0.1F);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Wall wall0 = new Wall(468.7F, 1191.0F, 468.7F, 1.0F, 1002.1058F, (-3323.9722F));
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer((-933));
      wall1.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.008985874F, 0.008985874F, 0.008985874F, 0.008985874F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
      Wall.clone((List<Wall>) linkedList0);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setRightSideShininess(0.1F);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(0.0F);
      Float float1 = new Float((-2351.912F));
      wall1.getPoints();
      wall0.getPoints();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      float float0 = 370.3539F;
      float float1 = 438.84F;
      Wall wall0 = new Wall((-2498.97F), (-416.0F), (-840.55975F), (-2498.97F), 370.3539F, 438.84F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall(0.0F, 1548.0F, (-840.55975F), (-3488.6F), (-888.9F), 0.0F);
      wall1.setYStart((-1777.8F));
      wall1.move((-840.55975F), (-840.55975F));
      Float float2 = new Float(3001.146594402);
      Float float3 = new Float((-4372.73391810829));
      wall0.setArcExtent(float3);
      wall1.setWallAtEnd(wall0);
      wall1.setThickness((-3488.6F));
      float float4 = (-1155.0F);
      // Undeclared exception!
      wall0.containsPoint((-3476.85F), (-1265.6187F), (-1155.0F));
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      Float float0 = new Float((double) (-1.2317516F));
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 623.741F, 0.1F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      wall0.move(0.1F, 0.1F);
      Float.min(0.0F, 0.1F);
      wall0.setXStart((-1.0F));
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall0);
      wall0.setRightSideShininess(0.1F);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      wall0.getRightSideTexture();
      Integer integer0 = new Integer(2696);
      wall0.setWallAtEnd(wall1);
      wall0.setRightSideShininess((-831.91F));
      Wall wall2 = wall1.getWallAtStart();
      wall2.setLeftSideTexture((HomeTexture) null);
      wall2.setWallAtEnd(wall1);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), (-4250.644F), (-4250.644F), 3449.74F);
      float float0 = (-1.0F);
      Level level0 = new Level("5VmdclfM>FDU(:", (-4250.644F), 3401.94F, (-1.0F));
      wall0.setHeight((Float) null);
      Wall wall1 = wall0.clone();
      Float float1 = new Float(3449.74F);
      wall0.setHeight(float1);
      wall1.setArcExtent(float1);
      wall0.getPoints();
      wall0.setYEnd((-4250.644F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall1);
      Wall.clone((List<Wall>) linkedList0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.0F, 0.1F, 0.1F);
      Float float0 = new Float(0.1F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 37.74111F, 0.1F, 0.1F, 37.74111F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 37.74111F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setXEnd(0.1F);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      wall0.setWallAtEnd(wall1);
      wall0.setRightSideShininess(0.0F);
      Wall wall2 = new Wall(0.0F, (-2829.0F), 330.4905F, (-1327.748F), 0.6210983F, (-2829.0F));
      wall2.setWallAtEnd(wall0);
      Float float0 = new Float(0.6210983F);
      Float float1 = new Float((-1520.22384));
      wall1.setArcExtent(float1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Wall");
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall3 = wall2.getWallAtEnd();
      wall3.getLength();
      wall3.getPoints();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Wall wall0 = new Wall((-2678.4F), 727.27875F, 2.0F, 1.0F, 1.0F);
      Wall wall1 = new Wall((-4250.644F), 1438.6F, (-911.153F), (-2678.4F), 167.94F);
      wall1.setWallAtStart(wall0);
      wall1.clone();
      Wall wall2 = new Wall((-1757.2289F), 1438.6F, 0.01F, 3205.5222F, 2.0F, (-554.0F));
      wall1.getPoints();
      wall0.setYEnd(3205.5222F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      ClassLoader.getSystemClassLoader();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      wall0.setXStart((-0.7972705F));
      wall0.getLeftSideColor();
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, 3449.74F);
      Level level0 = new Level("5VmdclfM>FDU(:", 728.45105F, 3401.94F, (-1.0F));
      wall0.setHeight((Float) null);
      Wall wall1 = wall0.clone();
      wall0.setArcExtent((Float) null);
      wall0.getPoints();
      wall1.setYEnd((-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "_sp+ciz%/rfjd#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource _sp+ciz%/rfjd#
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Wall wall0 = new Wall(0.17F, 0.17F, 0.17F, 0.17F, 0.17F, 0.17F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setXEnd(0.17F);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtStart(wall1);
      wall0.setWallAtEnd(wall1);
      wall0.setRightSideShininess(0.0F);
      Wall wall2 = new Wall(0.0F, (-2829.0F), 330.4905F, (-1327.748F), 0.6210983F, (-2829.0F));
      wall2.setWallAtEnd(wall0);
      Float float0 = new Float(0.6210983F);
      Wall wall3 = new Wall(19.254047F, 0.6210983F, (-2438.4F), (-1569.0F), (-2829.0F), 3348.617F);
      wall3.setArcExtent(float0);
      wall1.setWallAtEnd(wall3);
      wall1.setArcExtent(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.getLevel();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      Float.min(0.1F, 0.1F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Wall wall0 = new Wall(828.1458F, 2119.3865F, (-4948.0F), 2598.5813F, 3181.95F, 828.1458F);
      wall0.setRightSideShininess(2598.5813F);
      Wall wall1 = wall0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G");
      wall1.containsPoint(730.09F, 2598.5813F, 730.09F);
      Float float0 = new Float(757.6840752);
      Float.sum((-4948.0F), 1877.365F);
      wall1.setHeightAtEnd(float0);
      Integer integer0 = new Integer(1698);
      Integer integer1 = Integer.getInteger("ARC_EXTENT", integer0);
      wall1.setXEnd(1877.365F);
      wall1.setRightSideColor(integer1);
      wall1.intersectsRectangle(2598.5813F, (-1.0F), (-1327.748F), 2599.3677F);
      wall1.setLeftSideTexture((HomeTexture) null);
      Float float1 = new Float((double) 730.09F);
      wall1.setArcExtent(float1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.setXEnd((-47.493576F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-2188.1238F), (-1.0F), (-3488.6F), (-81.471F), 2096.0F, 2096.0F);
      wall0.setWallAtEnd(wall1);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      Wall wall2 = new Wall((-3488.6F), (-888.9F), (-2829.3362F), 0.0F, 1801.0F, 0.0F);
      wall0.setWallAtEnd(wall2);
      wall2.getPoints();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall2.getStartPointToEndPointDistance();
      wall0.getArcExtent();
      wall1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Float float0 = new Float((-0.7972705F));
      Wall wall1 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), 998.33264F, (-0.7972705F), 998.33264F);
      wall0.setWallAtStart(wall1);
      wall1.setWallAtStart(wall0);
      wall0.setXEnd(998.33264F);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 21.201466F, 0.0F);
      wall0.setThickness(21.201466F);
      wall0.getRightSideTexture();
      wall0.move(0.0F, 95.5F);
      Float.min(21.201466F, (-4242.7F));
      Wall wall1 = new Wall((-4242.7F), 0.0F, 2671.8286F, 0.0F, (-4242.7F), (-1.0F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall((-2954.387F), 21.201466F, 0.0F, 21.201466F, 21.201466F);
      Wall wall3 = wall2.clone();
      wall0.setWallAtStart(wall2);
      wall0.setRightSideShininess(1.0F);
      wall0.setWallAtEnd(wall2);
      Float float0 = new Float(2671.8286F);
      wall2.setWallAtEnd(wall0);
      Float float1 = new Float((-1119.174F));
      wall2.setArcExtent(float1);
      wall1.getPoints();
      Float float2 = new Float(2113.0F);
      wall2.getPoints();
      wall3.getHeightAtEnd();
      Wall wall4 = wall2.clone();
      Float float3 = new Float((double) 1.0F);
      wall4.setHeight(float3);
      wall2.getPattern();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Float float0 = new Float(1.0F);
      Wall wall1 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, (-1982.4824F));
      URL uRL0 = MockURL.getHttpExample();
      URLContent uRLContent0 = new URLContent(uRL0);
      CatalogTexture catalogTexture0 = new CatalogTexture("com.eteks.sweethome3d.model.Wall$Property", uRLContent0, 1.0F, 1.0F, false);
      wall1.setPattern(catalogTexture0);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.setRightSideColor((Integer) null);
      Float float0 = new Float(1482.8734130859375);
      wall0.setHeightAtEnd(float0);
      wall0.setYEnd(0.1F);
      wall0.setArcExtent(float0);
      Wall wall1 = new Wall(511.0F, 0.0F, 511.0F, 0.1F, 511.0F, 0.0F);
      wall1.getLeftSideShininess();
      wall0.isTrapezoidal();
      Wall wall2 = wall0.clone();
      wall2.isTrapezoidal();
      wall1.getLeftSideShininess();
      wall1.getPattern();
      wall1.getHeightAtEnd();
      Float float1 = new Float((-2783.34F));
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), (-3488.6F), (-3488.6F), (-888.9F), (-888.9F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.move((-3488.6F), 1737.6F);
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.getStartPointToEndPointDistance();
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall((-2829.0F), 0.1F, (-2829.0F), 0.1F, 19.254047F);
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-2829.0F));
      wall1.setWallAtEnd(wall0);
      Float float1 = new Float(2758.6248F);
      wall0.setArcExtent(float0);
      wall1.getPoints();
      Float float2 = new Float(2758.6248F);
      wall0.getPoints();
      wall1.getHeightAtEnd();
      wall0.clone();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.move((-888.9F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setYStart(1912.802F);
      wall0.move(0.0F, 1737.6F);
      wall0.setWallAtEnd(wall0);
      wall0.containsPoint((-3488.6F), (-3171.64F), (-91.0F));
      wall0.getXEnd();
      wall0.containsPoint(1912.802F, 1737.6F, 1439.4509F);
      wall0.getLeftSideShininess();
      wall0.setYEnd((-3488.6F));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Wall wall0 = new Wall((-67.0F), (-67.0F), (-67.0F), 614.3169F, 1886.18F, 614.3169F);
      wall0.setYStart(0.1F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      PropertyChangeEvent propertyChangeEvent0 = null;
      try {
        propertyChangeEvent0 = new PropertyChangeEvent((Object) null, "com.eteks.sweethome3d.model.Wall$Property", propertyChangeListenerProxy0, propertyChangeListenerProxy0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Float float0 = new Float((-1.0F));
      wall0.setHeightAtEnd(float0);
      wall0.setHeightAtEnd(float0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 1.0F, 1.0F, 406.8562F);
      Wall wall1 = new Wall(406.8562F, 1114.1F, 1.0F, 1114.1F, 1993.4481F);
      wall0.setLeftSideShininess(406.8562F);
      wall1.setWallAtStart(wall0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 7.762316F, 19.254047F, 19.254047F, 7.762316F, 19.254047F);
      Float.min(909.9053F, 909.9053F);
      Wall wall1 = new Wall(909.9053F, 0.0F, 0.1F, (-262.23715F), 7.762316F, (-47.493576F));
      wall0.setWallAtStart(wall1);
      wall0.getPoints();
      Wall wall2 = wall0.getWallAtStart();
      wall2.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, (-1.0F));
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      Wall wall2 = wall0.getWallAtEnd();
      wall1.setWallAtStart(wall2);
      wall0.setWallAtEnd(wall2);
      wall0.setRightSideShininess(0.1F);
      wall0.setWallAtEnd(wall0);
      Float float0 = new Float(Float.POSITIVE_INFINITY);
      Float float1 = new Float((-1336.0F));
      wall1.setArcExtent(float1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6B]'C@RPADj62");
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall2.getLength();
      Wall wall3 = wall0.getWallAtEnd();
      wall3.getPoints();
      wall3.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hC<A'}%{N1O6y");
      Wall wall0 = new Wall((-2575.531F), 2489.1F, 2489.1F, 1.0F, 1865.9783F, 789.2888F);
      Integer integer0 = new Integer(0);
      Integer.sum((-1780), (-1780));
      wall0.containsWallStartAt(0, (-2118.0F), (-2118.0F));
      Integer.compare(2391, (-241));
      Integer.toUnsignedLong(2391);
      wall0.setLeftSideColor(integer0);
      wall0.move(0.0F, 1865.9783F);
      wall0.setHeight((Float) null);
      wall0.getLeftSideColor();
      Random.setNextRandom(2145983034);
      wall0.getRightSideShininess();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Wall wall0 = new Wall(1389.54F, (-1.0F), (-1.0F), (-1.0F), 0.0F);
      wall0.getWallAtStart();
      String string0 = "";
      Wall wall1 = wall0.clone();
      wall1.containsPoint(1389.54F, 1389.54F, 1950.206F);
      wall1.setYStart((-1.0F));
      String string1 = "}3A/B]EAi|C'LA!aR";
      Class<Integer> class0 = Integer.class;
      Integer integer0 = new Integer(33);
      wall0.setLeftSideColor(integer0);
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, "", true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.intersectsRectangle((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 0.1F, 0.1F, 19.254047F);
      wall0.move(0.1F, 0.1F);
      Float.min(0.1F, 0.1F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
      wall0.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Wall wall0 = new Wall((-393.51367F), (-393.51367F), (-416.0F), (-416.0F), (-1.0F));
      Wall wall1 = wall0.clone();
      wall1.setXStart((-393.51367F));
      Level level0 = new Level("jar:", 0.01F, 0.01F, (-416.0F));
      wall0.setLevel(level0);
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.getHeight();
      wall0.getRightSideShininess();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.move(0.0F, 1737.6F);
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall1);
      wall0.setThickness((-3488.6F));
      wall0.containsPoint((-3488.6F), (-3171.64F), (-91.0F));
      wall1.getXEnd();
      wall0.getLeftSideShininess();
      wall0.setYEnd((-3488.6F));
      wall1.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = wall0.clone();
      wall0.setYStart(1912.802F);
      wall0.move(0.0F, 1737.6F);
      Float float0 = new Float(1907.0);
      Float float1 = new Float((double) (-888.9F));
      wall1.setArcExtent(float1);
      wall0.setWallAtEnd(wall1);
      wall0.setThickness(1912.802F);
      wall1.containsPoint((-1599.159F), 1.0F, (-888.9F));
      wall1.getXEnd();
      wall1.getLeftSideShininess();
      Wall wall2 = wall0.getWallAtEnd();
      Float float2 = new Float(543.283F);
      wall2.setArcExtent(float2);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 1.0F, 1.0F, 406.8562F);
      Wall wall1 = new Wall(406.8562F, 1114.1F, 1.0F, 1114.1F, 1993.4481F);
      wall0.setLeftSideShininess(406.8562F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Wall wall0 = new Wall((-685.0F), (-685.0F), (-685.0F), (-685.0F), (-685.0F), (-470.04337F));
      float float0 = (-2536.9F);
      Wall wall1 = new Wall(0.0F, (-1.0F), (-2536.9F), 781.38F, 0.0F, (-685.0F));
      Float.max((-3488.6F), (-1.0F));
      Float float1 = new Float((-1.0F));
      wall0.setHeight(float1);
      Wall wall2 = wall1.clone();
      wall2.setArcExtent((Float) null);
      wall1.getPoints();
      wall0.setYEnd((-2536.9F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      String string0 = "";
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource 
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Wall wall0 = new Wall(5879.0F, 5879.0F, 5879.0F, (-786.0855F), (-1.0F), 0.0F);
      wall0.containsWallEndAt(0.0F, (-3360.71F), (-1.0F));
      wall0.containsWallEndAt((-356.3F), (-3705.068F), 5879.0F);
      wall0.intersectsRectangle(0.0F, 0.0F, (-1784.175F), (-1.0F));
      wall0.setThickness(5879.0F);
      Wall wall1 = wall0.clone();
      Float float0 = new Float((-1.0F));
      wall1.setHeightAtEnd(float0);
      wall0.setWallAtStart(wall1);
      wall0.getArcExtent();
      wall0.getPattern();
      wall0.getThickness();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, (-4250.644F));
      wall0.setLeftSideShininess(1603.36F);
      Level level0 = new Level("5VmdclfM>FDU(:", 728.45105F, 3401.94F, (-1.0F));
      Wall wall1 = wall0.clone();
      wall0.setArcExtent((Float) null);
      wall0.getPoints();
      wall1.setYEnd((-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Wall wall0 = new Wall(0.008985874F, 0.1F, 0.008985874F, 0.008985874F, 0.1F, 0.008985874F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
      Wall.clone(list1);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setRightSideShininess(0.1F);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 0.008985874F);
      Float float1 = new Float((-2351.912F));
      wall1.setArcExtent(float1);
      wall1.getPoints();
      Float float2 = new Float((-1.0F));
      wall0.getPoints();
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Wall wall0 = new Wall((-685.0F), (-685.0F), (-685.0F), (-685.0F), (-685.0F), (-470.04337F));
      Wall wall1 = new Wall(0.0F, (-470.04337F), 0.0F, 0.0F, 2657.555F);
      wall0.setLeftSideShininess(0.0F);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, (-2591.4F));
      wall0.setThickness((-2783.34F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.intersectsRectangle((-2591.4F), 0.1F, (-2783.34F), (-978.26F));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      wall0.setRightSideColor((Integer) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      float float0 = 1422.61F;
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 457.0F, 1422.61F);
      Float float1 = new Float((double) 1422.61F);
      Float.isFinite(0.0F);
      Float.max(0.0F, (-2494.0298F));
      wall0.setHeight(float1);
      wall0.setArcExtent(float1);
      wall0.getPoints();
      wall0.setYEnd(1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      String string0 = "p/xjtS>wsX";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "t'pP* {-9UO*^`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource t'pP* {-9UO*^`
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-2829.0F));
      Float.max((-1.0F), (-2829.0F));
      Float float1 = new Float((-1.0F));
      wall0.setArcExtent(float1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Wall");
      wall1.getPoints();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Float float2 = new Float((-2829.0F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Wall wall0 = new Wall((-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F));
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 457.0F, 1.0F);
      Float float0 = new Float((double) 0.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, (-2494.0298F));
      wall0.setHeight(float0);
      wall0.setArcExtent(float0);
      Level level0 = new Level("", (-38.661F), 3827.2F, 0.0F);
      wall0.setLevel(level0);
      wall0.getXStart();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 457.0F, 457.0F);
      Float float0 = new Float((double) 1.0F);
      Float.isFinite(0.0F);
      Float.max(0.0F, (-2494.0298F));
      wall0.setHeight(float0);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.setYEnd(1.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Integer integer0 = new Integer(2305);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Float float0 = new Float((double) (-0.7972705F));
      wall0.setArcExtent(float0);
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      float float0 = 316.0F;
      Wall wall0 = new Wall(526.5101F, 316.0F, (-1009.777F), 0.0F, (-195.2577F));
      String string0 = "7dcffS=CM]o";
      try { 
        MockURL.URL("7dcffS=CM]o", "fJ:_}mfS%03<=*r7", 5298, "7dcffS=CM]o");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: 7dcffs=cm]o
         //
         verifyException("java.net.URL", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      Float float0 = new Float((double) 0.22488791F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-925.11804F), (-1.2317516F), (-925.11804F), (-1.2317516F));
      wall0.intersectsRectangle((-925.11804F), (-925.11804F), (-925.11804F), (-925.11804F));
      Integer integer0 = new Integer((-87));
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideTexture();
      wall0.getLeftSideColor();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float float0 = new Float((double) (-2882.97F));
      Float.min((-2829.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.containsWallEndAt((-55.0F), (-2882.97F), (-1645.989F));
      wall1.setRightSideShininess(0.1F);
      wall0.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Float float0 = new Float((double) (-0.7972705F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setLeftSideShininess((-3089.0F));
      Wall wall2 = wall0.getWallAtStart();
      wall2.setWallAtEnd(wall0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
      wall0.intersectsRectangle(1.0F, 1.0F, 1.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      wall0.getLevel();
      wall0.setLevel((Level) null);
      Wall wall1 = wall0.clone();
      wall1.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setRightSideShininess((-1327.748F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(19.254047F);
      wall1.intersectsRectangle(0.1F, (-705.456F), 3072.0F, (-705.456F));
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-2829.0F));
      wall1.setWallAtEnd(wall0);
      Float float1 = new Float(2758.6248F);
      wall0.setArcExtent(float0);
      wall1.getPoints();
      Float float2 = new Float(2758.6248F);
      wall0.getPoints();
      wall1.getHeightAtEnd();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      Float float0 = new Float((double) 0.22488791F);
      wall0.setArcExtent(float0);
      wall0.setHeight(float0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setThickness(0.0F);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Wall wall0 = new Wall(2.1950982F, 2.1950982F, 2.1950982F, (-47.493576F), (-47.493576F));
      wall0.setWallAtStart(wall0);
      wall0.setLeftSideShininess((-47.493576F));
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 406.8562F, 848.69995F, (-1706.4833F), (-492.3754F), (-1706.4833F));
      Level level0 = new Level("xrNy`rHgG", (-492.3754F), (-1290.0F), 848.69995F);
      Level level1 = level0.clone();
      wall0.isAtLevel(level1);
      Integer integer0 = new Integer(2);
      wall0.setLeftSideColor(integer0);
      wall0.getYStart();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Wall wall0 = new Wall((-889.1127F), 0.1F, 0.1F, (-889.1127F), (-889.1127F), (-889.1127F));
      wall0.setLeftSideShininess((-889.1127F));
      Wall wall1 = wall0.clone();
      wall0.getRightSideTexture();
      wall1.setLeftSideTexture((HomeTexture) null);
      float float0 = 0.1F;
      wall0.getLeftSideTexture();
      HomeTexture homeTexture0 = null;
      try {
        homeTexture0 = new HomeTexture((TextureImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomeTexture", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float float0 = new Float((double) (-2882.97F));
      Float.min((-2829.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      wall0.setThickness(389.4222F);
      wall0.containsPoint(0.0F, 0.0F, 1603.36F);
      float float1 = new Float(0.0F);
      wall0.getLeftSideShininess();
      Wall wall1 = new Wall(0.0F, (-3.33983F), (-3.33983F), 1603.36F, (-2518.51F));
      wall1.getRightSideShininess();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      wall0.setWallAtStart(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.0F, 0.1F, 0.1F);
      CatalogTexture catalogTexture0 = new CatalogTexture("LEVEL", (Content) null, 0.1F, 0.0F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setLeftSideTexture(homeTexture0);
      wall0.setRightSideColor((Integer) null);
      Float float0 = new Float(1.0F);
      wall0.setArcExtent(float0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Wall wall0 = new Wall((-2437.84F), (-2437.84F), 708.0F, (-2088.093F), (-2437.84F), (-1637.0444F));
      wall0.setYEnd(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Float float0 = new Float((-24.56F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Float.min((-1441.0F), 2725.79F);
      Float.min((-2437.84F), 1.0F);
      Float.min((-2437.84F), (-1637.0444F));
      wall0.setYEnd((-24.56F));
      wall0.setHeightAtEnd(float0);
      wall0.getLeftSideColor();
      wall0.setYEnd((-2437.84F));
      wall0.getLeftSideTexture();
      wall0.setArcExtent(float0);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getLeftSideShininess();
      wall0.isTrapezoidal();
      wall0.isTrapezoidal();
      wall0.getLeftSideShininess();
      wall0.getPattern();
      Wall wall1 = wall0.clone();
      wall1.getHeightAtEnd();
      List<Wall> list0 = null;
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Float float0 = new Float(423.0F);
      Float.isFinite(0.0F);
      Float.min(2955.904F, (-925.11804F));
      Float.min((-3033.02F), 423.0F);
      Wall wall0 = new Wall(2955.904F, 2955.904F, 423.0F, (-3033.02F), (-925.11804F), (-3033.02F));
      wall0.setYEnd((-2567.8364F));
      Float float1 = new Float(2955.904F);
      wall0.setHeightAtEnd(float1);
      wall0.setYEnd(0.0F);
      wall0.setArcExtent(float0);
      wall0.getLeftSideShininess();
      wall0.isTrapezoidal();
      wall0.isTrapezoidal();
      wall0.getLeftSideShininess();
      wall0.getPattern();
      wall0.getHeightAtEnd();
      float float2 = new Float(423.0F);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Float float0 = new Float((double) (-2882.97F));
      Float.min(0.0F, 0.1F);
      Float.min((-2829.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.getWallAtEnd();
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall1.getLength();
      Integer integer0 = new Integer(1039);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Wall wall0 = new Wall(1963.6F, 847.82F, 847.82F, 1963.6F, 847.82F);
      Float float0 = new Float(1.0E-5);
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setRightSideShininess(1.0F);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.setYStart(1912.802F);
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall1);
      wall0.setThickness((-3488.6F));
      wall0.containsPoint((-3488.6F), (-3171.64F), (-91.0F));
      wall0.containsWallStartAt(1912.802F, (-3488.6F), 1912.802F);
      Wall wall2 = wall0.getWallAtEnd();
      wall2.setWallAtEnd(wall0);
      wall0.getPattern();
      // Undeclared exception!
      try { 
        wall0.intersectsRectangle((-2837.5513F), (-3488.6F), (-888.9F), 2878.8875F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Wall wall0 = new Wall((-393.51367F), (-393.51367F), (-393.51367F), (-393.51367F), (-393.51367F));
      Wall wall1 = new Wall((-3320.3027F), (-3320.3027F), (-3320.3027F), (-393.51367F), 0.01F);
      wall0.setWallAtStart(wall1);
      Wall wall2 = wall0.clone();
      wall2.setXStart((-393.51367F));
      Wall wall3 = new Wall((-393.51367F), (-393.51367F), (-972.3F), (-393.51367F), 679.0F, 679.0F);
      wall0.clone();
      Integer integer0 = new Integer(4);
      Wall wall4 = new Wall(3135.0F, (-2747.2053F), 0.01F, (-4250.644F), (-1584.14F));
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(2125767111);
      wall4.setRightSideColor(integer2);
      wall3.getLength();
      wall2.getYEnd();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(2147169061);
      Integer integer1 = new Integer(2147169061);
      wall1.setRightSideColor(integer1);
      wall1.getHeight();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.move(0.0F, 1737.6F);
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall1);
      wall0.setThickness((-3488.6F));
      wall0.containsPoint((-3488.6F), (-3171.64F), (-91.0F));
      wall1.getXEnd();
      wall0.getLeftSideShininess();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.isAtLevel((Level) null);
      wall1.getXArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.getRightSideTexture();
      Float float0 = new Float((-3488.6F));
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd((Wall) null);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer((-2764));
      wall1.setLeftSideColor(integer0);
      wall1.intersectsRectangle((-1.0F), (-1.0F), (-2764), 1154);
      wall1.getLeftSideTexture();
      Integer integer1 = new Integer((-2764));
      Level level0 = new Level("", (-2764), 658.049F, (-3488.6F));
      wall1.setLevel(level0);
      Integer integer2 = new Integer(1154);
      wall1.setLeftSideColor(integer2);
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Wall wall0 = new Wall(1389.54F, (-1.0F), (-1.0F), (-1.0F), 0.0F);
      wall0.getWallAtStart();
      Wall wall1 = wall0.clone();
      Wall wall2 = new Wall((-1420.1F), (-1.0F), 1251.0F, (-1.0F), (-1.0F));
      wall2.containsWallEndAt((-1072.4056F), (-822.53F), 3785.145F);
      wall1.setRightSideShininess(728.45105F);
      wall2.setLeftSideShininess(1389.54F);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 406.8562F, 406.8562F, 406.8562F);
      assertNotNull(wall0);
      assertEquals(406.8562F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(406.8562F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(406.8562F, wall0.getThickness(), 0.01F);
      assertEquals(406.8562F, wall0.getXStart(), 0.01F);
      assertEquals(406.8562F, wall0.getYStart(), 0.01F);
      assertEquals(406.8562F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(406.8562F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.getRightSideColor();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float float0 = new Float((double) (-2882.97F));
      Float.min((-2829.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.setThickness(1.0F);
      wall1.containsPoint(0.0F, (-2882.97F), (-2829.0F));
      wall1.getXEnd();
      wall1.getLeftSideShininess();
      Wall wall2 = wall0.clone();
      wall2.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Wall wall0 = new Wall(29.206541F, 29.206541F, 29.206541F, 29.206541F, 29.206541F, 29.206541F);
      wall0.setYEnd(29.206541F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.containsPoint(0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 457.0F, 1422.61F);
      Float float0 = new Float((double) 1422.61F);
      Float.isFinite(0.0F);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "x^P)hGF;p`[48YtdR", resourceURLContent0, 352.8F, (-191.53F), "dj");
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.containsWallStartAt((-2494.0298F), (-1.0F), (-1.0F));
      wall0.getWallAtEnd();
      wall0.setWallAtEnd((Wall) null);
      wall0.getPattern();
      wall0.intersectsRectangle((-1.0F), 1449.4879F, 1133.0F, 1133.0F);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.containsWallStartAt(861.9F, (-1327.748F), 98.0F);
      wall0.getYArcCircleCenter();
      wall0.setHeightAtEnd((Float) null);
      wall0.containsPoint((-576.165F), 0.0F, (-576.165F));
      wall0.getWallAtEnd();
      wall0.getXEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.isTrapezoidal();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Float float0 = wall0.getHeight();
      wall0.setHeight(float0);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, (-1.0F));
      float float0 = new Float(0.0F);
      wall0.getPattern();
      wall0.getPoints();
      wall0.getThickness();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.move(0.0F, 1737.6F);
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall1);
      wall0.setThickness((-3488.6F));
      wall0.containsPoint((-3488.6F), (-3171.64F), (-91.0F));
      wall1.getXEnd();
      wall0.getXArcCircleCenter();
      Wall wall2 = new Wall((-1556.3F), 0.0F, 1.0F, 2560.29F, (-3488.6F), 1.0F);
      wall2.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      wall0.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Wall wall0 = new Wall(2.1950982F, (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F), (-47.493576F));
      wall0.setWallAtStart(wall0);
      wall0.setLeftSideShininess((-47.493576F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Wall wall0 = new Wall((-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F));
      wall0.setYStart((-1.0F));
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      // Undeclared exception!
      try { 
        wall0.getPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      Float float0 = new Float(0.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setLeftSideShininess(0.0F);
      wall0.setWallAtEnd(wall1);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      wall0.isTrapezoidal();
      wall0.getLeftSideColor();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      wall0.move((-47.493576F), 2.1950982F);
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 21.201466F, 0.0F);
      wall0.setThickness((-2783.34F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Integer integer0 = new Integer(2718);
      wall0.setLeftSideColor(integer0);
      wall0.intersectsRectangle(21.201466F, 21.201466F, (-2783.34F), (-978.0F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideColor(integer0);
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.setLeftSideShininess((-888.9F));
      Level level0 = new Level("k!*pcGp", (-1.0F), (-1.0F), (-1.0F));
      wall0.setHeight((Float) null);
      wall0.getXEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList1);
      Wall.clone(list0);
      wall0.getXArcCircleCenter();
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F), (-1.2317516F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      wall0.move(1.0F, (-2828.9F));
      Float.min((-174.091F), (-1.2317516F));
      Wall wall1 = new Wall((-500.0F), (-174.091F), (-500.0F), (-174.091F), (-174.091F));
      Wall wall2 = wall1.clone();
      wall0.setWallAtEnd(wall2);
      Wall wall3 = wall1.clone();
      wall2.setRightSideShininess(3684.4294F);
      wall2.setWallAtEnd(wall0);
      Float float0 = new Float(1.0F);
      wall2.setWallAtEnd(wall3);
      Float float1 = new Float(1948.0713F);
      wall1.setArcExtent(float1);
      wall3.getPoints();
      Float float2 = new Float((-500.0F));
      wall1.getPoints();
      wall3.getPoints();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = new Wall((-2829.0F), 0.1F, (-2829.0F), 0.1F, 19.254047F);
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      Float float0 = new Float(2758.6248F);
      wall1.getPoints();
      Float float1 = new Float(2758.6248F);
      wall0.getPoints();
      wall1.getHeightAtEnd();
      wall0.clone();
      Wall.Property.values();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.containsWallStartAt(861.9F, (-1327.748F), 98.0F);
      wall0.getYArcCircleCenter();
      wall0.getWallAtEnd();
      wall0.getXEnd();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Wall wall0 = new Wall((-38.96565F), (-38.96565F), (-38.96565F), 2.0F, (-38.96565F), (-38.96565F));
      Float float0 = new Float(1.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setLeftSideShininess((-38.96565F));
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      wall1.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-230.3F), (-230.3F), 0.0F, 0.1F);
      wall0.containsWallStartAt(0.1F, (-1327.748F), (-1327.748F));
      wall0.getPattern();
      wall0.setRightSideColor((Integer) null);
      wall0.setRightSideShininess(1583.22F);
      wall0.getLeftSideTexture();
      wall0.setLeftSideColor((Integer) null);
      wall0.getYEnd();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      float float0 = 1439.4509F;
      Wall wall0 = new Wall(1439.4509F, 1439.4509F, 1439.4509F, 1439.4509F, 1439.4509F);
      Wall wall1 = wall0.clone();
      float float1 = (-1884.821F);
      wall1.setXEnd(1439.4509F);
      wall0.setWallAtEnd(wall1);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall1.addPropertyChangeListener(propertyChangeListenerProxy0);
      wall1.setRightSideShininess((-1884.821F));
      wall0.setWallAtStart(wall1);
      wall1.getXEnd();
      wall0.getLeftSideColor();
      wall0.getLevel();
      Wall wall2 = new Wall(1439.4509F, 1439.4509F, (-1884.821F), (-1884.821F), 1734.6F, (-2428.591F));
      String string0 = "jar";
      String string1 = "9&%*I<d>I";
      try { 
        Integer.valueOf("", (-1346));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1346 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float(423.0F);
      Float.isFinite(0.0F);
      Float.min(2955.904F, (-925.11804F));
      Float.min((-3033.02F), 423.0F);
      Wall wall0 = new Wall(2955.904F, 2955.904F, 423.0F, (-3033.02F), (-925.11804F), (-3033.02F));
      wall0.setYEnd((-2567.8364F));
      Float float1 = new Float(2955.904F);
      wall0.getHeight();
      wall0.getWallAtEnd();
      Random.setNextRandom(11);
      URL uRL0 = MockURL.getHttpExample();
      URL uRL1 = MockURL.URL(uRL0, "");
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL1);
      CatalogTexture catalogTexture0 = new CatalogTexture("", temporaryURLContent0, (-306.3F), 0.1F);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall0.setRightSideTexture(homeTexture0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, (-3179.93F), 0.0F, (-3179.93F), (-3179.93F));
      Float float0 = new Float((double) 0.0F);
      Float.min(0.0F, 0.0F);
      wall0.setHeightAtEnd(float0);
      wall0.getWallAtEnd();
      Random.setNextRandom((-2812));
      wall0.getYStart();
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      Float float0 = new Float(1.0F);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setLeftSideShininess(0.22488791F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Wall wall0 = new Wall(0.008985874F, 0.1F, 0.008985874F, 0.008985874F, 0.1F, 0.008985874F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall wall1 = new Wall(0.008985874F, 0.008985874F, 0.1F, 0.1F, 0.008985874F, 0.1F);
      Wall.clone((List<Wall>) linkedList0);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall0.getPoints();
      wall0.getPoints();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), (-47.493576F), (-47.493576F), (-47.493576F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Wall wall0 = new Wall((-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F));
      wall0.getArcExtent();
      wall0.setArcExtent((Float) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 1670.664F, 0.0F, 0.0F, (-1602.1707F), (-1602.1707F));
      Float float0 = new Float((double) 0.0F);
      wall0.clone();
      wall0.setArcExtent(float0);
      wall0.getPoints();
      wall0.setYEnd((-1646.1079F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = new LinkedList<Wall>();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Wall wall0 = new Wall((-2437.84F), (-2437.84F), 708.0F, (-2088.093F), (-2437.84F), (-1637.0444F));
      wall0.setYEnd(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-24.56F), (-2088.093F));
      Float.min((-24.56F), 0.1F);
      Wall wall1 = new Wall(0.0F, 2.0F, (-0.9F), 2.0F, (-1327.748F));
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setRightSideShininess((-0.9F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-1637.0444F));
      Float.max(1091.035F, (-2437.84F));
      Wall wall2 = wall1.clone();
      wall2.setHeight(float0);
      wall2.setArcExtent(float0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Wall");
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getLength();
      wall1.getPoints();
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      float float0 = (-1441.476F);
      Float.max(1967.72F, (-1441.476F));
      Float float1 = new Float(2068.0F);
      Float float2 = new Float(1991.4128F);
      wall0.setHeight(float2);
      wall1.getHeightAtEnd();
      wall0.setArcExtent((Float) null);
      wall0.getPoints();
      wall1.setYEnd((-1.0F));
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall1);
      Wall.clone((List<Wall>) linkedList0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "t'pP* {-9UO*^`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource t'pP* {-9UO*^`
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Float float0 = new Float(1291.0456);
      Float.isFinite((-888.9F));
      Float.max((-844.38525F), 0.0F);
      Float float1 = new Float(0.0F);
      wall0.setHeight(float1);
      wall0.setArcExtent(float1);
      wall0.getPoints();
      wall0.setYEnd(0.0F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      Wall.clone((List<Wall>) linkedList0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      ClassLoader.getSystemClassLoader();
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "t'pP* {-9UO*^`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource t'pP* {-9UO*^`
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setRightSideShininess((-1327.748F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(19.254047F);
      Float.max((-1.683091F), 1.0F);
      wall0.setArcExtent(float0);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getLength();
      wall1.getWallAtStart();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Wall wall0 = new Wall(270.89935F, 0.1F, 1789.49F, 270.89935F, (-117.5382F), 0.0F);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(2147169061);
      wall1.setRightSideColor((Integer) null);
      wall1.getHeight();
      wall1.getRightSideShininess();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall0);
      Float float0 = new Float((-2829.0F));
      wall0.setWallAtEnd(wall0);
      Float float1 = new Float(0.1F);
      wall0.setArcExtent(float1);
      wall0.getPoints();
      Float float2 = new Float((-2829.0F));
      wall0.getPoints();
      wall0.getHeightAtEnd();
      wall0.clone();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      wall0.getArcExtent();
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      Integer integer0 = new Integer(93);
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 457.0F, 1422.61F);
      Float float0 = new Float((double) 1422.61F);
      Float.isFinite(0.0F);
      Float.max(0.0F, (-2494.0298F));
      wall0.setXStart(1422.61F);
      Level level0 = new Level("jar:", 1128.1624F, 1158.0128F, (-2494.0298F));
      wall0.setLevel(level0);
      Float float1 = new Float(457.0F);
      wall0.setHeight(float1);
      wall0.getXStart();
      wall0.removePropertyChangeListener((PropertyChangeListener) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Wall wall0 = new Wall((-874.8113F), (-874.8113F), (-874.8113F), (-874.8113F), (-3488.6F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.move((-3488.6F), 1912.802F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall0.setWallAtEnd(wall1);
      wall0.setRightSideShininess(0.02F);
      Wall wall2 = wall0.getWallAtStart();
      wall1.setWallAtEnd(wall2);
      wall2.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall1.setRightSideColor((Integer) null);
      wall2.getLevel();
      wall0.isAtLevel((Level) null);
      wall2.getLength();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      float float0 = 1117.8794F;
      Wall wall0 = new Wall(0.0F, 1208.0F, 1208.0F, (-2783.34F), (-888.9F));
      Float float1 = new Float((-2783.34F));
      wall0.setArcExtent(float1);
      float float2 = 2428.4F;
      float float3 = 124.4888F;
      float float4 = 1145.6285F;
      // Undeclared exception!
      wall0.containsWallEndAt(2428.4F, 124.4888F, 1145.6285F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 1.0F, 1.0F, 406.8562F);
      Wall wall1 = new Wall(406.8562F, 1114.1F, 0.51532817F, 1114.1F, 1993.4481F);
      wall0.setLeftSideShininess(406.8562F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-2829.0F));
      Float.max((-2829.0F), (-2829.0F));
      Float float1 = new Float((-2829.0F));
      wall0.setArcExtent(float1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Wall");
      wall1.getPoints();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      Float float2 = new Float((-2829.0F));
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Wall wall1 = new Wall((-580.2F), (-580.2F), (-580.2F), (-0.7972705F), (-580.2F), 282.61F);
      wall1.setWallAtStart(wall0);
      wall0.setWallAtStart(wall1);
      wall1.setXEnd((-0.7972705F));
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F), 0.0F);
      wall0.intersectsRectangle((-1.0F), (-1.0F), (-1520.5F), (-1.0F));
      wall0.setYStart((-1.0F));
      wall0.setWallAtStart((Wall) null);
      wall0.move((-1.0F), 0.0F);
      wall0.setYStart((-1799.6F));
      wall0.getXEnd();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Float.min((-0.7972705F), (-0.7972705F));
      Wall wall1 = new Wall(894.9392F, (-2682.1167F), (-0.7972705F), (-0.7972705F), (-225.2F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall((-2682.1167F), 894.9392F, (-2682.1167F), (-903.21936F), (-1057.44F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall2);
      wall2.getPoints();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.setRightSideShininess((-1327.748F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(19.254047F);
      wall0.setArcExtent(float0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Wall");
      wall0.getPoints();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.getLength();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 37.74111F, 0.1F, 0.1F, 37.74111F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Float float0 = new Float(37.74111F);
      Float float1 = new Float(1006020.9534605971);
      wall0.setArcExtent(float1);
      // Undeclared exception!
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float float0 = new Float((double) 0.1F);
      Float.min((-2829.0F), 0.1F);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      Integer integer0 = new Integer(1154);
      wall1.setLeftSideColor(integer0);
      wall0.intersectsRectangle(2981.171F, 3209.0F, 2981.171F, (-1.0F));
      wall1.getLeftSideTexture();
      Integer integer1 = new Integer(1154);
      wall0.setLeftSideColor(integer1);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = (-1612.836F);
      Wall wall0 = new Wall(2475.188F, 0.0F, (-1612.836F), (-3892.196F), 2475.188F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall0.getWallAtEnd();
      String string0 = "!/";
      float float2 = 0.0F;
      Level level0 = new Level("!/", 0.0F, (-3513.8374F), 0.0F);
      URL uRL0 = MockURL.getHttpExample();
      TemporaryURLContent temporaryURLContent0 = new TemporaryURLContent(uRL0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        temporaryURLContent0.getJAREntryURL();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Content isn't a JAR entry
         //
         verifyException("com.eteks.sweethome3d.tools.URLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Wall wall0 = new Wall((-393.51367F), (-1.0F), (-393.51367F), (-416.0F), (-1.0F), (-416.0F));
      Wall wall1 = wall0.clone();
      wall1.setXStart((-393.51367F));
      Level level0 = new Level("jar:", 0.01F, 0.01F, (-416.0F));
      Wall wall2 = wall0.clone();
      wall2.intersectsRectangle((-888.9F), 1197.8022F, (-416.0F), 1.0F);
      Float float0 = new Float((double) (-1.0F));
      Float float1 = new Float((double) 0.0F);
      wall0.setHeightAtEnd(float1);
      wall2.getThickness();
      wall2.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Wall wall0 = new Wall((-685.0F), (-685.0F), (-685.0F), (-685.0F), (-685.0F), (-470.04337F));
      Float.max((-3488.6F), (-1.0F));
      Float float0 = new Float((-1.0F));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Level level0 = new Level("$VALUES", (-2536.9F), (-255.0F), 839.4F);
      wall0.setLevel(level0);
      Wall wall1 = wall0.clone();
      wall1.getLength();
      wall1.getPattern();
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      Integer integer0 = new Integer(91);
      Integer.min(1355, 91);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(wall1, (String) null, (Object) null, integer0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      PropertyChangeListenerProxy propertyChangeListenerProxy1 = new PropertyChangeListenerProxy((String) null, propertyChangeListenerProxy0);
      level0.removePropertyChangeListener(propertyChangeListenerProxy1);
      wall0.getPoints();
      wall1.getXEnd();
      wall0.setLevel(level0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = new LinkedList<Wall>();
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-2829.0F));
      Random.setNextRandom(0);
      wall1.getWallAtStart();
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.getLeftSideShininess();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Wall wall0 = new Wall((-7.865023F), (-7.865023F), (-7.865023F), (-7.865023F), (-7.865023F));
      wall0.getHeight();
      wall0.setHeight((Float) null);
      wall0.getLevel();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      Float float0 = wall0.getHeight();
      wall0.setArcExtent(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Wall wall0 = new Wall((-685.0F), (-685.0F), (-685.0F), (-685.0F), (-685.0F), (-470.04337F));
      Wall wall1 = new Wall(0.0F, (-1.0F), (-2536.9F), 781.38F, 0.0F, (-685.0F));
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "", resourceURLContent0, 0.0F, (-470.04337F), (String) null);
      HomeTexture homeTexture0 = new HomeTexture(catalogTexture0);
      wall1.setLeftSideTexture(homeTexture0);
      wall1.containsWallStartAt(2.0F, (-1.0F), 0.0F);
      wall0.setWallAtEnd(wall1);
      wall0.getPattern();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, 3449.74F);
      Level level0 = new Level("5VmdclfM>FDU(:", 728.45105F, 3401.94F, (-1.0F));
      level0.getBackgroundImage();
      level0.setBackgroundImage((BackgroundImage) null);
      wall0.setLevel(level0);
      wall0.getLength();
      wall0.setThickness((-1367.695F));
      wall0.getRightSideTexture();
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      wall0.intersectsRectangle(3449.74F, (-453.06F), (-978.26F), (-278.0785F));
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Wall wall0 = new Wall(406.8562F, 406.8562F, 1.0F, 1.0F, 406.8562F);
      Wall wall1 = new Wall(406.8562F, 1114.1F, 1.0F, 1114.1F, 1993.4481F);
      wall0.setLeftSideShininess(406.8562F);
      wall0.setWallAtEnd(wall1);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.intersectsRectangle(1.0F, 1.0F, 1.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      wall0.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Wall wall0 = new Wall(2.0F, 481.0F, (-1356.97F), 481.0F, 2.0F);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      wall0.move(0.1F, (-4206.626F));
      Wall wall1 = wall0.clone();
      wall0.containsWallStartAt(2.0F, (-4206.626F), (-4206.626F));
      wall0.setXStart((-4206.626F));
      wall1.containsWallEndAt(481.0F, 2668.251F, (-4206.626F));
      wall1.getHeight();
      Float.isFinite((-1356.97F));
      Integer integer0 = new Integer((-2147483603));
      Integer.sum((-2147483603), 6727);
      wall1.setLeftSideColor(integer0);
      Float.isFinite(580.7361F);
      Float.max(2668.251F, 0.1F);
      wall0.setHeight((Float) null);
      wall0.getYStart();
      wall1.getHeight();
      Float.isFinite(580.7361F);
      wall0.getRightSideTexture();
      wall1.getWallAtEnd();
      wall1.setArcExtent((Float) null);
      wall0.setHeightAtEnd((Float) null);
      wall0.setLeftSideTexture((HomeTexture) null);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Wall wall0 = new Wall((-21.841537F), 21.201466F, 21.201466F, (-21.841537F), (-21.841537F), 21.201466F);
      wall0.setThickness(21.201466F);
      wall0.getRightSideTexture();
      FileSystemHandling.shouldAllThrowIOExceptions();
      wall0.getLeftSideTexture();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Level level0 = new Level("h_O.<B,m|CC", 169.73F, 1.0F, 837.48804F);
      Wall wall0 = new Wall((-5318.3F), (-779.0F), (-2695.879F), (-1610.0F), (-2695.879F));
      Integer integer0 = new Integer(815);
      wall0.setRightSideColor(integer0);
      wall0.isAtLevel(level0);
      wall0.getRightSideColor();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("FLOOR_THICKNESS");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.FLOOR_THICKNESS
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      wall0.getHeightAtEnd();
      wall0.setWallAtStart(wall0);
      wall0.setLeftSideShininess((-47.493576F));
      wall0.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      wall0.setHeightAtEnd((Float) null);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Wall wall0 = new Wall(0.1617567F, 0.1617567F, 0.1617567F, 0.1617567F, 0.1617567F, 0.1617567F);
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall(0.0F, (-956.4059F), 0.0F, (-1.0F), 0.0F, 1869.5876F);
      wall0.setYStart(1912.802F);
      wall1.move(0.1F, (-593.3912F));
      Float float0 = new Float((double) 0.0F);
      wall0.setArcExtent(float0);
      wall0.setArcExtent(float0);
      wall1.setWallAtEnd(wall0);
      wall1.setThickness(1912.802F);
      wall0.containsPoint(1869.5876F, 2175.3098F, 0.0F);
      wall1.getXEnd();
      wall1.getLeftSideShininess();
      wall1.getWallAtEnd();
      wall0.getRightSideTexture();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Wall wall0 = new Wall((-2437.84F), (-2437.84F), 708.0F, (-2088.093F), (-2437.84F), (-1637.0444F));
      wall0.setYEnd(0.0F);
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("", propertyChangeListener0);
      wall0.removePropertyChangeListener(propertyChangeListenerProxy0);
      Float float0 = new Float((-24.56F));
      Float.isFinite((-24.56F));
      Float.min((-2437.84F), 1.0F);
      Float.min((-2437.84F), (-1637.0444F));
      wall0.setYEnd((-24.56F));
      wall0.setHeightAtEnd(float0);
      wall0.getLeftSideColor();
      wall0.setYEnd((-2437.84F));
      wall0.getLeftSideTexture();
      wall0.setArcExtent(float0);
      wall0.setLeftSideTexture((HomeTexture) null);
      wall0.getLeftSideShininess();
      wall0.isTrapezoidal();
      wall0.isTrapezoidal();
      wall0.getLeftSideShininess();
      wall0.getPattern();
      wall0.getHeightAtEnd();
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), 0.1F, 0.1F, (-888.9F), 0.1F);
      Wall wall1 = wall0.clone();
      wall1.setYStart(681.91F);
      wall1.getPattern();
      wall0.setRightSideShininess((-888.9F));
      wall0.setXStart((-2262.238F));
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
      wall1.getLength();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, (-1.0F));
      wall0.getYArcCircleCenter();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Float float0 = wall0.getHeight();
      wall0.getRightSideTexture();
      wall0.setPattern((TextureImage) null);
      wall0.setHeight(float0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.1F, (-2591.4F));
      wall0.setThickness((-2783.34F));
      wall0.getRightSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Integer integer0 = new Integer(2718);
      wall0.setLeftSideColor(integer0);
      wall0.intersectsRectangle((-2591.4F), 0.1F, (-2783.34F), (-978.26F));
      wall0.getLeftSideTexture();
      wall0.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Wall wall0 = new Wall((-1788.0011F), (-1467.3237F), (-1467.3237F), 0.0F, (-1788.0011F));
      wall0.setLeftSideShininess(3.1415927F);
      Float float0 = new Float((double) 3.1415927F);
      Float.min(766.0F, 810.0F);
      wall0.setArcExtent((Float) null);
      Wall wall1 = new Wall(766.0F, 510.91F, (-1788.0011F), 510.91F, 1538.2235F);
      wall0.setWallAtEnd(wall1);
      Wall wall2 = wall1.clone();
      wall2.setWallAtEnd(wall0);
      wall0.setThickness(510.91F);
      wall2.containsPoint(1952.96F, 0.1F, (-91.0F));
      wall0.getXEnd();
      wall2.getLeftSideShininess();
      wall0.clone();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      wall0.getStartPointToEndPointDistance();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Wall wall0 = new Wall((-1.2317516F), (-1.2317516F), (-925.11804F), 0.0F, (-925.11804F), (-925.11804F));
      Float float0 = new Float(0.0);
      wall0.setArcExtent(float0);
      wall0.getWallAtStart();
      wall0.setWallAtEnd((Wall) null);
      wall0.getPoints();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.0F, 0.0F);
      wall0.setYEnd(0.0F);
      wall0.intersectsRectangle((-4044.0F), 0.0F, (-163.20876F), (-163.20876F));
      wall0.setRightSideShininess(0.0F);
      wall0.intersectsRectangle(0.0F, 0.0F, 0.0F, 0.0F);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-2695.879F), 847.82F);
      Float.min(0.1F, 0.1F);
      Wall wall1 = new Wall((-1233.8F), (-2829.0F), (-598.294F), (-1233.8F), (-2829.0F), (-1777.8F));
      wall0.setWallAtEnd(wall1);
      Wall wall2 = new Wall((-1233.8F), 847.82F, (-225.2F), (-2829.0F), (-1233.8F));
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2695.879F));
      wall2.setWallAtEnd(wall0);
      wall2.setWallAtEnd(wall1);
      Float float0 = new Float((-779.0357F));
      Wall wall3 = new Wall(0.1F, 2.0F, 1948.6305F, 0.1F, (-779.0357F));
      wall3.getPoints();
      Float float1 = new Float(1.0F);
      wall3.getPoints();
      Integer integer0 = new Integer(2264);
      Wall wall4 = wall1.getWallAtStart();
      wall4.setLeftSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.containsWallStartAt(1.0F, 1.0F, 1.0F);
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.setYStart(1912.802F);
      wall0.move(0.0F, 1737.6F);
      Float float0 = new Float(3.141592653589793);
      wall0.setArcExtent(float0);
      wall0.setWallAtEnd(wall1);
      wall1.setThickness(0.0F);
      wall1.containsPoint(0.0F, 0.01F, 1737.6F);
      wall0.getXEnd();
      wall0.getLeftSideShininess();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), 0.0F, 0.0F, (-888.9F), (-888.9F), (-3488.6F));
      wall0.getRightSideTexture();
      wall0.setLeftSideTexture((HomeTexture) null);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.pollFirst();
      linkedList0.add(wall0);
      wall0.getXArcCircleCenter();
      wall0.getLength();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, (-1680.4514F), 0.1F, 0.1F);
      wall0.getLeftSideTexture();
      wall0.setRightSideTexture((HomeTexture) null);
      Wall wall1 = new Wall(0.0F, (-1680.4514F), 3631.7F, 3631.7F, 1417.0829F, 1822.5719F);
      wall1.setYStart(1610.2832F);
      Float float0 = new Float((double) 0.1F);
      Float float1 = new Float(0.0F);
      wall1.setArcExtent(float1);
      wall0.setWallAtEnd(wall1);
      wall1.setThickness(1822.5719F);
      wall1.containsPoint((-3171.64F), 1822.5719F, 3631.7F);
      wall1.getXEnd();
      wall1.getLeftSideShininess();
      wall0.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Wall wall0 = new Wall((-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F), (-889.1127F));
      wall0.getWallAtEnd();
      wall0.setWallAtStart((Wall) null);
      wall0.getArcExtent();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      float float0 = 0.0F;
      float float1 = 0.1F;
      Wall wall0 = new Wall(0.0F, 997.0F, 997.0F, 0.0F, 0.1F);
      float float2 = 0.0F;
      float float3 = (-2051.0F);
      float float4 = (-507.34F);
      Wall wall1 = new Wall(0.0F, (-2051.0F), 0.0F, 0.0F, 1.0F, (-507.34F));
      float float5 = (-2228.6F);
      Wall wall2 = new Wall(0.0F, 997.0F, 1.0F, (-1315.4026F), (-2228.6F), 0.0F);
      wall2.getLeftSideTexture();
      wall1.setRightSideTexture((HomeTexture) null);
      wall0.setWallAtStart(wall1);
      wall0.setYStart((-1315.4026F));
      wall0.setLeftSideShininess(997.0F);
      List<Wall> list0 = null;
      // Undeclared exception!
      try { 
        Wall.clone((List<Wall>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Wall", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      wall0.intersectsRectangle(1.0F, 1.0F, 1.0F, 1.0F);
      wall0.getHeightAtEnd();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 0.1F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall1.setRightSideShininess(0.1F);
      Integer integer0 = new Integer(3);
      wall0.setRightSideColor(integer0);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getPoints();
      wall1.getWallAtEnd();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      Wall wall1 = wall0.clone();
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      Float float0 = new Float(1.0F);
      wall1.setHeightAtEnd(float0);
      wall1.setHeightAtEnd(float0);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Integer integer0 = new Integer(5);
      wall0.setRightSideColor(integer0);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      Wall wall1 = new Wall((-0.7972705F), 0.0F, 0.0F, (-231.0F), 0.0F);
      wall1.setLeftSideShininess(0.0F);
      wall1.getPoints();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, (-1465.9371F), (-1465.9371F), 0.0F, 0.0F);
      wall0.move((-225.2F), 1785.822F);
      Float.min(775.2F, 69.39F);
      Wall wall1 = new Wall(1.0F, (-1.0F), 775.2F, 1.0F, 1.0F);
      wall1.setWallAtEnd(wall0);
      wall0.setWallAtStart(wall1);
      wall0.setWallAtEnd(wall1);
      wall1.getPoints();
      wall0.getHeightAtEnd();
      wall0.clone();
      wall0.getLevel();
      wall1.isAtLevel((Level) null);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      Wall.clone(list1);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess(0.1F);
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float(0.1F);
      Wall wall2 = wall1.getWallAtStart();
      wall2.getLeftSideColor();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Wall wall0 = new Wall((-776.27F), (-776.27F), (-1.0F), (-2784.577F), (-1.0F), (-2784.577F));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      String string0 = "TOgXY)-2QGrU@!R";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "TOgXY)-2QGrU@!R");
      wall0.getPattern();
      wall0.getHeight();
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      wall0.getHeight();
      wall0.getWallAtStart();
      wall0.containsWallEndAt(1688.9532F, 2605.7F, 2605.7F);
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.8098965F, (-47.493576F), (-47.493576F));
      Wall wall1 = wall0.clone();
      wall0.setWallAtStart(wall1);
      wall1.setXEnd(0.1F);
      wall1.setWallAtEnd(wall0);
      wall0.getPoints();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Wall wall0 = new Wall((-393.51367F), (-393.51367F), (-416.0F), (-416.0F), (-1.0F));
      assertNotNull(wall0);
      assertEquals((-404.75684F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-416.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.0F), wall0.getXEnd(), 0.01F);
      assertEquals(31.80047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-404.75684F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(31.80047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals((-404.75684F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-416.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.0F), wall0.getXEnd(), 0.01F);
      assertEquals(31.80047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-404.75684F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(31.80047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(31.80047F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-393.51367F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-404.75684F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(31.80047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-404.75684F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall1.getYStart(), 0.01F);
      
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall1.setHeight(float0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-404.75684F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-416.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.0F), wall0.getXEnd(), 0.01F);
      assertEquals(31.80047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-404.75684F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(31.80047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(31.80047F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-393.51367F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-404.75684F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(31.80047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-404.75684F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall1.getYStart(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-416.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-425.3373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-384.17636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(33.165184F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(31.80047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-416.0F), wall0.getYEnd(), 0.01F);
      assertEquals((-416.0F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-425.3373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-384.17636F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(33.165184F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(31.80047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(31.80047F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-393.51367F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-404.75684F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(31.80047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-404.75684F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall1.getYStart(), 0.01F);
      
      wall0.setYEnd((-2.0F));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-218.33731F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-416.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-763.08734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(392.15887F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(408.98834F, wall0.getLength(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      URL uRL0 = MockURL.getFileExample();
      assertNotNull(uRL0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertNotNull(resourceURLContent0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      
      CatalogTexture catalogTexture0 = new CatalogTexture("RIGHT_SIDE_SHININESS", resourceURLContent0, (-635.55F), (-2.0F));
      assertNotNull(catalogTexture0);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-2.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-635.55F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getName());
      
      wall1.setPattern(catalogTexture0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-218.33731F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-416.0F), wall0.getXEnd(), 0.01F);
      assertEquals((-763.08734F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(392.15887F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getArcExtent(), 0.01F);
      assertEquals((-2.0F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(408.98834F, wall0.getLength(), 0.01F);
      assertEquals(31.80047F, wall1.getLength(), 0.01F);
      assertEquals((-1.0F), wall1.getThickness(), 0.01F);
      assertEquals((-393.51367F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-404.75684F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-416.0F), wall1.getXEnd(), 0.01F);
      assertEquals((-416.0F), wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(31.80047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-404.75684F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall1.getYStart(), 0.01F);
      assertEquals("some", uRL0.getAuthority());
      assertEquals("file", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getUserInfo());
      assertNull(uRL0.getRef());
      assertNull(uRL0.getQuery());
      assertEquals("some", uRL0.getHost());
      assertEquals((-1), uRL0.getPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(catalogTexture0.isModifiable());
      assertNull(catalogTexture0.getCreator());
      assertNull(catalogTexture0.getId());
      assertEquals((-2.0F), catalogTexture0.getHeight(), 0.01F);
      assertEquals((-635.55F), catalogTexture0.getWidth(), 0.01F);
      assertEquals("RIGHT_SIDE_SHININESS", catalogTexture0.getName());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Wall wall0 = new Wall((-38.661F), 1117.8794F, (-38.661F), (-38.661F), 0.0F);
      assertNotNull(wall0);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1117.8794F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(539.6092F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-38.661F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.661F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-38.661F), wall0.getXStart(), 0.01F);
      assertEquals(1156.5404F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1156.5404F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-38.661F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      
      wall0.setLeftSideShininess((-38.661F));
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-38.661F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1117.8794F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(539.6092F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-38.661F), wall0.getYEnd(), 0.01F);
      assertEquals((-38.661F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-38.661F), wall0.getXStart(), 0.01F);
      assertEquals(1156.5404F, wall0.getLength(), 0.01F);
      assertEquals(1156.5404F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-38.661F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, 3449.74F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      
      wall0.setLeftSideShininess(1603.36F);
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      
      Level level0 = new Level("5VmdclfM>FDU(:", 728.45105F, 3401.94F, (-1.0F));
      assertNotNull(level0);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals(3401.94F, level0.getFloorThickness(), 0.01F);
      assertEquals("5VmdclfM>FDU(:", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals(728.45105F, level0.getElevation(), 0.01F);
      
      wall0.setHeight((Float) null);
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3449.74F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(7041.504F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-4250.644F), wall1.getXStart(), 0.01F);
      assertEquals((-1761.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1603.36F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(728.45105F, wall1.getYEnd(), 0.01F);
      assertEquals((-1761.0964F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(7041.504F, wall1.getLength(), 0.01F);
      assertEquals(728.45105F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      
      wall0.setArcExtent((Float) null);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      
      wall1.setYEnd((-1.0F));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-1.0F), wall1.getYEnd(), 0.01F);
      assertEquals(3449.74F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-4250.644F), wall1.getXStart(), 0.01F);
      assertEquals((-1761.0964F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(1603.36F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(6546.057F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2125.822F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(728.45105F, wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(6546.057F, wall1.getLength(), 0.01F);
      assertEquals((-4250.644F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(classLoader0, "_sp+ciz%/rfjd#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Unknown resource _sp+ciz%/rfjd#
         //
         verifyException("com.eteks.sweethome3d.tools.ResourceURLContent", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 247.96663F, 247.96663F, 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(247.86662F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(247.86662F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(124.03332F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(247.96663F, wall0.getThickness(), 0.01F);
      assertEquals(247.96663F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = new Level("com.eteks.sweethome3d.model.Level$Property", 247.96663F, 247.96663F, 247.96663F);
      assertNotNull(level0);
      assertEquals(247.96663F, level0.getHeight(), 0.01F);
      assertEquals(247.96663F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(247.96663F, level0.getFloorThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Level$Property", level0.getName());
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(boolean0);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getHeight(), 0.01F);
      assertEquals(247.86662F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(247.86662F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(124.03332F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(247.96663F, wall0.getThickness(), 0.01F);
      assertEquals(247.96663F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(247.96663F, level0.getHeight(), 0.01F);
      assertEquals(247.96663F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(247.96663F, level0.getFloorThickness(), 0.01F);
      assertEquals("com.eteks.sweethome3d.model.Level$Property", level0.getName());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Wall wall0 = new Wall((-393.51367F), (-393.51367F), (-393.51367F), (-393.51367F), (-1.0F));
      assertNotNull(wall0);
      assertEquals((-393.51367F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-393.51367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-393.51367F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = new Level("6w'c=GrF", (-4345.232F), (-1.0F), (-1.0F));
      assertNotNull(level0);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals((-4345.232F), level0.getElevation(), 0.01F);
      assertEquals("6w'c=GrF", level0.getName());
      assertTrue(level0.isVisible());
      assertEquals((-1.0F), level0.getFloorThickness(), 0.01F);
      
      Float float0 = new Float((-3320.3027F));
      assertEquals((-3320.3027F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals((-393.51367F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-393.51367F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-393.51367F), wall0.getYStart(), 0.01F);
      assertEquals((-3320.3027F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1.0F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-393.51367F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-393.51367F), wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Wall wall1 = new Wall((-3320.3027F), (-5213.561F), (-3320.3027F), 0.0F, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2606.7805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5213.561F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5213.561F), wall1.getYStart(), 0.01F);
      assertEquals(5213.561F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall wall2 = wall1.clone();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2606.7805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5213.561F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5213.561F), wall1.getYStart(), 0.01F);
      assertEquals(5213.561F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2606.7805F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-5213.561F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(5213.561F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall2.getXEnd(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-3320.3027F), wall2.getXArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals(5213.561F, wall2.getLength(), 0.01F);
      assertEquals((-3320.3027F), wall2.getXStart(), 0.01F);
      
      wall2.setArcExtent(float0);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2606.7805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5213.561F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5213.561F), wall1.getYStart(), 0.01F);
      assertEquals(5213.561F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2606.7805F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYEnd(), 0.01F);
      assertEquals((-5213.561F), wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(5213.561F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall2.getXEnd(), 0.01F);
      assertEquals(8797996.0F, wall2.getLength(), 0.01F);
      assertEquals(0.01F, wall2.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall2.getArcExtent(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertNull(wall2.getHeightAtEnd());
      assertNull(wall2.getHeight());
      assertEquals((-2845.005F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertNull(wall2.getLeftSideColor());
      assertEquals((-3320.3027F), wall2.getXStart(), 0.01F);
      
      Wall wall3 = wall1.clone();
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(wall3);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2606.7805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5213.561F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5213.561F), wall1.getYStart(), 0.01F);
      assertEquals(5213.561F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2606.7805F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-5213.561F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-3320.3027F), wall3.getXStart(), 0.01F);
      assertEquals(5213.561F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-3320.3027F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall3.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(5213.561F, wall3.getStartPointToEndPointDistance(), 0.01F);
      
      float[][] floatArray0 = wall3.getPoints();
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertNotSame(wall3, wall0);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall2));
      assertFalse(wall3.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2606.7805F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(5213.561F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5213.561F), wall1.getYStart(), 0.01F);
      assertEquals(5213.561F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2606.7805F), wall3.getYArcCircleCenter(), 0.01F);
      assertEquals((-5213.561F), wall3.getYStart(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getHeight());
      assertEquals((-3320.3027F), wall3.getXStart(), 0.01F);
      assertEquals(5213.561F, wall3.getLength(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(0.0F, wall3.getYEnd(), 0.01F);
      assertEquals((-3320.3027F), wall3.getXArcCircleCenter(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertEquals(0.01F, wall3.getThickness(), 0.01F);
      assertEquals((-3320.3027F), wall3.getXEnd(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(5213.561F, wall3.getStartPointToEndPointDistance(), 0.01F);
      
      wall1.setYEnd(2236.4907F);
      assertNotSame(wall1, wall3);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall3));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertEquals(2236.4907F, wall1.getYEnd(), 0.01F);
      assertEquals(0.01F, wall1.getThickness(), 0.01F);
      assertEquals(7450.052F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-1488.5352F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(7450.052F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-5213.561F), wall1.getYStart(), 0.01F);
      assertEquals((-3320.3027F), wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall3));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall3));
      assertFalse(list0.contains(wall3));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Float float0 = new Float((double) (-2882.97F));
      assertEquals((-2882.97F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      float float1 = Float.min((-2829.0F), 0.1F);
      assertEquals((-2829.0F), float1, 0.01F);
      
      wall0.setArcExtent(float0);
      assertNotEquals((float)float0, (float)float1, 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2882.97F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2882.97F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      wall0.setThickness(389.4222F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(389.4222F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2882.97F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      boolean boolean1 = wall0.containsPoint(0.0F, 0.0F, 1603.36F);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(389.4222F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2882.97F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      
      Float float2 = new Float(0.0F);
      assertEquals(0.0F, (float)float2, 0.01F);
      assertNotEquals((float)float2, (float)float1, 0.01F);
      assertNotEquals((float)float2, (float)float0, 0.01F);
      assertNotNull(float2);
      
      boolean boolean2 = wall0.isTrapezoidal();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(389.4222F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2882.97F), wall0.getArcExtent(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      float float0 = (-416.0F);
      float float1 = 698.885F;
      Wall wall0 = new Wall((-1777.8F), 744.38F, 0.0F, 744.38F, 1608.7F, 698.885F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1777.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1777.8F), wall0.getXStart(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(744.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(698.885F, wall0.getHeight(), 0.01F);
      assertEquals(1777.8F, wall0.getLength(), 0.01F);
      assertEquals(744.38F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(744.38F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1777.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1777.8F), wall0.getXStart(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(744.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(698.885F, wall0.getHeight(), 0.01F);
      assertEquals(1777.8F, wall0.getLength(), 0.01F);
      assertEquals(744.38F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(744.38F, wall0.getYStart(), 0.01F);
      assertEquals((-1777.8F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1777.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1608.7F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1777.8F, wall1.getLength(), 0.01F);
      assertEquals(698.885F, wall1.getHeight(), 0.01F);
      assertEquals(744.38F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(744.38F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(744.38F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      boolean boolean0 = wall1.containsPoint(1100.64F, (-416.0F), (-416.0F));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1777.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1777.8F), wall0.getXStart(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(744.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(698.885F, wall0.getHeight(), 0.01F);
      assertEquals(1777.8F, wall0.getLength(), 0.01F);
      assertEquals(744.38F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(744.38F, wall0.getYStart(), 0.01F);
      assertEquals((-1777.8F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1777.8F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1608.7F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(1777.8F, wall1.getLength(), 0.01F);
      assertEquals(698.885F, wall1.getHeight(), 0.01F);
      assertEquals(744.38F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(744.38F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(744.38F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      wall1.setYStart((-5190.0F));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1777.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1777.8F), wall0.getXStart(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(744.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(698.885F, wall0.getHeight(), 0.01F);
      assertEquals(1777.8F, wall0.getLength(), 0.01F);
      assertEquals(744.38F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(744.38F, wall0.getYStart(), 0.01F);
      assertEquals((-1777.8F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6194.9526F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2222.81F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1608.7F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(698.885F, wall1.getHeight(), 0.01F);
      assertEquals(744.38F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(6194.9526F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5190.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Integer integer0 = new Integer((-2146413063));
      assertEquals((-2146413063), (int)integer0);
      assertNotNull(integer0);
      
      Integer integer1 = Integer.getInteger("", (Integer) null);
      assertNull(integer1);
      
      wall1.setLeftSideColor((Integer) null);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1777.8F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1777.8F), wall0.getXStart(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(744.38F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1608.7F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(698.885F, wall0.getHeight(), 0.01F);
      assertEquals(1777.8F, wall0.getLength(), 0.01F);
      assertEquals(744.38F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(744.38F, wall0.getYStart(), 0.01F);
      assertEquals((-1777.8F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(6194.9526F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-2222.81F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(1608.7F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(698.885F, wall1.getHeight(), 0.01F);
      assertEquals(744.38F, wall1.getYEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(6194.9526F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5190.0F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Class<Object> class0 = Object.class;
      ResourceURLContent resourceURLContent0 = null;
      try {
        resourceURLContent0 = new ResourceURLContent(class0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = wall0.containsWallStartAt(0.1F, 0.0F, (-2515.3298F));
      assertFalse(boolean0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      float float1 = wall0.getRightSideShininess();
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      float float2 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, float2, 0.01F);
      assertEquals(float2, float1, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      float float3 = wall0.getLength();
      assertEquals(0.0F, float3, 0.01F);
      assertEquals(float3, float1, 0.01F);
      assertEquals(float3, float2, 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      
      Wall wall2 = wall0.getWallAtStart();
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Wall wall0 = new Wall(0.47232604F, (-1465.9371F), (-1465.9371F), 0.47232604F, 0.47232604F);
      assertNotNull(wall0);
      assertNull(wall0.getHeight());
      assertEquals((-1465.9371F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-732.7324F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.47232604F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1465.9371F), wall0.getXEnd(), 0.01F);
      assertEquals(2073.8162F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.47232604F, wall0.getYEnd(), 0.01F);
      assertEquals((-732.7324F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.47232604F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2073.8162F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float((-1465.9371F));
      assertEquals((-1465.9371F), (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeight());
      assertEquals((-1465.9371F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.47232604F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1465.9371F), wall0.getXEnd(), 0.01F);
      assertEquals(2073.8162F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-238.2801F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1833385.4F, wall0.getLength(), 0.01F);
      assertEquals(0.47232604F, wall0.getYEnd(), 0.01F);
      assertEquals((-1465.9371F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.47232604F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-238.2801F), wall0.getYArcCircleCenter(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(2712, floatArray0.length);
      assertNull(wall0.getHeight());
      assertEquals((-1465.9371F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.47232604F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1465.9371F), wall0.getXEnd(), 0.01F);
      assertEquals(2073.8162F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-238.2801F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1833385.4F, wall0.getLength(), 0.01F);
      assertEquals(0.47232604F, wall0.getYEnd(), 0.01F);
      assertEquals((-1465.9371F), wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.47232604F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-238.2801F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 0.0F, 0.0F, 0.1F, 0.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeightAtEnd(float0);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setYEnd(0.1F);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      
      Wall wall1 = new Wall(511.0F, 0.0F, 511.0F, 0.1F, 511.0F, 0.0F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(511.0F, wall1.getXEnd(), 0.01F);
      assertEquals(511.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(511.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(511.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      float float1 = wall1.getLeftSideShininess();
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(511.0F, wall1.getXEnd(), 0.01F);
      assertEquals(511.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(511.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(511.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall1.isTrapezoidal();
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(511.0F, wall1.getXEnd(), 0.01F);
      assertEquals(511.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(511.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(511.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      Wall wall2 = wall0.clone();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(0.1F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(0.05F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.1F, wall2.getYEnd(), 0.01F);
      assertEquals((-8.16562E14F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      
      wall2.setYEnd((-620.987F));
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(620.987F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-931.4805F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5.0707437E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(620.987F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-620.987F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      
      boolean boolean1 = wall2.isTrapezoidal();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall2, wall0);
      assertNotSame(wall2, wall1);
      assertFalse(boolean1);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertTrue(boolean1 == boolean0);
      assertEquals(0.0F, wall0.getHeightAtEnd(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getArcExtent(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(620.987F, wall2.getLength(), 0.01F);
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertEquals((-931.4805F), wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(5.0707437E18F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getHeightAtEnd(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertEquals(620.987F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getXEnd(), 0.01F);
      assertEquals((-620.987F), wall2.getYEnd(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(0.0F, wall2.getHeight(), 0.01F);
      
      float float2 = wall1.getLeftSideShininess();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertEquals(0.0F, float2, 0.01F);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(float2, float1, 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(511.0F, wall1.getXEnd(), 0.01F);
      assertEquals(511.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(511.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(511.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      TextureImage textureImage0 = wall1.getPattern();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(textureImage0);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(511.0F, wall1.getXEnd(), 0.01F);
      assertEquals(511.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(511.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(511.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      Float float3 = wall1.getHeightAtEnd();
      assertNotSame(wall1, wall2);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall1.equals((Object)wall0));
      assertNull(float3);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(511.0F, wall1.getXEnd(), 0.01F);
      assertEquals(511.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(511.0F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getLength(), 0.01F);
      assertEquals(0.05F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(511.0F, wall1.getXArcCircleCenter(), 0.01F);
      
      Float float4 = new Float((-2783.34F));
      assertEquals((-2783.34F), (float)float4, 0.01F);
      assertNotEquals((float)float4, (float)float0, 0.01F);
      assertNotEquals((float)float4, (float)float2, 0.01F);
      assertNotEquals((float)float4, (float)float1, 0.01F);
      assertNotNull(float4);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("2Rk%QDfG)|RZ7~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.2Rk%QDfG)|RZ7~
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      assertNotNull(wall0);
      assertEquals(9.627024F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.254047F, wall0.getLength(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.move(0.1F, 0.1F);
      assertEquals(19.354048F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.354048F, wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.727024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.354048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getLength(), 0.01F);
      assertEquals(19.354048F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float float0 = Float.min(0.0F, 0.1F);
      assertEquals(0.0F, float0, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(19.354048F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.354048F, wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.727024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.354048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getLength(), 0.01F);
      assertEquals(19.354048F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      HomeTexture homeTexture0 = wall0.getRightSideTexture();
      assertNull(homeTexture0);
      assertEquals(19.354048F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.354048F, wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.727024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.354048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getLength(), 0.01F);
      assertEquals(19.354048F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add(wall0);
      assertTrue(boolean0);
      assertTrue(linkedList0.contains(wall0));
      assertEquals(19.354048F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.354048F, wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.727024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.354048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getLength(), 0.01F);
      assertEquals(19.354048F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertTrue(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      assertEquals(19.354048F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.354048F, wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(9.727024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.354048F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getLength(), 0.01F);
      assertEquals(19.354048F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.354048F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall1.getLength(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(19.354048F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(19.354048F, wall1.getYEnd(), 0.01F);
      assertEquals(19.354048F, wall1.getXEnd(), 0.01F);
      assertEquals(9.727024F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(19.254047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      
      Wall.Property[] wall_PropertyArray0 = Wall.Property.values();
      assertNotNull(wall_PropertyArray0);
      assertEquals(18, wall_PropertyArray0.length);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 728.45105F, 728.45105F, 3449.74F);
      assertNotNull(wall0);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      
      wall0.setLeftSideShininess(1603.36F);
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-1761.0964F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertEquals((-1761.0964F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(7041.504F, wall0.getLength(), 0.01F);
      
      Float float0 = new Float(1145.1);
      assertEquals(1145.1F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(754.847F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4277.04F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5731867.5F, wall0.getLength(), 0.01F);
      assertEquals(1145.1F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall(3401.94F, 728.45105F, 3235.4019F, 1603.36F, 1603.36F, 1603.36F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(1603.36F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1603.36F, wall1.getThickness(), 0.01F);
      assertEquals(890.6181F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1165.9055F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3318.671F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3401.94F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3235.4019F, wall1.getXEnd(), 0.01F);
      assertEquals(1603.36F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(890.6181F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(728.45105F, wall1.getYStart(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(1603.36F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1603.36F, wall1.getThickness(), 0.01F);
      assertEquals(890.6181F, wall1.getLength(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1165.9055F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3318.671F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(3401.94F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(3235.4019F, wall1.getXEnd(), 0.01F);
      assertEquals(1603.36F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(890.6181F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(728.45105F, wall1.getYStart(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      float float1 = wall0.getYArcCircleCenter();
      assertNotSame(wall0, wall1);
      assertEquals(754.847F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1603.36F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(7041.504F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(728.45105F, wall0.getYEnd(), 0.01F);
      assertEquals(728.45105F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3449.74F, wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(754.847F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-4277.04F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(5731867.5F, wall0.getLength(), 0.01F);
      assertEquals(1145.1F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 37.74111F, 0.1F, 0.1F, 37.74111F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(37.74111F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(37.641113F, wall0.getLength(), 0.01F);
      assertEquals(37.74111F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(18.920555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(37.641113F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Wall wall1 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, 0.1F, 37.74111F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(37.74111F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(37.74111F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(37.641113F, wall0.getLength(), 0.01F);
      assertEquals(37.74111F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(18.920555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(37.641113F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(37.74111F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(37.74111F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(37.641113F, wall0.getLength(), 0.01F);
      assertEquals(37.74111F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(18.920555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(37.641113F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(37.74111F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(37.74111F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(37.641113F, wall0.getLength(), 0.01F);
      assertEquals(37.74111F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(18.920555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(37.641113F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(37.74111F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setXEnd(0.1F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(37.74111F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(37.641113F, wall0.getLength(), 0.01F);
      assertEquals(37.74111F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(18.920555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(37.641113F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(37.74111F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(37.641113F, wall0.getLength(), 0.01F);
      assertEquals(37.74111F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(18.920555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(37.641113F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(37.74111F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.1F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(37.74111F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getXStart(), 0.01F);
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(0.1F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(textureImage0);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(37.74111F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(37.641113F, wall0.getLength(), 0.01F);
      assertEquals(37.74111F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(18.920555F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(37.641113F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1.0F, 1.0F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(1.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      assertNotNull(wall0);
      assertEquals((-47.493576F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals(49.688675F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float0 = new Float(2.1950982F);
      assertEquals(2.1950982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-47.493576F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals(49.688675F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Float float1 = new Float(0.007565677165985107);
      assertEquals(0.007565677F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals(49.688793F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals(0.007565677F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6615.1064F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(18, floatArray0.length);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals(49.688793F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals(0.007565677F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-6615.1064F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Wall wall0 = new Wall((-47.493576F), (-47.493576F), (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F));
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(49.688675F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      
      Float float0 = new Float(2.1950982F);
      assertEquals(2.1950982F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(49.688675F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      
      wall0.setArcExtent(float0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-60.215313F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(61.269737F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      assertEquals(2.1950982F, wall0.getArcExtent(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(10, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-60.215313F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(61.269737F, wall0.getLength(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals(2.1950982F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(49.688675F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-22.649239F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getXStart(), 0.01F);
      assertEquals(2.1950982F, wall0.getArcExtent(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      assertNotNull(wall0);
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      wall0.move((-2829.0F), (-2829.0F));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      
      float float0 = Float.min((-2829.0F), 0.1F);
      assertEquals((-2829.0F), float0, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals((-2828.9F), wall1.getYStart(), 0.01F);
      assertEquals(19.154053F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.154053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2819.3228F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals((-2828.9F), wall1.getYStart(), 0.01F);
      assertEquals(19.154053F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.154053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2819.3228F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals((-2828.9F), wall1.getYStart(), 0.01F);
      assertEquals(19.154053F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.154053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2819.3228F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall1.setRightSideShininess((-1327.748F));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals((-2828.9F), wall1.getYStart(), 0.01F);
      assertEquals(19.154053F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals((-1327.748F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2819.3228F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals((-2828.9F), wall1.getYStart(), 0.01F);
      assertEquals(19.154053F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals((-1327.748F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2819.3228F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      
      Float float1 = new Float(19.254047F);
      assertEquals(19.254047F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(917.9916F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2856.452F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNotNull(floatArray0);
      assertEquals(64, floatArray0.length);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(917.9916F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2856.452F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float2 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertEquals(917.9916F, float2, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float2, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(917.9916F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2856.452F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      
      float float3 = wall1.getRightSideShininess();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertEquals((-1327.748F), float3, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotEquals(float3, float2, 0.01F);
      assertNotEquals(float3, float0, 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(917.9916F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2856.452F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals((-2828.9F), wall1.getYStart(), 0.01F);
      assertEquals(19.154053F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals((-1327.748F), wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2819.3228F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      assertNotNull(wall0);
      assertEquals((-0.7972705F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.7972705F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.7972705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.7972705F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7972705F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals((-0.7972705F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.7972705F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.7972705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.7972705F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7972705F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      wall0.setLeftSideColor((Integer) null);
      assertEquals((-0.7972705F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.7972705F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-0.7972705F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-0.7972705F), wall0.getXEnd(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7972705F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Wall wall0 = new Wall(468.7F, 1191.0F, 468.7F, 1.0F, 1002.1058F, (-3323.9722F));
      assertNotNull(wall0);
      assertEquals(1191.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(596.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(468.7F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1190.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(468.7F, wall0.getXStart(), 0.01F);
      assertEquals(1190.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3323.9722F), wall0.getHeight(), 0.01F);
      assertEquals(468.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1002.1058F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(1191.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(596.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(468.7F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1190.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(468.7F, wall0.getXStart(), 0.01F);
      assertEquals(1190.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3323.9722F), wall0.getHeight(), 0.01F);
      assertEquals(468.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1002.1058F, wall0.getThickness(), 0.01F);
      assertEquals(468.7F, wall1.getXStart(), 0.01F);
      assertEquals(1002.1058F, wall1.getThickness(), 0.01F);
      assertEquals(1.0F, wall1.getYEnd(), 0.01F);
      assertEquals(468.7F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1190.0F, wall1.getLength(), 0.01F);
      assertEquals(596.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals(1191.0F, wall1.getYStart(), 0.01F);
      assertEquals((-3323.9722F), wall1.getHeight(), 0.01F);
      assertEquals(468.7F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(1190.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      
      Level level0 = new Level("3;0'3@l", 1.0F, 0.0F, 1002.1058F);
      assertNotNull(level0);
      assertEquals(1002.1058F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("3;0'3@l", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      
      wall0.setLevel(level0);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1191.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(596.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(468.7F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1190.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(468.7F, wall0.getXStart(), 0.01F);
      assertEquals(1190.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3323.9722F), wall0.getHeight(), 0.01F);
      assertEquals(468.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1002.1058F, wall0.getThickness(), 0.01F);
      assertEquals(1002.1058F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("3;0'3@l", level0.getName());
      assertEquals(1.0F, level0.getElevation(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      
      float float0 = wall0.getXStart();
      assertNotSame(wall0, wall1);
      assertEquals(468.7F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1191.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(596.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(468.7F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1190.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(468.7F, wall0.getXStart(), 0.01F);
      assertEquals(1190.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3323.9722F), wall0.getHeight(), 0.01F);
      assertEquals(468.7F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1002.1058F, wall0.getThickness(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 19.254047F, 0.1F, 0.1F, 19.254047F);
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Wall> list2 = Wall.clone(list1);
      assertNotSame(list0, list1);
      assertNotSame(list0, list2);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list0);
      assertNotSame(list2, list1);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertTrue(list2.equals((Object)list0));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      wall0.move((-2829.0F), (-2829.0F));
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      float float0 = Float.min((-2829.0F), 0.1F);
      assertEquals((-2829.0F), float0, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      wall0.setRightSideShininess((-1327.748F));
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1327.748F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1327.748F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertEquals(19.154053F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      Float float1 = new Float(19.254047F);
      assertEquals(19.254047F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setArcExtent(float1);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1327.748F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2782.1938F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(917.9906F, wall0.getLength(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Wall");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(70, floatArray0.length);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1327.748F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2782.1938F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(917.9906F, wall0.getLength(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      assertFalse(linkedList1.contains(wall0));
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      
      float float2 = wall0.getLength();
      assertEquals(917.9906F, float2, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1327.748F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2782.1938F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(917.9906F, wall0.getLength(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
      
      float[][] floatArray1 = wall0.getPoints();
      assertNotSame(floatArray1, floatArray0);
      assertFalse(floatArray1.equals((Object)floatArray0));
      assertNotNull(floatArray1);
      assertEquals(70, floatArray1.length);
      assertEquals((-2809.7458F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1327.748F), wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154053F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2782.1938F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2828.9F), wall0.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getArcExtent(), 0.01F);
      assertEquals(19.254047F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-2819.3228F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(917.9906F, wall0.getLength(), 0.01F);
      assertEquals((-2828.9F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-2828.9F), wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      assertNotNull(wall0);
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertNotNull(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      List<Wall> list1 = Wall.clone(list0);
      assertNotSame(list0, list1);
      assertNotSame(list1, list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      
      List<Wall> list2 = Wall.clone(list1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertNotSame(list1, list2);
      assertNotSame(list1, list0);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertFalse(linkedList0.contains(wall0));
      assertFalse(list0.contains(wall0));
      assertFalse(list1.contains(wall0));
      assertFalse(list2.contains(wall0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertNotNull(list2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      
      wall0.setWallAtEnd(wall0);
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(19.254047F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(9.677024F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.254047F, wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getXEnd(), 0.01F);
      assertEquals(19.154047F, wall1.getLength(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.254047F, wall1.getXStart(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(19.254047F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(9.677024F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.254047F, wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getXEnd(), 0.01F);
      assertEquals(19.154047F, wall1.getLength(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.254047F, wall1.getXStart(), 0.01F);
      
      wall0.setRightSideShininess(0.1F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(19.254047F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(9.677024F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.254047F, wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getXEnd(), 0.01F);
      assertEquals(19.154047F, wall1.getLength(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.254047F, wall1.getXStart(), 0.01F);
      
      Wall wall2 = wall1.getWallAtStart();
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertNotNull(wall2);
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(19.254047F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(9.677024F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.254047F, wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getXEnd(), 0.01F);
      assertEquals(19.154047F, wall1.getLength(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.254047F, wall1.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(19.254047F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.1F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(9.677024F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(19.254047F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall2.getHeight(), 0.01F);
      assertEquals(19.154047F, wall2.getLength(), 0.01F);
      assertEquals(19.154047F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(19.254047F, wall2.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall2.getXEnd(), 0.01F);
      
      Integer integer0 = wall2.getLeftSideColor();
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertNull(integer0);
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.154047F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.1F, wall1.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(19.254047F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(9.677024F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(19.254047F, wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getXEnd(), 0.01F);
      assertEquals(19.154047F, wall1.getLength(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(19.254047F, wall1.getXStart(), 0.01F);
      assertNull(wall2.getRightSideColor());
      assertEquals(19.254047F, wall2.getXStart(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertEquals(0.1F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals(9.677024F, wall2.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.1F, wall2.getYStart(), 0.01F);
      assertEquals(19.254047F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall2.getHeight(), 0.01F);
      assertEquals(19.154047F, wall2.getLength(), 0.01F);
      assertEquals(19.154047F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals(19.254047F, wall2.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall2.getXEnd(), 0.01F);
      
      Wall wall3 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall3, wall0);
      assertSame(wall3, wall1);
      assertNotSame(wall3, wall2);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall3.equals((Object)wall0));
      assertFalse(wall3.equals((Object)wall2));
      assertNotNull(wall3);
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall3.getHeightAtEnd());
      assertEquals(19.254047F, wall3.getXEnd(), 0.01F);
      assertEquals(19.254047F, wall3.getYEnd(), 0.01F);
      assertEquals(0.0F, wall3.getRightSideShininess(), 0.01F);
      assertNull(wall3.getArcExtent());
      assertNull(wall3.getRightSideColor());
      assertEquals(19.254047F, wall3.getXArcCircleCenter(), 0.01F);
      assertFalse(wall3.isTrapezoidal());
      assertEquals(19.254047F, wall3.getXStart(), 0.01F);
      assertEquals(19.154047F, wall3.getLength(), 0.01F);
      assertEquals(0.1F, wall3.getYStart(), 0.01F);
      assertEquals(19.254047F, wall3.getHeight(), 0.01F);
      assertEquals(9.677024F, wall3.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall3.getThickness(), 0.01F);
      assertEquals(0.0F, wall3.getLeftSideShininess(), 0.01F);
      assertNull(wall3.getLeftSideColor());
      assertEquals(19.154047F, wall3.getStartPointToEndPointDistance(), 0.01F);
      
      float float0 = wall0.getRightSideShininess();
      assertNotSame(wall0, wall3);
      assertSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, float0, 0.01F);
      assertFalse(wall0.equals((Object)wall3));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(19.154047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertEquals(9.677024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(19.154047F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.0F, 0.1F, 0.1F, (-1.0F));
      assertNotNull(wall0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.1F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setArcExtent(float0);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1.2895726E-9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      
      Wall wall1 = new Wall(2579.3447F, 25.18F, 2579.3447F, 25.18F, 2579.3447F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals(2579.3447F, wall1.getXStart(), 0.01F);
      assertEquals(25.18F, wall1.getYStart(), 0.01F);
      assertEquals(2579.3447F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2579.3447F, wall1.getXEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2579.3447F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      Wall wall2 = wall1.clone();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertEquals(2579.3447F, wall1.getXStart(), 0.01F);
      assertEquals(25.18F, wall1.getYStart(), 0.01F);
      assertEquals(2579.3447F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2579.3447F, wall1.getXEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2579.3447F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(25.18F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.18F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2579.3447F, wall2.getXEnd(), 0.01F);
      assertEquals(25.18F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2579.3447F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2579.3447F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2579.3447F, wall2.getThickness(), 0.01F);
      
      wall0.setWallAtEnd(wall2);
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertNotSame(wall2, wall1);
      assertNotSame(wall2, wall0);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertFalse(wall2.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1.2895726E-9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2579.3447F, wall1.getXStart(), 0.01F);
      assertEquals(25.18F, wall1.getYStart(), 0.01F);
      assertEquals(2579.3447F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2579.3447F, wall1.getXEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2579.3447F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(25.18F, wall2.getYStart(), 0.01F);
      assertEquals(0.0F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(25.18F, wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(2579.3447F, wall2.getXEnd(), 0.01F);
      assertEquals(25.18F, wall2.getYEnd(), 0.01F);
      assertNull(wall2.getHeight());
      assertEquals(0.0F, wall2.getRightSideShininess(), 0.01F);
      assertEquals(2579.3447F, wall2.getXStart(), 0.01F);
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertFalse(wall2.isTrapezoidal());
      assertEquals(2579.3447F, wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall2.getLength(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(2579.3447F, wall2.getThickness(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertNotSame(wall1, wall2);
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(wall1.equals((Object)wall2));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals(2579.3447F, wall1.getXStart(), 0.01F);
      assertEquals(25.18F, wall1.getYStart(), 0.01F);
      assertEquals(2579.3447F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getHeight());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2579.3447F, wall1.getXEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYEnd(), 0.01F);
      assertEquals(25.18F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(2579.3447F, wall1.getXArcCircleCenter(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float1 = wall0.getLength();
      assertNotSame(wall0, wall2);
      assertNotSame(wall0, wall1);
      assertEquals(0.1F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall2));
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-1.2895726E-9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-1.0F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getArcExtent(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.1F, wall0.getLength(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      assertEquals(0.1F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.1F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-8.16562E14F), wall0.getYArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.0F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      assertNotNull(wall0);
      assertEquals(19.254047F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(19.254047F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(9.627024F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(19.254047F, wall0.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(19.254047F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(19.254047F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      wall0.move((-2829.0F), (-2829.0F));
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      float float0 = Float.min((-2829.0F), 0.1F);
      assertEquals((-2829.0F), float0, 0.01F);
      
      wall0.setWallAtEnd(wall0);
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Wall wall1 = wall0.clone();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2819.373F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.25415F, wall1.getLength(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.25415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2829.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtStart(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2819.373F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.25415F, wall1.getLength(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.25415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2829.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2819.373F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.25415F, wall1.getLength(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.25415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2829.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      
      wall1.setRightSideShininess((-1327.748F));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2819.373F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1327.748F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.25415F, wall1.getLength(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.25415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2829.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2819.373F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1327.748F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.25415F, wall1.getLength(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.25415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2829.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2819.373F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1327.748F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.25415F, wall1.getLength(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.25415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2829.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXStart(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-2819.373F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-1327.748F), wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.1F, wall1.getThickness(), 0.01F);
      assertEquals(19.25415F, wall1.getLength(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeightAtEnd());
      assertEquals((-2809.7458F), wall1.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall1.getHeight(), 0.01F);
      assertEquals(19.25415F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2829.0F), wall1.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall1.getXEnd(), 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertFalse(linkedList0.contains(wall1));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      float float1 = wall0.getLength();
      assertNotSame(wall0, wall1);
      assertEquals(19.25415F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertNotSame(wall0, wall2);
      assertNotSame(wall2, wall0);
      assertSame(wall2, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall2.equals((Object)wall0));
      assertNotNull(wall2);
      assertEquals((-2829.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-2809.7458F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-2809.7458F), wall0.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall0.getYEnd(), 0.01F);
      assertEquals((-2819.373F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(19.25415F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(19.254047F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-2809.7458F), wall0.getXStart(), 0.01F);
      assertEquals(19.25415F, wall0.getLength(), 0.01F);
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals((-2809.7458F), wall2.getXArcCircleCenter(), 0.01F);
      assertEquals(0.1F, wall2.getThickness(), 0.01F);
      assertNull(wall2.getHeightAtEnd());
      assertEquals(0.0F, wall2.getLeftSideShininess(), 0.01F);
      assertNull(wall2.getArcExtent());
      assertNull(wall2.getRightSideColor());
      assertEquals(19.25415F, wall2.getLength(), 0.01F);
      assertEquals(19.25415F, wall2.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2819.373F), wall2.getYArcCircleCenter(), 0.01F);
      assertNull(wall2.getLeftSideColor());
      assertEquals((-2809.7458F), wall2.getXStart(), 0.01F);
      assertEquals((-1327.748F), wall2.getRightSideShininess(), 0.01F);
      assertFalse(wall2.isTrapezoidal());
      assertEquals((-2829.0F), wall2.getYStart(), 0.01F);
      assertEquals((-2809.7458F), wall2.getXEnd(), 0.01F);
      assertEquals((-2809.7458F), wall2.getYEnd(), 0.01F);
      assertEquals(19.254047F, wall2.getHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Wall wall0 = new Wall(0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F, 0.22488791F);
      assertNotNull(wall0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.22488791F, wall0.getHeight(), 0.01F);
      assertEquals(0.22488791F, wall0.getYStart(), 0.01F);
      assertEquals(0.22488791F, wall0.getXStart(), 0.01F);
      assertEquals(0.22488791F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.22488791F, wall0.getXEnd(), 0.01F);
      assertEquals(0.22488791F, wall0.getYEnd(), 0.01F);
      assertEquals(0.22488791F, wall0.getThickness(), 0.01F);
      assertEquals(0.22488791F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Float float0 = wall0.getHeight();
      assertEquals(0.22488791F, (float)float0, 0.01F);
      assertNotNull(float0);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.22488791F, wall0.getHeight(), 0.01F);
      assertEquals(0.22488791F, wall0.getYStart(), 0.01F);
      assertEquals(0.22488791F, wall0.getXStart(), 0.01F);
      assertEquals(0.22488791F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.22488791F, wall0.getXEnd(), 0.01F);
      assertEquals(0.22488791F, wall0.getYEnd(), 0.01F);
      assertEquals(0.22488791F, wall0.getThickness(), 0.01F);
      assertEquals(0.22488791F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      
      Float float1 = new Float(0.22488791F);
      assertEquals(0.22488791F, (float)float1, 0.01F);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      wall0.setHeight(float1);
      assertEquals((float)float1, (float)float0, 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.22488791F, wall0.getHeight(), 0.01F);
      assertEquals(0.22488791F, wall0.getYStart(), 0.01F);
      assertEquals(0.22488791F, wall0.getXStart(), 0.01F);
      assertEquals(0.22488791F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.22488791F, wall0.getXEnd(), 0.01F);
      assertEquals(0.22488791F, wall0.getYEnd(), 0.01F);
      assertEquals(0.22488791F, wall0.getThickness(), 0.01F);
      assertEquals(0.22488791F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Wall wall0 = new Wall(2.1950982F, (-47.493576F), 2.1950982F, (-47.493576F), (-47.493576F), (-47.493576F));
      assertNotNull(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.1950982F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1950982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setWallAtStart(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2.1950982F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1950982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setLeftSideShininess((-47.493576F));
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.1950982F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1950982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      wall0.setWallAtEnd(wall0);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.1950982F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1950982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.1950982F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1950982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      
      Wall wall1 = wall0.getWallAtEnd();
      assertSame(wall0, wall1);
      assertSame(wall1, wall0);
      assertNotNull(wall1);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-47.493576F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-47.493576F), wall0.getYStart(), 0.01F);
      assertEquals((-47.493576F), wall0.getThickness(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-47.493576F), wall0.getHeight(), 0.01F);
      assertEquals((-47.493576F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2.1950982F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2.1950982F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(2.1950982F, wall1.getXStart(), 0.01F);
      assertEquals((-47.493576F), wall1.getLeftSideShininess(), 0.01F);
      assertEquals(2.1950982F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals((-47.493576F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getLeftSideColor());
      assertEquals((-47.493576F), wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-47.493576F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-47.493576F), wall1.getYEnd(), 0.01F);
      assertEquals((-47.493576F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(2.1950982F, wall1.getXArcCircleCenter(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Wall wall0 = new Wall((-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F), (-0.7972705F));
      assertNotNull(wall0);
      assertEquals((-0.7972705F), wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7972705F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-0.7972705F), wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-0.7972705F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.7972705F), wall0.getThickness(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYStart(), 0.01F);
      
      wall0.setXStart((-2374.89F));
      assertEquals((-2374.89F), wall0.getXStart(), 0.01F);
      assertEquals((-0.7972705F), wall0.getXEnd(), 0.01F);
      assertEquals(2374.0925F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.7972705F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7972705F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1187.8436F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2374.0925F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.7972705F), wall0.getThickness(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYStart(), 0.01F);
      
      Integer integer0 = wall0.getLeftSideColor();
      assertNull(integer0);
      assertEquals((-2374.89F), wall0.getXStart(), 0.01F);
      assertEquals((-0.7972705F), wall0.getXEnd(), 0.01F);
      assertEquals(2374.0925F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.7972705F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7972705F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1187.8436F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2374.0925F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.7972705F), wall0.getThickness(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYStart(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertEquals((-2374.89F), wall0.getXStart(), 0.01F);
      assertEquals((-0.7972705F), wall0.getXEnd(), 0.01F);
      assertEquals(2374.0925F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-0.7972705F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-0.7972705F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-1187.8436F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2374.0925F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-0.7972705F), wall0.getThickness(), 0.01F);
      assertEquals((-0.7972705F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Wall wall0 = new Wall((-4250.644F), (-4250.644F), 727.27875F, 727.27875F, (-416.0F));
      assertNotNull(wall0);
      assertEquals((-1761.6826F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7039.8457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(727.27875F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.0F), wall0.getThickness(), 0.01F);
      assertEquals(727.27875F, wall0.getYEnd(), 0.01F);
      assertEquals(7039.8457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1761.6826F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      Level level0 = new Level("5VmdclfM>FDU(:", 727.27875F, (-416.0F), (-1.0F));
      assertNotNull(level0);
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals(727.27875F, level0.getElevation(), 0.01F);
      assertEquals((-416.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("5VmdclfM>FDU(:", level0.getName());
      
      wall0.setLevel(level0);
      assertEquals((-1761.6826F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7039.8457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(727.27875F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.0F), wall0.getThickness(), 0.01F);
      assertEquals(727.27875F, wall0.getYEnd(), 0.01F);
      assertEquals(7039.8457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1761.6826F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1.0F), level0.getHeight(), 0.01F);
      assertEquals(727.27875F, level0.getElevation(), 0.01F);
      assertEquals((-416.0F), level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("5VmdclfM>FDU(:", level0.getName());
      
      float float0 = wall0.getLength();
      assertEquals(7039.8457F, float0, 0.01F);
      assertEquals((-1761.6826F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7039.8457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(727.27875F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.0F), wall0.getThickness(), 0.01F);
      assertEquals(727.27875F, wall0.getYEnd(), 0.01F);
      assertEquals(7039.8457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1761.6826F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      TextureImage textureImage0 = wall0.getPattern();
      assertNull(textureImage0);
      assertEquals((-1761.6826F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7039.8457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(727.27875F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.0F), wall0.getThickness(), 0.01F);
      assertEquals(727.27875F, wall0.getYEnd(), 0.01F);
      assertEquals(7039.8457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1761.6826F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, propertyChangeListener0);
      assertNotNull(propertyChangeListenerProxy0);
      assertNull(propertyChangeListenerProxy0.getPropertyName());
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertEquals((-1761.6826F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7039.8457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(727.27875F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.0F), wall0.getThickness(), 0.01F);
      assertEquals(727.27875F, wall0.getYEnd(), 0.01F);
      assertEquals(7039.8457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1761.6826F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float1 = wall0.getThickness();
      assertEquals((-416.0F), float1, 0.01F);
      assertNotEquals(float1, float0, 0.01F);
      assertEquals((-1761.6826F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7039.8457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(727.27875F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.0F), wall0.getThickness(), 0.01F);
      assertEquals(727.27875F, wall0.getYEnd(), 0.01F);
      assertEquals(7039.8457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1761.6826F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      float float2 = wall0.getYEnd();
      assertEquals(727.27875F, float2, 0.01F);
      assertNotEquals(float2, float1, 0.01F);
      assertNotEquals(float2, float0, 0.01F);
      assertEquals((-1761.6826F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(7039.8457F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(727.27875F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-416.0F), wall0.getThickness(), 0.01F);
      assertEquals(727.27875F, wall0.getYEnd(), 0.01F);
      assertEquals(7039.8457F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4250.644F), wall0.getXStart(), 0.01F);
      assertEquals((-4250.644F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-1761.6826F), wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Wall wall0 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F), (-3488.6F));
      assertNotNull(wall0);
      assertEquals((-888.9F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-888.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-888.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-888.9F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-888.9F), wall0.getYEnd(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals((-888.9F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-888.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-888.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-888.9F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-888.9F), wall0.getYEnd(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals((-888.9F), wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals((-888.9F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-888.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-888.9F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-888.9F), wall0.getYEnd(), 0.01F);
      
      Wall wall1 = new Wall((-888.9F), (-888.9F), (-888.9F), (-888.9F), (-888.9F), (-3488.6F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3488.6F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.9F), wall1.getXStart(), 0.01F);
      assertEquals((-888.9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-888.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-888.9F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-888.9F), wall1.getThickness(), 0.01F);
      assertEquals((-888.9F), wall1.getYStart(), 0.01F);
      
      wall0.setYStart(1912.802F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(511.951F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-888.9F), wall0.getXEnd(), 0.01F);
      assertEquals(2801.7021F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1912.802F, wall0.getYStart(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-888.9F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2801.7021F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals((-888.9F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-888.9F), wall0.getYEnd(), 0.01F);
      
      wall0.move((-3488.6F), 1737.6F);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2801.702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(848.69995F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2249.5508F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-4377.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2801.702F, wall0.getLength(), 0.01F);
      assertEquals(3650.4019F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4377.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4377.5F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      wall1.setWallAtEnd(wall0);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(2801.702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(848.69995F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2249.5508F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-4377.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2801.702F, wall0.getLength(), 0.01F);
      assertEquals(3650.4019F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4377.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4377.5F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3488.6F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.9F), wall1.getXStart(), 0.01F);
      assertEquals((-888.9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-888.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-888.9F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-888.9F), wall1.getThickness(), 0.01F);
      assertEquals((-888.9F), wall1.getYStart(), 0.01F);
      
      wall1.setThickness(283.86993F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3488.6F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(283.86993F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.9F), wall1.getXStart(), 0.01F);
      assertEquals((-888.9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-888.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-888.9F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-888.9F), wall1.getYStart(), 0.01F);
      
      boolean boolean0 = wall0.containsPoint((-3171.64F), 5735.33F, (-3488.6F));
      assertNotSame(wall0, wall1);
      assertFalse(boolean0);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(2801.702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(848.69995F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2249.5508F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-4377.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2801.702F, wall0.getLength(), 0.01F);
      assertEquals(3650.4019F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4377.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4377.5F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float float0 = wall1.getXEnd();
      assertNotSame(wall1, wall0);
      assertEquals((-888.9F), float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3488.6F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(283.86993F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.9F), wall1.getXStart(), 0.01F);
      assertEquals((-888.9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-888.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-888.9F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-888.9F), wall1.getYStart(), 0.01F);
      
      Wall wall2 = wall0.getWallAtEnd();
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertNull(wall2);
      assertEquals(2801.702F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(848.69995F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2249.5508F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-3488.6F), wall0.getThickness(), 0.01F);
      assertEquals((-4377.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2801.702F, wall0.getLength(), 0.01F);
      assertEquals(3650.4019F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-4377.5F), wall0.getXEnd(), 0.01F);
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals((-4377.5F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeightAtEnd());
      
      float[][] floatArray0 = wall1.getPoints();
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-3488.6F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(283.86993F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-888.9F), wall1.getXStart(), 0.01F);
      assertEquals((-888.9F), wall1.getYArcCircleCenter(), 0.01F);
      assertEquals((-888.9F), wall1.getYEnd(), 0.01F);
      assertEquals((-888.9F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLength(), 0.01F);
      assertEquals((-888.9F), wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-888.9F), wall1.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.0F, 0.0F, 0.1F, 0.1F);
      assertNotNull(wall0);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.14142136F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.14142136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      wall0.addPropertyChangeListener((PropertyChangeListener) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.14142136F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.14142136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      wall0.setRightSideColor((Integer) null);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.14142136F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.14142136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
      
      float[][] floatArray0 = wall0.getPoints();
      assertNotNull(floatArray0);
      assertEquals(4, floatArray0.length);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.05F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.14142136F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.1F, wall0.getThickness(), 0.01F);
      assertEquals(0.14142136F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.1F, wall0.getYEnd(), 0.01F);
      assertEquals(0.05F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.1F, wall0.getXStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      float float0 = 1952.96F;
      Wall wall0 = new Wall(1952.96F, 0.0F, 0.0F, 2253.1047F, 0.0F, 2253.1047F);
      assertNotNull(wall0);
      assertEquals(1126.5524F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2981.6997F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2253.1047F, wall0.getYEnd(), 0.01F);
      assertEquals(1952.96F, wall0.getXStart(), 0.01F);
      assertEquals(2253.1047F, wall0.getHeight(), 0.01F);
      assertEquals(2981.6997F, wall0.getLength(), 0.01F);
      assertEquals(976.48F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      wall0.setRightSideShininess(0.0F);
      assertEquals(1126.5524F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2981.6997F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2253.1047F, wall0.getYEnd(), 0.01F);
      assertEquals(1952.96F, wall0.getXStart(), 0.01F);
      assertEquals(2253.1047F, wall0.getHeight(), 0.01F);
      assertEquals(2981.6997F, wall0.getLength(), 0.01F);
      assertEquals(976.48F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      Level level0 = new Level((String) null, 1952.96F, 0.0F, 1952.96F);
      assertNotNull(level0);
      assertTrue(level0.isVisible());
      assertEquals(1952.96F, level0.getHeight(), 0.01F);
      assertEquals(1952.96F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      
      float float1 = (-265.71936F);
      level0.setFloorThickness((-265.71936F));
      assertTrue(level0.isVisible());
      assertEquals(1952.96F, level0.getHeight(), 0.01F);
      assertEquals((-265.71936F), level0.getFloorThickness(), 0.01F);
      assertEquals(1952.96F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      
      level0.addPropertyChangeListener((PropertyChangeListener) null);
      assertTrue(level0.isVisible());
      assertEquals(1952.96F, level0.getHeight(), 0.01F);
      assertEquals((-265.71936F), level0.getFloorThickness(), 0.01F);
      assertEquals(1952.96F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      
      level0.setFloorThickness((-80.0F));
      assertTrue(level0.isVisible());
      assertEquals(1952.96F, level0.getHeight(), 0.01F);
      assertEquals(1952.96F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-80.0F), level0.getFloorThickness(), 0.01F);
      
      level0.setHeight((-80.0F));
      assertEquals((-80.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1952.96F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-80.0F), level0.getFloorThickness(), 0.01F);
      
      boolean boolean0 = wall0.isAtLevel(level0);
      assertFalse(boolean0);
      assertEquals(1126.5524F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2981.6997F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2253.1047F, wall0.getYEnd(), 0.01F);
      assertEquals(1952.96F, wall0.getXStart(), 0.01F);
      assertEquals(2253.1047F, wall0.getHeight(), 0.01F);
      assertEquals(2981.6997F, wall0.getLength(), 0.01F);
      assertEquals(976.48F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-80.0F), level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(1952.96F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals((-80.0F), level0.getFloorThickness(), 0.01F);
      
      wall0.setRightSideShininess(1952.96F);
      assertEquals(1126.5524F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(2981.6997F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(2253.1047F, wall0.getYEnd(), 0.01F);
      assertEquals(1952.96F, wall0.getXStart(), 0.01F);
      assertEquals(2253.1047F, wall0.getHeight(), 0.01F);
      assertEquals(1952.96F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2981.6997F, wall0.getLength(), 0.01F);
      assertEquals(976.48F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      
      // Undeclared exception!
      try { 
        Wall.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Wall wall0 = new Wall(1.0F, 1.0F, 1.0F, 1389.54F, 0.0F, (-3488.6F));
      assertNotNull(wall0);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1389.54F, wall0.getYEnd(), 0.01F);
      assertEquals(1388.54F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1388.54F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(695.27F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      HomeTexture homeTexture0 = wall0.getLeftSideTexture();
      assertNull(homeTexture0);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1389.54F, wall0.getYEnd(), 0.01F);
      assertEquals(1388.54F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1388.54F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(695.27F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setRightSideTexture((HomeTexture) null);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1389.54F, wall0.getYEnd(), 0.01F);
      assertEquals(1388.54F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1388.54F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(695.27F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 825.0F, 489.935F, 4890.16F, (-1.0F));
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(959.511F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(412.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(4890.16F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(489.935F, wall1.getYEnd(), 0.01F);
      assertEquals(244.9675F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(959.511F, wall1.getLength(), 0.01F);
      assertEquals(825.0F, wall1.getXEnd(), 0.01F);
      
      wall1.setYStart(845.5F);
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(845.5F, wall1.getYStart(), 0.01F);
      assertEquals(898.3604F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeightAtEnd());
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(412.5F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(667.7175F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(4890.16F, wall1.getThickness(), 0.01F);
      assertEquals(898.3604F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(489.935F, wall1.getYEnd(), 0.01F);
      assertEquals(825.0F, wall1.getXEnd(), 0.01F);
      
      wall1.move(97.887F, (-1125.485F));
      assertNotSame(wall1, wall0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(898.3605F, wall1.getLength(), 0.01F);
      assertEquals(898.3605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(922.887F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(97.887F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-635.55F), wall1.getYEnd(), 0.01F);
      assertEquals(510.38702F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-279.985F), wall1.getYStart(), 0.01F);
      assertEquals(4890.16F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-457.7675F), wall1.getYArcCircleCenter(), 0.01F);
      
      wall0.setWallAtEnd(wall1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1389.54F, wall0.getYEnd(), 0.01F);
      assertEquals(1388.54F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1388.54F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(695.27F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(898.3605F, wall1.getLength(), 0.01F);
      assertEquals(898.3605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(922.887F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(97.887F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-635.55F), wall1.getYEnd(), 0.01F);
      assertEquals(510.38702F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-279.985F), wall1.getYStart(), 0.01F);
      assertEquals(4890.16F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-457.7675F), wall1.getYArcCircleCenter(), 0.01F);
      
      boolean boolean0 = wall1.containsPoint(2662.7249F, (-1.0F), 845.5F);
      assertNotSame(wall1, wall0);
      assertFalse(boolean0);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(898.3605F, wall1.getLength(), 0.01F);
      assertEquals(898.3605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(922.887F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(97.887F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-635.55F), wall1.getYEnd(), 0.01F);
      assertEquals(510.38702F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-279.985F), wall1.getYStart(), 0.01F);
      assertEquals(4890.16F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-457.7675F), wall1.getYArcCircleCenter(), 0.01F);
      
      float float0 = wall1.getXEnd();
      assertNotSame(wall1, wall0);
      assertEquals(922.887F, float0, 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNull(wall1.getLeftSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(898.3605F, wall1.getLength(), 0.01F);
      assertEquals(898.3605F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(922.887F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(97.887F, wall1.getXStart(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals((-635.55F), wall1.getYEnd(), 0.01F);
      assertEquals(510.38702F, wall1.getXArcCircleCenter(), 0.01F);
      assertEquals((-279.985F), wall1.getYStart(), 0.01F);
      assertEquals(4890.16F, wall1.getThickness(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-1.0F), wall1.getHeight(), 0.01F);
      assertEquals((-457.7675F), wall1.getYArcCircleCenter(), 0.01F);
      
      float float1 = wall0.getLeftSideShininess();
      assertNotSame(wall0, wall1);
      assertEquals(0.0F, float1, 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotEquals(float1, float0, 0.01F);
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1389.54F, wall0.getYEnd(), 0.01F);
      assertEquals(1388.54F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1388.54F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals(695.27F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      
      wall0.setYEnd((-1367.695F));
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1367.695F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1368.695F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-683.3475F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1368.695F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      Wall.Property wall_Property0 = Wall.Property.valueOf("LEFT_SIDE_COLOR");
      assertEquals(Wall.Property.LEFT_SIDE_COLOR, wall_Property0);
      
      wall0.setPattern((TextureImage) null);
      assertNotSame(wall0, wall1);
      assertFalse(wall0.equals((Object)wall1));
      assertEquals(1.0F, wall0.getXStart(), 0.01F);
      assertEquals((-1367.695F), wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1368.695F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-683.3475F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-3488.6F), wall0.getHeight(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals(1.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(1368.695F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Wall wall0 = new Wall(19.254047F, 0.1F, 19.254047F, 19.254047F, 0.1F, 19.254047F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      List<Wall> list1 = Wall.clone(list0);
      linkedList0.offerLast(wall0);
      List<Wall> list2 = Wall.clone(list1);
      Wall.clone(list2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      wall0.move((-2829.0F), (-2829.0F));
      Float.min((-2829.0F), 0.1F);
      wall0.setWallAtEnd(wall0);
      Wall wall1 = wall0.clone();
      wall1.setWallAtStart(wall0);
      wall0.setRightSideShininess((-2829.0F));
      wall0.setWallAtEnd(wall1);
      Float float0 = new Float((-2829.0F));
      Float.max((-1.0F), (-2829.0F));
      Float float1 = new Float((-1.0F));
      wall0.setArcExtent(float1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "com.eteks.sweethome3d.model.Wall");
      wall1.getPoints();
      LinkedList<Wall> linkedList1 = new LinkedList<Wall>();
      wall0.setWallAtStart(wall1);
      Float float2 = new Float((-2829.0F));
      wall0.getPoints();
      wall0.getWallAtEnd();
      assertEquals((-2828.9F), wall0.getYStart(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Wall wall0 = new Wall((-2352.0293F), (-2352.0293F), 0.0F, 2813.3623F, (-1.0F), 2813.3623F);
      Integer integer0 = new Integer(8192);
      Integer.remainderUnsigned(1326, (-1169));
      Integer.toUnsignedString(8192);
      wall0.setRightSideColor(integer0);
      Wall wall1 = wall0.clone();
      wall1.setRightSideShininess((-2571.2642F));
      assertEquals((-2571.2642F), wall1.getRightSideShininess(), 0.01F);
      
      wall0.getYArcCircleCenter();
      boolean boolean0 = wall0.intersectsRectangle((-3113.2F), 1.0F, (-2571.2642F), (-1.0F));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Wall wall0 = new Wall((-1.0F), (-1.0F), (-1.0F), (-1.0F), (-1.0F));
      Float float0 = new Float((-2441.1772));
      Float.sum((-352.0F), (-1.0F));
      Float.sum((-1.0F), (-1.0F));
      Float.isFinite((-1.0F));
      Float.max(0.0F, (-1.0F));
      Float.max(0.01F, 0.01F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      linkedList0.add(wall0);
      wall0.setRightSideShininess(0.0F);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      Wall.clone(list0);
      Float.isFinite(0.0F);
      Float.sum((-1.0F), (-142.3487F));
      Float.sum(0.0F, (-2975.78F));
      wall0.setYStart(97.887F);
      wall0.setHeight(float0);
      wall0.containsPoint((-1.0F), (-142.3487F), 2201.078F);
      wall0.getPoints();
      wall0.isTrapezoidal();
      wall0.move((-2.0F), (-287.0F));
      wall0.getRightSideColor();
      // Undeclared exception!
      try { 
        Wall.Property.valueOf("Q|{WYl(kdx bm F_TC");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant com.eteks.sweethome3d.model.Wall.Property.Q|{WYl(kdx bm F_TC
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Wall wall0 = new Wall(0.1F, 0.1F, 0.1F, 0.1F, (-2695.879F), (-2695.879F));
      Wall wall1 = new Wall((-2695.879F), (-1.0F), 0.0F, 0.1F, 17, 0.1F);
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      wall0.setWallAtStart(wall1);
      linkedList0.add(wall1);
      assertEquals(2695.8792F, wall1.getLength(), 0.01F);
      assertEquals(0.1F, wall1.getHeight(), 0.01F);
      assertEquals(0.1F, wall1.getYEnd(), 0.01F);
      
      linkedList0.add(wall0);
      List<Wall> list0 = Wall.clone((List<Wall>) linkedList0);
      assertFalse(list0.contains(wall0));
      
      wall0.getRightSideTexture();
      assertEquals((-2695.879F), wall0.getThickness(), 0.01F);
      assertEquals((-2695.879F), wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Wall wall0 = new Wall(0.0F, 0.0F, 1.0F, 457.0F, 1422.61F);
      Float float0 = new Float((double) 1422.61F);
      Float.isFinite(0.0F);
      ResourceURLContent resourceURLContent0 = new ResourceURLContent((URL) null, false);
      CatalogTexture catalogTexture0 = new CatalogTexture((String) null, "x^P)hGF;p`[48YtdR", resourceURLContent0, 352.8F, (-191.53F), "dj");
      float float1 = wall0.getXEnd();
      assertEquals(1.0F, float1, 0.01F);
      
      float float2 = wall0.getLeftSideShininess();
      assertEquals(0.0F, float2, 0.01F);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      Wall.clone((List<Wall>) linkedList0);
      Wall.clone((List<Wall>) linkedList0);
      boolean boolean0 = wall0.isAtLevel((Level) null);
      assertTrue(boolean0);
      
      float float3 = wall0.getXArcCircleCenter();
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(228.5F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.5F, float3, 0.01F);
      assertEquals(1422.61F, wall0.getThickness(), 0.01F);
  }
}

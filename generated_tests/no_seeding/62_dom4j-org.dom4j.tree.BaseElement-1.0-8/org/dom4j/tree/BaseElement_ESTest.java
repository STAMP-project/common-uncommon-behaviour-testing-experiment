/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 13:28:38 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.dom4j.Attribute;
import org.dom4j.Document;
import org.dom4j.Element;
import org.dom4j.Namespace;
import org.dom4j.Node;
import org.dom4j.NodeType;
import org.dom4j.QName;
import org.dom4j.bean.BeanAttribute;
import org.dom4j.bean.BeanAttributeList;
import org.dom4j.bean.BeanElement;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMElement;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.ContentListFacade;
import org.dom4j.tree.DefaultAttribute;
import org.dom4j.tree.DefaultDocument;
import org.dom4j.tree.FlyweightCDATA;
import org.dom4j.util.NonLazyElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BaseElement_ESTest extends BaseElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class<DOMDocument> class0 = DOMDocument.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList((BeanElement) null);
      BeanAttribute beanAttribute0 = new BeanAttribute(beanAttributeList0, 0);
      QName qName0 = beanAttribute0.getQName();
      BaseElement baseElement0 = new BaseElement(qName0);
      baseElement0.setAttributeList(beanAttributeList0);
      assertEquals("Element", baseElement0.getNodeTypeName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BaseElement baseElement0 = new BaseElement((String) null, namespace0);
      QName qName0 = QName.get((String) null, (String) null, "");
      baseElement0.setQName(qName0);
      assertEquals("Element", baseElement0.getNodeTypeName());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      QName qName0 = QName.get("\"VF", "Children not allowed for this node: ", "\"VF");
      BaseElement baseElement0 = new BaseElement(qName0);
      DefaultDocument defaultDocument0 = new DefaultDocument(baseElement0);
      baseElement0.setDocument(defaultDocument0);
      assertEquals(NodeType.DOCUMENT_NODE, defaultDocument0.getNodeTypeEnum());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement((QName) null);
      QName qName0 = nonLazyElement0.getQName();
      assertNull(qName0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("^+mimIQUj2oZiK[Xq");
      QName qName0 = baseElement0.getQName();
      assertEquals("", qName0.getNamespacePrefix());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("^+mimIQUj2oZiK[Xq");
      FlyweightCDATA flyweightCDATA0 = new FlyweightCDATA("L4]CN]uJ");
      baseElement0.add((Node) flyweightCDATA0);
      List<Node> list0 = baseElement0.contentList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("");
      List<Node> list0 = nonLazyElement0.content();
      ContentListFacade<Node> contentListFacade0 = new ContentListFacade<Node>(nonLazyElement0, list0);
      nonLazyElement0.setContent(contentListFacade0);
      List<Node> list1 = ((BaseElement)nonLazyElement0).contentList();
      assertSame(list1, list0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BaseElement baseElement0 = new BaseElement((String) null, namespace0);
      List<Attribute> list0 = baseElement0.attributeList(93);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Namespace namespace0 = Namespace.get("]j", "org.dom4j.tree.BaseElement");
      BaseElement baseElement0 = new BaseElement("", namespace0);
      baseElement0.addAttribute("]j", "");
      List<Attribute> list0 = baseElement0.attributeList(2956);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      BaseElement baseElement0 = new BaseElement((String) null, namespace0);
      List<Attribute> list0 = baseElement0.attributeList();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("", (Namespace) null);
      baseElement0.addAttribute("", "");
      List<Attribute> list0 = baseElement0.attributeList();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("");
      // Undeclared exception!
      try { 
        baseElement0.attributeList((-751));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -751
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("^+mimIQUj2oZiK[Xq");
      QName qName0 = new QName("^+mimIQUj2oZiK[Xq");
      BeanElement beanElement0 = new BeanElement(qName0);
      List<Attribute> list0 = beanElement0.attributes();
      baseElement0.setAttributes(list0);
      List<Attribute> list1 = baseElement0.attributeList((-1));
      assertTrue(list1.equals((Object)list0));
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement(".OU8X!ub`A'/.*", (Namespace) null);
      Class<DefaultAttribute> class0 = DefaultAttribute.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = new QName("g8o<a@m", (Namespace) null, (String) null);
      DOMElement dOMElement0 = new DOMElement(".OU8X!ub`A'/.*", (Namespace) null);
      BeanElement beanElement0 = new BeanElement(qName0, dOMElement0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      baseElement0.setAttributes((List<Attribute>) beanAttributeList0);
      assertEquals((short)1, baseElement0.getNodeType());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Class<DefaultAttribute> class0 = DefaultAttribute.class;
      BeanMetaData beanMetaData0 = BeanMetaData.get(class0);
      QName qName0 = new QName("g8o<a@m", (Namespace) null, (String) null);
      DOMElement dOMElement0 = new DOMElement(".OU8X!ub`A'/.*", (Namespace) null);
      BeanElement beanElement0 = new BeanElement(qName0, dOMElement0);
      BeanAttributeList beanAttributeList0 = beanMetaData0.createAttributeList(beanElement0);
      NonLazyElement nonLazyElement0 = new NonLazyElement(qName0);
      nonLazyElement0.setContent(beanAttributeList0);
      assertEquals("Element", nonLazyElement0.getNodeTypeName());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      QName qName0 = new QName("org.dom4j.tree.BaseElement");
      BaseElement baseElement0 = new BaseElement(qName0);
      Element element0 = baseElement0.createElement(qName0);
      baseElement0.setParent(element0);
      Document document0 = baseElement0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      QName qName0 = QName.get("\"VF", "Children not allowed for this node: ", "\"VF");
      BaseElement baseElement0 = new BaseElement(qName0);
      DefaultDocument defaultDocument0 = new DefaultDocument(baseElement0);
      Document document0 = baseElement0.getDocument();
      assertEquals(NodeType.DOCUMENT_NODE, document0.getNodeTypeEnum());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement(";f9ri>i!2h;@&u?Ex`B");
      Node node0 = nonLazyElement0.detach();
      assertEquals(NodeType.ELEMENT_NODE, node0.getNodeTypeEnum());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("\"VF", "Children not allowed for this node: ", "\"VF");
      BaseElement baseElement0 = new BaseElement(qName0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("\"VF", namespace0);
      List<Node> list0 = nonLazyElement0.content;
      ContentListFacade<Node> contentListFacade0 = new ContentListFacade<Node>(nonLazyElement0, list0);
      ContentListFacade<Node> contentListFacade1 = new ContentListFacade<Node>(nonLazyElement0, contentListFacade0);
      boolean boolean0 = contentListFacade1.add((Node) baseElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Namespace namespace0 = Namespace.XML_NAMESPACE;
      QName qName0 = QName.get("\"VF", "Children not allowed for this node: ", "\"VF");
      BaseElement baseElement0 = new BaseElement(qName0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("\"VF", namespace0);
      List<Node> list0 = nonLazyElement0.content;
      ContentListFacade<Node> contentListFacade0 = new ContentListFacade<Node>(nonLazyElement0, list0);
      contentListFacade0.add((Node) baseElement0);
      Element element0 = baseElement0.getParent();
      assertFalse(element0.isReadOnly());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement((QName) null);
      Element element0 = baseElement0.getParent();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NonLazyElement nonLazyElement0 = new NonLazyElement("org.dom4j.tree.BaseElement");
      nonLazyElement0.clearContent();
      assertEquals("Element", nonLazyElement0.getNodeTypeName());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      BaseElement baseElement0 = new BaseElement("", (Namespace) null);
      boolean boolean0 = baseElement0.supportsParent();
      assertTrue(boolean0);
  }
}

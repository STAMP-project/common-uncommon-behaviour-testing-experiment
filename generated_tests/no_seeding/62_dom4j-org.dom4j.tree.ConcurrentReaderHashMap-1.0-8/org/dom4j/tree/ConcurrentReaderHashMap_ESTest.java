/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 13:30:30 GMT 2019
 */

package org.dom4j.tree;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.AbstractMap;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.dom4j.tree.ConcurrentReaderHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ConcurrentReaderHashMap_ESTest extends ConcurrentReaderHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(1, 1);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      boolean boolean0 = concurrentReaderHashMap0.eq((Object) null, (Object) null);
      assertTrue(boolean0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object0 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertNull(object0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      Object object1 = concurrentReaderHashMap0.get((Object) null);
      assertNull(object1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(1.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(338, 338);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(338.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      Object object0 = concurrentReaderHashMap0.sremove(concurrentReaderHashMap1, 32);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNull(object0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(338.0F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(512, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap2);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.put(concurrentReaderHashMap2, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      AbstractMap.SimpleEntry<Integer, String> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<Integer, String>((Integer) 32, "OD]B");
      assertNotNull(abstractMap_SimpleEntry0);
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Object object0 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertNull(object0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(32, 18.0F);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(18.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      Object object1 = concurrentReaderHashMap_ValueIterator0.currentValue;
      assertNull(object1);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(32, concurrentReaderHashMap1, concurrentReaderHashMap_ValueIterator0, (ConcurrentReaderHashMap.Entry) null);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap_Entry1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(18.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      boolean boolean1 = concurrentReaderHashMap_Entry1.equals(abstractMap_SimpleEntry0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertFalse(boolean1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(18.0F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      int int0 = concurrentReaderHashMap0.capacity();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertEquals(32, int0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      concurrentReaderHashMap1.putAll(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = new ConcurrentReaderHashMap.Entry[0];
      concurrentReaderHashMap0.table = concurrentReaderHashMap_EntryArray0;
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(16, concurrentReaderHashMap1.capacity());
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.sremove(concurrentReaderHashMap1, 32);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("org.dom4j.tree.ConcurrentReaderHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotNull(concurrentReaderHashMap1);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      Object object0 = concurrentReaderHashMap0.put(concurrentReaderHashMap1, "");
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNull(object0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Object object1 = concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap1, 32);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNull(object1);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap2);
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap3);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(2, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap3.capacity());
      
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      BiFunction<Object, String, Object> biFunction0 = (BiFunction<Object, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyString());
      Object object2 = concurrentReaderHashMap3.compute(integer0, biFunction0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNull(object2);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(2, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap3.capacity());
      
      Object object3 = concurrentReaderHashMap0.remove((Object) null);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNull(object3);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      Object object4 = concurrentReaderHashMap0.put("", "");
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNull(object4);
      assertEquals(3, concurrentReaderHashMap0.size());
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotNull(concurrentReaderHashMap1);
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      Object object0 = concurrentReaderHashMap0.put(concurrentReaderHashMap1, "");
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNull(object0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object1 = concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, concurrentReaderHashMap1, 32);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNull(object1);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(4, concurrentReaderHashMap1.capacity());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap2);
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertEquals(0, concurrentReaderHashMap2.size());
      
      Enumeration enumeration0 = concurrentReaderHashMap0.keys();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotNull(enumeration0);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(2, concurrentReaderHashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap3 = new ConcurrentReaderHashMap();
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertTrue(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertNotNull(concurrentReaderHashMap3);
      assertEquals(0, concurrentReaderHashMap3.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(32, concurrentReaderHashMap3.capacity());
      assertTrue(concurrentReaderHashMap3.isEmpty());
      
      Object object2 = concurrentReaderHashMap0.sput("", "rDpVv4Slu[rz\"8:]+/", 0);
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNull(object2);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(3, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap3.putAll(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap3));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap3.equals((Object)concurrentReaderHashMap2));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap3);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap3, concurrentReaderHashMap2);
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(3, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap3.loadFactor(), 0.01F);
      assertEquals(3, concurrentReaderHashMap3.size());
      assertFalse(concurrentReaderHashMap3.isEmpty());
      assertEquals(32, concurrentReaderHashMap3.capacity());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(5856);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8192, concurrentReaderHashMap0.capacity());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put((String) null, "");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.isEmpty();
      assertFalse(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put("", (String) null);
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("", "");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      Integer integer1 = new Integer(4);
      assertFalse(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(4, (int)integer1);
      
      boolean boolean0 = concurrentReaderHashMap0.eq(integer0, integer1);
      assertFalse(integer0.equals((Object)integer1));
      assertFalse(integer1.equals((Object)integer0));
      assertFalse(boolean0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object0 = concurrentReaderHashMap0.sput("", (Object) null, 4);
      assertNull(object0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.clear();
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      String string0 = hashMap0.put((String) null, "");
      assertNull(string0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      
      boolean boolean0 = concurrentReaderHashMap0.containsValue("");
      assertTrue(boolean0);
      assertEquals(1, hashMap0.size());
      assertFalse(hashMap0.isEmpty());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
      
      concurrentReaderHashMap0.clear();
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(0, concurrentReaderHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      String string0 = hashMap0.put("T'\"3B7SOF%ABA^", (String) null);
      assertNull(string0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      String string1 = hashMap0.put("T'\"3B7SOF%ABA^", "T'\"3B7SOF%ABA^");
      assertNull(string1);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(hashMap0);
      assertNotNull(concurrentReaderHashMap0);
      assertFalse(hashMap0.isEmpty());
      assertEquals(1, hashMap0.size());
      assertEquals(16, concurrentReaderHashMap0.capacity());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(1, concurrentReaderHashMap0.size());
      
      Integer integer0 = new Integer(32);
      assertNotNull(integer0);
      assertEquals(32, (int)integer0);
      
      Integer integer1 = new Integer(32);
      assertTrue(integer1.equals((Object)integer0));
      assertNotNull(integer1);
      assertEquals(32, (int)integer1);
      
      // Undeclared exception!
      try { 
        concurrentReaderHashMap0.eq((Object) null, "T'\"3B7SOF%ABA^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap();
      assertNotNull(concurrentReaderHashMap0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.HashIterator concurrentReaderHashMap_HashIterator0 = concurrentReaderHashMap0.new HashIterator();
      assertNotNull(concurrentReaderHashMap_HashIterator0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Set set0 = concurrentReaderHashMap0.keySet();
      assertNotNull(set0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      AbstractMap.SimpleEntry<String, Object> abstractMap_SimpleEntry0 = new AbstractMap.SimpleEntry<String, Object>((String) null, concurrentReaderHashMap0);
      assertNotNull(abstractMap_SimpleEntry0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      AbstractMap.SimpleImmutableEntry<String, Object> abstractMap_SimpleImmutableEntry0 = new AbstractMap.SimpleImmutableEntry<String, Object>(abstractMap_SimpleEntry0);
      assertNotNull(abstractMap_SimpleImmutableEntry0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean0 = concurrentReaderHashMap0.findAndRemoveEntry(abstractMap_SimpleImmutableEntry0);
      assertFalse(boolean0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object0 = concurrentReaderHashMap0.remove((Object) null);
      assertNull(object0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      BiFunction<String, Object, Integer> biFunction0 = (BiFunction<String, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(anyString() , any());
      Object object1 = concurrentReaderHashMap0.compute(abstractMap_SimpleImmutableEntry0, biFunction0);
      assertNull(object1);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Comparator<Map.Entry<String, Integer>> comparator0 = Map.Entry.comparingByValue();
      assertNotNull(comparator0);
      
      boolean boolean1 = concurrentReaderHashMap_ValueIterator0.hasMoreElements();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry0 = concurrentReaderHashMap_ValueIterator0.lastReturned;
      assertNull(concurrentReaderHashMap_Entry0);
      
      ConcurrentReaderHashMap.Entry concurrentReaderHashMap_Entry1 = new ConcurrentReaderHashMap.Entry(1328, (Object) null, (Object) null, (ConcurrentReaderHashMap.Entry) null);
      assertNotNull(concurrentReaderHashMap_Entry1);
      
      boolean boolean2 = concurrentReaderHashMap_Entry1.equals((Object) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Comparator comparator1 = Map.Entry.comparingByKey();
      assertNotNull(comparator1);
      
      Object object2 = concurrentReaderHashMap_Entry1.getValue();
      assertNull(object2);
      
      concurrentReaderHashMap_ValueIterator0.currentValue = null;
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.clear();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object3 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertNull(object3);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      concurrentReaderHashMap0.clear();
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap.Entry[] concurrentReaderHashMap_EntryArray0 = concurrentReaderHashMap0.getTableForReading();
      assertNotNull(concurrentReaderHashMap_EntryArray0);
      assertEquals(32, concurrentReaderHashMap_EntryArray0.length);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = (ConcurrentReaderHashMap)concurrentReaderHashMap0.clone();
      assertTrue(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertNotNull(concurrentReaderHashMap1);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap1.isEmpty());
      assertEquals(32, concurrentReaderHashMap1.capacity());
      
      boolean boolean3 = concurrentReaderHashMap0.containsKey((Object) null);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(boolean3);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      int int0 = concurrentReaderHashMap0.size();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertEquals(0, int0);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      boolean boolean4 = concurrentReaderHashMap0.contains(concurrentReaderHashMap_ValueIterator0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertFalse(boolean4);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object4 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNull(object4);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      
      Object object5 = concurrentReaderHashMap_Entry1.getValue();
      assertNull(object5);
      
      Object object6 = concurrentReaderHashMap_ValueIterator0.returnValueOfNext();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNull(object6);
      assertEquals(32, concurrentReaderHashMap0.capacity());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertTrue(concurrentReaderHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ConcurrentReaderHashMap concurrentReaderHashMap0 = new ConcurrentReaderHashMap(0);
      assertNotNull(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.isEmpty());
      assertEquals(0, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Object object1 = concurrentReaderHashMap0.put(object0, "v");
      assertNull(object1);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap.ValueIterator concurrentReaderHashMap_ValueIterator0 = concurrentReaderHashMap0.new ValueIterator();
      assertNotNull(concurrentReaderHashMap_ValueIterator0);
      assertEquals(1, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      Object object2 = concurrentReaderHashMap0.sput(concurrentReaderHashMap_ValueIterator0, object0, (-108));
      assertNull(object2);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap1 = new ConcurrentReaderHashMap(concurrentReaderHashMap0);
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap1);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap.KeyIterator concurrentReaderHashMap_KeyIterator0 = concurrentReaderHashMap1.new KeyIterator();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotNull(concurrentReaderHashMap_KeyIterator0);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      Object object3 = concurrentReaderHashMap_KeyIterator0.next();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertSame(object3, object0);
      assertNotNull(object3);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(2, concurrentReaderHashMap1.size());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      concurrentReaderHashMap_KeyIterator0.remove();
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap1.equals((Object)concurrentReaderHashMap0));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap1, concurrentReaderHashMap0);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(1, concurrentReaderHashMap1.size());
      assertFalse(concurrentReaderHashMap1.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap1.loadFactor(), 0.01F);
      assertEquals(16, concurrentReaderHashMap1.capacity());
      
      ConcurrentReaderHashMap concurrentReaderHashMap2 = new ConcurrentReaderHashMap();
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotNull(concurrentReaderHashMap2);
      assertEquals(0, concurrentReaderHashMap2.size());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertTrue(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      concurrentReaderHashMap2.putAll(concurrentReaderHashMap0);
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertFalse(concurrentReaderHashMap0.isEmpty());
      assertEquals(4, concurrentReaderHashMap0.capacity());
      assertEquals(2, concurrentReaderHashMap2.size());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
      
      concurrentReaderHashMap0.rehash();
      assertTrue(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap2));
      assertFalse(concurrentReaderHashMap0.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap1);
      assertNotSame(concurrentReaderHashMap0, concurrentReaderHashMap2);
      assertEquals(2, concurrentReaderHashMap0.size());
      assertEquals(0.75F, concurrentReaderHashMap0.loadFactor(), 0.01F);
      assertEquals(8, concurrentReaderHashMap0.capacity());
      assertFalse(concurrentReaderHashMap0.isEmpty());
      
      Object object4 = concurrentReaderHashMap2.remove((Object) null);
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap0));
      assertFalse(concurrentReaderHashMap2.equals((Object)concurrentReaderHashMap1));
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap0);
      assertNotSame(concurrentReaderHashMap2, concurrentReaderHashMap1);
      assertNull(object4);
      assertEquals(2, concurrentReaderHashMap2.size());
      assertEquals(32, concurrentReaderHashMap2.capacity());
      assertFalse(concurrentReaderHashMap2.isEmpty());
      assertEquals(0.75F, concurrentReaderHashMap2.loadFactor(), 0.01F);
  }
}

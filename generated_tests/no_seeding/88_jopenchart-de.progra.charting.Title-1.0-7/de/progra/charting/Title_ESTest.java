/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 12:59:33 GMT 2019
 */

package de.progra.charting;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import de.progra.charting.Title;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics2D;
import java.awt.geom.AffineTransform;
import java.io.InputStream;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Title_ESTest extends Title_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, String> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, String>();
      Font font0 = new Font(hashMap0);
      Title title0 = new Title((String) null, font0);
      String string0 = title0.getText();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Title title0 = new Title("");
      String string0 = title0.getText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Title title0 = new Title("");
      Dimension dimension0 = title0.getPreferredSize();
      assertEquals(0, dimension0.width);
      assertEquals(25, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Font font0 = Font.decode("il&as+%[VaL$");
      Font font1 = font0.deriveFont((-2205), (-1025.377F));
      Title title0 = new Title("*X.So#{txfx*V", font1);
      Dimension dimension0 = title0.getPreferredSize();
      assertEquals((-7508), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Title title0 = new Title();
      Dimension dimension0 = title0.getPreferredSize();
      assertEquals(115, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Title title0 = new Title("", (Font) null);
      Font font0 = title0.getFont();
      assertEquals("", title0.getText());
      assertNull(font0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Font font0 = new Font("", (-649), (-1078));
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance((-2067), 524.0578526, (-2256.8601));
      Font font1 = font0.deriveFont(22, affineTransform0);
      Title title0 = new Title("", font1);
      Font font2 = title0.getFont();
      assertEquals("", title0.getText());
      assertTrue(font2.isTransformed());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Title title0 = new Title();
      HashMap<AttributedCharacterIterator.Attribute, InputStream> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, InputStream>();
      Font font0 = new Font(hashMap0);
      Font font1 = font0.deriveFont((-1));
      title0.setFont(font1);
      Font font2 = title0.getFont();
      assertEquals(12, font2.getSize());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Title title0 = new Title("");
      Font font0 = new Font("", 0, 0);
      title0.font = font0;
      title0.getFont();
      assertEquals("", title0.getText());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Font font0 = new Font((String) null, (-363), (-363));
      Title title0 = new Title("Z`", font0);
      Font font1 = title0.getFont();
      assertEquals("Z`", title0.getText());
      assertEquals((-363.0F), font1.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Title title0 = new Title("*'zM");
      // Undeclared exception!
      try { 
        title0.paintDefault((Graphics2D) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("de.progra.charting.Title", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Title title0 = new Title((String) null);
      // Undeclared exception!
      try { 
        title0.getPreferredSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Font font0 = Font.decode("");
      AffineTransform affineTransform0 = AffineTransform.getQuadrantRotateInstance(22, (-57.423342), 0.0);
      Font font1 = font0.deriveFont(affineTransform0);
      Title title0 = new Title("", font1);
      // Undeclared exception!
      try { 
        title0.getPreferredSize();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Title title0 = new Title();
      title0.setText("&\"zUB<AY@4OU");
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Title title0 = new Title();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(graphics2D0).drawImage(any(java.awt.Image.class) , anyInt() , anyInt() , any(java.awt.image.ImageObserver.class));
      title0.render(graphics2D0);
      assertEquals("Chart Title", title0.getText());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Title title0 = new Title();
      String string0 = title0.getText();
      assertEquals("Chart Title", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Title title0 = new Title();
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      title0.paintDefault(graphics2D0);
      assertEquals("Chart Title", title0.getText());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Title title0 = new Title("");
      Graphics2D graphics2D0 = mock(Graphics2D.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        title0.paintDefault(graphics2D0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Zero length string passed to TextLayout constructor.
         //
         verifyException("java.awt.font.TextLayout", e);
      }
  }
}

/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 23:57:45 GMT 2019
 */

package src.feudalismGUI;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.SystemColor;
import java.util.Vector;
import javax.swing.JColorChooser;
import javax.swing.JComboBox;
import javax.swing.JInternalFrame;
import javax.swing.JLayer;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.JSeparator;
import javax.swing.JSlider;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JToolBar;
import javax.swing.colorchooser.DefaultColorSelectionModel;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import src.feudalismGUI.GridLayout2;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class GridLayout2_ESTest extends GridLayout2_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1729, 1729);
      Vector<Object> vector0 = new Vector<Object>();
      JTable jTable0 = new JTable(vector0, vector0);
      gridLayout2_0.layoutContainer(jTable0);
      assertEquals(1729, gridLayout2_0.getRows());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1732, 3441, 1732, 3441);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jInternalFrame0);
      assertEquals(5956403, dimension0.height);
      assertEquals(40, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(3881, 3881, 0, 0);
      gridLayout2_0.setRows(0);
      SystemColor systemColor0 = SystemColor.scrollbar;
      DefaultColorSelectionModel defaultColorSelectionModel0 = new DefaultColorSelectionModel(systemColor0);
      JColorChooser jColorChooser0 = new JColorChooser(defaultColorSelectionModel0);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jColorChooser0);
      assertEquals(224, dimension0.height);
      assertEquals(946, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(3881, 3881, 0, 0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      gridLayout2_0.setRows(0);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(defaultTreeCellRenderer0);
      assertEquals(0.0, dimension0.getHeight(), 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JSpinner jSpinner0 = new JSpinner();
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jSpinner0);
      assertEquals(44, dimension0.width);
      assertEquals(20, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("uw", true, true, true);
      GridLayout2 gridLayout2_0 = new GridLayout2(2228, (-1));
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jInternalFrame0);
      assertEquals(108, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1586, 3124, 1566, (-125));
      JSlider jSlider0 = new JSlider(1, 1, 1586, 1586);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jSlider0);
      assertEquals((-198125), dimension0.height);
      assertEquals((-1566), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1729, 1729);
      Vector<Object> vector0 = new Vector<Object>();
      JTable jTable0 = new JTable(vector0, vector0);
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jTable0);
      assertEquals(0, dimension0.height);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      GridLayout2 gridLayout2_0 = new GridLayout2(1696, 1696, 1681, (-1465));
      Dimension dimension0 = gridLayout2_0.preferredLayoutSize(jComboBox0);
      assertEquals((-2483168), dimension0.height);
      assertEquals(10, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(1586, 3124, 1566, (-125));
      JSlider jSlider0 = new JSlider(1, 1, 1586, 1586);
      Dimension dimension0 = gridLayout2_0.minimumLayoutSize(jSlider0);
      assertEquals((-1566), dimension0.width);
      assertEquals((-198125), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(3881, 3881, 0, 0);
      JOptionPane jOptionPane0 = new JOptionPane(gridLayout2_0, 0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      gridLayout2_0.layoutContainer(jComboBox0);
      gridLayout2_0.layoutContainer(jComboBox0);
      // Undeclared exception!
      gridLayout2_0.preferredLayoutSize(jOptionPane0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultTableCellRenderer defaultTableCellRenderer0 = new DefaultTableCellRenderer();
      GridLayout2 gridLayout2_0 = new GridLayout2((-810), (-810));
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(defaultTableCellRenderer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2(3881, 3881, 0, 0);
      JOptionPane jOptionPane0 = new JOptionPane(gridLayout2_0, 0);
      gridLayout2_0.minimumLayoutSize(jOptionPane0);
      gridLayout2_0.minimumLayoutSize(jOptionPane0);
      // Undeclared exception!
      gridLayout2_0.minimumLayoutSize(jOptionPane0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JLayer<JSeparator> jLayer0 = new JLayer<JSeparator>();
      GridLayout2 gridLayout2_0 = new GridLayout2((-1), (-1));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jLayer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JLayer<JSeparator> jLayer0 = new JLayer<JSeparator>();
      GridLayout2 gridLayout2_0 = new GridLayout2(3563, 3563);
      gridLayout2_0.preferredLayoutSize(jLayer0);
      gridLayout2_0.preferredLayoutSize(jLayer0);
      // Undeclared exception!
      gridLayout2_0.layoutContainer(jLayer0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer((Container) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JLayer<JSeparator> jLayer0 = new JLayer<JSeparator>();
      GridLayout2 gridLayout2_0 = new GridLayout2(0, (-227), 0, (-5669));
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jLayer0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0, 0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      GridLayout2 gridLayout2_0 = null;
      try {
        gridLayout2_0 = new GridLayout2(0, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rows and cols cannot both be zero
         //
         verifyException("java.awt.GridLayout", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jSpinner_NumberEditor0.setBounds(0, (-1), 1680, 0);
      gridLayout2_0.layoutContainer(jSpinner_NumberEditor0);
      assertEquals(0, gridLayout2_0.getVgap());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      gridLayout2_0.setRows((-108));
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      // Undeclared exception!
      try { 
        gridLayout2_0.layoutContainer(jComboBox0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      DefaultTableCellRenderer.UIResource defaultTableCellRenderer_UIResource0 = new DefaultTableCellRenderer.UIResource();
      gridLayout2_0.layoutContainer(defaultTableCellRenderer_UIResource0);
      assertFalse(defaultTableCellRenderer_UIResource0.getIgnoreRepaint());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      gridLayout2_0.setRows((-1010));
      // Undeclared exception!
      try { 
        gridLayout2_0.minimumLayoutSize(jPopupMenu0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      GridLayout2 gridLayout2_0 = new GridLayout2();
      JToolBar.Separator jToolBar_Separator0 = new JToolBar.Separator();
      gridLayout2_0.setRows((-180));
      // Undeclared exception!
      try { 
        gridLayout2_0.preferredLayoutSize(jToolBar_Separator0);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("src.feudalismGUI.GridLayout2", e);
      }
  }
}

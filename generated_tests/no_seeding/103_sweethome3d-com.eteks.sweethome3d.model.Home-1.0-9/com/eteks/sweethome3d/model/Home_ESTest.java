/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 14:27:43 GMT 2019
 */

package com.eteks.sweethome3d.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.eteks.sweethome3d.model.AspectRatio;
import com.eteks.sweethome3d.model.BackgroundImage;
import com.eteks.sweethome3d.model.Camera;
import com.eteks.sweethome3d.model.CatalogDoorOrWindow;
import com.eteks.sweethome3d.model.CatalogPieceOfFurniture;
import com.eteks.sweethome3d.model.CollectionListener;
import com.eteks.sweethome3d.model.Compass;
import com.eteks.sweethome3d.model.Content;
import com.eteks.sweethome3d.model.DimensionLine;
import com.eteks.sweethome3d.model.DoorOrWindow;
import com.eteks.sweethome3d.model.Home;
import com.eteks.sweethome3d.model.HomeDoorOrWindow;
import com.eteks.sweethome3d.model.HomeEnvironment;
import com.eteks.sweethome3d.model.HomeFurnitureGroup;
import com.eteks.sweethome3d.model.HomeLight;
import com.eteks.sweethome3d.model.HomePieceOfFurniture;
import com.eteks.sweethome3d.model.HomePrint;
import com.eteks.sweethome3d.model.Label;
import com.eteks.sweethome3d.model.Level;
import com.eteks.sweethome3d.model.ObserverCamera;
import com.eteks.sweethome3d.model.Room;
import com.eteks.sweethome3d.model.Sash;
import com.eteks.sweethome3d.model.Selectable;
import com.eteks.sweethome3d.model.SelectionListener;
import com.eteks.sweethome3d.model.Wall;
import com.eteks.sweethome3d.tools.ResourceURLContent;
import com.eteks.sweethome3d.tools.URLContent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.math.BigDecimal;
import java.net.URL;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Home_ESTest extends Home_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<HomePieceOfFurniture> list1 = Home.getFurnitureSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Home home0 = new Home(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Object object0 = home0.getVisualProperty("FURNITURE_DESCENDING_SORTED");
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<Label> collection0 = home0.getLabels();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      Compass compass0 = home0.getCompass();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
      
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall(0.0F, 0.0F, (-815.7287F), 1.0995575F, 3700L);
      assertEquals((-815.7287F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0995575F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(815.72943F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-407.86435F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.54977876F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(815.72943F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals((-815.7287F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0995575F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(815.72943F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-407.86435F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.54977876F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(815.72943F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(815.72943F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0995575F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(815.72943F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.7287F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-407.86435F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3700.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.54977876F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      home0.deleteWall(wall1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-815.7287F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1.0995575F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(815.72943F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals((-407.86435F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.54977876F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYStart(), 0.01F);
      assertEquals(815.72943F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(815.72943F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0995575F, wall1.getYEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals(815.72943F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals((-815.7287F), wall1.getXEnd(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals((-407.86435F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(3700.0F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getHeight());
      assertEquals(0.54977876F, wall1.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      Home home1 = new Home(2180.325F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(2180.325F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      Home home2 = home1.clone();
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(2180.325F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(2180.325F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotNull(home2);
      
      home2.getFurnitureSortedProperty();
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(2180.325F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(2180.325F, home2.getWallHeight(), 0.01F);
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isModified());
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      
      Camera camera0 = home1.getCamera();
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(2180.325F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotNull(camera0);
      
      Camera camera1 = camera0.clone();
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(2180.325F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertNotNull(camera1);
      
      home1.setCamera(camera1);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(2180.325F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      
      String string0 = home1.getName();
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(2180.325F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLabelsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom((Room) null);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label("2fs_>n/YU5KyF*s", 3700L, 3700L);
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("2fs_>n/YU5KyF*s", label0.getText());
      assertNotNull(label0);
      
      home0.addLabel(label0);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("2fs_>n/YU5KyF*s", label0.getText());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.addSelectionListener((SelectionListener) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Home home0 = new Home((-149.0F));
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Object object0 = home0.getVisualProperty("");
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(object0);
      
      float float0 = home0.getWallHeight();
      assertEquals((-149.0F), float0, 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine((-1857.115F), (-1.0F), (-1857.115F), (-1857.115F), 146.0F);
      assertEquals((-1857.115F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1857.115F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(146.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-1857.115F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(1856.115F, dimensionLine0.getLength(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.deleteDimensionLine(dimensionLine0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals((-1857.115F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1857.115F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(146.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-1857.115F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(1856.115F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getFurnitureSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      // Undeclared exception!
      try { 
        Home.getSubList((List<? extends Selectable>) null, class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Label label0 = new Label("mj", (-3429.0F), 0.19634955F);
      assertEquals((-3429.0F), label0.getX(), 0.01F);
      assertEquals("mj", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.19634955F, label0.getY(), 0.01F);
      assertNotNull(label0);
      
      DimensionLine dimensionLine0 = new DimensionLine(5058.8115F, 0.0F, 0.19634955F, (-1500.925F), 0.19634955F);
      assertEquals(5058.8115F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1500.925F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5276.5864F, dimensionLine0.getLength(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(5058.8115F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1500.925F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5276.5864F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.19634955F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(5058.8115F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(5276.5864F, dimensionLine1.getLength(), 0.01F);
      assertEquals(0.19634955F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-1500.925F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNotNull(dimensionLine1);
      
      Level level0 = dimensionLine1.getLevel();
      assertEquals(5058.8115F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1500.925F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(5276.5864F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.19634955F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(5058.8115F, dimensionLine1.getXStart(), 0.01F);
      assertEquals(5276.5864F, dimensionLine1.getLength(), 0.01F);
      assertEquals(0.19634955F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals((-1500.925F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNull(level0);
      
      label0.setLevel((Level) null);
      assertEquals((-3429.0F), label0.getX(), 0.01F);
      assertEquals("mj", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.19634955F, label0.getY(), 0.01F);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Room> class0 = Room.class;
      List<Room> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Class<HomePieceOfFurniture> class1 = HomePieceOfFurniture.class;
      List<HomePieceOfFurniture> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      Home home0 = new Home(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.addLabel(label0);
      assertEquals((-3429.0F), label0.getX(), 0.01F);
      assertEquals("mj", label0.getText());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(0.19634955F, label0.getY(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isEmpty();
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
      
      boolean boolean2 = home0.isEmpty();
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(false);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Home home0 = new Home((-1668.1813F));
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setRecovered(true);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isBasePlanLocked());
      assertEquals((-1668.1813F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      List<Selectable> list0 = home1.getSelectedItems();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isBasePlanLocked());
      assertEquals((-1668.1813F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(list0);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 0.0F, 3700L, (-120.23333F), (-1328.7797F));
      assertEquals(3701.9531F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1328.7797F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-120.23333F), dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(3701.9531F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1328.7797F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-120.23333F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3701.9531F, dimensionLine1.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-1328.7797F), dimensionLine1.getOffset(), 0.01F);
      assertEquals((-120.23333F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNotNull(dimensionLine1);
      
      home1.addDimensionLine(dimensionLine1);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isBasePlanLocked());
      assertEquals((-1668.1813F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3701.9531F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1328.7797F), dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-120.23333F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3701.9531F, dimensionLine1.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-1328.7797F), dimensionLine1.getOffset(), 0.01F);
      assertEquals((-120.23333F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotNull(camera0);
      
      boolean boolean1 = home1.isRecovered();
      assertTrue(boolean1);
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isBasePlanLocked());
      assertEquals((-1668.1813F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(boolean1 == boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[9][9];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(1850.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(9, floatArray0.length);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(1850.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(1850.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(9, room1.getPointCount());
      assertEquals(1850.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(9, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertNotNull(room1);
      
      home0.addRoom(room1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(9, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isCeilingVisible());
      assertEquals(1850.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(1850.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(1850.0F, room1.getYCenter(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertTrue(room1.isAreaVisible());
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(9, room1.getPointCount());
      assertEquals(1850.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(9, floatArray0.length);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      Wall wall0 = new Wall((-480.8F), 67.05F, (-480.8F), (-86.004F), (-480.8F), (-86.004F));
      assertEquals((-480.8F), wall0.getXEnd(), 0.01F);
      assertEquals((-86.004F), wall0.getYEnd(), 0.01F);
      assertEquals(67.05F, wall0.getYStart(), 0.01F);
      assertEquals((-480.8F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(153.054F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.476997F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-480.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(153.054F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.8F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-86.004F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals((-480.8F), wall0.getXEnd(), 0.01F);
      assertEquals((-86.004F), wall0.getYEnd(), 0.01F);
      assertEquals(67.05F, wall0.getYStart(), 0.01F);
      assertEquals((-480.8F), wall0.getXStart(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(153.054F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.476997F), wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals((-480.8F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(153.054F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-480.8F), wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-86.004F), wall0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      home1.getFurnitureSortedProperty();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Level> list0 = home0.getLevels();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      Camera camera0 = home0.getTopCamera();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getTopCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Home home0 = new Home(832.868F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(832.868F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(832.868F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      Compass compass0 = home0.getCompass();
      assertTrue(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName((String) null);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = new Level("1$?tW~", (-1481.0372F), 3700L, 100.0F);
      assertTrue(level0.isVisible());
      assertEquals(100.0F, level0.getHeight(), 0.01F);
      assertEquals("1$?tW~", level0.getName());
      assertEquals((-1481.0372F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(100.0F, level0.getHeight(), 0.01F);
      assertEquals("1$?tW~", level0.getName());
      assertEquals((-1481.0372F), level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      float float0 = (-1609.0F);
      Home home0 = new Home((-1609.0F));
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[5][0];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (-100.0F);
      floatArray1[1] = (-1609.0F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[1];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 616.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = 616.0F;
      floatArray3[1] = (-1609.0F);
      floatArray3[2] = (-1609.0F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[1];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = (float) 3700L;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[9];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      
      floatArray5[0] = 616.0F;
      floatArray5[1] = 688.82F;
      floatArray5[2] = (-100.0F);
      floatArray5[3] = 616.0F;
      floatArray5[4] = 38.56F;
      floatArray5[5] = (-100.0F);
      floatArray5[6] = (-1609.0F);
      floatArray5[7] = (-1609.0F);
      floatArray5[8] = (-1609.0F);
      floatArray0[4] = floatArray5;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(1800.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(5, floatArray0.length);
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(5, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(1800.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(5, floatArray0.length);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("SAEa)");
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("SAEa)", home0.getName());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("SAEa)", home0.getName());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = new ObserverCamera(1364.9666F, (-1609.0F), 1655.732F, (-1609.0F), (-8.0F), 3700L);
      assertNull(observerCamera0.getName());
      assertEquals(1773.9987F, observerCamera0.getHeight(), 0.01F);
      assertEquals((-1609.0F), observerCamera0.getYaw(), 0.01F);
      assertEquals((-8.0F), observerCamera0.getPitch(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals((-1609.0F), observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(1364.9666F, observerCamera0.getX(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1655.732F, observerCamera0.getZ(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("SAEa)", home0.getName());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(observerCamera0.getName());
      assertEquals(1773.9987F, observerCamera0.getHeight(), 0.01F);
      assertEquals((-1609.0F), observerCamera0.getYaw(), 0.01F);
      assertEquals((-8.0F), observerCamera0.getPitch(), 0.01F);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals((-1609.0F), observerCamera0.getY(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(1364.9666F, observerCamera0.getX(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(1655.732F, observerCamera0.getZ(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, (-178));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -178, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Level level0 = new Level(":KK@`", 3700L, 3700L, 3700L);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(":KK@`", level0.getName());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(":KK@`", level0.getName());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[12][9];
      Room room0 = new Room(floatArray0);
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(12, room0.getPointCount());
      assertEquals(12, floatArray0.length);
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(12, room0.getPointCount());
      assertEquals(12, floatArray0.length);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom(room0);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(12, room0.getPointCount());
      assertEquals(12, floatArray0.length);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[15][9];
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(15, room0.getPointCount());
      assertEquals(15, floatArray0.length);
      assertNotNull(room0);
      
      home0.addRoom(room0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(15, room0.getPointCount());
      assertEquals(15, floatArray0.length);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.PORTRAIT;
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, (-1243.8456F), (-1.0F), (-931.0851F), (-1243.8456F), (-1243.8456F), (-1025.3964F), true, true, true, (Float) null, "MgMq_LD67#;)b&~_nY", "MgMq_LD67#;)b&~_nY");
      assertNull(homePrint0.getPlanScale());
      assertEquals((-931.0851F), homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals((-1025.3964F), homePrint0.getPaperRightMargin(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals("MgMq_LD67#;)b&~_nY", homePrint0.getFooterFormat());
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals((-1243.8456F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals((-1.0F), homePrint0.getPaperHeight(), 0.01F);
      assertEquals("MgMq_LD67#;)b&~_nY", homePrint0.getHeaderFormat());
      assertEquals((-1243.8456F), homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals((-1243.8456F), homePrint0.getPaperWidth(), 0.01F);
      assertTrue(homePrint0.isPlanPrinted());
      assertNotNull(homePrint0);
      
      home0.setPrint(homePrint0);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(homePrint0.getPlanScale());
      assertEquals((-931.0851F), homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals((-1025.3964F), homePrint0.getPaperRightMargin(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals("MgMq_LD67#;)b&~_nY", homePrint0.getFooterFormat());
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals((-1243.8456F), homePrint0.getPaperLeftMargin(), 0.01F);
      assertEquals((-1.0F), homePrint0.getPaperHeight(), 0.01F);
      assertEquals("MgMq_LD67#;)b&~_nY", homePrint0.getHeaderFormat());
      assertEquals((-1243.8456F), homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals((-1243.8456F), homePrint0.getPaperWidth(), 0.01F);
      assertTrue(homePrint0.isPlanPrinted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(true);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      boolean boolean0 = home1.isModified();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      Home home2 = home1.clone();
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      home0.setBasePlanLocked(false);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      
      HomePrint homePrint0 = home2.getPrint();
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNull(homePrint0);
      
      home2.setPrint((HomePrint) null);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      
      boolean boolean1 = home2.isRecovered();
      assertFalse(boolean1);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertTrue(boolean1 == boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = HomePieceOfFurniture.SortableProperty.COLOR;
      home2.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty1);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.COLOR, home2.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertFalse(homePieceOfFurniture_SortableProperty1.equals((Object)homePieceOfFurniture_SortableProperty0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      
      boolean boolean2 = home0.isRecovered();
      assertFalse(boolean2);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      
      LinkedList<Room> linkedList1 = new LinkedList<Room>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Class<Label> class0 = Label.class;
      List<Label> list1 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(list1);
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList2 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(homePieceOfFurniture_SortableProperty1));
      assertNotNull(linkedList2);
      
      home2.setFurnitureVisibleProperties(linkedList2);
      assertEquals(HomePieceOfFurniture.SortableProperty.PRICE_VALUE_ADDED_TAX_INCLUDED, home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertTrue(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.COLOR, home2.getFurnitureSortedProperty());
      assertEquals(0, linkedList2.size());
      assertFalse(linkedList2.contains(homePieceOfFurniture_SortableProperty1));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isBasePlanLocked();
      assertFalse(boolean0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-4314.6523F), 1733.7021F, (-4314.6523F), (-169.92F), 3700L);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.7021F, wall0.getYStart(), 0.01F);
      assertEquals(781.89105F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1903.6222F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1903.6222F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4314.6523F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-169.92F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.7021F, wall0.getYStart(), 0.01F);
      assertEquals(781.89105F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1903.6222F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1903.6222F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4314.6523F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-169.92F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.7021F, wall0.getYStart(), 0.01F);
      assertEquals(781.89105F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1903.6222F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1903.6222F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4314.6523F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-169.92F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      home1.deleteWall(wall0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(1733.7021F, wall0.getYStart(), 0.01F);
      assertEquals(781.89105F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1903.6222F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1903.6222F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-4314.6523F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals((-4314.6523F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals((-169.92F), wall0.getYEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Home home2 = home1.clone();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertNull(home2.getName());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertTrue(home2.isModified());
      assertFalse(home2.isEmpty());
      assertFalse(home2.isRecovered());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      home1.getFurnitureSortedProperty();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      
      boolean boolean0 = home0.isModified();
      assertTrue(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = new Home();
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      home0.addWall(wall0);
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      Sash[] sashArray0 = new Sash[4];
      Sash sash0 = new Sash((-2443.4424F), 130.58658F, (-2443.4424F), (-913.8F), 1353.554F);
      assertEquals(1353.554F, sash0.getEndAngle(), 0.01F);
      assertEquals((-913.8F), sash0.getStartAngle(), 0.01F);
      assertEquals((-2443.4424F), sash0.getXAxis(), 0.01F);
      assertEquals((-2443.4424F), sash0.getWidth(), 0.01F);
      assertEquals(130.58658F, sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-913.8F), 3700L, (-2443.4424F), 1353.554F, (-2450.454F));
      assertEquals((-2450.454F), sash1.getEndAngle(), 0.01F);
      assertEquals((-2443.4424F), sash1.getWidth(), 0.01F);
      assertEquals((-913.8F), sash1.getXAxis(), 0.01F);
      assertEquals(1353.554F, sash1.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash1.getYAxis(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-2443.4424F), 130.58658F, 3700L, (-2450.454F), 64.15F);
      assertEquals((-2443.4424F), sash2.getXAxis(), 0.01F);
      assertEquals(64.15F, sash2.getEndAngle(), 0.01F);
      assertEquals(130.58658F, sash2.getYAxis(), 0.01F);
      assertEquals((-2450.454F), sash2.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash2.getWidth(), 0.01F);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash(500.0F, (-294.843F), 3700L, 3700L, (-683.4995F));
      assertEquals(500.0F, sash3.getXAxis(), 0.01F);
      assertEquals(3700.0F, sash3.getWidth(), 0.01F);
      assertEquals((-683.4995F), sash3.getEndAngle(), 0.01F);
      assertEquals((-294.843F), sash3.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash3.getStartAngle(), 0.01F);
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash1));
      assertFalse(sash3.equals((Object)sash2));
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("zOMqF?5Mhd#(eN)@g", uRLContent0, uRLContent0, 3700L, 3700L, 3700L, 3700L, false, (-2443.4424F), 3700L, sashArray0, (Integer) null, (float[][]) null, false, (-913.8F), false);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("zOMqF?5Mhd#(eN)@g", catalogDoorOrWindow0.getName());
      assertEquals(3700.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-2443.4424F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-913.8F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(4, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("zOMqF?5Mhd#(eN)@g", catalogDoorOrWindow0.getName());
      assertEquals(3700.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-2443.4424F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-913.8F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(3700.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("zOMqF?5Mhd#(eN)@g", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2443.4424F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1850.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1850.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(4, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = (HomeDoorOrWindow)homeDoorOrWindow0.clone();
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertNull(catalogDoorOrWindow0.getCreator());
      assertNull(catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertEquals("zOMqF?5Mhd#(eN)@g", catalogDoorOrWindow0.getName());
      assertEquals(3700.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertTrue(catalogDoorOrWindow0.isModifiable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(1392409281320L, (long)catalogDoorOrWindow0.getCreationDate());
      assertEquals((-2443.4424F), catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertNull(catalogDoorOrWindow0.getId());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals((-913.8F), catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isProportional());
      assertEquals(3700.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals("zOMqF?5Mhd#(eN)@g", homeDoorOrWindow0.getName());
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow0.getCatalogId());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals((-2443.4424F), homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getDescription());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(1850.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(1850.0F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertNull(homeDoorOrWindow0.getColor());
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(3700.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(1850.0F, homeDoorOrWindow1.getY(), 0.01F);
      assertNull(homeDoorOrWindow1.getDescription());
      assertEquals(3700.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals((-2443.4424F), homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertEquals(3700.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isMovable());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(3700.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertEquals("zOMqF?5Mhd#(eN)@g", homeDoorOrWindow1.getName());
      assertNull(homeDoorOrWindow1.getColor());
      assertNull(homeDoorOrWindow1.getCatalogId());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getRef());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNull(uRL0.getUserInfo());
      assertEquals((-1), uRL0.getPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getQuery());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(4, sashArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotNull(homeDoorOrWindow1);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) homeDoorOrWindow1, 3289);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3289, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Wall wall0 = new Wall(93.42F, 93.42F, (-2504.0F), 93.42F, 4522.26F);
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2597.42F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1205.29F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2504.0F), wall0.getXEnd(), 0.01F);
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2597.42F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      home1.deleteWall(wall0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(2597.42F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1205.29F), wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-2504.0F), wall0.getXEnd(), 0.01F);
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(2597.42F, wall0.getLength(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      BackgroundImage backgroundImage0 = home1.getBackgroundImage();
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(backgroundImage0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      home1.setRecovered(false);
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label("NvFRq@Ke79I+`T", 1.0F, 3700L);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("NvFRq@Ke79I+`T", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      Label label1 = label0.clone();
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("NvFRq@Ke79I+`T", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("NvFRq@Ke79I+`T", label1.getText());
      assertEquals(1.0F, label1.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNotNull(label1);
      
      home0.deleteLabel(label1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("NvFRq@Ke79I+`T", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(1.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals("NvFRq@Ke79I+`T", label1.getText());
      assertEquals(1.0F, label1.getX(), 0.01F);
      assertEquals(3700.0F, label1.getY(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      home0.setRecovered(true);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[12][9];
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(12, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(12, floatArray0.length);
      assertNotNull(room0);
      
      room0.setPoints(floatArray0);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(12, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(12, floatArray0.length);
      
      Room room1 = room0.clone();
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(12, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(12, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(12, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertNotNull(room1);
      
      home0.addRoom(room1);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertEquals(12, room0.getPointCount());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertNull(room0.getName());
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(12, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getXCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertFalse(room1.isClockwise());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(12, floatArray0.length);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      home0.setFurnitureDescendingSorted(true);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Home home0 = new Home(6502.733F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(6502.733F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(6502.733F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedList<Room> linkedList1 = new LinkedList<Room>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      List<Room> list1 = Home.getRoomsSubList(linkedList1);
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(6502.733F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Random.setNextRandom(2);
      Level level0 = home0.getSelectedLevel();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(6502.733F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(level0);
      
      home0.setSelectedItems(linkedList1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(6502.733F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList2 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList2.size());
      assertNotNull(linkedList2);
      
      home0.setFurnitureVisibleProperties(list0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(6502.733F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Home home0 = new Home(826.0F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall((-5495.18F), (-454.0F), 1.0995575F, 0.0F, 0.0F, 3700L);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5514.9985F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0995575F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertEquals((-454.0F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-5495.18F), wall0.getXStart(), 0.01F);
      assertEquals((-227.0F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(5514.9985F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2747.0403F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(55.752224F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(27.876112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0995575F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(55.752224F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5496.5625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5495.18F), wall0.getXStart(), 0.01F);
      assertEquals(5496.5625F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2747.0403F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      
      home0.addWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(27.876112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0995575F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(55.752224F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5496.5625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5495.18F), wall0.getXStart(), 0.01F);
      assertEquals(5496.5625F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2747.0403F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      home1.deleteWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(27.876112F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getHeight(), 0.01F);
      assertEquals(1.0995575F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(55.752224F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(5496.5625F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-5495.18F), wall0.getXStart(), 0.01F);
      assertEquals(5496.5625F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2747.0403F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Home home2 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isEmpty());
      assertNull(home2.getName());
      assertEquals(826.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      List<Room> list0 = home2.getRooms();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isEmpty());
      assertNull(home2.getName());
      assertEquals(826.0F, home2.getWallHeight(), 0.01F);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(list0);
      
      Home home3 = home1.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home3.getFurnitureSortedProperty());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertFalse(home3.isEmpty());
      assertEquals(826.0F, home3.getWallHeight(), 0.01F);
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isBasePlanLocked());
      assertFalse(home3.isModified());
      assertFalse(home3.isRecovered());
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home3);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home3);
      assertNotSame(home3, home1);
      assertNotSame(home3, home2);
      assertNotSame(home3, home0);
      assertNotNull(home3);
      
      home3.getFurnitureSortedProperty();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home3.getFurnitureSortedProperty());
      assertNull(home3.getName());
      assertFalse(home3.isFurnitureDescendingSorted());
      assertFalse(home3.isEmpty());
      assertEquals(826.0F, home3.getWallHeight(), 0.01F);
      assertEquals(3700L, home3.getVersion());
      assertFalse(home3.isBasePlanLocked());
      assertFalse(home3.isModified());
      assertFalse(home3.isRecovered());
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home3));
      assertFalse(home3.equals((Object)home1));
      assertFalse(home3.equals((Object)home2));
      assertFalse(home3.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home3);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home3);
      assertNotSame(home3, home1);
      assertNotSame(home3, home2);
      assertNotSame(home3, home0);
      
      Home home4 = new Home();
      assertTrue(home4.isEmpty());
      assertFalse(home4.isBasePlanLocked());
      assertNull(home4.getFurnitureSortedProperty());
      assertFalse(home4.isModified());
      assertFalse(home4.isRecovered());
      assertEquals(250.0F, home4.getWallHeight(), 0.01F);
      assertEquals(3700L, home4.getVersion());
      assertFalse(home4.isFurnitureDescendingSorted());
      assertNull(home4.getName());
      assertFalse(home4.equals((Object)home0));
      assertFalse(home4.equals((Object)home2));
      assertFalse(home4.equals((Object)home3));
      assertFalse(home4.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home4);
      
      Camera camera0 = home4.getCamera();
      assertTrue(home4.isEmpty());
      assertFalse(home4.isBasePlanLocked());
      assertNull(home4.getFurnitureSortedProperty());
      assertFalse(home4.isModified());
      assertFalse(home4.isRecovered());
      assertEquals(250.0F, home4.getWallHeight(), 0.01F);
      assertEquals(3700L, home4.getVersion());
      assertFalse(home4.isFurnitureDescendingSorted());
      assertNull(home4.getName());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertFalse(home4.equals((Object)home0));
      assertFalse(home4.equals((Object)home2));
      assertFalse(home4.equals((Object)home3));
      assertFalse(home4.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home4, home0);
      assertNotSame(home4, home2);
      assertNotSame(home4, home3);
      assertNotSame(home4, home1);
      assertNotNull(camera0);
      
      boolean boolean0 = home1.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home0.equals((Object)home3));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home4));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home4));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home3));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home3);
      assertNotSame(home0, home2);
      assertNotSame(home0, home4);
      assertNotSame(home0, home1);
      assertNotSame(home1, home4);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home3);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine((-951.909F), (-951.909F), 235.7988F, 3700L, 0.0F);
      assertEquals(235.7988F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(4801.136F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-951.909F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-951.909F), dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(235.7988F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(4801.136F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-951.909F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-951.909F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-951.909F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals((-951.909F), dimensionLine1.getYStart(), 0.01F);
      assertEquals(4801.136F, dimensionLine1.getLength(), 0.01F);
      assertEquals(235.7988F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNotNull(dimensionLine1);
      
      home0.addDimensionLine(dimensionLine1);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(235.7988F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(4801.136F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-951.909F), dimensionLine0.getXStart(), 0.01F);
      assertEquals((-951.909F), dimensionLine0.getYStart(), 0.01F);
      assertEquals((-951.909F), dimensionLine1.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals((-951.909F), dimensionLine1.getYStart(), 0.01F);
      assertEquals(4801.136F, dimensionLine1.getLength(), 0.01F);
      assertEquals(235.7988F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.setFurnitureDescendingSorted(true);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeFurnitureGroup> linkedList0 = new LinkedList<HomeFurnitureGroup>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      HomeFurnitureGroup homeFurnitureGroup0 = linkedList0.poll();
      assertEquals(0, linkedList0.size());
      assertNull(homeFurnitureGroup0);
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertTrue(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera.Lens camera_Lens0 = Camera.Lens.NORMAL;
      Camera camera0 = new Camera(29.562778F, 3700L, 46.843F, 0.0F, 647.7316F, 0.0F, 3700L, camera_Lens0);
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(3700.0F, camera0.getY(), 0.01F);
      assertEquals(46.843F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(3700L, camera0.getTime());
      assertEquals(29.562778F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.NORMAL, camera0.getLens());
      assertEquals(647.7316F, camera0.getPitch(), 0.01F);
      assertEquals(0.0F, camera0.getFieldOfView(), 0.01F);
      assertNotNull(camera0);
      
      camera0.setName("");
      assertEquals(0.0F, camera0.getYaw(), 0.01F);
      assertEquals(3700.0F, camera0.getY(), 0.01F);
      assertEquals(46.843F, camera0.getZ(), 0.01F);
      assertEquals("", camera0.getName());
      assertEquals(3700L, camera0.getTime());
      assertEquals(29.562778F, camera0.getX(), 0.01F);
      assertEquals(Camera.Lens.NORMAL, camera0.getLens());
      assertEquals(647.7316F, camera0.getPitch(), 0.01F);
      assertEquals(0.0F, camera0.getFieldOfView(), 0.01F);
      
      home0.setCamera((Camera) null);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener1 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeDoorOrWindow homeDoorOrWindow0 = null;
      try {
        homeDoorOrWindow0 = new HomeDoorOrWindow((DoorOrWindow) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.HomePieceOfFurniture", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Home home0 = new Home();
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("STORED_CAMERAS", propertyChangeListener0);
      assertEquals("STORED_CAMERAS", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      CollectionListener<Label> collectionListener2 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      Wall wall0 = new Wall((-182.28F), 3700L, 0.19634955F, 931.14F, 1.0995575F);
      assertEquals(2774.8665F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.19634955F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-182.28F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(931.14F, wall0.getYEnd(), 0.01F);
      assertEquals(2774.8665F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-91.041824F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0995575F, wall0.getThickness(), 0.01F);
      assertEquals(2315.57F, wall0.getYArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertEquals(2774.8665F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.19634955F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-182.28F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(931.14F, wall0.getYEnd(), 0.01F);
      assertEquals(2774.8665F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-91.041824F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0995575F, wall0.getThickness(), 0.01F);
      assertEquals(2315.57F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-182.28F), wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(931.14F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0995575F, wall1.getThickness(), 0.01F);
      assertEquals(2315.57F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2774.8665F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.19634955F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-91.041824F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2774.8665F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      home0.deleteWall(wall1);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(2774.8665F, wall0.getLength(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(0.19634955F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals((-182.28F), wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(931.14F, wall0.getYEnd(), 0.01F);
      assertEquals(2774.8665F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-91.041824F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1.0995575F, wall0.getThickness(), 0.01F);
      assertEquals(2315.57F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-182.28F), wall1.getXStart(), 0.01F);
      assertEquals(3700.0F, wall1.getYStart(), 0.01F);
      assertEquals(931.14F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(1.0995575F, wall1.getThickness(), 0.01F);
      assertEquals(2315.57F, wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(2774.8665F, wall1.getLength(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertNull(wall1.getHeight());
      assertNull(wall1.getHeightAtEnd());
      assertEquals(0.19634955F, wall1.getXEnd(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertEquals((-91.041824F), wall1.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertEquals(2774.8665F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      
      home1.setBasePlanLocked(false);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.FURNITURE_DESCENDING_SORTED;
      home0.addPropertyChangeListener(home_Property0, (PropertyChangeListener) null);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Wall wall0 = new Wall((-10.981247F), 3700L, (-10.981247F), (-10.981247F), (-10.981247F));
      assertEquals((-10.981247F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-10.981247F), wall0.getXEnd(), 0.01F);
      assertEquals((-10.981247F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.9812F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-10.981247F), wall0.getThickness(), 0.01F);
      assertEquals(1844.5094F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-10.981247F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3710.9812F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-10.981247F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-10.981247F), wall0.getXEnd(), 0.01F);
      assertEquals((-10.981247F), wall0.getYEnd(), 0.01F);
      assertEquals(3710.9812F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-10.981247F), wall0.getThickness(), 0.01F);
      assertEquals(1844.5094F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-10.981247F), wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(3710.9812F, wall0.getLength(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = new Level(";8/|)~_%", (-3787.0F), 2323.8235F, 2323.8235F);
      assertTrue(level0.isVisible());
      assertEquals(2323.8235F, level0.getFloorThickness(), 0.01F);
      assertEquals(2323.8235F, level0.getHeight(), 0.01F);
      assertEquals(";8/|)~_%", level0.getName());
      assertEquals((-3787.0F), level0.getElevation(), 0.01F);
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(level0.isVisible());
      assertEquals(2323.8235F, level0.getFloorThickness(), 0.01F);
      assertEquals(2323.8235F, level0.getHeight(), 0.01F);
      assertEquals(";8/|)~_%", level0.getName());
      assertEquals((-3787.0F), level0.getElevation(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Camera camera0 = home1.getTopCamera();
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(camera0);
      
      home1.setBasePlanLocked(true);
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      List<Camera> list0 = home1.getStoredCameras();
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(camera0));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(list0);
      
      home0.setStoredCameras(list0);
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(list0.contains(camera0));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Home home2 = home1.clone();
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertTrue(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertNull(home2.getName());
      assertTrue(home2.isEmpty());
      assertTrue(home2.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertTrue(home2.isModified());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Selectable> linkedList0 = new LinkedList<Selectable>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addWallsListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.LEVEL;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.LEVEL, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      // Undeclared exception!
      try { 
        Home.getLevelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePrint homePrint0 = home0.getPrint();
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.WIDTH;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.WIDTH, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      float float0 = (-1609.0F);
      Home home0 = new Home((-1609.0F));
      assertFalse(home0.isModified());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.deselectItem((Selectable) null);
      assertFalse(home0.isModified());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertFalse(home0.isModified());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertFalse(home0.isModified());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isModified());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      Camera camera0 = home0.getTopCamera();
      assertFalse(home0.isModified());
      assertEquals((-1609.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Home home1 = new Home();
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      home1.setFurnitureDescendingSorted(false);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        Home.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      boolean boolean0 = linkedList0.add((Room) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Home home0 = new Home(5.4977875F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5.4977875F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5.4977875F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      SelectionListener selectionListener1 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5.4977875F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertEquals(5.4977875F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(false);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(5.4977875F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Home home1 = new Home(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Wall wall0 = new Wall(93.42F, 93.42F, (-2527.8938F), 93.42F, 4522.26F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2527.8938F), wall0.getXEnd(), 0.01F);
      assertEquals(2621.3137F, wall0.getLength(), 0.01F);
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals((-1217.2369F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2621.3137F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNotNull(wall0);
      
      Integer integer0 = new Integer(629);
      assertEquals(629, (int)integer0);
      assertNotNull(integer0);
      
      wall0.setLeftSideColor(integer0);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2527.8938F), wall0.getXEnd(), 0.01F);
      assertEquals(2621.3137F, wall0.getLength(), 0.01F);
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertEquals((-1217.2369F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertEquals(629, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2621.3137F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      home1.deleteWall(wall0);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-2527.8938F), wall0.getXEnd(), 0.01F);
      assertEquals(2621.3137F, wall0.getLength(), 0.01F);
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertEquals((-1217.2369F), wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertEquals(629, (int)wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(2621.3137F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home0.setBasePlanLocked(true);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      URL uRL0 = MockURL.getHttpExample();
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      URLContent uRLContent0 = new URLContent(uRL0);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertNotNull(uRLContent0);
      
      BackgroundImage backgroundImage0 = new BackgroundImage(uRLContent0, 892.825F, 3700L, 3700L, 3700L, 33.871944F, 3313.0F, 33.871944F, false);
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(33.871944F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(33.871944F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(3313.0F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(892.825F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.2435335F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertNotNull(backgroundImage0);
      
      home0.setBackgroundImage(backgroundImage0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(uRL0.getQuery());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http", uRL0.getProtocol());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNull(uRL0.getRef());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertFalse(uRLContent0.isJAREntry());
      assertEquals(33.871944F, backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals(33.871944F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(3313.0F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(892.825F, backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertEquals(3700.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(0.2435335F, backgroundImage0.getScale(), 0.01F);
      assertFalse(backgroundImage0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isRecovered();
      assertFalse(boolean1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(boolean1 == boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeDimensionLinesListener(collectionListener0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      float float0 = 1999.4913F;
      Home home0 = new Home(1999.4913F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      home0.deselectItem((Selectable) null);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint0 = home0.getPrint();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(homePrint0);
      
      home0.setPrint((HomePrint) null);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(5, list1.size());
      assertFalse(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list1);
      
      Camera camera0 = home0.getTopCamera();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertNull(camera0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      home0.setFurnitureDescendingSorted(true);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Home home0 = new Home((-1668.1813F));
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setRecovered(true);
      assertFalse(home0.isModified());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals((-1668.1813F), home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertTrue(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      List<Selectable> list0 = home1.getSelectedItems();
      assertFalse(home0.isModified());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals((-1668.1813F), home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertTrue(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(list0);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isModified());
      assertEquals((-1668.1813F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertNull(camera0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float float0 = 0.0F;
      float float1 = (-1530.139F);
      float float2 = (-1189.172F);
      float float3 = 2229.22F;
      List<Room> list0 = home0.getRooms();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list1 = Home.getSubList((List<? extends Selectable>) list0, class0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(list1);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list2.equals((Object)list0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list2);
      
      List<HomePieceOfFurniture> list3 = home0.getFurniture();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list3);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list3, "[UXy+b");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      String string0 = "O:1K@";
      Level level0 = new Level("O:1K@", 3700L, 3700L, 3700L);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals("O:1K@", level0.getName());
      assertNotNull(level0);
      
      level0.setElevation(3700L);
      assertTrue(level0.isVisible());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(3700.0F, level0.getHeight(), 0.01F);
      assertEquals("O:1K@", level0.getName());
      
      // Undeclared exception!
      try { 
        home0.deleteLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Object object0 = home0.getVisualProperty("");
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setModified(false);
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Level level0 = home0.getSelectedLevel();
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(level0);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Home home0 = new Home((-171.58891F));
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      home0.setName("MODIFIED");
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("MODIFIED", home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<DimensionLine> collection1 = home0.getDimensionLines();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("MODIFIED", home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection1);
      
      Wall wall0 = new Wall((-171.58891F), (-340.0F), 0.0F, 3314.38F, (-171.58891F));
      assertEquals((-171.58891F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3314.38F, wall0.getYEnd(), 0.01F);
      assertEquals(3658.406F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1487.19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-85.79446F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3658.406F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-340.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-171.58891F), wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Camera camera0 = home0.getCamera();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("MODIFIED", home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      boolean boolean0 = linkedList0.add(camera0);
      assertTrue(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("MODIFIED", home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertTrue(linkedList0.contains(camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setStoredCameras(linkedList0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("MODIFIED", home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedList0.contains(camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = wall0.getPoints();
      assertEquals((-171.58891F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3314.38F, wall0.getYEnd(), 0.01F);
      assertEquals(3658.406F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1487.19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-85.79446F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3658.406F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-340.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-171.58891F), wall0.getXStart(), 0.01F);
      assertEquals(4, floatArray0.length);
      assertNotNull(floatArray0);
      
      home0.deleteWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals("MODIFIED", home0.getName());
      assertFalse(home0.isModified());
      assertEquals((-171.58891F), home0.getWallHeight(), 0.01F);
      assertEquals((-171.58891F), wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3314.38F, wall0.getYEnd(), 0.01F);
      assertEquals(3658.406F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1487.19F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-85.79446F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3658.406F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-340.0F), wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getLeftSideColor());
      assertEquals((-171.58891F), wall0.getXStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      CollectionListener<Label> collectionListener1 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture> list0 = home0.getFurniture();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      Home home1 = new Home(list0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      Home home2 = home1.clone();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertTrue(home2.isEmpty());
      assertNull(home2.getName());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      boolean boolean0 = home2.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertTrue(home2.isEmpty());
      assertNull(home2.getName());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("STORED_CAMERAS", propertyChangeListener0);
      assertEquals("STORED_CAMERAS", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      CollectionListener<Label> collectionListener2 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Level level0 = new Level((String) null, 2013.435F, 3700L, 2013.435F);
      assertEquals(2013.435F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2013.435F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertNotNull(level0);
      
      Level level1 = level0.clone();
      assertEquals(2013.435F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2013.435F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2013.435F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals(2013.435F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertFalse(level1.equals((Object)level0));
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      assertNotNull(level1);
      
      home0.setSelectedLevel(level1);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(2013.435F, level0.getElevation(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3700.0F, level0.getFloorThickness(), 0.01F);
      assertEquals(2013.435F, level0.getHeight(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals(2013.435F, level1.getElevation(), 0.01F);
      assertNull(level1.getName());
      assertEquals(2013.435F, level1.getHeight(), 0.01F);
      assertTrue(level1.isVisible());
      assertEquals(3700.0F, level1.getFloorThickness(), 0.01F);
      assertFalse(level0.equals((Object)level1));
      assertFalse(level1.equals((Object)level0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(level0, level1);
      assertNotSame(level1, level0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      LinkedList<Compass> linkedList1 = new LinkedList<Compass>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      Class<DimensionLine> class0 = DimensionLine.class;
      List<DimensionLine> list1 = Home.getSubList((List<? extends Selectable>) linkedList1, class0);
      assertEquals(0, linkedList1.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Collection<Wall> collection0 = home1.getWalls();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(collection0);
      
      home0.deselectItem((Selectable) null);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      List<Label> list2 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list0));
      assertNotSame(list2, list0);
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      float[][] floatArray0 = new float[8][3];
      float[] floatArray1 = new float[8];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = (float) 3700L;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = (float) 3700L;
      floatArray1[7] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = 0.0F;
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = 0.0F;
      floatArray2[6] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (float) 3700L;
      floatArray3[3] = (float) 3700L;
      floatArray3[4] = 3.1415927F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      
      floatArray4[0] = 3.1415927F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = 0.0F;
      floatArray4[3] = 0.0F;
      floatArray4[4] = 3.1415927F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      assertFalse(floatArray5.equals((Object)floatArray1));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray2));
      
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      assertFalse(floatArray6.equals((Object)floatArray2));
      
      floatArray6[0] = 0.0F;
      floatArray6[1] = 3.1415927F;
      floatArray6[2] = 3.1415927F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[0];
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray4));
      
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[3];
      assertFalse(floatArray8.equals((Object)floatArray7));
      assertFalse(floatArray8.equals((Object)floatArray4));
      assertFalse(floatArray8.equals((Object)floatArray3));
      assertFalse(floatArray8.equals((Object)floatArray1));
      assertFalse(floatArray8.equals((Object)floatArray6));
      assertFalse(floatArray8.equals((Object)floatArray2));
      assertFalse(floatArray8.equals((Object)floatArray5));
      
      floatArray8[0] = 0.0F;
      floatArray8[1] = (float) 3700L;
      floatArray8[2] = 0.0F;
      floatArray0[7] = floatArray8;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertEquals(8, floatArray0.length);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(8, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertNotNull(room1);
      
      home0.deleteRoom(room1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getFloorColor());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getName());
      assertNull(room0.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertEquals(8, room1.getPointCount());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(8, floatArray0.length);
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(0.19634955F, observerCamera1.getPitch(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(19.428572F, observerCamera1.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(1.0995575F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertEquals(50.0F, observerCamera1.getX(), 0.01F);
      assertEquals(5.4977875F, observerCamera1.getYaw(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(48.57143F, observerCamera1.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera1.getHeight(), 0.01F);
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertNotNull(observerCamera1);
      
      linkedList0.addFirst(observerCamera0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(1, linkedList0.size());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(observerCamera0, observerCamera1);
      
      linkedList0.addFirst(observerCamera1);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(2, linkedList0.size());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(0.19634955F, observerCamera1.getPitch(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(19.428572F, observerCamera1.getDepth(), 0.01F);
      assertEquals(170.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(1.0995575F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertEquals(50.0F, observerCamera1.getX(), 0.01F);
      assertEquals(5.4977875F, observerCamera1.getYaw(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(48.57143F, observerCamera1.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera1.getHeight(), 0.01F);
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      
      home0.setStoredCameras(linkedList0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertEquals(2, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("$VALUES");
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals("$VALUES", home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNotNull(wall0);
      
      home0.addWall(wall0);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isModified());
      assertFalse(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Wall wall0 = new Wall(93.42F, 93.42F, (-2504.0F), 93.42F, 4522.26F);
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertEquals((-2504.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2597.42F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1205.29F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2597.42F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertNotNull(wall0);
      
      home1.deleteWall(wall0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertEquals((-2504.0F), wall0.getXEnd(), 0.01F);
      assertEquals(2597.42F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1205.29F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2597.42F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      HomeEnvironment homeEnvironment0 = home1.getEnvironment();
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(homeEnvironment0);
      
      Camera camera0 = new Camera(3700L, 250.0F, 0.0F, 4522.26F, 93.42F, 5.4977875F);
      assertEquals(93.42F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(250.0F, camera0.getY(), 0.01F);
      assertEquals(0.0F, camera0.getZ(), 0.01F);
      assertEquals(4522.26F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(5.4977875F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertNotNull(camera0);
      
      home1.setCamera(camera0);
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(93.42F, camera0.getPitch(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(250.0F, camera0.getY(), 0.01F);
      assertEquals(0.0F, camera0.getZ(), 0.01F);
      assertEquals(4522.26F, camera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(5.4977875F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3700.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      LinkedList<Level> linkedList1 = new LinkedList<Level>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Wall wall0 = new Wall(93.42F, 93.42F, (-2527.8938F), 93.42F, 4522.26F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-1217.2369F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals(2621.3137F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2527.8938F), wall0.getXEnd(), 0.01F);
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertEquals(2621.3137F, wall0.getLength(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNotNull(wall0);
      
      float float0 = home0.getWallHeight();
      assertEquals(0.0F, float0, 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Camera camera0 = home0.getCamera();
      assertTrue(home0.isEmpty());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      LinkedList<HomePieceOfFurniture> linkedList0 = new LinkedList<HomePieceOfFurniture>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Home home0 = new Home((-5.7F));
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-5.7F), home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, (-5.7F), (-1560.3937F), 0.0F, (-5.7F));
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5260.397F, wall0.getLength(), 0.01F);
      assertEquals(5260.397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-5.7F), wall0.getThickness(), 0.01F);
      assertEquals((-2.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1069.8032F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.7F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1560.3937F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = wall0.clone();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5260.397F, wall0.getLength(), 0.01F);
      assertEquals(5260.397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-5.7F), wall0.getThickness(), 0.01F);
      assertEquals((-2.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1069.8032F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.7F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1560.3937F), wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(5260.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.85F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1069.8032F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1560.3937F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5260.397F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-5.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-5.7F), wall1.getThickness(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNotNull(wall1);
      
      Wall wall2 = wall1.getWallAtStart();
      assertNull(wall0.getHeightAtEnd());
      assertEquals(5260.397F, wall0.getLength(), 0.01F);
      assertEquals(5260.397F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-5.7F), wall0.getThickness(), 0.01F);
      assertEquals((-2.85F), wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(1069.8032F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals((-5.7F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals((-1560.3937F), wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall1.getXStart(), 0.01F);
      assertEquals(5260.397F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals((-2.85F), wall1.getYArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(1069.8032F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals((-1560.3937F), wall1.getXEnd(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertNull(wall1.getLeftSideColor());
      assertFalse(wall1.isTrapezoidal());
      assertEquals(5260.397F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals((-5.7F), wall1.getYStart(), 0.01F);
      assertNull(wall1.getHeight());
      assertEquals((-5.7F), wall1.getThickness(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertFalse(wall1.equals((Object)wall0));
      assertNotSame(wall0, wall1);
      assertNotSame(wall1, wall0);
      assertNull(wall2);
      
      // Undeclared exception!
      try { 
        home0.addWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      float float0 = 1999.4913F;
      Home home0 = new Home(1999.4913F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Collection<DimensionLine> collection0 = home0.getDimensionLines();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      HomePrint.PaperOrientation homePrint_PaperOrientation0 = HomePrint.PaperOrientation.PORTRAIT;
      Float float1 = new Float(365.52042);
      assertEquals(365.52042F, (float)float1, 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(float1);
      
      HomePrint homePrint0 = new HomePrint(homePrint_PaperOrientation0, 1999.4913F, (-1385.5F), 3700L, 1999.4913F, 0.0F, (-1190.9348F), true, false, true, float1, "com.eteks.sweethome3d.model.Home", "7Y=U@PkrjlF_OkQt?Yr");
      assertEquals("7Y=U@PkrjlF_OkQt?Yr", homePrint0.getFooterFormat());
      assertFalse(homePrint0.isPlanPrinted());
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint0.getHeaderFormat());
      assertEquals((-1190.9348F), homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(1999.4913F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals(1999.4913F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals((-1385.5F), homePrint0.getPaperHeight(), 0.01F);
      assertEquals(365.52042F, homePrint0.getPlanScale(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertNotNull(homePrint0);
      
      home0.setPrint(homePrint0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals("7Y=U@PkrjlF_OkQt?Yr", homePrint0.getFooterFormat());
      assertFalse(homePrint0.isPlanPrinted());
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint0.getHeaderFormat());
      assertEquals((-1190.9348F), homePrint0.getPaperRightMargin(), 0.01F);
      assertEquals(1999.4913F, homePrint0.getPaperLeftMargin(), 0.01F);
      assertTrue(homePrint0.isView3DPrinted());
      assertTrue(homePrint0.isFurniturePrinted());
      assertEquals(1999.4913F, homePrint0.getPaperWidth(), 0.01F);
      assertEquals(3700.0F, homePrint0.getPaperTopMargin(), 0.01F);
      assertEquals(0.0F, homePrint0.getPaperBottomMargin(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint0.getPaperOrientation());
      assertEquals((-1385.5F), homePrint0.getPaperHeight(), 0.01F);
      assertEquals(365.52042F, homePrint0.getPlanScale(), 0.01F);
      assertNotEquals((float)float1, (float)float0, 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deselectItem((Selectable) null);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomePrint homePrint1 = home0.getPrint();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertTrue(homePrint1.isView3DPrinted());
      assertEquals(1999.4913F, homePrint1.getPaperLeftMargin(), 0.01F);
      assertTrue(homePrint1.isFurniturePrinted());
      assertEquals(3700.0F, homePrint1.getPaperTopMargin(), 0.01F);
      assertEquals(1999.4913F, homePrint1.getPaperWidth(), 0.01F);
      assertEquals(0.0F, homePrint1.getPaperBottomMargin(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint1.getPaperOrientation());
      assertEquals((-1385.5F), homePrint1.getPaperHeight(), 0.01F);
      assertEquals(365.52042F, homePrint1.getPlanScale(), 0.01F);
      assertEquals("7Y=U@PkrjlF_OkQt?Yr", homePrint1.getFooterFormat());
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint1.getHeaderFormat());
      assertFalse(homePrint1.isPlanPrinted());
      assertEquals((-1190.9348F), homePrint1.getPaperRightMargin(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertSame(homePrint1, homePrint0);
      assertNotNull(homePrint1);
      
      home0.setPrint(homePrint1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertTrue(homePrint1.isView3DPrinted());
      assertEquals(1999.4913F, homePrint1.getPaperLeftMargin(), 0.01F);
      assertTrue(homePrint1.isFurniturePrinted());
      assertEquals(3700.0F, homePrint1.getPaperTopMargin(), 0.01F);
      assertEquals(1999.4913F, homePrint1.getPaperWidth(), 0.01F);
      assertEquals(0.0F, homePrint1.getPaperBottomMargin(), 0.01F);
      assertEquals(HomePrint.PaperOrientation.PORTRAIT, homePrint1.getPaperOrientation());
      assertEquals((-1385.5F), homePrint1.getPaperHeight(), 0.01F);
      assertEquals(365.52042F, homePrint1.getPlanScale(), 0.01F);
      assertEquals("7Y=U@PkrjlF_OkQt?Yr", homePrint1.getFooterFormat());
      assertEquals("com.eteks.sweethome3d.model.Home", homePrint1.getHeaderFormat());
      assertFalse(homePrint1.isPlanPrinted());
      assertEquals((-1190.9348F), homePrint1.getPaperRightMargin(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertSame(homePrint1, homePrint0);
      
      List<HomePieceOfFurniture.SortableProperty> list1 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(list1.isEmpty());
      assertEquals(5, list1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list1);
      
      Camera camera0 = home0.getTopCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      home0.setFurnitureDescendingSorted(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(1999.4913F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.Property.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Level> list0 = home0.getLevels();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.deleteLevel((Level) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = null;
      try {
        home1 = new Home((List<HomePieceOfFurniture>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Integer[] integerArray0 = new Integer[2];
      int int0 = 2471;
      Integer integer0 = new Integer(2471);
      assertEquals(2471, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      assertNotNull(integer0);
      
      integerArray0[0] = integer0;
      Integer integer1 = new Integer(2471);
      assertEquals(2471, (int)integer1);
      assertTrue(integer1.equals((Object)integer0));
      assertTrue(integer1.equals((Object)int0));
      assertNotNull(integer1);
      
      integerArray0[1] = integer1;
      Integer[] integerArray1 = linkedList0.toArray(integerArray0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, integerArray0.length);
      assertEquals(2, integerArray1.length);
      assertSame(integerArray0, integerArray1);
      assertSame(integerArray1, integerArray0);
      assertNotNull(integerArray1);
      
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Room room0 = null;
      try {
        room0 = new Room((float[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Room", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setCamera((Camera) null);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Home home0 = new Home(826.0F);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
      
      Wall wall0 = new Wall(826.0F, 690.3371F, 0.0F, 826.0F, 0.0F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(690.3371F, wall0.getYStart(), 0.01F);
      assertEquals(826.0F, wall0.getYEnd(), 0.01F);
      assertEquals(837.0665F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(758.1686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(837.0665F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(413.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(826.0F, wall0.getXStart(), 0.01F);
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(690.3371F, wall0.getYStart(), 0.01F);
      assertEquals(826.0F, wall0.getYEnd(), 0.01F);
      assertEquals(837.0665F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(758.1686F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertEquals(837.0665F, wall0.getLength(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(413.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(826.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(backgroundImage0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      home1.setBackgroundImage((BackgroundImage) null);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home0.setRecovered(true);
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      // Undeclared exception!
      try { 
        home1.addPieceOfFurniture((HomePieceOfFurniture) null, (-2303));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = new float[6][0];
      float[] floatArray1 = new float[1];
      float[][] floatArray2 = new float[8][1];
      assertFalse(floatArray2.equals((Object)floatArray0));
      
      floatArray2[0] = floatArray1;
      floatArray2[1] = floatArray1;
      floatArray2[2] = floatArray1;
      floatArray2[3] = floatArray1;
      floatArray2[4] = floatArray1;
      floatArray2[5] = floatArray1;
      floatArray2[6] = floatArray1;
      floatArray2[7] = floatArray1;
      Room room0 = new Room(floatArray2);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(8, floatArray2.length);
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotNull(room0);
      
      linkedList0.addLast(room0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(8, room0.getPointCount());
      assertNull(room0.getName());
      assertEquals(0.0F, room0.getXCenter(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(8, floatArray2.length);
      assertTrue(linkedList0.contains(room0));
      assertFalse(floatArray2.equals((Object)floatArray0));
      assertNotSame(floatArray2, floatArray0);
      
      floatArray1[0] = 32.460495F;
      Room room1 = new Room(floatArray0);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(room1.equals((Object)room0));
      assertNotNull(room1);
      
      boolean boolean0 = linkedList0.add(room1);
      assertTrue(boolean0);
      assertEquals(2, linkedList0.size());
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertEquals(6, room1.getPointCount());
      assertNull(room1.getCeilingColor());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(6, floatArray0.length);
      assertTrue(linkedList0.contains(room1));
      assertFalse(floatArray0.equals((Object)floatArray2));
      assertFalse(room1.equals((Object)room0));
      assertNotSame(floatArray0, floatArray2);
      assertNotSame(room1, room0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(2, linkedList0.size());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(linkedList0.contains(room1));
      assertNotNull(list0);
      
      List<Level> list1 = Home.getLevelsSubList(linkedList0);
      assertEquals(2, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(linkedList0.contains(room1));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      home1.addWallsListener((CollectionListener<Wall>) null);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home1.isEmpty());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Wall wall0 = new Wall(93.42F, 93.42F, (-2504.0F), 93.42F, 4522.26F);
      assertEquals(93.42F, wall0.getYEnd(), 0.01F);
      assertEquals((-1205.29F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(2597.42F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(93.42F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(93.42F, wall0.getXStart(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(93.42F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals((-2504.0F), wall0.getXEnd(), 0.01F);
      assertEquals(4522.26F, wall0.getThickness(), 0.01F);
      assertEquals(2597.42F, wall0.getLength(), 0.01F);
      assertNotNull(wall0);
      
      // Undeclared exception!
      try { 
        home1.deleteWall(wall0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.CollectionChangeSupport", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Home home0 = new Home(826.0F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Compass compass0 = home0.getCompass();
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      home1.getFurnitureSortedProperty();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Level level0 = home1.getSelectedLevel();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNull(level0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Home home0 = new Home((-1686.671F));
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals((-1686.671F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      boolean boolean0 = home1.isModified();
      assertFalse(boolean0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals((-1686.671F), home1.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Wall wall0 = new Wall(1000.0F, (-9.3653F), 1729.0007F, 1729.0007F, 55.752224F, (-9.3653F));
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1729.0007F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals((-9.3653F), wall0.getYStart(), 0.01F);
      assertEquals(1729.0007F, wall0.getYEnd(), 0.01F);
      assertEquals(55.752224F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1885.0354F, wall0.getLength(), 0.01F);
      assertEquals(1364.5004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(859.8177F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1885.0354F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1000.0F, wall0.getXStart(), 0.01F);
      assertEquals((-9.3653F), wall0.getHeight(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(1.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1729.0007F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1729.0007F, wall0.getYEnd(), 0.01F);
      assertEquals(55.752224F, wall0.getThickness(), 0.01F);
      assertEquals(1875.481F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(865.00037F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1364.5004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1875.481F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1000.0F, wall0.getXStart(), 0.01F);
      assertEquals((-9.3653F), wall0.getHeight(), 0.01F);
      
      home1.addWall(wall0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isEmpty());
      assertEquals((-1686.671F), home1.getWallHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1729.0007F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1729.0007F, wall0.getYEnd(), 0.01F);
      assertEquals(55.752224F, wall0.getThickness(), 0.01F);
      assertEquals(1875.481F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(865.00037F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1364.5004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1875.481F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1000.0F, wall0.getXStart(), 0.01F);
      assertEquals((-9.3653F), wall0.getHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home0.deleteWall(wall0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(1729.0007F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1729.0007F, wall0.getYEnd(), 0.01F);
      assertEquals(55.752224F, wall0.getThickness(), 0.01F);
      assertEquals(1875.481F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1.0F, wall0.getYStart(), 0.01F);
      assertEquals(865.00037F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(1364.5004F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1875.481F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNull(wall0.getLeftSideColor());
      assertEquals(1000.0F, wall0.getXStart(), 0.01F);
      assertEquals((-9.3653F), wall0.getHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      Home home2 = home1.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isEmpty());
      assertEquals((-1686.671F), home1.getWallHeight(), 0.01F);
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isModified());
      assertFalse(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertEquals((-1686.671F), home2.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      home1.getFurnitureSortedProperty();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isEmpty());
      assertEquals((-1686.671F), home1.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addDimensionLinesListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setRecovered(false);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        home1.addPieceOfFurniture((HomePieceOfFurniture) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Room> list0 = Home.getRoomsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = new float[2][1];
      float[] floatArray1 = new float[6];
      floatArray1[0] = 1000.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = (-100.0F);
      floatArray1[5] = 3102.762F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 100.0F;
      floatArray2[1] = 3102.762F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(550.0F, room0.getXCenter(), 0.01F);
      assertEquals(1551.381F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(550.0F, room0.getXCenter(), 0.01F);
      assertEquals(1551.381F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(1551.381F, room1.getYCenter(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(550.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(2, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertNotNull(room1);
      
      boolean boolean0 = linkedList0.add(room1);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertNull(room0.getName());
      assertEquals(550.0F, room0.getXCenter(), 0.01F);
      assertEquals(1551.381F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertFalse(room0.isClockwise());
      assertTrue(room0.isAreaVisible());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertNull(room0.getFloorColor());
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertFalse(room1.isClockwise());
      assertNull(room1.getCeilingColor());
      assertTrue(room1.isCeilingVisible());
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertNull(room1.getFloorColor());
      assertNull(room1.getName());
      assertEquals(1551.381F, room1.getYCenter(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(550.0F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(2, floatArray0.length);
      assertTrue(linkedList0.contains(room1));
      assertFalse(linkedList0.contains(room0));
      assertFalse(room0.equals((Object)room1));
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(linkedList0.contains(room1));
      assertFalse(linkedList0.contains(room0));
      assertNotNull(list0);
      
      List<Room> list1 = Home.getRoomsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertTrue(linkedList0.contains(room1));
      assertFalse(linkedList0.contains(room0));
      assertFalse(list1.contains(room0));
      assertTrue(list1.contains(room1));
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.ANGLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomeLight> linkedList0 = new LinkedList<HomeLight>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      Class<Compass> class0 = Compass.class;
      List<Compass> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<Compass> class1 = Compass.class;
      List<Compass> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertSame(class0, class1);
      assertNotSame(list0, list1);
      assertSame(class1, class0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      List<Compass> list2 = Home.getSubList((List<? extends Selectable>) list1, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertSame(class0, class1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertSame(class1, class0);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      
      Class<Label> class2 = Label.class;
      List<Label> list3 = Home.getSubList((List<? extends Selectable>) list2, class2);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertSame(class0, class1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertSame(class1, class0);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list3);
      
      List<Level> list4 = Home.getLevelsSubList(list3);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list4.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list0.equals((Object)list1));
      assertTrue(list0.equals((Object)list2));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list2.equals((Object)list1));
      assertSame(class0, class1);
      assertNotSame(list0, list2);
      assertNotSame(list0, list1);
      assertSame(class1, class0);
      assertNotSame(list1, list0);
      assertNotSame(list1, list2);
      assertNotSame(list2, list1);
      assertNotSame(list2, list0);
      assertNotNull(list4);
      
      home0.setName((String) null);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Level level0 = new Level((String) null, 0.0F, 0.0F, (-24.783333F));
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-24.783333F), level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, level0.getElevation(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals((-24.783333F), level0.getHeight(), 0.01F);
      assertEquals(0.0F, level0.getFloorThickness(), 0.01F);
      assertNull(level0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Camera camera0 = home1.getTopCamera();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNull(camera0.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(camera0);
      
      List<HomePieceOfFurniture> list5 = home1.getFurniture();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isRecovered());
      assertEquals(HomePieceOfFurniture.SortableProperty.ANGLE, home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(0, list5.size());
      assertTrue(list5.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(list5);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home1.removeLabelsListener(collectionListener0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      boolean boolean0 = home1.isModified();
      assertFalse(boolean0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      // Undeclared exception!
      try { 
        home1.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3700L, 3700L, 3700L, 3700L);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      home0.addDimensionLine(dimensionLine0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      boolean boolean0 = home1.isModified();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      Wall wall0 = new Wall(0.0F, (-9.3653F), (-61.0F), 1000.0F, 1500.0F, 0.0F);
      assertEquals((-9.3653F), wall0.getYStart(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1011.20685F, wall0.getLength(), 0.01F);
      assertEquals(1011.20685F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(495.31735F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-30.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(1000.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals((-61.0F), wall0.getXEnd(), 0.01F);
      assertNotNull(wall0);
      
      wall0.setYStart(1500.0F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-30.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(503.70724F, wall0.getLength(), 0.01F);
      assertEquals(1500.0F, wall0.getYStart(), 0.01F);
      assertEquals(1000.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1250.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-61.0F), wall0.getXEnd(), 0.01F);
      assertEquals(503.70724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      
      home0.addWall(wall0);
      assertFalse(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-30.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(503.70724F, wall0.getLength(), 0.01F);
      assertEquals(1500.0F, wall0.getYStart(), 0.01F);
      assertEquals(1000.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1250.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-61.0F), wall0.getXEnd(), 0.01F);
      assertEquals(503.70724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      home0.deleteWall(wall0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(1500.0F, wall0.getThickness(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getHeight(), 0.01F);
      assertEquals((-30.5F), wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(503.70724F, wall0.getLength(), 0.01F);
      assertEquals(1500.0F, wall0.getYStart(), 0.01F);
      assertEquals(1000.0F, wall0.getYEnd(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(1250.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals((-61.0F), wall0.getXEnd(), 0.01F);
      assertEquals(503.70724F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotNull(observerCamera0);
      
      Home home2 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertNull(home2.getName());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertEquals(3700L, home2.getVersion());
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera1.getHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera1.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(48.57143F, observerCamera1.getWidth(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(170.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertEquals(50.0F, observerCamera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertNull(observerCamera1.getName());
      assertEquals(19.428572F, observerCamera1.getDepth(), 0.01F);
      assertEquals(0.19634955F, observerCamera1.getPitch(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertNotNull(observerCamera1);
      
      home0.setCamera(observerCamera1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera1.getHeight(), 0.01F);
      assertEquals(1.0995575F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera1.getYaw(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(48.57143F, observerCamera1.getWidth(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(170.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertEquals(50.0F, observerCamera1.getX(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertNull(observerCamera1.getName());
      assertEquals(19.428572F, observerCamera1.getDepth(), 0.01F);
      assertEquals(0.19634955F, observerCamera1.getPitch(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      
      home1.getFurnitureSortedProperty();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertNotNull(resourceURLContent0);
      
      Sash[] sashArray0 = new Sash[7];
      Sash sash0 = new Sash(3700L, 0.0F, 1000.0F, 0.0F, (-3371.5796F));
      assertEquals((-3371.5796F), sash0.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash0.getStartAngle(), 0.01F);
      assertEquals(1000.0F, sash0.getWidth(), 0.01F);
      assertEquals(3700.0F, sash0.getXAxis(), 0.01F);
      assertEquals(0.0F, sash0.getYAxis(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash((-76.8F), 3700L, 1500.0F, (-1322.4F), (-76.8F));
      assertEquals((-76.8F), sash1.getXAxis(), 0.01F);
      assertEquals(3700.0F, sash1.getYAxis(), 0.01F);
      assertEquals((-1322.4F), sash1.getStartAngle(), 0.01F);
      assertEquals(1500.0F, sash1.getWidth(), 0.01F);
      assertEquals((-76.8F), sash1.getEndAngle(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash((-518.8577F), (-61.0F), 110.333336F, 0.0F, 1500.0F);
      assertEquals(110.333336F, sash2.getWidth(), 0.01F);
      assertEquals((-61.0F), sash2.getYAxis(), 0.01F);
      assertEquals(0.0F, sash2.getStartAngle(), 0.01F);
      assertEquals(1500.0F, sash2.getEndAngle(), 0.01F);
      assertEquals((-518.8577F), sash2.getXAxis(), 0.01F);
      assertFalse(sash2.equals((Object)sash1));
      assertFalse(sash2.equals((Object)sash0));
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-2140.971F), 3700L, 1800.174F, (-6522.525F), 16.366667F);
      assertEquals(1800.174F, sash3.getWidth(), 0.01F);
      assertEquals(16.366667F, sash3.getEndAngle(), 0.01F);
      assertEquals((-2140.971F), sash3.getXAxis(), 0.01F);
      assertEquals((-6522.525F), sash3.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash3.getYAxis(), 0.01F);
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash1));
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash((-3265.6F), 63.733334F, (-1928.8F), 0.0F, 110.333336F);
      assertEquals((-3265.6F), sash4.getXAxis(), 0.01F);
      assertEquals(63.733334F, sash4.getYAxis(), 0.01F);
      assertEquals(0.0F, sash4.getStartAngle(), 0.01F);
      assertEquals((-1928.8F), sash4.getWidth(), 0.01F);
      assertEquals(110.333336F, sash4.getEndAngle(), 0.01F);
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash2));
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(0.0F, (-3265.6F), 0.0F, 0.0F, 1627.4F);
      assertEquals((-3265.6F), sash5.getYAxis(), 0.01F);
      assertEquals(0.0F, sash5.getStartAngle(), 0.01F);
      assertEquals(0.0F, sash5.getXAxis(), 0.01F);
      assertEquals(0.0F, sash5.getWidth(), 0.01F);
      assertEquals(1627.4F, sash5.getEndAngle(), 0.01F);
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash1));
      assertFalse(sash5.equals((Object)sash0));
      assertNotNull(sash5);
      
      sashArray0[5] = sash5;
      Sash sash6 = new Sash(0.0F, 0.0F, 0.0F, (-64.9167F), 1.0F);
      assertEquals(0.0F, sash6.getYAxis(), 0.01F);
      assertEquals((-64.9167F), sash6.getStartAngle(), 0.01F);
      assertEquals(1.0F, sash6.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash6.getWidth(), 0.01F);
      assertEquals(0.0F, sash6.getXAxis(), 0.01F);
      assertFalse(sash6.equals((Object)sash5));
      assertFalse(sash6.equals((Object)sash1));
      assertFalse(sash6.equals((Object)sash0));
      assertFalse(sash6.equals((Object)sash4));
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash3));
      assertNotNull(sash6);
      
      sashArray0[6] = sash6;
      float[][] floatArray0 = new float[7][9];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 1627.4F;
      floatArray1[1] = 110.333336F;
      floatArray1[2] = (-2140.971F);
      floatArray1[3] = (-3371.5796F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[5];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 0.0F;
      floatArray2[1] = 1500.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = (-76.8F);
      floatArray2[4] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[9];
      assertFalse(floatArray3.equals((Object)floatArray2));
      assertFalse(floatArray3.equals((Object)floatArray1));
      
      floatArray3[0] = (-10.883333F);
      floatArray3[1] = 0.0F;
      floatArray3[2] = (-9.3653F);
      floatArray3[3] = (-9.3653F);
      floatArray3[4] = 0.0F;
      floatArray3[5] = 1.0F;
      floatArray3[6] = 0.0F;
      floatArray3[7] = 0.0F;
      floatArray3[8] = (-518.8577F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[0];
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      assertFalse(floatArray4.equals((Object)floatArray3));
      
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[6];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = 63.733334F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 16.366667F;
      floatArray5[3] = 1570.0F;
      floatArray5[4] = (-2140.971F);
      floatArray5[5] = (-76.8F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = 1570.0F;
      floatArray6[1] = 0.0F;
      floatArray6[2] = (float) 3700L;
      floatArray6[3] = 0.0F;
      floatArray6[4] = (float) 3700L;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray3));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray1));
      
      floatArray7[0] = (-2140.971F);
      floatArray7[1] = 1500.0F;
      floatArray7[2] = 0.0F;
      floatArray7[3] = 0.0F;
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal0 = new BigDecimal(0L);
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow("BASE_PLAN_LOCKED", "BASE_PLAN_LOCKED", "|GH)C,dZeYc", resourceURLContent0, resourceURLContent0, resourceURLContent0, (-61.0F), 110.333336F, 1500.0F, 3700L, false, 1500.0F, 1570.0F, sashArray0, floatArray0, "", true, bigDecimal0, bigDecimal0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(1500.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-61.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1570.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("|GH)C,dZeYc", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("BASE_PLAN_LOCKED", catalogDoorOrWindow0.getId());
      assertEquals(1500.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("BASE_PLAN_LOCKED", catalogDoorOrWindow0.getName());
      assertEquals(110.333336F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(7, floatArray0.length);
      assertEquals(7, sashArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(1500.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-61.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1570.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("|GH)C,dZeYc", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("BASE_PLAN_LOCKED", catalogDoorOrWindow0.getId());
      assertEquals(1500.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("BASE_PLAN_LOCKED", catalogDoorOrWindow0.getName());
      assertEquals(110.333336F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1500.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("|GH)C,dZeYc", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-30.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-61.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(110.333336F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("BASE_PLAN_LOCKED", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1500.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("BASE_PLAN_LOCKED", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1570.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(55.166668F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(7, floatArray0.length);
      assertEquals(7, sashArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      home1.addPieceOfFurniture((HomePieceOfFurniture) homeDoorOrWindow0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertEquals((-1), uRL0.getDefaultPort());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getPort());
      assertNull(uRL0.getUserInfo());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((short)0, bigDecimal0.shortValue());
      assertEquals((byte)0, bigDecimal0.byteValue());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertFalse(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertEquals("", catalogDoorOrWindow0.getCreator());
      assertEquals(1500.0F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(3700.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertEquals((-61.0F), catalogDoorOrWindow0.getWidth(), 0.01F);
      assertNull(catalogDoorOrWindow0.getGrade());
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertEquals(1570.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals("|GH)C,dZeYc", catalogDoorOrWindow0.getDescription());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals("BASE_PLAN_LOCKED", catalogDoorOrWindow0.getId());
      assertEquals(1500.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertNull(catalogDoorOrWindow0.getColor());
      assertEquals("BASE_PLAN_LOCKED", catalogDoorOrWindow0.getName());
      assertEquals(110.333336F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(1500.0F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertNull(homeDoorOrWindow0.getCurrency());
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals("|GH)C,dZeYc", homeDoorOrWindow0.getDescription());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertEquals((-30.5F), homeDoorOrWindow0.getX(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertEquals((-61.0F), homeDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertEquals(110.333336F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals("BASE_PLAN_LOCKED", homeDoorOrWindow0.getName());
      assertTrue(homeDoorOrWindow0.isResizable());
      assertEquals(1500.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(3700.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals("BASE_PLAN_LOCKED", homeDoorOrWindow0.getCatalogId());
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1570.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(55.166668F, homeDoorOrWindow0.getY(), 0.01F);
      assertFalse(homeDoorOrWindow0.isMovable());
      assertEquals(3700.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertEquals(7, floatArray0.length);
      assertEquals(7, sashArray0.length);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLabelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      LinkedList<Wall> linkedList0 = new LinkedList<Wall>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Wall> list1 = Wall.clone((List<Wall>) linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home0.setSelectedItems(linkedList0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0, linkedList0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertEquals(12, home_PropertyArray0.length);
      assertNotNull(home_PropertyArray0);
      
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(0.0F, 1000.0F, 0.0F, 0.0F, 1000.0F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(1000.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(500.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1000.0F, wall0.getLength(), 0.01F);
      assertEquals(1000.0F, wall0.getYStart(), 0.01F);
      assertEquals(1000.0F, wall0.getThickness(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNotNull(wall0);
      
      Wall wall1 = new Wall(0.0F, 0.0F, 3700L, 0.0F, 168.417F, 168.417F);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1850.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(168.417F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(168.417F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertNotNull(wall1);
      
      wall0.setYStart(3700L);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getHeight());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals(1850.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(1000.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertFalse(wall0.equals((Object)wall1));
      assertNotSame(wall0, wall1);
      
      home0.addWall(wall1);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1850.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(168.417F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(168.417F, wall1.getHeight(), 0.01F);
      assertFalse(wall1.equals((Object)wall0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(wall1, wall0);
      
      Home home1 = new Home();
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      home1.deleteWall(wall1);
      assertEquals(0.0F, wall1.getYEnd(), 0.01F);
      assertEquals(0.0F, wall1.getLeftSideShininess(), 0.01F);
      assertEquals(0.0F, wall1.getYStart(), 0.01F);
      assertEquals(0.0F, wall1.getXStart(), 0.01F);
      assertEquals(0.0F, wall1.getRightSideShininess(), 0.01F);
      assertFalse(wall1.isTrapezoidal());
      assertEquals(3700.0F, wall1.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(1850.0F, wall1.getXArcCircleCenter(), 0.01F);
      assertNull(wall1.getHeightAtEnd());
      assertEquals(168.417F, wall1.getThickness(), 0.01F);
      assertNull(wall1.getArcExtent());
      assertNull(wall1.getRightSideColor());
      assertNull(wall1.getLeftSideColor());
      assertEquals(3700.0F, wall1.getLength(), 0.01F);
      assertEquals(0.0F, wall1.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall1.getXEnd(), 0.01F);
      assertEquals(168.417F, wall1.getHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertFalse(wall1.equals((Object)wall0));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(wall1, wall0);
      assertNotSame(home1, home0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotNull(observerCamera0);
      
      home1.setCamera(observerCamera0);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      home0.getFurnitureSortedProperty();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label("2fs_>n/YU5KyF*s", 3700L, 3700L);
      assertEquals("2fs_>n/YU5KyF*s", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Home home0 = new Home((-34.5875F));
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-34.5875F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-34.5875F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals((-34.5875F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      List<HomePieceOfFurniture> list0 = home1.getFurniture();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-34.5875F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals((-34.5875F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(list0);
      
      Home home2 = new Home(list0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-34.5875F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals((-34.5875F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home2);
      
      CollectionListener<Label> collectionListener0 = (CollectionListener<Label>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home2.addLabelsListener(collectionListener0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-34.5875F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals((-34.5875F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      
      Camera camera0 = home2.getCamera();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals((-34.5875F), home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getName());
      assertEquals((-34.5875F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertTrue(home2.isEmpty());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home2));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(camera0);
      
      // Undeclared exception!
      try { 
        Home.getRoomsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      home1.setFurnitureDescendingSorted(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertTrue(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertEquals(0.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      
      ObserverCamera observerCamera0 = new ObserverCamera(0.0F, 3700L, 3700L, 0.0F, 3700L, 3700L);
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(3700.0F, observerCamera0.getY(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(25.0F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(0.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(62.5F, observerCamera0.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(0.0F, observerCamera0.getX(), 0.01F);
      assertEquals(3964.2856F, observerCamera0.getHeight(), 0.01F);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(3700.0F, observerCamera0.getY(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(3700.0F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getZ(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      home0.getFurnitureSortedProperty();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      
      // Undeclared exception!
      try { 
        home0.addRoom((Room) null, (-3160));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -3160, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Label label0 = new Label("G:I)|w=BhMb'M", 3700L, 3700L);
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("G:I)|w=BhMb'M", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertNotNull(label0);
      
      home0.addLabel(label0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700.0F, label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("G:I)|w=BhMb'M", label0.getText());
      assertEquals(3700.0F, label0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CatalogPieceOfFurniture catalogPieceOfFurniture0 = new CatalogPieceOfFurniture("AlF047tyEQ(\"{Di?", "o`-`Bo5", "o`-`Bo5", (Content) null, (Content) null, (Content) null, (-262.36F), (-262.36F), 722.8484F, 0.0F, false, (float[][]) null, "G:I)|w=BhMb'M", true, (BigDecimal) null, (BigDecimal) null);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("o`-`Bo5", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("AlF047tyEQ(\"{Di?", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(722.8484F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("G:I)|w=BhMb'M", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("o`-`Bo5", catalogPieceOfFurniture0.getName());
      assertEquals((-262.36F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-262.36F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertNotNull(catalogPieceOfFurniture0);
      
      HomePieceOfFurniture homePieceOfFurniture0 = new HomePieceOfFurniture(catalogPieceOfFurniture0);
      assertEquals(0.0F, catalogPieceOfFurniture0.getElevation(), 0.01F);
      assertFalse(catalogPieceOfFurniture0.isModifiable());
      assertNull(catalogPieceOfFurniture0.getColor());
      assertNull(catalogPieceOfFurniture0.getCreationDate());
      assertEquals("o`-`Bo5", catalogPieceOfFurniture0.getDescription());
      assertNull(catalogPieceOfFurniture0.getCurrency());
      assertTrue(catalogPieceOfFurniture0.isDeformable());
      assertTrue(catalogPieceOfFurniture0.isResizable());
      assertNull(catalogPieceOfFurniture0.getInformation());
      assertNull(catalogPieceOfFurniture0.getStaircaseCutOutShape());
      assertFalse(catalogPieceOfFurniture0.isMovable());
      assertEquals("AlF047tyEQ(\"{Di?", catalogPieceOfFurniture0.getId());
      assertFalse(catalogPieceOfFurniture0.isBackFaceShown());
      assertEquals(722.8484F, catalogPieceOfFurniture0.getHeight(), 0.01F);
      assertEquals("G:I)|w=BhMb'M", catalogPieceOfFurniture0.getCreator());
      assertNull(catalogPieceOfFurniture0.getGrade());
      assertFalse(catalogPieceOfFurniture0.isDoorOrWindow());
      assertEquals("o`-`Bo5", catalogPieceOfFurniture0.getName());
      assertEquals((-262.36F), catalogPieceOfFurniture0.getWidth(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isProportional());
      assertEquals(0.3926991F, catalogPieceOfFurniture0.getIconYaw(), 0.01F);
      assertTrue(catalogPieceOfFurniture0.isTexturable());
      assertEquals((-262.36F), catalogPieceOfFurniture0.getDepth(), 0.01F);
      assertFalse(homePieceOfFurniture0.isNameVisible());
      assertNull(homePieceOfFurniture0.getCurrency());
      assertFalse(homePieceOfFurniture0.isBackFaceShown());
      assertEquals("o`-`Bo5", homePieceOfFurniture0.getDescription());
      assertEquals((-131.18F), homePieceOfFurniture0.getX(), 0.01F);
      assertEquals((-131.18F), homePieceOfFurniture0.getY(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getAngle(), 0.01F);
      assertFalse(homePieceOfFurniture0.isDoorOrWindow());
      assertTrue(homePieceOfFurniture0.isTexturable());
      assertEquals((-262.36F), homePieceOfFurniture0.getDepth(), 0.01F);
      assertNull(homePieceOfFurniture0.getShininess());
      assertEquals("o`-`Bo5", homePieceOfFurniture0.getName());
      assertTrue(homePieceOfFurniture0.isResizable());
      assertTrue(homePieceOfFurniture0.isVisible());
      assertTrue(homePieceOfFurniture0.isDeformable());
      assertEquals(0.0F, homePieceOfFurniture0.getNameXOffset(), 0.01F);
      assertEquals(722.8484F, homePieceOfFurniture0.getHeight(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getNameAngle(), 0.01F);
      assertEquals(0.0F, homePieceOfFurniture0.getElevation(), 0.01F);
      assertNull(homePieceOfFurniture0.getStaircaseCutOutShape());
      assertEquals("AlF047tyEQ(\"{Di?", homePieceOfFurniture0.getCatalogId());
      assertFalse(homePieceOfFurniture0.isMovable());
      assertFalse(homePieceOfFurniture0.isModelMirrored());
      assertEquals((-262.36F), homePieceOfFurniture0.getWidth(), 0.01F);
      assertNull(homePieceOfFurniture0.getColor());
      assertEquals(0.0F, homePieceOfFurniture0.getNameYOffset(), 0.01F);
      assertNotNull(homePieceOfFurniture0);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture(homePieceOfFurniture0, 195);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 195, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      home0.setFurnitureVisibleProperties(list0);
      assertEquals(5, list0.size());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.deleteRoom((Room) null);
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home.Property home_Property0 = Home.Property.BACKGROUND_IMAGE;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("STORED_CAMERAS", propertyChangeListener0);
      assertEquals("STORED_CAMERAS", propertyChangeListenerProxy0.getPropertyName());
      assertNotNull(propertyChangeListenerProxy0);
      
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals("STORED_CAMERAS", propertyChangeListenerProxy0.getPropertyName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(3700L, 3799.93F, 3799.93F, (-37.62086F), 3700L);
      assertEquals(3799.93F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3838.8516F, dimensionLine0.getLength(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-37.62086F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3799.93F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      dimensionLine0.setOffset(0.19634955F);
      assertEquals(3799.93F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3838.8516F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-37.62086F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3799.93F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      
      home0.addDimensionLine(dimensionLine0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3799.93F, dimensionLine0.getYStart(), 0.01F);
      assertEquals(3838.8516F, dimensionLine0.getLength(), 0.01F);
      assertEquals(0.19634955F, dimensionLine0.getOffset(), 0.01F);
      assertEquals((-37.62086F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(3799.93F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isEmpty());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Selectable> list0 = Home.duplicate(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Home home0 = new Home(826.0F);
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedLevel((Level) null);
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      Compass compass0 = home0.getCompass();
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
      
      LinkedList<Compass> linkedList0 = new LinkedList<Compass>();
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(linkedList0);
      
      Class<Label> class0 = Label.class;
      List<Label> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertNotNull(list0);
      
      Class<Label> class1 = Label.class;
      List<Label> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(linkedList0.contains(compass0));
      assertTrue(list1.equals((Object)list0));
      assertSame(class0, class1);
      assertNotSame(list0, list1);
      assertSame(class1, class0);
      assertNotSame(list1, list0);
      assertNotNull(list1);
      
      List<Wall> list2 = Home.getWallsSubList(list1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertFalse(linkedList0.contains(compass0));
      assertTrue(list0.equals((Object)list1));
      assertTrue(list1.equals((Object)list0));
      assertSame(class0, class1);
      assertNotSame(list0, list1);
      assertSame(class1, class0);
      assertNotSame(list1, list0);
      assertNotNull(list2);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      DimensionLine dimensionLine0 = new DimensionLine(826.0F, 826.0F, 3700L, (-2985.0222F), 826.0F);
      assertEquals(826.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(4773.2344F, dimensionLine0.getLength(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-2985.0222F), dimensionLine0.getYEnd(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(826.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(4773.2344F, dimensionLine0.getLength(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-2985.0222F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(4773.2344F, dimensionLine1.getLength(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-2985.0222F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNotNull(dimensionLine1);
      
      dimensionLine1.setXEnd(826.0F);
      assertEquals(826.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(4773.2344F, dimensionLine0.getLength(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-2985.0222F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3811.0222F, dimensionLine1.getLength(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-2985.0222F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.deleteDimensionLine(dimensionLine1);
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals(4773.2344F, dimensionLine0.getLength(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(3700.0F, dimensionLine0.getXEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-2985.0222F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(3811.0222F, dimensionLine1.getLength(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getYStart(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getXEnd(), 0.01F);
      assertEquals(826.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-2985.0222F), dimensionLine1.getYEnd(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      
      home0.setName("T[<;");
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals("T[<;", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals("T[<;", home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertEquals(HomePieceOfFurniture.SortableProperty.Y, home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<HomePieceOfFurniture> list3 = Home.getFurnitureSubList(list0);
      assertTrue(list3.isEmpty());
      assertEquals(0, list3.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(compass0));
      assertTrue(list0.equals((Object)list1));
      assertSame(class0, class1);
      assertNotSame(list0, list1);
      assertNotNull(list3);
      
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Camera> list0 = home0.getStoredCameras();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      home0.setStoredCameras(list0);
      home0.getCamera();
      home0.getFurnitureVisibleProperties();
      home0.getVersion();
      home0.getFurniture();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      HomePieceOfFurniture.SortableProperty.values();
      home0.setRecovered(true);
      Label label0 = new Label("Rg9)E\",E`2i(Iwn/Q", (-8.55F), 3700L);
      Label label1 = label0.clone();
      home0.addLabel(label1);
      home0.isBasePlanLocked();
      assertTrue(home0.isRecovered());
      
      home0.setRecovered(false);
      home0.isBasePlanLocked();
      float[][] floatArray0 = new float[8][3];
      float[] floatArray1 = new float[6];
      floatArray1[0] = (float) 3700L;
      floatArray1[1] = (-8.55F);
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (-2145.3792F);
      floatArray1[4] = (float) 3700L;
      floatArray1[5] = 3794.68F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[7];
      floatArray2[0] = 3794.68F;
      floatArray2[1] = (-8.55F);
      floatArray2[2] = 3794.68F;
      floatArray2[3] = (-8.55F);
      floatArray2[4] = (float) 3700L;
      floatArray2[5] = (float) 3700L;
      floatArray2[6] = (-2145.3792F);
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = 3794.68F;
      floatArray3[3] = (float) 3700L;
      floatArray3[4] = (float) 3700L;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[9];
      floatArray4[0] = (-2145.3792F);
      floatArray4[1] = (-8.55F);
      floatArray4[2] = (-2145.3792F);
      floatArray4[3] = 0.0F;
      floatArray4[4] = (-2145.3792F);
      floatArray4[5] = (-2145.3792F);
      floatArray4[6] = 3794.68F;
      floatArray4[7] = (-11.666667F);
      floatArray4[8] = (-8.55F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[3];
      floatArray5[0] = 3794.68F;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[4];
      floatArray6[0] = 0.0F;
      floatArray6[1] = (-2145.3792F);
      floatArray6[2] = 0.0F;
      floatArray6[3] = (-8.55F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[6];
      floatArray7[0] = (-8.55F);
      floatArray7[1] = (float) 3700L;
      floatArray7[2] = (-11.666667F);
      floatArray7[3] = (float) 3700L;
      floatArray7[4] = 0.0F;
      floatArray7[5] = (-2145.3792F);
      floatArray0[6] = floatArray7;
      float[] floatArray8 = new float[4];
      floatArray8[0] = 0.0F;
      floatArray8[1] = (float) 3700L;
      floatArray8[2] = (-11.666667F);
      floatArray8[3] = 3794.68F;
      floatArray0[7] = floatArray8;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      home0.deleteRoom(room1);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Home home0 = new Home(0.0F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeLevelsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Label label0 = new Label("mj", (-1638.0F), (-3429.0F));
      assertEquals((-3429.0F), label0.getY(), 0.01F);
      assertEquals("mj", label0.getText());
      assertEquals((-1638.0F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertNotNull(label0);
      
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, (-1638.0F), (-1638.0F), (-1638.0F), 3700L);
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1638.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getYStart(), 0.01F);
      assertNotNull(dimensionLine0);
      
      DimensionLine dimensionLine1 = dimensionLine0.clone();
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1638.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(1638.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-1638.0F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-1638.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-1638.0F), dimensionLine1.getYStart(), 0.01F);
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNotNull(dimensionLine1);
      
      Level level0 = dimensionLine1.getLevel();
      assertEquals(3700.0F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getXStart(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getYEnd(), 0.01F);
      assertEquals(1638.0F, dimensionLine0.getLength(), 0.01F);
      assertEquals((-1638.0F), dimensionLine0.getYStart(), 0.01F);
      assertEquals(1638.0F, dimensionLine1.getLength(), 0.01F);
      assertEquals((-1638.0F), dimensionLine1.getXEnd(), 0.01F);
      assertEquals(3700.0F, dimensionLine1.getOffset(), 0.01F);
      assertEquals(0.0F, dimensionLine1.getXStart(), 0.01F);
      assertEquals((-1638.0F), dimensionLine1.getYEnd(), 0.01F);
      assertEquals((-1638.0F), dimensionLine1.getYStart(), 0.01F);
      assertFalse(dimensionLine0.equals((Object)dimensionLine1));
      assertFalse(dimensionLine1.equals((Object)dimensionLine0));
      assertNotSame(dimensionLine0, dimensionLine1);
      assertNotSame(dimensionLine1, dimensionLine0);
      assertNull(level0);
      
      label0.setLevel((Level) null);
      assertEquals((-3429.0F), label0.getY(), 0.01F);
      assertEquals("mj", label0.getText());
      assertEquals((-1638.0F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      
      home0.addLabel(label0);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals((-3429.0F), label0.getY(), 0.01F);
      assertEquals("mj", label0.getText());
      assertEquals((-1638.0F), label0.getX(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(false);
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setFurnitureDescendingSorted(true);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isRecovered();
      assertFalse(boolean0);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean1 = home0.isEmpty();
      assertFalse(boolean1);
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertTrue(boolean1 == boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertTrue(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
      
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      // Undeclared exception!
      try { 
        Home.getDimensionLinesSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setName("");
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName("");
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals("", home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Home home0 = new Home(826.0F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Collection<Label> collection0 = home0.getLabels();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      Compass compass0 = home0.getCompass();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertTrue(compass0.isVisible());
      assertEquals(0.0F, compass0.getNorthDirection(), 0.01F);
      assertEquals(0.8982628F, compass0.getLatitude(), 0.01F);
      assertEquals("GMT", compass0.getTimeZone());
      assertEquals(50.0F, compass0.getY(), 0.01F);
      assertEquals(0.0F, compass0.getLongitude(), 0.01F);
      assertEquals((-100.0F), compass0.getX(), 0.01F);
      assertEquals(100.0F, compass0.getDiameter(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(compass0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setName((String) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertNull(home1.getName());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home1.getFurnitureSortedProperty());
      assertEquals(826.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      ObserverCamera observerCamera0 = new ObserverCamera(3700L, (-381.508F), 0.0F, 3700L, 3700L, (-3395.0842F));
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(3700.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals((-3395.0842F), observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera0.getHeight(), 0.01F);
      assertEquals((-381.508F), observerCamera0.getY(), 0.01F);
      assertEquals(0.0F, observerCamera0.getZ(), 0.01F);
      assertNotNull(observerCamera0);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(3700.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals((-3395.0842F), observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera0.getHeight(), 0.01F);
      assertEquals((-381.508F), observerCamera0.getY(), 0.01F);
      assertEquals(0.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.0F, observerCamera1.getHeight(), 0.01F);
      assertEquals(0.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(3700.0F, observerCamera1.getX(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertNull(observerCamera1.getName());
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(20.0F, observerCamera1.getWidth(), 0.01F);
      assertEquals(3700.0F, observerCamera1.getPitch(), 0.01F);
      assertEquals((-3395.0842F), observerCamera1.getFieldOfView(), 0.01F);
      assertEquals((-381.508F), observerCamera1.getY(), 0.01F);
      assertEquals(8.0F, observerCamera1.getDepth(), 0.01F);
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertNotNull(observerCamera1);
      
      Home home2 = new Home(0.0F);
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home2);
      
      home2.setCamera(observerCamera0);
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(8.0F, observerCamera0.getDepth(), 0.01F);
      assertEquals(20.0F, observerCamera0.getWidth(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(3700.0F, observerCamera0.getPitch(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getX(), 0.01F);
      assertEquals(3700.0F, observerCamera0.getYaw(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals((-3395.0842F), observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.0F, observerCamera0.getHeight(), 0.01F);
      assertEquals((-381.508F), observerCamera0.getY(), 0.01F);
      assertEquals(0.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(0.0F, home2.getWallHeight(), 0.01F);
      assertTrue(home2.isEmpty());
      assertFalse(home2.isBasePlanLocked());
      assertFalse(home2.isRecovered());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isModified());
      assertNull(home2.getName());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = home0.getFurnitureSortedProperty();
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, homePieceOfFurniture_SortableProperty1);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(HomePieceOfFurniture.SortableProperty.CATALOG_ID, home0.getFurnitureSortedProperty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(826.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertSame(homePieceOfFurniture_SortableProperty1, homePieceOfFurniture_SortableProperty0);
      
      LinkedList<HomeDoorOrWindow> linkedList0 = new LinkedList<HomeDoorOrWindow>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<DimensionLine> list0 = Home.getDimensionLinesSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      List<Wall> list1 = Home.getWallsSubList(list0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list1);
      
      List<HomePieceOfFurniture> list2 = Home.getFurnitureSubList(list1);
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertNotNull(list2);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      BackgroundImage backgroundImage0 = home0.getBackgroundImage();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(backgroundImage0);
      
      home0.setBackgroundImage((BackgroundImage) null);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Camera camera0 = home1.getCamera();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(3700L, home1.getVersion());
      assertTrue(home1.isEmpty());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(camera0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertNull(observerCamera0.getName());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertFalse(observerCamera0.isFixedSize());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Home home0 = new Home();
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.X;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(HomePieceOfFurniture.SortableProperty.X, home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-2166.5583F);
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (-2166.5583F);
      floatArray1[7] = (float) 3700L;
      floatArray1[5] = (-2166.5583F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = (-2166.5583F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (-2166.5583F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-1083.2792F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1083.2792F), room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      boolean boolean0 = linkedList0.add(room0);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-1083.2792F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1083.2792F), room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(2, floatArray0.length);
      assertTrue(linkedList0.contains(room0));
      
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(1, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(linkedList0.contains(room0));
      assertNotNull(list0);
      
      Class<Label> class1 = Label.class;
      List<Label> list1 = Home.getSubList((List<? extends Selectable>) linkedList0, class1);
      assertEquals(1, linkedList0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(linkedList0.contains(room0));
      assertNotNull(list1);
      
      List<Room> list2 = Home.getRoomsSubList(linkedList0);
      assertEquals(1, linkedList0.size());
      assertFalse(list2.isEmpty());
      assertEquals(1, list2.size());
      assertTrue(linkedList0.contains(room0));
      assertTrue(list2.contains(room0));
      assertNotNull(list2);
      
      long long0 = home0.getVersion();
      assertEquals(3700L, long0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList1 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList1.size());
      assertNotNull(linkedList1);
      
      home0.setFurnitureVisibleProperties(linkedList1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertEquals(0, linkedList1.size());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteRoom(room0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(room0.isCeilingVisible());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertNull(room0.getCeilingColor());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals((-1083.2792F), room0.getYCenter(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals((-1083.2792F), room0.getXCenter(), 0.01F);
      assertNull(room0.getFloorColor());
      assertNull(room0.getName());
      assertEquals(2, floatArray0.length);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(false);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      // Undeclared exception!
      try { 
        Home.getLabelsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Room room0 = null;
      // Undeclared exception!
      try { 
        home0.deleteDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeSelectionListener(selectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      boolean boolean0 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      LinkedList<DimensionLine> linkedList0 = new LinkedList<DimensionLine>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CollectionListener<Wall> collectionListener1 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeWallsListener(collectionListener1);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Class<HomeFurnitureGroup> class0 = HomeFurnitureGroup.class;
      List<HomeFurnitureGroup> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Class<ObserverCamera> class1 = ObserverCamera.class;
      List<ObserverCamera> list1 = Home.getSubList((List<? extends Selectable>) list0, class1);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      List<HomeFurnitureGroup> list2 = Home.getSubList((List<? extends Selectable>) list1, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertTrue(list2.equals((Object)list0));
      assertNotSame(list0, list2);
      assertNotSame(list2, list0);
      assertNotNull(list2);
      
      List<HomeFurnitureGroup> list3 = Home.getSubList((List<? extends Selectable>) list2, class0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertTrue(list0.equals((Object)list2));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertNotSame(list0, list3);
      assertNotSame(list0, list2);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotNull(list3);
      
      List<Label> list4 = Home.getLabelsSubList(list3);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, list2.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list3.size());
      assertTrue(list3.isEmpty());
      assertEquals(0, list4.size());
      assertTrue(list4.isEmpty());
      assertTrue(list0.equals((Object)list2));
      assertTrue(list0.equals((Object)list3));
      assertTrue(list2.equals((Object)list3));
      assertTrue(list2.equals((Object)list0));
      assertTrue(list3.equals((Object)list2));
      assertTrue(list3.equals((Object)list0));
      assertNotSame(list0, list3);
      assertNotSame(list0, list2);
      assertNotSame(list2, list3);
      assertNotSame(list2, list0);
      assertNotSame(list3, list0);
      assertNotSame(list3, list2);
      assertNotNull(list4);
      
      boolean boolean1 = home0.isFurnitureDescendingSorted();
      assertFalse(boolean1);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertTrue(boolean1 == boolean0);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Camera camera0 = home0.getTopCamera();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertNull(camera0.getName());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(camera0);
      
      Camera camera1 = home0.getTopCamera();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertSame(camera1, camera0);
      assertNotNull(camera1);
      
      Level level0 = home0.getSelectedLevel();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNull(level0);
      
      Collection<Wall> collection0 = home0.getWalls();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(collection0);
      
      CollectionListener<HomePieceOfFurniture> collectionListener2 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addFurnitureListener(collectionListener2);
      assertTrue(home0.isEmpty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list0 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.addDimensionLine((DimensionLine) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float[][] floatArray0 = new float[15][9];
      List<Room> list0 = home0.getRooms();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      List<Selectable> list0 = home0.getSelectedItems();
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[5];
      floatArray1[0] = 3.1415927F;
      floatArray1[2] = 3.1415927F;
      floatArray1[3] = 0.0F;
      floatArray1[4] = 0.0F;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1.5707964F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(2, floatArray0.length);
      assertNotNull(room0);
      
      Room room1 = room0.clone();
      assertNull(room0.getFloorColor());
      assertEquals(0.0F, room0.getFloorShininess(), 0.01F);
      assertTrue(room0.isAreaVisible());
      assertEquals((-40.0F), room0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, room0.getNameAngle(), 0.01F);
      assertFalse(room0.isClockwise());
      assertNull(room0.getName());
      assertTrue(room0.isCeilingVisible());
      assertEquals(0.0F, room0.getYCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room0.getCeilingShininess(), 0.01F);
      assertEquals(1.5707964F, room0.getXCenter(), 0.01F);
      assertEquals(0.0F, room0.getAreaAngle(), 0.01F);
      assertTrue(room0.isFloorVisible());
      assertNull(room0.getCeilingColor());
      assertEquals(2, room0.getPointCount());
      assertEquals(0.0F, room0.getNameXOffset(), 0.01F);
      assertEquals(0.0F, room0.getAreaYOffset(), 0.01F);
      assertEquals(0.0F, room1.getNameXOffset(), 0.01F);
      assertNull(room1.getName());
      assertEquals(0.0F, room1.getAreaYOffset(), 0.01F);
      assertEquals((-40.0F), room1.getNameYOffset(), 0.01F);
      assertTrue(room1.isAreaVisible());
      assertEquals(0.0F, room1.getYCenter(), 0.01F);
      assertNull(room1.getFloorColor());
      assertEquals(0.0F, room1.getAreaXOffset(), 0.01F);
      assertEquals(0.0F, room1.getAreaAngle(), 0.01F);
      assertTrue(room1.isFloorVisible());
      assertFalse(room1.isClockwise());
      assertTrue(room1.isCeilingVisible());
      assertEquals(1.5707964F, room1.getXCenter(), 0.01F);
      assertEquals(0.0F, room1.getCeilingShininess(), 0.01F);
      assertEquals(2, room1.getPointCount());
      assertEquals(0.0F, room1.getFloorShininess(), 0.01F);
      assertEquals(0.0F, room1.getNameAngle(), 0.01F);
      assertNull(room1.getCeilingColor());
      assertEquals(2, floatArray0.length);
      assertFalse(room1.equals((Object)room0));
      assertNotSame(room0, room1);
      assertNotSame(room1, room0);
      assertNotNull(room1);
      
      URL uRL0 = MockURL.getHttpExample();
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertNotNull(uRL0);
      
      ResourceURLContent resourceURLContent0 = new ResourceURLContent(uRL0, true);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertNotNull(resourceURLContent0);
      
      BackgroundImage backgroundImage0 = new BackgroundImage(resourceURLContent0, (-2686.7F), 0.0F, 0.0F, 0.0F, (-309.13635F), 2744.78F, 0.0F, true);
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals((-309.13635F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals((-2686.7F), backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-8.690987F), backgroundImage0.getScale(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(2744.78F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertTrue(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertNotNull(backgroundImage0);
      
      home0.setBackgroundImage(backgroundImage0);
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals("http", uRL0.getProtocol());
      assertNull(uRL0.getRef());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getAuthority());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toString());
      assertEquals((-1), uRL0.getPort());
      assertEquals("http://www.someFakeButWellFormedURL.org/fooExample", uRL0.toExternalForm());
      assertNull(uRL0.getUserInfo());
      assertEquals("www.someFakeButWellFormedURL.org", uRL0.getHost());
      assertNull(uRL0.getQuery());
      assertEquals((-1), uRL0.getDefaultPort());
      assertFalse(resourceURLContent0.isJAREntry());
      assertTrue(resourceURLContent0.isMultiPartResource());
      assertEquals(0.0F, backgroundImage0.getYOrigin(), 0.01F);
      assertEquals((-309.13635F), backgroundImage0.getScaleDistanceYEnd(), 0.01F);
      assertEquals((-2686.7F), backgroundImage0.getScaleDistance(), 0.01F);
      assertEquals((-8.690987F), backgroundImage0.getScale(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXEnd(), 0.01F);
      assertEquals(2744.78F, backgroundImage0.getXOrigin(), 0.01F);
      assertEquals(0.0F, backgroundImage0.getScaleDistanceXStart(), 0.01F);
      assertTrue(backgroundImage0.isVisible());
      assertEquals(0.0F, backgroundImage0.getScaleDistanceYStart(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Home home0 = new Home((-149.0F));
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = new Home(3700L);
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotNull(list0);
      
      Home home2 = home0.clone();
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-149.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotNull(home2);
      
      Camera camera0 = home2.getCamera();
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-149.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotNull(camera0);
      
      Camera camera1 = camera0.clone();
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-149.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      assertNotNull(camera1);
      
      home0.setCamera(camera1);
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-149.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertEquals(1392409281320L, camera0.getTime());
      assertEquals(1.0995575F, camera0.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera0.getYaw(), 0.01F);
      assertNull(camera0.getName());
      assertEquals(1000.0F, camera0.getZ(), 0.01F);
      assertEquals(0.7853982F, camera0.getPitch(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, camera0.getLens());
      assertEquals(1500.0F, camera0.getY(), 0.01F);
      assertEquals(500.0F, camera0.getX(), 0.01F);
      assertEquals(1000.0F, camera1.getZ(), 0.01F);
      assertEquals(1392409281320L, camera1.getTime());
      assertEquals(Camera.Lens.PINHOLE, camera1.getLens());
      assertEquals(1.0995575F, camera1.getFieldOfView(), 0.01F);
      assertEquals(3.1415927F, camera1.getYaw(), 0.01F);
      assertEquals(0.7853982F, camera1.getPitch(), 0.01F);
      assertEquals(500.0F, camera1.getX(), 0.01F);
      assertNull(camera1.getName());
      assertEquals(1500.0F, camera1.getY(), 0.01F);
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(camera0.equals((Object)camera1));
      assertFalse(camera1.equals((Object)camera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      assertNotSame(camera0, camera1);
      assertNotSame(camera1, camera0);
      
      home2.setFurnitureDescendingSorted(true);
      assertEquals((-149.0F), home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home2.getVersion());
      assertEquals((-149.0F), home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isBasePlanLocked());
      assertTrue(home2.isFurnitureDescendingSorted());
      assertNull(home2.getFurnitureSortedProperty());
      assertNull(home2.getName());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertFalse(home0.equals((Object)home2));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home1);
      assertNotSame(home2, home0);
      
      boolean boolean0 = home1.isBasePlanLocked();
      assertFalse(boolean0);
      assertEquals(3700.0F, home1.getWallHeight(), 0.01F);
      assertFalse(home1.isBasePlanLocked());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertFalse(home1.equals((Object)home2));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertNotSame(home1, home2);
      
      Long long0 = new Long((-1180L));
      assertEquals((-1180L), (long)long0);
      assertNotNull(long0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = new Home((-399.112F));
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertEquals((-399.112F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      home1.setBasePlanLocked(true);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals((-399.112F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      
      boolean boolean0 = home1.isBasePlanLocked();
      assertTrue(boolean0);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals((-399.112F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList0 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      home1.setFurnitureVisibleProperties(linkedList0);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isBasePlanLocked());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertNull(home1.getName());
      assertEquals((-399.112F), home1.getWallHeight(), 0.01F);
      assertEquals(0, linkedList0.size());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.setBasePlanLocked(true);
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isBasePlanLocked());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      // Undeclared exception!
      try { 
        home0.deleteWall((Wall) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Home home0 = new Home(0.19634955F);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.MOVABLE;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.MOVABLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.addSelectionListener(selectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.MOVABLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertTrue(home0.isEmpty());
      assertNull(home0.getName());
      assertFalse(home0.isRecovered());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.MOVABLE, home0.getFurnitureSortedProperty());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.19634955F, home0.getWallHeight(), 0.01F);
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(0.19634955F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getName());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(HomePieceOfFurniture.SortableProperty.MOVABLE, home1.getFurnitureSortedProperty());
      assertFalse(home1.isModified());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      // Undeclared exception!
      try { 
        home1.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      float float0 = 0.0F;
      DimensionLine dimensionLine0 = new DimensionLine((-2723.3516F), 0.0F, (-2723.3516F), 1514.67F, 1514.67F);
      assertEquals(1514.67F, dimensionLine0.getYEnd(), 0.01F);
      assertEquals((-2723.3516F), dimensionLine0.getXEnd(), 0.01F);
      assertEquals(0.0F, dimensionLine0.getYStart(), 0.01F);
      assertEquals((-2723.3516F), dimensionLine0.getXStart(), 0.01F);
      assertEquals(1514.67F, dimensionLine0.getOffset(), 0.01F);
      assertEquals(1514.67F, dimensionLine0.getLength(), 0.01F);
      assertNotNull(dimensionLine0);
      
      float float1 = 0.0F;
      float float2 = 0.19634955F;
      float float3 = (-2421.073F);
      Home home1 = new Home((-763.18F));
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals((-763.18F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home1);
      
      List<HomePieceOfFurniture.SortableProperty> list0 = home0.getFurnitureVisibleProperties();
      assertFalse(home0.isModified());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotNull(list0);
      
      List<HomePieceOfFurniture> list1 = home1.getFurniture();
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals((-763.18F), home1.getWallHeight(), 0.01F);
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      assertNotNull(list1);
      
      String string0 = "$VALUES";
      home1.addDimensionLinesListener((CollectionListener<DimensionLine>) null);
      assertTrue(home1.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertEquals((-763.18F), home1.getWallHeight(), 0.01F);
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home1, home0);
      
      LinkedList<Label> linkedList0 = new LinkedList<Label>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      List<Label> list2 = Home.getLabelsSubList(linkedList0);
      assertEquals(0, linkedList0.size());
      assertTrue(list2.isEmpty());
      assertEquals(0, list2.size());
      assertNotNull(list2);
      
      HomeFurnitureGroup homeFurnitureGroup0 = null;
      try {
        homeFurnitureGroup0 = new HomeFurnitureGroup(list1, "$VALUES");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Home.Property[] home_PropertyArray0 = Home.Property.values();
      assertEquals(12, home_PropertyArray0.length);
      assertNotNull(home_PropertyArray0);
      
      Home home0 = new Home();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(0.0F, 1000.0F, 0.0F, 0.0F, (-2119.738F));
      assertEquals(1000.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(500.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2119.738F), wall0.getThickness(), 0.01F);
      assertEquals(1000.0F, wall0.getLength(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(1000.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertNotNull(wall0);
      
      Float float0 = new Float(36525.0);
      assertEquals(36525.0F, (float)float0, 0.01F);
      assertNotNull(float0);
      
      wall0.setHeight(float0);
      assertEquals(1000.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(500.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2119.738F), wall0.getThickness(), 0.01F);
      assertEquals(1000.0F, wall0.getLength(), 0.01F);
      assertEquals(36525.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1000.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      
      home0.deleteWall(wall0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(1000.0F, wall0.getYStart(), 0.01F);
      assertEquals(0.0F, wall0.getXStart(), 0.01F);
      assertEquals(500.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(0.0F, wall0.getXEnd(), 0.01F);
      assertEquals((-2119.738F), wall0.getThickness(), 0.01F);
      assertEquals(1000.0F, wall0.getLength(), 0.01F);
      assertEquals(36525.0F, wall0.getHeight(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(1000.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(0.0F, wall0.getYEnd(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
      
      home0.setCamera(observerCamera0);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.getFurnitureSortedProperty();
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setModified(true);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      Wall wall0 = new Wall(3700.0F, 3700.0F, 376.6429F, 3700L, 3700.0F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(2038.3214F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3323.3572F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertEquals(376.6429F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertNull(wall0.getHeight());
      assertEquals(3323.3572F, wall0.getLength(), 0.01F);
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertNotNull(wall0);
      
      wall0.setYStart(376.6429F);
      assertEquals(376.6429F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(4699.9365F, wall0.getLength(), 0.01F);
      assertEquals(2038.3214F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(376.6429F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4699.9365F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2038.3214F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      
      home0.addWall(wall0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertFalse(home0.isEmpty());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertEquals(376.6429F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(4699.9365F, wall0.getLength(), 0.01F);
      assertEquals(2038.3214F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(376.6429F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4699.9365F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2038.3214F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      home0.deleteWall(wall0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(376.6429F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(4699.9365F, wall0.getLength(), 0.01F);
      assertEquals(2038.3214F, wall0.getXArcCircleCenter(), 0.01F);
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(376.6429F, wall0.getXEnd(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getArcExtent());
      assertNull(wall0.getRightSideColor());
      assertEquals(4699.9365F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeight());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertEquals(2038.3214F, wall0.getYArcCircleCenter(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      ObserverCamera observerCamera0 = home0.getObserverCamera();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(observerCamera0);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      ObserverCamera observerCamera1 = observerCamera0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(0.19634955F, observerCamera1.getPitch(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(170.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera1.getDepth(), 0.01F);
      assertEquals(48.57143F, observerCamera1.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(182.14285F, observerCamera1.getHeight(), 0.01F);
      assertEquals(50.0F, observerCamera1.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(1.0995575F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera1.getYaw(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      assertNotNull(observerCamera1);
      
      home0.setCamera(observerCamera1);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(0.19634955F, observerCamera0.getPitch(), 0.01F);
      assertEquals(5.4977875F, observerCamera0.getYaw(), 0.01F);
      assertFalse(observerCamera0.isFixedSize());
      assertNull(observerCamera0.getName());
      assertEquals(1392409281320L, observerCamera0.getTime());
      assertEquals(Camera.Lens.PINHOLE, observerCamera0.getLens());
      assertEquals(19.428572F, observerCamera0.getDepth(), 0.01F);
      assertEquals(182.14285F, observerCamera0.getHeight(), 0.01F);
      assertEquals(48.57143F, observerCamera0.getWidth(), 0.01F);
      assertEquals(170.0F, observerCamera0.getZ(), 0.01F);
      assertEquals(50.0F, observerCamera0.getX(), 0.01F);
      assertEquals(1.0995575F, observerCamera0.getFieldOfView(), 0.01F);
      assertEquals(50.0F, observerCamera0.getY(), 0.01F);
      assertEquals(0.19634955F, observerCamera1.getPitch(), 0.01F);
      assertNull(observerCamera1.getName());
      assertEquals(170.0F, observerCamera1.getZ(), 0.01F);
      assertEquals(19.428572F, observerCamera1.getDepth(), 0.01F);
      assertEquals(48.57143F, observerCamera1.getWidth(), 0.01F);
      assertEquals(Camera.Lens.PINHOLE, observerCamera1.getLens());
      assertEquals(182.14285F, observerCamera1.getHeight(), 0.01F);
      assertEquals(50.0F, observerCamera1.getX(), 0.01F);
      assertEquals(1392409281320L, observerCamera1.getTime());
      assertEquals(50.0F, observerCamera1.getY(), 0.01F);
      assertFalse(observerCamera1.isFixedSize());
      assertEquals(1.0995575F, observerCamera1.getFieldOfView(), 0.01F);
      assertEquals(5.4977875F, observerCamera1.getYaw(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(observerCamera0.equals((Object)observerCamera1));
      assertFalse(observerCamera1.equals((Object)observerCamera0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(observerCamera0, observerCamera1);
      assertNotSame(observerCamera1, observerCamera0);
      
      home1.getFurnitureSortedProperty();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertTrue(home0.isModified());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isModified());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Home home0 = new Home();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      CollectionListener<DimensionLine> collectionListener0 = (CollectionListener<DimensionLine>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      Label label0 = new Label("Asia/Katmandu", 0.0F, 500.0F);
      assertEquals(500.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Katmandu", label0.getText());
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertNotNull(label0);
      
      boolean boolean0 = label0.intersectsRectangle(2525.635F, 173.0333F, 0.0F, 32.565556F);
      assertFalse(boolean0);
      assertEquals(500.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Katmandu", label0.getText());
      assertEquals(0.0F, label0.getX(), 0.01F);
      
      label0.setAngle(0.0F);
      assertEquals(500.0F, label0.getY(), 0.01F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals("Asia/Katmandu", label0.getText());
      assertEquals(0.0F, label0.getX(), 0.01F);
      
      label0.setY(3679.793F);
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3679.793F, label0.getY(), 0.01F);
      assertEquals("Asia/Katmandu", label0.getText());
      assertEquals(0.0F, label0.getX(), 0.01F);
      
      Label label1 = label0.clone();
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3679.793F, label0.getY(), 0.01F);
      assertEquals("Asia/Katmandu", label0.getText());
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals("Asia/Katmandu", label1.getText());
      assertEquals(3679.793F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(0.0F, label1.getX(), 0.01F);
      assertFalse(label1.equals((Object)label0));
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      assertNotNull(label1);
      
      home0.deleteLabel(label1);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0.0F, label0.getAngle(), 0.01F);
      assertEquals(3679.793F, label0.getY(), 0.01F);
      assertEquals("Asia/Katmandu", label0.getText());
      assertEquals(0.0F, label0.getX(), 0.01F);
      assertEquals("Asia/Katmandu", label1.getText());
      assertEquals(3679.793F, label1.getY(), 0.01F);
      assertEquals(0.0F, label1.getAngle(), 0.01F);
      assertEquals(0.0F, label1.getX(), 0.01F);
      assertFalse(label0.equals((Object)label1));
      assertFalse(label1.equals((Object)label0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(label0, label1);
      assertNotSame(label1, label0);
      
      home0.removeDimensionLinesListener(collectionListener0);
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      List<Room> list0 = home0.getRooms();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list0);
      
      List<HomePieceOfFurniture> list1 = home0.getFurniture();
      assertTrue(home0.isEmpty());
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertFalse(home0.isModified());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(list1);
      
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Wall wall0 = new Wall(3700L, 3700L, 3700L, 3700L, 3700L);
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertNotNull(wall0);
      
      home0.deleteWall(wall0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertNull(wall0.getRightSideColor());
      assertEquals(0.0F, wall0.getRightSideShininess(), 0.01F);
      assertNull(wall0.getHeight());
      assertNull(wall0.getArcExtent());
      assertEquals(3700.0F, wall0.getXArcCircleCenter(), 0.01F);
      assertEquals(0.0F, wall0.getStartPointToEndPointDistance(), 0.01F);
      assertNull(wall0.getHeightAtEnd());
      assertNull(wall0.getLeftSideColor());
      assertEquals(0.0F, wall0.getLength(), 0.01F);
      assertFalse(wall0.isTrapezoidal());
      assertEquals(3700.0F, wall0.getXStart(), 0.01F);
      assertEquals(3700.0F, wall0.getYStart(), 0.01F);
      assertEquals(3700.0F, wall0.getXEnd(), 0.01F);
      assertEquals(3700.0F, wall0.getYArcCircleCenter(), 0.01F);
      assertEquals(3700.0F, wall0.getYEnd(), 0.01F);
      assertEquals(0.0F, wall0.getLeftSideShininess(), 0.01F);
      assertEquals(3700.0F, wall0.getThickness(), 0.01F);
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      Level level0 = new Level("Pacific/Rarotonga", 3700L, 2349.3264F, 2349.3264F);
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(2349.3264F, level0.getHeight(), 0.01F);
      assertEquals(2349.3264F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("Pacific/Rarotonga", level0.getName());
      assertNotNull(level0);
      
      home0.addLevel(level0);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700.0F, level0.getElevation(), 0.01F);
      assertEquals(2349.3264F, level0.getHeight(), 0.01F);
      assertEquals(2349.3264F, level0.getFloorThickness(), 0.01F);
      assertTrue(level0.isVisible());
      assertEquals("Pacific/Rarotonga", level0.getName());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Home home2 = home1.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertNull(home1.getName());
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertTrue(home1.isEmpty());
      assertFalse(home1.isModified());
      assertFalse(home1.isRecovered());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertNull(home2.getName());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isBasePlanLocked());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home2.isModified());
      assertFalse(home2.isRecovered());
      assertFalse(home0.equals((Object)home1));
      assertFalse(home1.equals((Object)home0));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(home1, home2);
      assertNotSame(home1, home0);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      Sash[] sashArray0 = new Sash[8];
      Sash sash0 = new Sash(2349.3264F, 49.25765F, 2349.3264F, 1504.567F, 307.0F);
      assertEquals(2349.3264F, sash0.getWidth(), 0.01F);
      assertEquals(307.0F, sash0.getEndAngle(), 0.01F);
      assertEquals(2349.3264F, sash0.getXAxis(), 0.01F);
      assertEquals(49.25765F, sash0.getYAxis(), 0.01F);
      assertEquals(1504.567F, sash0.getStartAngle(), 0.01F);
      assertNotNull(sash0);
      
      sashArray0[0] = sash0;
      Sash sash1 = new Sash(0.0F, (-804.07117F), 2349.3264F, (-1517.093F), 0.0F);
      assertEquals(0.0F, sash1.getEndAngle(), 0.01F);
      assertEquals(0.0F, sash1.getXAxis(), 0.01F);
      assertEquals((-1517.093F), sash1.getStartAngle(), 0.01F);
      assertEquals((-804.07117F), sash1.getYAxis(), 0.01F);
      assertEquals(2349.3264F, sash1.getWidth(), 0.01F);
      assertFalse(sash1.equals((Object)sash0));
      assertNotNull(sash1);
      
      sashArray0[1] = sash1;
      Sash sash2 = new Sash(10.179722F, 0.0F, (-694.4001F), 0.0F, (-1517.093F));
      assertEquals((-1517.093F), sash2.getEndAngle(), 0.01F);
      assertEquals((-694.4001F), sash2.getWidth(), 0.01F);
      assertEquals(0.0F, sash2.getStartAngle(), 0.01F);
      assertEquals(10.179722F, sash2.getXAxis(), 0.01F);
      assertEquals(0.0F, sash2.getYAxis(), 0.01F);
      assertFalse(sash2.equals((Object)sash0));
      assertFalse(sash2.equals((Object)sash1));
      assertNotNull(sash2);
      
      sashArray0[2] = sash2;
      Sash sash3 = new Sash((-694.4001F), (-97.166664F), 3700L, 0.0F, 49.25765F);
      assertEquals(0.0F, sash3.getStartAngle(), 0.01F);
      assertEquals(49.25765F, sash3.getEndAngle(), 0.01F);
      assertEquals((-97.166664F), sash3.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash3.getWidth(), 0.01F);
      assertEquals((-694.4001F), sash3.getXAxis(), 0.01F);
      assertFalse(sash3.equals((Object)sash0));
      assertFalse(sash3.equals((Object)sash2));
      assertFalse(sash3.equals((Object)sash1));
      assertNotNull(sash3);
      
      sashArray0[3] = sash3;
      Sash sash4 = new Sash(3700L, (-1796.0151F), (-58.6725F), 49.25765F, 543.243F);
      assertEquals((-1796.0151F), sash4.getYAxis(), 0.01F);
      assertEquals((-58.6725F), sash4.getWidth(), 0.01F);
      assertEquals(543.243F, sash4.getEndAngle(), 0.01F);
      assertEquals(49.25765F, sash4.getStartAngle(), 0.01F);
      assertEquals(3700.0F, sash4.getXAxis(), 0.01F);
      assertFalse(sash4.equals((Object)sash3));
      assertFalse(sash4.equals((Object)sash0));
      assertFalse(sash4.equals((Object)sash1));
      assertFalse(sash4.equals((Object)sash2));
      assertNotNull(sash4);
      
      sashArray0[4] = sash4;
      Sash sash5 = new Sash(49.25765F, 1500.0F, (-1796.0151F), 0.0F, 3700L);
      assertEquals((-1796.0151F), sash5.getWidth(), 0.01F);
      assertEquals(1500.0F, sash5.getYAxis(), 0.01F);
      assertEquals(3700.0F, sash5.getEndAngle(), 0.01F);
      assertEquals(49.25765F, sash5.getXAxis(), 0.01F);
      assertEquals(0.0F, sash5.getStartAngle(), 0.01F);
      assertFalse(sash5.equals((Object)sash4));
      assertFalse(sash5.equals((Object)sash2));
      assertFalse(sash5.equals((Object)sash0));
      assertFalse(sash5.equals((Object)sash3));
      assertFalse(sash5.equals((Object)sash1));
      assertNotNull(sash5);
      
      sashArray0[5] = sash5;
      Sash sash6 = new Sash((-58.6725F), 2946.0F, 49.25765F, (-4.25F), 3700L);
      assertEquals(3700.0F, sash6.getEndAngle(), 0.01F);
      assertEquals((-58.6725F), sash6.getXAxis(), 0.01F);
      assertEquals(49.25765F, sash6.getWidth(), 0.01F);
      assertEquals(2946.0F, sash6.getYAxis(), 0.01F);
      assertEquals((-4.25F), sash6.getStartAngle(), 0.01F);
      assertFalse(sash6.equals((Object)sash4));
      assertFalse(sash6.equals((Object)sash1));
      assertFalse(sash6.equals((Object)sash5));
      assertFalse(sash6.equals((Object)sash3));
      assertFalse(sash6.equals((Object)sash2));
      assertFalse(sash6.equals((Object)sash0));
      assertNotNull(sash6);
      
      sashArray0[6] = sash6;
      Sash sash7 = new Sash((-97.166664F), 170.0F, (-804.07117F), 229.4715F, 3431.348F);
      assertEquals(3431.348F, sash7.getEndAngle(), 0.01F);
      assertEquals(170.0F, sash7.getYAxis(), 0.01F);
      assertEquals((-97.166664F), sash7.getXAxis(), 0.01F);
      assertEquals((-804.07117F), sash7.getWidth(), 0.01F);
      assertEquals(229.4715F, sash7.getStartAngle(), 0.01F);
      assertFalse(sash7.equals((Object)sash1));
      assertFalse(sash7.equals((Object)sash0));
      assertFalse(sash7.equals((Object)sash4));
      assertFalse(sash7.equals((Object)sash5));
      assertFalse(sash7.equals((Object)sash3));
      assertFalse(sash7.equals((Object)sash6));
      assertFalse(sash7.equals((Object)sash2));
      assertNotNull(sash7);
      
      sashArray0[7] = sash7;
      float[][] floatArray0 = new float[7][5];
      float[] floatArray1 = new float[7];
      floatArray1[0] = (-825.0968F);
      floatArray1[1] = (-97.166664F);
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-58.6725F);
      floatArray1[4] = 229.4715F;
      floatArray1[5] = 3431.348F;
      floatArray1[6] = 0.0F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[9];
      assertFalse(floatArray2.equals((Object)floatArray1));
      
      floatArray2[0] = 1500.0F;
      floatArray2[1] = 0.0F;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = 307.0F;
      floatArray2[4] = 1500.0F;
      floatArray2[5] = (-804.07117F);
      floatArray2[6] = 2349.3264F;
      floatArray2[7] = (float) 3700L;
      floatArray2[8] = 0.0F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      assertFalse(floatArray3.equals((Object)floatArray1));
      assertFalse(floatArray3.equals((Object)floatArray2));
      
      floatArray3[0] = (float) 3700L;
      floatArray3[1] = 170.0F;
      floatArray3[2] = (float) 3700L;
      floatArray3[3] = 1504.567F;
      floatArray3[4] = (-825.0968F);
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[5];
      assertFalse(floatArray4.equals((Object)floatArray3));
      assertFalse(floatArray4.equals((Object)floatArray2));
      assertFalse(floatArray4.equals((Object)floatArray1));
      
      floatArray4[0] = (float) 3700L;
      floatArray4[1] = 261.8178F;
      floatArray4[2] = 543.243F;
      floatArray4[3] = 2349.3264F;
      floatArray4[4] = (-694.4001F);
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[4];
      assertFalse(floatArray5.equals((Object)floatArray2));
      assertFalse(floatArray5.equals((Object)floatArray3));
      assertFalse(floatArray5.equals((Object)floatArray4));
      assertFalse(floatArray5.equals((Object)floatArray1));
      
      floatArray5[0] = 170.0F;
      floatArray5[1] = 261.8178F;
      floatArray5[2] = (-97.166664F);
      floatArray5[3] = (float) 3700L;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[3];
      assertFalse(floatArray6.equals((Object)floatArray3));
      assertFalse(floatArray6.equals((Object)floatArray1));
      assertFalse(floatArray6.equals((Object)floatArray4));
      assertFalse(floatArray6.equals((Object)floatArray2));
      assertFalse(floatArray6.equals((Object)floatArray5));
      
      floatArray6[0] = (-58.6725F);
      floatArray6[1] = (float) 3700L;
      floatArray6[2] = (-804.07117F);
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[4];
      assertFalse(floatArray7.equals((Object)floatArray4));
      assertFalse(floatArray7.equals((Object)floatArray6));
      assertFalse(floatArray7.equals((Object)floatArray1));
      assertFalse(floatArray7.equals((Object)floatArray2));
      assertFalse(floatArray7.equals((Object)floatArray5));
      assertFalse(floatArray7.equals((Object)floatArray3));
      
      floatArray7[0] = 2946.0F;
      floatArray7[1] = 307.0F;
      floatArray7[2] = 0.0F;
      floatArray7[3] = (-97.166664F);
      floatArray0[6] = floatArray7;
      BigDecimal bigDecimal0 = BigDecimal.TEN;
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertNotNull(bigDecimal0);
      
      CatalogDoorOrWindow catalogDoorOrWindow0 = new CatalogDoorOrWindow(";", (String) null, "D", (Content) null, (Content) null, (Content) null, 3700L, 1504.567F, 0.0F, 0.0F, true, 49.25765F, 0.0F, sashArray0, floatArray0, "yrmYw;&.F", true, bigDecimal0, bigDecimal0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1504.567F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("D", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(49.25765F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(";", catalogDoorOrWindow0.getId());
      assertEquals("yrmYw;&.F", catalogDoorOrWindow0.getCreator());
      assertEquals(8, sashArray0.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(catalogDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow0 = new HomeDoorOrWindow(catalogDoorOrWindow0);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1504.567F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("D", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(49.25765F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(";", catalogDoorOrWindow0.getId());
      assertEquals("yrmYw;&.F", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1504.567F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(";", homeDoorOrWindow0.getCatalogId());
      assertEquals("D", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(49.25765F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3700.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(752.2835F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(8, sashArray0.length);
      assertEquals(7, floatArray0.length);
      assertNotNull(homeDoorOrWindow0);
      
      HomeDoorOrWindow homeDoorOrWindow1 = homeDoorOrWindow0.clone();
      assertEquals("D", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(49.25765F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(752.2835F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(1504.567F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(";", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1850.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3700.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1504.567F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("D", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(49.25765F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(";", catalogDoorOrWindow0.getId());
      assertEquals("yrmYw;&.F", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1504.567F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(";", homeDoorOrWindow0.getCatalogId());
      assertEquals("D", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(49.25765F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3700.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(752.2835F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(8, sashArray0.length);
      assertEquals(7, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
      assertNotNull(homeDoorOrWindow1);
      
      home0.deletePieceOfFurniture(homeDoorOrWindow1);
      assertEquals("D", homeDoorOrWindow1.getDescription());
      assertNull(homeDoorOrWindow1.getName());
      assertEquals(0.0F, homeDoorOrWindow1.getNameXOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getNameAngle(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getElevation(), 0.01F);
      assertEquals(49.25765F, homeDoorOrWindow1.getWallThickness(), 0.01F);
      assertEquals(752.2835F, homeDoorOrWindow1.getY(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDoorOrWindow());
      assertTrue(homeDoorOrWindow1.isResizable());
      assertNull(homeDoorOrWindow1.getStaircaseCutOutShape());
      assertNull(homeDoorOrWindow1.getShininess());
      assertEquals(1504.567F, homeDoorOrWindow1.getDepth(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getHeight(), 0.01F);
      assertTrue(homeDoorOrWindow1.isMovable());
      assertEquals(0.0F, homeDoorOrWindow1.getWallDistance(), 0.01F);
      assertFalse(homeDoorOrWindow1.isNameVisible());
      assertNull(homeDoorOrWindow1.getCurrency());
      assertEquals(";", homeDoorOrWindow1.getCatalogId());
      assertNull(homeDoorOrWindow1.getColor());
      assertTrue(homeDoorOrWindow1.isVisible());
      assertFalse(homeDoorOrWindow1.isModelMirrored());
      assertEquals(0.0F, homeDoorOrWindow1.getNameYOffset(), 0.01F);
      assertTrue(homeDoorOrWindow1.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow1.getGroundElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow1.getAngle(), 0.01F);
      assertTrue(homeDoorOrWindow1.isTexturable());
      assertEquals(1850.0F, homeDoorOrWindow1.getX(), 0.01F);
      assertFalse(homeDoorOrWindow1.isBackFaceShown());
      assertFalse(homeDoorOrWindow1.isBoundToWall());
      assertEquals(3700.0F, homeDoorOrWindow1.getWidth(), 0.01F);
      assertNull(home0.getFurnitureSortedProperty());
      assertNull(home0.getName());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isBasePlanLocked());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals((short)10, bigDecimal0.shortValue());
      assertEquals((byte)10, bigDecimal0.byteValue());
      assertEquals(1504.567F, catalogDoorOrWindow0.getDepth(), 0.01F);
      assertEquals(0.3926991F, catalogDoorOrWindow0.getIconYaw(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getElevation(), 0.01F);
      assertNull(catalogDoorOrWindow0.getName());
      assertNull(catalogDoorOrWindow0.getGrade());
      assertFalse(catalogDoorOrWindow0.isModifiable());
      assertEquals("D", catalogDoorOrWindow0.getDescription());
      assertTrue(catalogDoorOrWindow0.isResizable());
      assertEquals(0.0F, catalogDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, catalogDoorOrWindow0.getWallDistance(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDeformable());
      assertFalse(catalogDoorOrWindow0.isBackFaceShown());
      assertEquals(3700.0F, catalogDoorOrWindow0.getWidth(), 0.01F);
      assertEquals(49.25765F, catalogDoorOrWindow0.getWallThickness(), 0.01F);
      assertTrue(catalogDoorOrWindow0.isDoorOrWindow());
      assertNull(catalogDoorOrWindow0.getCreationDate());
      assertTrue(catalogDoorOrWindow0.isProportional());
      assertTrue(catalogDoorOrWindow0.isTexturable());
      assertNull(catalogDoorOrWindow0.getInformation());
      assertNull(catalogDoorOrWindow0.getStaircaseCutOutShape());
      assertTrue(catalogDoorOrWindow0.isMovable());
      assertNull(catalogDoorOrWindow0.getColor());
      assertNull(catalogDoorOrWindow0.getCurrency());
      assertEquals(";", catalogDoorOrWindow0.getId());
      assertEquals("yrmYw;&.F", catalogDoorOrWindow0.getCreator());
      assertEquals(0.0F, homeDoorOrWindow0.getHeight(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getWallDistance(), 0.01F);
      assertEquals(1504.567F, homeDoorOrWindow0.getDepth(), 0.01F);
      assertNull(homeDoorOrWindow0.getShininess());
      assertTrue(homeDoorOrWindow0.isMovable());
      assertTrue(homeDoorOrWindow0.isVisible());
      assertTrue(homeDoorOrWindow0.isDoorOrWindow());
      assertFalse(homeDoorOrWindow0.isBoundToWall());
      assertNull(homeDoorOrWindow0.getCurrency());
      assertNull(homeDoorOrWindow0.getColor());
      assertEquals(0.0F, homeDoorOrWindow0.getNameYOffset(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getGroundElevation(), 0.01F);
      assertTrue(homeDoorOrWindow0.isTexturable());
      assertEquals(0.0F, homeDoorOrWindow0.getAngle(), 0.01F);
      assertFalse(homeDoorOrWindow0.isModelMirrored());
      assertFalse(homeDoorOrWindow0.isBackFaceShown());
      assertEquals(";", homeDoorOrWindow0.getCatalogId());
      assertEquals("D", homeDoorOrWindow0.getDescription());
      assertNull(homeDoorOrWindow0.getName());
      assertFalse(homeDoorOrWindow0.isNameVisible());
      assertEquals(49.25765F, homeDoorOrWindow0.getWallThickness(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameAngle(), 0.01F);
      assertNull(homeDoorOrWindow0.getStaircaseCutOutShape());
      assertEquals(3700.0F, homeDoorOrWindow0.getWidth(), 0.01F);
      assertTrue(homeDoorOrWindow0.isResizable());
      assertTrue(homeDoorOrWindow0.isDeformable());
      assertEquals(0.0F, homeDoorOrWindow0.getElevation(), 0.01F);
      assertEquals(0.0F, homeDoorOrWindow0.getNameXOffset(), 0.01F);
      assertEquals(1850.0F, homeDoorOrWindow0.getX(), 0.01F);
      assertEquals(752.2835F, homeDoorOrWindow0.getY(), 0.01F);
      assertEquals(8, sashArray0.length);
      assertEquals(7, floatArray0.length);
      assertFalse(homeDoorOrWindow1.equals((Object)homeDoorOrWindow0));
      assertFalse(home0.equals((Object)home1));
      assertFalse(home0.equals((Object)home2));
      assertFalse(homeDoorOrWindow0.equals((Object)homeDoorOrWindow1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(homeDoorOrWindow1, homeDoorOrWindow0);
      assertNotSame(home0, home1);
      assertNotSame(home0, home2);
      assertNotSame(homeDoorOrWindow0, homeDoorOrWindow1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Home home0 = new Home();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      home0.setSelectedLevel((Level) null);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
      
      HomeEnvironment homeEnvironment0 = home0.getEnvironment();
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(0.0F, homeEnvironment0.getSubpartSizeUnderLight(), 0.01F);
      assertEquals(0.0F, homeEnvironment0.getWallsAlpha(), 0.01F);
      assertEquals(320, homeEnvironment0.getVideoWidth());
      assertEquals(400, homeEnvironment0.getPhotoWidth());
      assertTrue(homeEnvironment0.isObserverCameraElevationAdjusted());
      assertEquals(AspectRatio.RATIO_4_3, homeEnvironment0.getVideoAspectRatio());
      assertEquals(25, homeEnvironment0.getVideoFrameRate());
      assertEquals(11053224, homeEnvironment0.getGroundColor());
      assertEquals(300, homeEnvironment0.getPhotoHeight());
      assertEquals(13427964, homeEnvironment0.getSkyColor());
      assertEquals(240, homeEnvironment0.getVideoHeight());
      assertEquals(0, homeEnvironment0.getPhotoQuality());
      assertFalse(homeEnvironment0.isAllLevelsVisible());
      assertEquals(AspectRatio.VIEW_3D_RATIO, homeEnvironment0.getPhotoAspectRatio());
      assertEquals(13684944, homeEnvironment0.getLightColor());
      assertEquals(HomeEnvironment.DrawingMode.FILL, homeEnvironment0.getDrawingMode());
      assertEquals(13684944, homeEnvironment0.getCeillingLightColor());
      assertEquals(0, homeEnvironment0.getVideoQuality());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(homeEnvironment0);
      
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertFalse(home0.isModified());
      assertFalse(home0.isRecovered());
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isBasePlanLocked());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertNull(home0.getName());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertEquals(3700L, home0.getVersion());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      boolean boolean0 = home0.isModified();
      assertFalse(boolean0);
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertTrue(home0.isEmpty());
      assertFalse(home0.isRecovered());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Home home0 = new Home();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotNull(home0);
      
      Home home1 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home1.isModified());
      assertEquals(3700L, home1.getVersion());
      assertFalse(home1.isBasePlanLocked());
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
      assertNull(home1.getFurnitureSortedProperty());
      assertFalse(home1.isRecovered());
      assertTrue(home1.isEmpty());
      assertFalse(home1.isFurnitureDescendingSorted());
      assertNull(home1.getName());
      assertFalse(home1.equals((Object)home0));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home1);
      assertNotSame(home1, home0);
      assertNotNull(home1);
      
      Home home2 = home0.clone();
      assertNull(home0.getFurnitureSortedProperty());
      assertFalse(home0.isFurnitureDescendingSorted());
      assertNull(home0.getName());
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
      assertFalse(home0.isRecovered());
      assertTrue(home0.isEmpty());
      assertEquals(3700L, home0.getVersion());
      assertFalse(home0.isBasePlanLocked());
      assertFalse(home0.isModified());
      assertFalse(home2.isModified());
      assertEquals(3700L, home2.getVersion());
      assertFalse(home2.isRecovered());
      assertTrue(home2.isEmpty());
      assertNull(home2.getFurnitureSortedProperty());
      assertFalse(home2.isFurnitureDescendingSorted());
      assertFalse(home2.isBasePlanLocked());
      assertNull(home2.getName());
      assertEquals(250.0F, home2.getWallHeight(), 0.01F);
      assertFalse(home0.equals((Object)home1));
      assertFalse(home2.equals((Object)home0));
      assertFalse(home2.equals((Object)home1));
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertEquals(3700L, Home.CURRENT_VERSION);
      assertNotSame(home0, home2);
      assertNotSame(home0, home1);
      assertNotSame(home2, home0);
      assertNotSame(home2, home1);
      assertNotNull(home2);
      
      // Undeclared exception!
      try { 
        Home.getWallsSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Home home0 = new Home();
      home0.setModified(true);
      LinkedList<Camera> linkedList0 = new LinkedList<Camera>();
      home0.setStoredCameras(linkedList0);
      float[][] floatArray0 = new float[2][9];
      float[] floatArray1 = new float[0];
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[2];
      floatArray2[0] = (float) 3700L;
      floatArray2[1] = (float) 3700L;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      home0.setName("");
      Room room1 = room0.clone();
      home0.addRoom(room1);
      // Undeclared exception!
      try { 
        home0.setStoredCameras((List<Camera>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Home home0 = new Home();
      home0.setName("$bC{T&h");
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Home home0 = new Home(826.0F);
      home0.setSelectedLevel((Level) null);
      home0.getLabels();
      home0.getCompass();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.CATALOG_ID;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      home0.setName((String) null);
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Home home0 = new Home();
      List<Room> list0 = home0.getRooms();
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty0 = HomePieceOfFurniture.SortableProperty.Y;
      home0.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty0);
      Home home1 = home0.clone();
      home0.setBasePlanLocked(true);
      HomePieceOfFurniture.SortableProperty homePieceOfFurniture_SortableProperty1 = HomePieceOfFurniture.SortableProperty.ELEVATION;
      SelectionListener selectionListener0 = mock(SelectionListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      home0.removeSelectionListener(selectionListener0);
      home1.setFurnitureSortedProperty(homePieceOfFurniture_SortableProperty1);
      home0.isRecovered();
      Home.getRoomsSubList(list0);
      long long0 = home1.getVersion();
      assertTrue(home0.isBasePlanLocked());
      assertEquals(3700L, long0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Home home0 = new Home(0.0F);
      Home.Property home_Property0 = Home.Property.MODIFIED;
      home0.getCamera();
      home0.addPropertyChangeListener(home_Property0, (PropertyChangeListener) null);
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addRoomsListener(collectionListener0);
      Level level0 = new Level("", 0.0F, 0.0F, (-2092.7112F));
      home0.setSelectedLevel(level0);
      DimensionLine dimensionLine0 = new DimensionLine(0.0F, 1169.289F, 3700L, 3700L, 1207.3F);
      dimensionLine0.move(0.7853982F, (-4.616667F));
      home0.addDimensionLine(dimensionLine0);
      assertEquals(0.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      // Undeclared exception!
      try { 
        Home.getDimensionLinesSubList((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Home home0 = new Home(802.1F);
      home0.getFurnitureVisibleProperties();
      Camera camera0 = home0.getCamera();
      Camera camera1 = camera0.clone();
      home0.setCamera(camera1);
      home0.setFurnitureDescendingSorted(true);
      Home home1 = home0.clone();
      ObserverCamera observerCamera0 = new ObserverCamera(3700L, 802.1F, 802.1F, 3700L, 3700L, 3700L);
      observerCamera0.clone();
      Home home2 = new Home();
      Camera camera2 = home2.getTopCamera();
      home1.setCamera(camera2);
      home0.getFurnitureSortedProperty();
      assertTrue(home0.isFurnitureDescendingSorted());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Home home0 = new Home();
      Level level0 = new Level((String) null, 3700L, 3700L, 3700L);
      home0.setSelectedLevel(level0);
      home0.setBasePlanLocked(true);
      assertTrue(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      float float0 = (-1609.0F);
      Home home0 = new Home((-1609.0F));
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      home0.setName("SAEa)");
      home0.isModified();
      // Undeclared exception!
      try { 
        home0.addLabel((Label) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Home home0 = new Home();
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setFurnitureVisibleProperties((List<HomePieceOfFurniture.SortableProperty>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Home home0 = new Home();
      home0.getName();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      linkedList0.add((Room) null);
      List<HomePieceOfFurniture> list0 = Home.getFurnitureSubList(linkedList0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Home home0 = new Home();
      home0.setModified(true);
      Wall wall0 = new Wall((-10.981247F), 3700L, (-10.981247F), (-10.981247F), (-10.981247F));
      home0.deleteWall(wall0);
      home0.deleteWall(wall0);
      Home home1 = home0.clone();
      home1.getFurnitureSortedProperty();
      home0.getSelectedLevel();
      home0.deleteLevel((Level) null);
      assertTrue(home0.isModified());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Home home0 = new Home(826.0F);
      home0.setSelectedLevel((Level) null);
      home0.getLabels();
      home0.getCompass();
      home0.setFurnitureSortedProperty((HomePieceOfFurniture.SortableProperty) null);
      home0.setName((String) null);
      CollectionListener<Level> collectionListener0 = (CollectionListener<Level>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.addLevelsListener(collectionListener0);
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<HomePieceOfFurniture> collectionListener0 = (CollectionListener<HomePieceOfFurniture>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeFurnitureListener(collectionListener0);
      LinkedList<Selectable> linkedList0 = new LinkedList<Selectable>();
      assertEquals(0, linkedList0.size());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Home home0 = new Home((-149.0F));
      // Undeclared exception!
      try { 
        home0.addPieceOfFurniture((HomePieceOfFurniture) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Home home0 = new Home();
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      float[][] floatArray0 = new float[2][4];
      float[] floatArray1 = new float[8];
      floatArray1[0] = 0.0F;
      floatArray1[1] = (-2166.5583F);
      floatArray1[2] = (float) 3700L;
      floatArray1[3] = (-2166.5583F);
      floatArray1[7] = (float) 3700L;
      floatArray1[5] = (-2166.5583F);
      floatArray1[6] = 0.0F;
      floatArray1[7] = (-2166.5583F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = (-2166.5583F);
      floatArray2[1] = 0.0F;
      floatArray2[2] = 0.0F;
      floatArray2[3] = 0.0F;
      floatArray0[1] = floatArray2;
      Room room0 = new Room(floatArray0);
      linkedList0.add(room0);
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      Wall wall0 = new Wall((-2166.5583F), (-100.0F), 36.763054F, (-1.0F), 0.0F);
      home0.setBasePlanLocked(true);
      List<Room> list1 = Home.getRoomsSubList(list0);
      home0.setSelectedItems(list1);
      LinkedList<HomePieceOfFurniture.SortableProperty> linkedList1 = new LinkedList<HomePieceOfFurniture.SortableProperty>();
      home0.setFurnitureVisibleProperties(linkedList1);
      assertTrue(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Home home0 = new Home();
      // Undeclared exception!
      try { 
        home0.setSelectedItems((List<? extends Selectable>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Home home0 = new Home();
      float[][] floatArray0 = new float[9][9];
      float[] floatArray1 = new float[2];
      floatArray1[0] = (float) 3700L;
      floatArray0[1] = floatArray1;
      Room room0 = new Room(floatArray0);
      Room room1 = room0.clone();
      home0.addRoom(room1);
      Room room2 = new Room(floatArray0);
      room1.clone();
      home0.addRoom(room0);
      home0.deleteRoom(room1);
      home0.getFurniture();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Wall> collectionListener0 = (CollectionListener<Wall>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.getStoredCameras();
      home0.getSelectedLevel();
      // Undeclared exception!
      try { 
        home0.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Home home0 = new Home(826.0F);
      home0.setSelectedLevel((Level) null);
      home0.getLabels();
      Label label0 = new Label("{GYM^JOz", 3700L, (-1893.64F));
      home0.addLabel(label0);
      Wall wall0 = new Wall(3700L, (-1893.64F), 48.4F, 826.0F, 1.0F);
      Integer integer0 = new Integer(629);
      wall0.setLeftSideColor(integer0);
      home0.deleteWall(wall0);
      home0.setBasePlanLocked(true);
      home0.getPrint();
      assertTrue(home0.isBasePlanLocked());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Home home0 = new Home();
      home0.deletePieceOfFurniture((HomePieceOfFurniture) null);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Home home0 = new Home();
      Home.Property home_Property0 = Home.Property.BACKGROUND_IMAGE;
      PropertyChangeListener propertyChangeListener0 = mock(PropertyChangeListener.class, new ViolatedAssumptionAnswer());
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("STORED_CAMERAS", propertyChangeListener0);
      home0.removePropertyChangeListener(home_Property0, propertyChangeListenerProxy0);
      home0.setRecovered(false);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Home home0 = new Home(5.55F);
      float[][] floatArray0 = new float[7][5];
      float[] floatArray1 = new float[7];
      floatArray1[0] = 5.55F;
      floatArray1[1] = (float) 3700L;
      floatArray1[2] = 5.55F;
      floatArray1[3] = (float) 3700L;
      floatArray1[4] = (float) 3700L;
      floatArray1[5] = (float) 3700L;
      floatArray1[6] = 5.55F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[3];
      floatArray2[0] = 5.55F;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[5];
      floatArray3[0] = 5.55F;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (float) 3700L;
      floatArray3[3] = (float) 3700L;
      floatArray3[4] = 5.55F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[9];
      floatArray4[0] = 5.55F;
      floatArray4[1] = (float) 3700L;
      floatArray4[2] = (float) 3700L;
      floatArray4[3] = 5.55F;
      floatArray4[4] = 5.55F;
      floatArray4[5] = 5.55F;
      floatArray4[6] = 5.55F;
      floatArray4[7] = (float) 3700L;
      floatArray4[8] = (float) 3700L;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = (float) 3700L;
      floatArray5[1] = (float) 3700L;
      floatArray5[2] = 5.55F;
      floatArray5[3] = (float) 3700L;
      floatArray5[4] = (float) 3700L;
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[7];
      floatArray6[0] = (float) 3700L;
      floatArray6[1] = 5.55F;
      floatArray6[2] = 5.55F;
      floatArray6[3] = (float) 3700L;
      floatArray6[4] = 5.55F;
      floatArray6[5] = 5.55F;
      floatArray6[6] = 5.55F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[2];
      floatArray7[0] = 5.55F;
      floatArray7[1] = (float) 3700L;
      floatArray0[6] = floatArray7;
      Room room0 = new Room(floatArray0);
      home0.deleteRoom(room0);
      home0.addFurnitureListener((CollectionListener<HomePieceOfFurniture>) null);
      assertEquals(5.55F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Home home0 = new Home();
      ObserverCamera observerCamera0 = new ObserverCamera(0.0F, (-221.52872F), (-221.52872F), (-221.52872F), (-221.52872F), (-221.52872F));
      home0.setCamera(observerCamera0);
      Home home1 = home0.clone();
      boolean boolean0 = home1.isEmpty();
      assertTrue(boolean0);
      assertEquals(250.0F, home1.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Home home0 = new Home();
      home0.getEnvironment();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Home home0 = new Home((-1686.671F));
      LinkedList<Room> linkedList0 = new LinkedList<Room>();
      float[][] floatArray0 = new float[7][0];
      float[] floatArray1 = new float[4];
      floatArray1[0] = 0.0F;
      floatArray1[1] = 0.0F;
      floatArray1[2] = 0.0F;
      floatArray1[3] = (-1686.671F);
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 0.0F;
      floatArray2[1] = (float) 3700L;
      floatArray2[2] = (-2166.5583F);
      floatArray2[3] = (float) 3700L;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = (-2166.5583F);
      floatArray3[1] = 0.0F;
      floatArray3[2] = 0.0F;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 0.0F;
      floatArray4[1] = 0.0F;
      floatArray4[2] = (-1686.671F);
      floatArray4[3] = (-1686.671F);
      floatArray4[4] = 0.0F;
      floatArray4[5] = 0.0F;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[5];
      floatArray5[0] = (float) 3700L;
      floatArray5[1] = 0.0F;
      floatArray5[2] = 0.0F;
      floatArray5[3] = 0.0F;
      floatArray5[4] = (-2166.5583F);
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[2];
      floatArray6[0] = (float) 3700L;
      floatArray6[1] = 0.0F;
      floatArray0[5] = floatArray6;
      float[] floatArray7 = new float[5];
      floatArray7[0] = 0.0F;
      floatArray7[1] = (-1686.671F);
      floatArray7[2] = 0.0F;
      floatArray7[3] = 0.0F;
      floatArray7[4] = 0.0F;
      floatArray0[6] = floatArray7;
      Room room0 = new Room(floatArray0);
      linkedList0.add(room0);
      Class<HomeDoorOrWindow> class0 = HomeDoorOrWindow.class;
      List<HomeDoorOrWindow> list0 = Home.getSubList((List<? extends Selectable>) linkedList0, class0);
      List<Label> list1 = Home.getLabelsSubList(list0);
      assertTrue(list1.isEmpty());
      
      Label label0 = new Label("Etc/GMT+5", 3700L, 0.0F);
      label0.setY(0.0F);
      label0.move(0.0F, 0.0F);
      Label label1 = label0.clone();
      home0.deleteLabel(label1);
      home0.removeWallsListener((CollectionListener<Wall>) null);
      home0.isBasePlanLocked();
      assertEquals((-1686.671F), home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Home home0 = new Home();
      CollectionListener<Room> collectionListener0 = (CollectionListener<Room>) mock(CollectionListener.class, new ViolatedAssumptionAnswer());
      home0.removeRoomsListener(collectionListener0);
      boolean boolean0 = home0.isEmpty();
      assertTrue(boolean0);
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Home home0 = new Home();
      Home home1 = home0.clone();
      home1.setVisualProperty("Africa/Asmera", "Africa/Asmera");
      home0.getSelectedItems();
      Home home2 = new Home(3700L);
      home2.setBasePlanLocked(false);
      assertEquals(3700.0F, home2.getWallHeight(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Home home0 = new Home();
      Home home1 = home0.clone();
      Wall wall0 = new Wall(3700L, 268.9522F, 2459.4194F, 104.228584F, 3700L);
      float[][] floatArray0 = new float[6][1];
      float[] floatArray1 = new float[1];
      floatArray1[0] = 1529.157F;
      floatArray0[0] = floatArray1;
      float[] floatArray2 = new float[4];
      floatArray2[0] = 1529.157F;
      floatArray2[1] = 1529.157F;
      floatArray2[2] = (float) 3700L;
      floatArray2[3] = 104.228584F;
      floatArray0[1] = floatArray2;
      float[] floatArray3 = new float[3];
      floatArray3[0] = 691.763F;
      floatArray3[1] = (float) 3700L;
      floatArray3[2] = (float) 3700L;
      floatArray0[2] = floatArray3;
      float[] floatArray4 = new float[6];
      floatArray4[0] = 2459.4194F;
      floatArray4[1] = (float) 3700L;
      floatArray4[2] = 104.228584F;
      floatArray4[3] = 2459.4194F;
      floatArray4[4] = 104.228584F;
      floatArray4[5] = (float) 3700L;
      floatArray0[3] = floatArray4;
      float[] floatArray5 = new float[0];
      floatArray0[4] = floatArray5;
      float[] floatArray6 = new float[5];
      floatArray6[0] = (float) 3700L;
      floatArray6[1] = (float) 3700L;
      floatArray6[2] = 1529.157F;
      floatArray6[3] = (float) 3700L;
      floatArray6[4] = (-2814.488F);
      floatArray0[5] = floatArray6;
      Room room0 = new Room(floatArray0);
      home0.addRoom(room0, 0);
      Wall wall1 = wall0.clone();
      wall1.getLevel();
      // Undeclared exception!
      try { 
        home1.addLevel((Level) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.eteks.sweethome3d.model.Home$3", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Home home0 = new Home();
      home0.isRecovered();
      assertEquals(250.0F, home0.getWallHeight(), 0.01F);
  }
}

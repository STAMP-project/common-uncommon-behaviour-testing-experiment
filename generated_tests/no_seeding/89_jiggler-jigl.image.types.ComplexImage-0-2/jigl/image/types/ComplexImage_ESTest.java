/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 23:38:02 GMT 2019
 */

package jigl.image.types;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.awt.image.BufferedImage;
import java.awt.image.ImageProducer;
import java.util.NoSuchElementException;
import jigl.image.ROI;
import jigl.image.types.ComplexImage;
import jigl.image.types.RealGrayImage;
import jigl.math.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ComplexImage_ESTest extends ComplexImage_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      int int0 = 255;
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.clear();
      ROI rOI0 = new ROI();
      complexImage0.divide(complexImage1, rOI0, rOI0);
      complexImage0.getJavaImage();
      complexImage0.diff(complexImage0);
      complexImage0.max();
      int int1 = 2664;
      int int2 = (-111);
      // Undeclared exception!
      try { 
        complexImage0.getImag((-111), (-111));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.phaseImage();
      ROI rOI0 = new ROI();
      complexImage0.real();
      complexImage0.phaseImage();
      ComplexImage complexImage1 = complexImage0.copy();
      ROI rOI1 = new ROI();
      // Undeclared exception!
      try { 
        complexImage1.copy(rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 188);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      // Undeclared exception!
      try { 
        complexImage1.divide(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ROI rOI0 = new ROI(0, 0, 0, 0);
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      complexImage1.magnitudeImage();
      complexImage1.multiply(2854.0F, 993.698F);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.divide((-1195.8121F), (-1195.8121F));
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ROI rOI0 = new ROI();
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      ComplexImage complexImage2 = complexImage0.clear();
      complexImage2.phaseImage();
      ComplexImage complexImage3 = complexImage2.copy();
      ROI rOI0 = new ROI();
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      complexImage1.magnitudeImage();
      ROI rOI1 = new ROI(0, 255, (-1), (-1782));
      // Undeclared exception!
      try { 
        complexImage4.subtract((float) 1, (float) 255, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1782
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      int int0 = 1;
      int int1 = 2077;
      ComplexImage complexImage2 = complexImage1.addbuffer(1, 2077, (float) 0, (-32768.0F));
      complexImage0.clear();
      complexImage0.getMagnitudeImage();
      complexImage1.phaseImage();
      // Undeclared exception!
      complexImage2.copy();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = new ComplexImage(0, 1);
      RealGrayImage realGrayImage0 = complexImage0.real();
      complexImage1.real = realGrayImage0;
      complexImage1.setImag(realGrayImage0);
      // Undeclared exception!
      try { 
        complexImage1.setImaginary(1, 16, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      ComplexImage complexImage1 = new ComplexImage(1, 0);
      complexImage1.phaseImage();
      ComplexImage complexImage2 = complexImage1.copy();
      ROI rOI0 = new ROI();
      complexImage1.min();
      complexImage0.set(0, 1, (-3440.7292F), (float) 1);
      // Undeclared exception!
      try { 
        complexImage2.set(0, 232, (-3440.7292F), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 232
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.clear();
      ROI rOI0 = new ROI();
      complexImage0.subtract(complexImage1);
      ROI rOI1 = new ROI();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.phaseImage();
      ComplexImage complexImage2 = complexImage1.copy();
      ROI rOI0 = new ROI();
      complexImage1.min();
      complexImage0.set(0, 1, (-3440.7F), (float) 1);
      ROI rOI1 = new ROI((-1628), (-2609), 229, 234);
      complexImage1.divide((float) 0, (float) 232, rOI0);
      // Undeclared exception!
      try { 
        complexImage2.setReal((-3729), 6113, (-1698.751F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.clear();
      ROI rOI0 = new ROI();
      complexImage0.copy(rOI0);
      complexImage1.set(0, 1, (float) 0, (float) 1);
      ComplexImage complexImage2 = complexImage1.add(993.698F, (float) 1);
      complexImage2.magnitudeImage();
      complexImage2.multiply((float) 255, (float) 1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.setReal((RealGrayImage) null);
      ROI rOI0 = new ROI(3205, (-1782), 3205, 3205);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ROI rOI0 = new ROI((-16), 189, 189, (-16));
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(194, 179);
      complexImage0.multiply(complexImage1);
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      ROI rOI0 = new ROI();
      complexImage1.max(rOI0);
      complexImage0.divide((float) 1, 1382.154F);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      int int0 = (-3424);
      ROI rOI0 = new ROI(0, 0, (-3424), 65);
      int int1 = (-2605);
      int int2 = 1261;
      rOI0.setROI((-2605), 1, (-744), 1261);
      // Undeclared exception!
      try { 
        complexImage0.multiply(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(1191, 909);
      // Undeclared exception!
      try { 
        complexImage1.getImag((-706), 1191);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      complexImage0.imag();
      complexImage0.setImag((RealGrayImage) null);
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(191, 191);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      int int0 = 0;
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int1 = (-2081);
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, (-2081), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      ROI rOI1 = new ROI();
      rOI1.setROI(1, (-486), 239, (-486));
      complexImage0.phaseImage();
      complexImage0.subtract(complexImage0);
      complexImage0.imaginary();
      complexImage0.divide(complexImage0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage0.getMagnitudeImage();
      ROI rOI0 = new ROI();
      complexImage0.min(rOI0);
      // Undeclared exception!
      try { 
        complexImage1.setReal(220, 220, (float) 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(827, 1);
      ROI rOI0 = null;
      // Undeclared exception!
      try { 
        complexImage0.copy((ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(9, 9);
      ComplexImage complexImage1 = complexImage0.clear();
      ROI rOI0 = new ROI();
      complexImage1.max(rOI0);
      ROI rOI1 = new ROI(9, 255, 765, 205);
      // Undeclared exception!
      try { 
        complexImage0.divide(255, 2796, 0.0F, (float) 255, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      complexImage1.set(0, 1, (float) 0, (float) 1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.add(993.698F, (float) 1);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      complexImage0.add(0, 0, 450.0F, 423.4F);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      complexImage0.phaseImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      ComplexImage complexImage2 = complexImage0.clear();
      complexImage2.phaseImage();
      ComplexImage complexImage3 = complexImage2.copy();
      ROI rOI0 = new ROI();
      complexImage3.copy(rOI0);
      complexImage1.magnitudeImage();
      // Undeclared exception!
      try { 
        complexImage1.add((-32768.0F), 1687.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      ComplexImage complexImage2 = complexImage0.clear();
      complexImage2.phaseImage();
      ComplexImage complexImage3 = complexImage2.copy();
      ROI rOI0 = new ROI();
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      complexImage1.magnitudeImage();
      ROI rOI1 = new ROI(0, 255, (-1), (-1782));
      ComplexImage complexImage5 = new ComplexImage();
      complexImage2.magnitudeImage();
      complexImage2.imaginary();
      // Undeclared exception!
      try { 
        complexImage4.divide(complexImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      // Undeclared exception!
      try { 
        complexImage0.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.subtract(217, 217, (float) 217, (float) 217, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ROI rOI0 = new ROI(4, 4, 4, 4);
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.add(307.0F, (float) (-175));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      int int0 = 0;
      ComplexImage complexImage1 = complexImage0.clear();
      ROI rOI0 = new ROI();
      complexImage1.set(0, 1, (float) 0, (float) 1);
      complexImage1.add(993.698F, (float) 1);
      // Undeclared exception!
      try { 
        complexImage0.divide(240, 1, 0.0F, (-806.627F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (float) 1);
      ComplexImage complexImage2 = complexImage0.clear();
      complexImage2.phaseImage();
      complexImage2.real();
      complexImage0.diff(complexImage2);
      complexImage0.setImaginary(0, 1, 1.0F);
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add(0.0F, (-1138.9F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      int int0 = (-1);
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((-1), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.phaseImage();
      ComplexImage complexImage2 = complexImage0.copy();
      complexImage2.max();
      complexImage0.magnitudeImage();
      complexImage2.toString();
      ROI rOI0 = new ROI(24, 1, 227, (-36));
      complexImage2.imaginary();
      complexImage0.phaseImage();
      complexImage2.Y();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.imag();
      int int0 = (-432);
      ROI rOI0 = new ROI((-1149), (-432), (-1149), (-1149));
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage();
      ROI rOI0 = new ROI();
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      complexImage0.phaseImage();
      complexImage1.setImaginary(realGrayImage0);
      complexImage1.subtract(complexImage1);
      ROI rOI0 = new ROI(0, 227, 0, 227);
      complexImage1.magnitudeImage();
      complexImage1.subtract((float) 0, (float) 227);
      complexImage0.Y();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 513;
      ROI rOI0 = new ROI(513, (-434), 513, 1);
      rOI0.setROI(1, 513, 3205, 3205);
      // Undeclared exception!
      try { 
        complexImage0.set(513, 513, (-1107.3F), (float) 513, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.get(1415, 1415);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.phaseImage();
      complexImage0.copy();
      ROI rOI0 = new ROI();
      ComplexImage complexImage2 = complexImage1.copy(rOI0);
      complexImage2.add((float) 0, 0.0F, rOI0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      complexImage0.max();
      // Undeclared exception!
      try { 
        complexImage0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(9, 9);
      ComplexImage complexImage1 = complexImage0.clear();
      RealGrayImage realGrayImage0 = complexImage0.imaginary();
      complexImage1.setImaginary(realGrayImage0);
      ROI rOI0 = new ROI();
      complexImage1.max(rOI0);
      ComplexImage complexImage2 = complexImage0.divide((float) 9, 1382.154F);
      ComplexImage complexImage3 = complexImage2.copy();
      ROI rOI1 = new ROI((-16777216), 3270, 2027, (-777));
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage3, rOI0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -777
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ROI rOI0 = new ROI(1331, 0, (-1358), 1331);
      ComplexImage complexImage0 = new ComplexImage(0, 1331);
      // Undeclared exception!
      try { 
        complexImage0.getImaginary(1331, (-42));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      int int0 = 0;
      int int1 = (-3046);
      // Undeclared exception!
      try { 
        complexImage0.subtract(0, (-3046), 1.0F, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      ROI rOI0 = new ROI(0, 0, 0, 0);
      // Undeclared exception!
      try { 
        complexImage0.divide(1.0F, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ROI rOI0 = new ROI(0, 0, 0, 0);
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(0, 220);
      complexImage0.divide(complexImage1);
      complexImage1.multiply(complexImage0);
      // Undeclared exception!
      try { 
        complexImage0.divide(1162, 1162, (float) 1162, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      ComplexImage complexImage1 = complexImage0.clear();
      complexImage1.phaseImage();
      complexImage0.magnitudeImage();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      // Undeclared exception!
      try { 
        complexImage0.magnitudeImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ROI rOI0 = new ROI(0, 0, 0, 0);
      ComplexImage complexImage0 = new ComplexImage();
      ComplexImage complexImage1 = new ComplexImage(0, 212);
      complexImage0.divide(complexImage1);
      complexImage1.multiply(complexImage0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      
      complexImage1.set(0, 0, (float) 0, (float) 0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage1 = complexImage2.imaginary();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      
      complexImage1.divide(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      complexImage0.multiply(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage2 = complexImage0.real();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, realGrayImage2.X());
      assertEquals(Double.NaN, realGrayImage2.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage2.absSum(), 0.01F);
      assertEquals(255, realGrayImage2.Y());
      assertEquals(Float.NaN, realGrayImage2.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(1, 2185, 0.0F, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2185
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 211);
      assertNotNull(complexImage0);
      assertEquals(211, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.max();
      assertNotNull(complex0);
      assertEquals(211, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      ComplexImage complexImage1 = complexImage0.multiply(0.0F, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(211, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(211, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.get(211, 0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ROI rOI0 = new ROI(0, 0, 0, 65);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(65, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(66, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = (-744);
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        complexImage2.setReal(1, (-744), (float) 65);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      
      complexImage0.set(0, 1, (-3440.7292F), (float) 1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      complexImage1.setImag(realGrayImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage4 = new ComplexImage(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complexImage4);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      
      RealGrayImage realGrayImage1 = complexImage4.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      assertEquals(9.867778778076172, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(3.141302F, realGrayImage1.max(), 0.01F);
      assertEquals(3.141302F, realGrayImage1.addSum(), 0.01F);
      assertEquals(3.141302F, realGrayImage1.absSum(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      assertEquals(1, realGrayImage1.X());
      
      String string0 = complexImage4.toString();
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(string0);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-524), (-1), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      int int0 = 227;
      ComplexImage complexImage2 = new ComplexImage(0, 227);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(227, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      complexImage2.subtract(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(227, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      Complex complex0 = complexImage1.min();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage1.subtract(0, 227, 2506.7F, 2506.7F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 227
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      ComplexImage complexImage1 = new ComplexImage(0, 0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI(0, 0, (-3424), 65);
      assertNotNull(rOI0);
      assertEquals((-3424), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(65, rOI0.ly());
      assertEquals(3425, rOI0.X());
      assertEquals(66, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(65, (-2605), (-1.0F), (-1.0F));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ROI rOI0 = new ROI(4, 4, 4, 4);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(4, rOI0.ux());
      assertEquals(4, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(4, rOI0.lx());
      assertEquals(4, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.max(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = realGrayImage0.addbuffer(0, 0, 0, 412, 0.0F);
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, 1, (float) 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage1.add(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      complexImage0.add(complexImage1, rOI0, rOI0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        complexImage0.diff(complexImage1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((-1), 827, (float) 255, (float) 255, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI(909, 909, (-1), 0);
      assertNotNull(rOI0);
      assertEquals(909, rOI0.ly());
      assertEquals(909, rOI0.lx());
      assertEquals(911, rOI0.X());
      assertEquals(910, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals((-1), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.min(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.getReal((-2283), 255, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = 0;
      int int1 = (-1);
      Complex complex0 = complexImage1.min(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      
      // Undeclared exception!
      try { 
        complexImage1.set(0, (-1), (float) 0, (-3386.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage(0, 1957);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(1957, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1957, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1957, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage2.magnitudeImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertEquals(1957, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1957, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1957, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage2.magnitudeImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(1957, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(1957, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1957, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      
      ROI rOI0 = new ROI(1957, 1957, (-224), 1957);
      assertNotNull(rOI0);
      assertEquals((-224), rOI0.ux());
      assertEquals(2182, rOI0.X());
      assertEquals(1957, rOI0.ly());
      assertEquals(1957, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1957, rOI0.uy());
      
      ROI rOI1 = new ROI((-437), 2, (-1), 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals((-437), rOI1.ux());
      assertEquals(437, rOI1.X());
      assertEquals(2, rOI1.ly());
      assertEquals(0, rOI1.uy());
      assertEquals((-1), rOI1.lx());
      assertEquals(3, rOI1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.add(255, 255, 0.0F, 1.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      int int0 = 1730;
      ComplexImage complexImage0 = new ComplexImage(1730, 1730);
      assertNotNull(complexImage0);
      assertEquals(1730, complexImage0.X());
      assertEquals(1730, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.phaseImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex0 = complexImage2.max();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complex0);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage0.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      
      String string0 = complexImage2.toString();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(string0);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ROI rOI0 = new ROI(24, 1, 227, (-36));
      assertNotNull(rOI0);
      assertEquals(204, rOI0.X());
      assertEquals(24, rOI0.ux());
      assertEquals((-36), rOI0.uy());
      assertEquals(1, rOI0.ly());
      assertEquals(38, rOI0.Y());
      assertEquals(227, rOI0.lx());
      
      RealGrayImage realGrayImage2 = complexImage2.imaginary();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(realGrayImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(255, realGrayImage2.Y());
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      
      complexImage2.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      complexImage2.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage2.getJavaImage();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      
      ROI rOI0 = new ROI(173, 173, 173, 173);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(173, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(173, rOI0.ly());
      assertEquals(173, rOI0.ux());
      assertEquals(173, rOI0.uy());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      
      ComplexImage complexImage1 = new ComplexImage(2423, 173);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(2423, complexImage1.X());
      assertEquals(173, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      int int0 = 595;
      int int1 = 1;
      BufferedImage bufferedImage0 = new BufferedImage(595, 1, 1);
      assertNotNull(bufferedImage0);
      assertEquals(1, bufferedImage0.getTileHeight());
      assertEquals(0, bufferedImage0.getMinTileY());
      assertEquals(1, bufferedImage0.getTransparency());
      assertEquals(0, bufferedImage0.getMinTileX());
      assertEquals(0, bufferedImage0.getMinY());
      assertEquals(0, bufferedImage0.getMinX());
      assertEquals(595, bufferedImage0.getWidth());
      assertFalse(bufferedImage0.isAlphaPremultiplied());
      assertEquals(595, bufferedImage0.getTileWidth());
      assertEquals(1, bufferedImage0.getType());
      assertTrue(bufferedImage0.hasTileWriters());
      assertEquals(1, bufferedImage0.getNumYTiles());
      assertEquals(0.5F, bufferedImage0.getAccelerationPriority(), 0.01F);
      assertEquals(0, bufferedImage0.getTileGridYOffset());
      assertEquals(1, bufferedImage0.getNumXTiles());
      assertEquals(0, bufferedImage0.getTileGridXOffset());
      assertEquals(1, bufferedImage0.getHeight());
      
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage(bufferedImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      int int1 = 1;
      // Undeclared exception!
      try { 
        complexImage1.set(1, 1, (float) 1, (-3386.0F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      
      Complex complex0 = complexImage2.min();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0L, complex0.longValue());
      
      complexImage0.set(0, 1, (-3440.7292F), (float) 1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage4 = new ComplexImage(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertNotNull(complexImage4);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      
      ComplexImage complexImage5 = complexImage4.addbuffer(0, 1, 255, 3300, (float) 0, (-32768.0F));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage1));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage0));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertNotNull(complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage5);
      assertNotSame(complexImage2, complexImage5);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage5);
      assertNotSame(complexImage5, complexImage1);
      assertNotSame(complexImage5, complexImage2);
      assertNotSame(complexImage5, complexImage3);
      assertNotSame(complexImage5, complexImage0);
      assertNotSame(complexImage5, complexImage4);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      assertEquals(0, complexImage5.X());
      assertEquals(1, complexImage5.Y());
      
      String string0 = complexImage4.toString();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage5));
      assertFalse(complexImage2.equals((Object)complexImage5));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage5));
      assertNotNull(string0);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage5);
      assertNotSame(complexImage2, complexImage5);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage5);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      
      // Undeclared exception!
      try { 
        complexImage2.setReal((-1), 0, (float) 255, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ROI rOI0 = new ROI(2869, 2869, 2869, 2869);
      assertNotNull(rOI0);
      assertEquals(2869, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(2869, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(2869, rOI0.lx());
      assertEquals(2869, rOI0.ly());
      
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage((ComplexImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(255, realGrayImage0.Y());
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Complex complex0 = complexImage2.min();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      
      complexImage0.set(0, 1, (-3440.7292F), (float) 1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage4 = new ComplexImage(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complexImage4);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      
      String string0 = complexImage4.toString();
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(string0);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-524), (-1), 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage2 = complexImage0.copy(rOI0);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real;
      assertNotNull(realGrayImage0);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      complexImage2.real = realGrayImage0;
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, complexImage2.real.X());
      assertEquals(0.0F, complexImage2.real.max(), 0.01F);
      assertEquals(255, complexImage2.real.Y());
      assertEquals(0.0F, complexImage2.real.absSum(), 0.01F);
      assertEquals(0.0F, complexImage2.real.addSum(), 0.01F);
      assertEquals(0.0F, complexImage2.real.min(), 0.01F);
      assertEquals(0.0, complexImage2.real.sqrSum(), 0.01);
      
      ComplexImage complexImage3 = complexImage1.add(993.698F, (float) 1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      RealGrayImage realGrayImage1 = complexImage3.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(2.517963553125E8, realGrayImage1.sqrSum(), 0.01);
      assertEquals(253393.52F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(255, realGrayImage1.Y());
      assertEquals(993.6985F, realGrayImage1.max(), 0.01F);
      assertEquals(253393.52F, realGrayImage1.absSum(), 0.01F);
      assertEquals(993.6985F, realGrayImage1.min(), 0.01F);
      
      ComplexImage complexImage4 = complexImage3.multiply((float) 255, (float) 1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertNotNull(complexImage4);
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage4);
      assertSame(complexImage4, complexImage1);
      assertSame(complexImage4, complexImage0);
      assertSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(255, complexImage4.Y());
      
      Complex complex0 = complexImage3.max(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertSame(complexImage1, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage4);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1248.697998046875, complex0.imag(), 0.01);
      assertEquals(253395.0667238808, complex0.doubleValue(), 0.01);
      assertEquals(253395, complex0.intValue());
      assertEquals(1248.697998046875, complex0.imaginary(), 0.01);
      assertEquals(253395.0667238808, complex0.magnitude(), 0.01);
      assertEquals(253391.984375, complex0.real(), 0.01);
      assertEquals(253395L, complex0.longValue());
      assertEquals((short) (-8749), complex0.shortValue());
      assertEquals((byte) (-45), complex0.byteValue());
      assertEquals(0.004927890253804902, complex0.arg(), 0.01);
      assertEquals(253395.06F, complex0.floatValue(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      ROI rOI0 = new ROI(0, 0, 0, 0);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(0, 212);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(212, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      // Undeclared exception!
      try { 
        complexImage1.setReal((-175), (-175), (float) 212, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage3 = complexImage0.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      ImageProducer imageProducer0 = complexImage1.getJavaImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertNotNull(imageProducer0);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage4 = new ComplexImage(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complexImage4);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      complexImage3.add(complexImage4, rOI0, rOI1);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(rOI1, rOI0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      int int0 = 257;
      ComplexImage complexImage0 = new ComplexImage(1, 257);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(257, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNotNull(realGrayImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(257, complexImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(257, realGrayImage0.Y());
      
      complexImage0.setImag(realGrayImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(257, complexImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(257, realGrayImage0.Y());
      
      int int1 = 0;
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (float) 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(257, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(257, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(257, complexImage2.Y());
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(257, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(257, complexImage2.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(257, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      
      int int2 = 0;
      int int3 = (-14);
      ROI rOI0 = new ROI(257, 0, 0, (-14));
      assertNotNull(rOI0);
      assertEquals((-14), rOI0.uy());
      assertEquals(15, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(257, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(258, rOI0.X());
      
      rOI0.setROI(0, (-14), 0, 231);
      assertEquals((-14), rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(231, rOI0.ly());
      assertEquals(246, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage2, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(16, 16);
      assertNotNull(complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      complexImage0.divide(complexImage1, rOI0, rOI0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(16, complexImage1.Y());
      assertEquals(16, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ImageProducer imageProducer0 = complexImage0.getJavaImage();
      assertNotNull(imageProducer0);
      assertSame(complexImage0, complexImage1);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      
      ComplexImage complexImage2 = complexImage0.copy(rOI1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(rOI1, rOI0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.lx());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertEquals(16, complexImage0.X());
      assertEquals(16, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(16, realGrayImage0.X());
      assertEquals(Double.NaN, realGrayImage0.sqrSum(), 0.01);
      assertEquals(Float.NaN, realGrayImage0.addSum(), 0.01F);
      assertEquals(Float.NaN, realGrayImage0.absSum(), 0.01F);
      assertEquals(16, realGrayImage0.Y());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 0;
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage1 = new ComplexImage(0, 1957);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.X());
      assertEquals(1957, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage1.clear();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(1957, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(1957, complexImage2.Y());
      
      RealGrayImage realGrayImage1 = complexImage2.magnitudeImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(1957, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(1957, complexImage2.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1957, realGrayImage1.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage2 = complexImage2.magnitudeImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage1.X());
      assertEquals(1957, complexImage1.Y());
      assertEquals(0, complexImage2.X());
      assertEquals(1957, complexImage2.Y());
      assertEquals(0, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1957, realGrayImage2.Y());
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      
      ROI rOI0 = new ROI(1957, 1957, (-224), 1957);
      assertNotNull(rOI0);
      assertEquals(1957, rOI0.uy());
      assertEquals((-224), rOI0.ux());
      assertEquals(1957, rOI0.ly());
      assertEquals(2182, rOI0.X());
      assertEquals(1957, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      rOI0.setROI(0, 0, 8, 1957);
      assertEquals(0, rOI0.ux());
      assertEquals(1957, rOI0.ly());
      assertEquals(0, rOI0.uy());
      assertEquals(8, rOI0.lx());
      assertEquals(1958, rOI0.Y());
      assertEquals(9, rOI0.X());
      
      int int1 = (-791);
      rOI0.setROI(1957, 3556, 0, (-791));
      assertEquals(4348, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(1958, rOI0.X());
      assertEquals(1957, rOI0.lx());
      assertEquals(3556, rOI0.ly());
      assertEquals((-791), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0L, complex0.longValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      
      // Undeclared exception!
      try { 
        complexImage1.set(1802, 1817, complex0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, realGrayImage0.X());
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage0.setImaginary(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, realGrayImage0.X());
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage1.subtract(complexImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ROI rOI0 = new ROI(0, 0, 2718, 2718);
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(2718, rOI0.lx());
      assertEquals(2719, rOI0.Y());
      assertEquals(2719, rOI0.X());
      assertEquals(2718, rOI0.ly());
      
      RealGrayImage realGrayImage1 = complexImage1.magnitudeImage();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(255, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.subtract(0.0F, 0.0F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      int int0 = complexImage2.Y();
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(255, int0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex0 = new Complex(0, 1347.8432321012);
      assertNotNull(complex0);
      assertEquals((byte)67, complex0.byteValue());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1347, complex0.intValue());
      assertEquals((short)1347, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1347.8432772396054, complex0.doubleValue(), 0.01);
      assertEquals(1347.8432772396054, complex0.magnitude(), 0.01);
      assertEquals(1347.84326171875, complex0.imag(), 0.01);
      assertEquals(1347.84326171875, complex0.imaginary(), 0.01);
      assertEquals(1347.8433F, complex0.floatValue(), 0.01F);
      assertEquals(1347L, complex0.longValue());
      
      Complex complex1 = new Complex(complex0);
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertEquals((byte)67, complex0.byteValue());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1347, complex0.intValue());
      assertEquals((short)1347, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1347.8432772396054, complex0.doubleValue(), 0.01);
      assertEquals(1347.8432772396054, complex0.magnitude(), 0.01);
      assertEquals(1347.84326171875, complex0.imag(), 0.01);
      assertEquals(1347.84326171875, complex0.imaginary(), 0.01);
      assertEquals(1347.8433F, complex0.floatValue(), 0.01F);
      assertEquals(1347L, complex0.longValue());
      assertEquals((short)1347, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1347L, complex1.longValue());
      assertEquals((byte)67, complex1.byteValue());
      assertEquals(1347.84326171875, complex1.imaginary(), 0.01);
      assertEquals(1347, complex1.intValue());
      assertEquals(1347.8433F, complex1.floatValue(), 0.01F);
      assertEquals(1347.84326171875, complex1.imag(), 0.01);
      assertEquals(1347.8432772396054, complex1.doubleValue(), 0.01);
      assertEquals(1347.8432772396054, complex1.magnitude(), 0.01);
      
      Complex complex2 = new Complex(complex1);
      assertFalse(complex0.equals((Object)complex1));
      assertFalse(complex1.equals((Object)complex0));
      assertFalse(complex2.equals((Object)complex1));
      assertFalse(complex2.equals((Object)complex0));
      assertNotNull(complex2);
      assertEquals((byte)67, complex0.byteValue());
      assertEquals(1.5707963267948966, complex0.arg(), 0.01);
      assertEquals(1347, complex0.intValue());
      assertEquals((short)1347, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(1347.8432772396054, complex0.doubleValue(), 0.01);
      assertEquals(1347.8432772396054, complex0.magnitude(), 0.01);
      assertEquals(1347.84326171875, complex0.imag(), 0.01);
      assertEquals(1347.84326171875, complex0.imaginary(), 0.01);
      assertEquals(1347.8433F, complex0.floatValue(), 0.01F);
      assertEquals(1347L, complex0.longValue());
      assertEquals((short)1347, complex1.shortValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(1.5707963267948966, complex1.arg(), 0.01);
      assertEquals(1347L, complex1.longValue());
      assertEquals((byte)67, complex1.byteValue());
      assertEquals(1347.84326171875, complex1.imaginary(), 0.01);
      assertEquals(1347, complex1.intValue());
      assertEquals(1347.8433F, complex1.floatValue(), 0.01F);
      assertEquals(1347.84326171875, complex1.imag(), 0.01);
      assertEquals(1347.8432772396054, complex1.doubleValue(), 0.01);
      assertEquals(1347.8432772396054, complex1.magnitude(), 0.01);
      assertEquals(1347.84326171875, complex2.imag(), 0.01);
      assertEquals(1347.84326171875, complex2.imaginary(), 0.01);
      assertEquals(1347.8433F, complex2.floatValue(), 0.01F);
      assertEquals(0.0, complex2.real(), 0.01);
      assertEquals(1347.8432772396054, complex2.doubleValue(), 0.01);
      assertEquals(1347.8432772396054, complex2.magnitude(), 0.01);
      assertEquals(1.5707963267948966, complex2.arg(), 0.01);
      assertEquals(1347, complex2.intValue());
      assertEquals((short)1347, complex2.shortValue());
      assertEquals(1347L, complex2.longValue());
      assertEquals((byte)67, complex2.byteValue());
      
      // Undeclared exception!
      try { 
        complexImage0.set(255, 255, complex2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = 3552;
      int int1 = 1;
      int int2 = 998;
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(255, 3552, 3552, 998, (float) 1, (float) 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      RealGrayImage realGrayImage1 = complexImage1.imaginary();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(1, realGrayImage1.X());
      
      complexImage0.divide(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      int int0 = 1;
      ROI rOI1 = new ROI(215, 1, 0, 1);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(1, rOI1.Y());
      assertEquals(216, rOI1.X());
      assertEquals(1, rOI1.ly());
      assertEquals(1, rOI1.uy());
      assertEquals(0, rOI1.ux());
      assertEquals(215, rOI1.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(1, 1, (float) 1, (float) 1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      int int0 = (-16);
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = null;
      ROI rOI0 = new ROI((-16), (-16), (-16), (-16));
      assertNotNull(rOI0);
      assertEquals((-16), rOI0.ly());
      assertEquals((-16), rOI0.uy());
      assertEquals((-16), rOI0.ux());
      assertEquals((-16), rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.set((-16), (-16), (Complex) null, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      
      RealGrayImage realGrayImage1 = complexImage1.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      Complex complex0 = complexImage4.max(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      ROI rOI1 = new ROI(0, 255, (-1), (-1782));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(2, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(255, rOI1.ly());
      assertEquals(2038, rOI1.Y());
      assertEquals((-1782), rOI1.uy());
      assertEquals((-1), rOI1.ux());
      
      ComplexImage complexImage5 = complexImage2.subtract(3783.186F, (float) (-1782), rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage1));
      assertNotNull(complexImage5);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage5);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(rOI0, rOI1);
      assertSame(complexImage5, complexImage2);
      assertNotSame(complexImage5, complexImage3);
      assertNotSame(complexImage5, complexImage4);
      assertNotSame(complexImage5, complexImage1);
      assertSame(complexImage5, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(255, complexImage5.Y());
      assertEquals(1, complexImage5.X());
      
      ComplexImage complexImage6 = null;
      try {
        complexImage6 = new ComplexImage((-1782), (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.divide((float) 1, 1917.1F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      int int0 = 0;
      float float0 = 0.0F;
      // Undeclared exception!
      try { 
        complexImage0.set((-270), 239, (-32768.0F), 0.0F);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 227);
      assertNotNull(complexImage0);
      assertEquals(227, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      complexImage0.subtract(complexImage0);
      assertEquals(227, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.subtract((float) 227, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(227, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(227, complexImage1.Y());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertNotNull(complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      
      Complex complex0 = complexImage4.max(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      
      RealGrayImage realGrayImage1 = complexImage3.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      
      RealGrayImage realGrayImage2 = complexImage3.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(255, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      
      RealGrayImage realGrayImage3 = complexImage2.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(255, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      
      // Undeclared exception!
      try { 
        complexImage2.subtract(0, (-16777216), 1.0F, (-1365.584F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -16777216
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI(255, 255, 255, 1589);
      assertNotNull(rOI0);
      assertEquals(1335, rOI0.Y());
      assertEquals(255, rOI0.ux());
      assertEquals(255, rOI0.uy());
      assertEquals(1589, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(255, rOI0.lx());
      
      ROI rOI1 = new ROI(255, (-3215), 237, (-1));
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(3215, rOI1.Y());
      assertEquals(19, rOI1.X());
      assertEquals(255, rOI1.lx());
      assertEquals((-1), rOI1.ly());
      assertEquals(237, rOI1.ux());
      assertEquals((-3215), rOI1.uy());
      
      // Undeclared exception!
      complexImage2.copy(rOI1);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage1.add((-2467), 1, 1.0F, (float) (-2467), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      
      complexImage1.set(0, 0, (float) 0, (-3386.0F));
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage2 = new ComplexImage(complexImage1);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, complexImage3.X());
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      int int0 = 1;
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(1, (-126), (float) 0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      
      Complex complex0 = complexImage2.min();
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage2.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      
      ComplexImage complexImage3 = new ComplexImage(1802, 0);
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertEquals(1802, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      complexImage0.add(complexImage1, rOI0, rOI0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage3.getReal(1802, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      int int0 = 255;
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      int int1 = 0;
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (float) 1);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, realGrayImage0.X());
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      int int2 = 0;
      ROI rOI0 = new ROI((-515), 0, 0, (-14));
      assertNotNull(rOI0);
      assertEquals(15, rOI0.Y());
      assertEquals((-14), rOI0.uy());
      assertEquals(516, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals((-515), rOI0.ux());
      
      rOI0.setROI(0, (-14), 0, 231);
      assertEquals(231, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals((-14), rOI0.uy());
      assertEquals(0, rOI0.lx());
      assertEquals(246, rOI0.Y());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.multiply(complexImage2, rOI1, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.real();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      complexImage2.real = realGrayImage0;
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, complexImage2.real.max(), 0.01F);
      assertEquals(1, complexImage2.real.X());
      assertEquals(255, complexImage2.real.Y());
      assertEquals(0.0F, complexImage2.real.absSum(), 0.01F);
      assertEquals(0.0, complexImage2.real.sqrSum(), 0.01);
      assertEquals(0.0F, complexImage2.real.addSum(), 0.01F);
      assertEquals(0.0F, complexImage2.real.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, realGrayImage1.Y());
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complexImage4);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      
      ImageProducer imageProducer0 = complexImage3.getJavaImage();
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(imageProducer0);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      RealGrayImage realGrayImage2 = complexImage0.imaginary();
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(255, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.Y());
      assertEquals(1, rOI1.X());
      assertEquals(0, rOI1.lx());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.ux());
      
      // Undeclared exception!
      try { 
        complexImage2.add((-387), 0, (-32768.0F), (float) 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -387
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      // Undeclared exception!
      try { 
        complexImage0.set(2244, 2244, (-1548.8F), 0.0F, rOI1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals((short) (-1), complex0.shortValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage0.getMagnitudeImage();
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      RealGrayImage realGrayImage2 = complexImage0.getMagnitudeImage();
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage2.X());
      
      RealGrayImage realGrayImage3 = complexImage0.real();
      assertNull(realGrayImage3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex0 = complexImage1.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      ComplexImage complexImage3 = new ComplexImage(255, 0);
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertEquals(255, complexImage3.X());
      assertEquals(0, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage3.add(complexImage1, rOI0, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      Complex complex0 = complexImage2.max();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0L, complex0.longValue());
      
      // Undeclared exception!
      complexImage0.addbuffer(242, 242, (float) 242, (float) 1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage2.real();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      complexImage2.real = realGrayImage0;
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, complexImage2.real.min(), 0.01F);
      assertEquals(0.0F, complexImage2.real.max(), 0.01F);
      assertEquals(0.0F, complexImage2.real.addSum(), 0.01F);
      assertEquals(0.0F, complexImage2.real.absSum(), 0.01F);
      assertEquals(1, complexImage2.real.X());
      assertEquals(255, complexImage2.real.Y());
      assertEquals(0.0, complexImage2.real.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      
      ImageProducer imageProducer0 = complexImage3.getJavaImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(imageProducer0);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      // Undeclared exception!
      try { 
        complexImage4.set(1, (-1234), (float) (-1234), 1.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      ComplexImage complexImage3 = complexImage2.clear();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      Complex complex0 = complexImage2.min();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      RealGrayImage realGrayImage0 = complexImage3.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage1);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      
      ComplexImage complexImage4 = complexImage0.subtract(1.0F, 1.0F);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertNotNull(complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage4);
      assertNotSame(complexImage4, complexImage2);
      assertSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage3);
      assertSame(complexImage4, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(0, 0);
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      int int0 = 227;
      ComplexImage complexImage2 = new ComplexImage(0, 227);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(227, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      complexImage2.subtract(complexImage2);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(227, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      Complex complex0 = complexImage1.min();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotNull(complex0);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(Double.POSITIVE_INFINITY, complex0.real(), 0.01);
      assertEquals(Float.POSITIVE_INFINITY, complex0.floatValue(), 0.01F);
      assertEquals(Integer.MAX_VALUE, complex0.intValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imag(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.doubleValue(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex0.magnitude(), 0.01);
      assertEquals((byte) (-1), complex0.byteValue());
      assertEquals(Double.POSITIVE_INFINITY, complex0.imaginary(), 0.01);
      assertEquals(9223372036854775807L, complex0.longValue());
      assertEquals(0.7853981633974483, complex0.arg(), 0.01);
      assertEquals((short) (-1), complex0.shortValue());
      
      ComplexImage complexImage3 = new ComplexImage(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage3.Y());
      assertEquals(0, complexImage3.X());
      
      // Undeclared exception!
      try { 
        complexImage0.addbuffer(227, (-465), (-1), (-1), (float) (-1), (float) (-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      Complex complex0 = complexImage0.min();
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage3 = complexImage0.subtract(1.0F, (float) 1802, rOI0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertSame(complexImage3, complexImage1);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, complexImage3.X());
      assertEquals(1, complexImage3.Y());
      
      Complex complex1 = complexImage2.min();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0L, complex1.longValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.real(), 0.01);
      
      ComplexImage complexImage4 = new ComplexImage(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertNotNull(complexImage4);
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(643, 0);
      assertNotNull(complexImage0);
      assertEquals(643, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(643, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(643, realGrayImage0.X());
      
      int int0 = (-16777216);
      int int1 = (-430);
      int int2 = (-646);
      ROI rOI0 = new ROI((-430), (-646), (-16777216), 643);
      assertNotNull(rOI0);
      assertEquals((-646), rOI0.uy());
      assertEquals((-430), rOI0.lx());
      assertEquals(643, rOI0.ly());
      assertEquals(16776787, rOI0.X());
      assertEquals((-16777216), rOI0.ux());
      assertEquals(1290, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, (-16777216), (-6.42F), rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      ROI rOI0 = new ROI(20, 20, 20, 20);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(20, rOI0.uy());
      assertEquals(20, rOI0.ly());
      assertEquals(20, rOI0.lx());
      assertEquals(20, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 194;
      ComplexImage complexImage1 = new ComplexImage(20, 194);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(20, complexImage1.X());
      assertEquals(194, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.diff(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage0.getMagnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(1, realGrayImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      Complex complex0 = complexImage1.min(rOI0);
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      
      RealGrayImage realGrayImage1 = complexImage1.imaginary();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(1, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      
      complexImage0.divide(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      complexImage2.multiply(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      complexImage0.divide(complexImage1, rOI0, rOI0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      // Undeclared exception!
      try { 
        complexImage2.divide(0, 0, (float) 0, (float) 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI((-1558), (-1558), (-1558), (-1558));
      assertNotNull(rOI0);
      assertEquals((-1558), rOI0.ly());
      assertEquals((-1558), rOI0.lx());
      assertEquals((-1558), rOI0.ux());
      assertEquals((-1558), rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(3360, 179);
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertEquals(3360, complexImage2.X());
      assertEquals(179, complexImage2.Y());
      
      complexImage0.multiply(complexImage2);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(3360, complexImage2.X());
      assertEquals(179, complexImage2.Y());
      
      // Undeclared exception!
      try { 
        complexImage0.subtract(complexImage1, rOI0, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ROI rOI0 = new ROI(4, 4, 4, 4);
      assertNotNull(rOI0);
      assertEquals(4, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(4, rOI0.ux());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = new ComplexImage();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      complexImage0.divide(complexImage1);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = new ComplexImage(4, 4);
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(4, complexImage2.Y());
      assertEquals(4, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage2.multiply(complexImage0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal(255, (-1069), (float) (-1241));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.divide((float) 0, (float) 0);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      
      RealGrayImage realGrayImage1 = complexImage0.phaseImage();
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage1);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      
      ComplexImage complexImage2 = new ComplexImage();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertEquals(0, complexImage2.Y());
      assertEquals(0, complexImage2.X());
      
      RealGrayImage realGrayImage2 = complexImage1.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertSame(complexImage1, complexImage0);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage2.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0, realGrayImage2.Y());
      assertEquals(0, realGrayImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage2.subtract(0.0F, (-93.5275F), (ROI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      // Undeclared exception!
      try { 
        complexImage2.setReal(220, 144, (-544.1701F));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage2.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      complexImage2.real = realGrayImage0;
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(1, complexImage2.real.X());
      assertEquals(0.0F, complexImage2.real.max(), 0.01F);
      assertEquals(0.0F, complexImage2.real.min(), 0.01F);
      assertEquals(0.0F, complexImage2.real.addSum(), 0.01F);
      assertEquals(0.0, complexImage2.real.sqrSum(), 0.01);
      assertEquals(255, complexImage2.real.Y());
      assertEquals(0.0F, complexImage2.real.absSum(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertNotNull(complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
      
      ImageProducer imageProducer0 = complexImage3.getJavaImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(imageProducer0);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      RealGrayImage realGrayImage2 = complexImage0.imaginary();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertNotNull(realGrayImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(255, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      
      RealGrayImage realGrayImage3 = complexImage1.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage3.min(), 0.01F);
      assertEquals((-32768.0F), realGrayImage3.max(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(0, realGrayImage3.Y());
      assertEquals(0, realGrayImage3.X());
      
      RealGrayImage realGrayImage4 = complexImage1.imag();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(realGrayImage4.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(realGrayImage4, realGrayImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(32767.0F, realGrayImage4.min(), 0.01F);
      assertEquals(0.0F, realGrayImage4.addSum(), 0.01F);
      assertEquals((-32768.0F), realGrayImage4.max(), 0.01F);
      assertEquals(0, realGrayImage4.Y());
      assertEquals(0.0F, realGrayImage4.absSum(), 0.01F);
      assertEquals(0, realGrayImage4.X());
      assertEquals(0.0, realGrayImage4.sqrSum(), 0.01);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      
      RealGrayImage realGrayImage0 = complexImage1.phaseImage();
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage1.X());
      assertEquals(255, complexImage1.Y());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      Complex complex0 = complexImage2.max();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertNotNull(complex0);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      
      ComplexImage complexImage3 = complexImage2.diff(complexImage0);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage0);
      assertSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      
      Complex complex1 = complexImage2.min();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complex1, complex0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0L, complex1.longValue());
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      
      ComplexImage complexImage4 = new ComplexImage(255, 1);
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertNotNull(complexImage4);
      assertEquals(1, complexImage4.Y());
      assertEquals(255, complexImage4.X());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        complexImage4.setReal(1, 1, 0.0F);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      int int0 = (-437);
      int int1 = (-1149);
      ROI rOI0 = new ROI((-437), (-1149), (-2177), (-2177));
      assertNotNull(rOI0);
      assertEquals((-437), rOI0.lx());
      assertEquals(1741, rOI0.X());
      assertEquals(1029, rOI0.Y());
      assertEquals((-2177), rOI0.ux());
      assertEquals((-2177), rOI0.uy());
      assertEquals((-1149), rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply((-1593.184F), (-1593.184F), rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      // Undeclared exception!
      try { 
        complexImage0.setImaginary(0, 8, (float) 1, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.divide((float) 1, 1382.154F);
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage2.X());
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      
      ComplexImage complexImage1 = new ComplexImage(3723, 3723);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(3723, complexImage1.Y());
      assertEquals(3723, complexImage1.X());
      
      RealGrayImage realGrayImage0 = complexImage1.real();
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(3723, complexImage1.Y());
      assertEquals(3723, complexImage1.X());
      assertEquals(3723, realGrayImage0.Y());
      assertEquals(3723, realGrayImage0.X());
      
      complexImage0.setImaginary(8, (-2285), 1.0F);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ComplexImage complexImage0 = null;
      try {
        complexImage0 = new ComplexImage(1, 1);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.magnitudeImage();
      assertNotNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ROI rOI0 = new ROI(173, 173, 173, 173);
      assertNotNull(rOI0);
      assertEquals(173, rOI0.uy());
      assertEquals(173, rOI0.ux());
      assertEquals(1, rOI0.Y());
      assertEquals(173, rOI0.ly());
      assertEquals(1, rOI0.X());
      assertEquals(173, rOI0.lx());
      
      ComplexImage complexImage1 = complexImage0.multiply((float) 173, (float) 2423);
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      int int0 = 489;
      // Undeclared exception!
      try { 
        complexImage1.multiply(489, 827, (float) 255, 0.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ROI rOI0 = new ROI(4, 4, 4, 4);
      assertNotNull(rOI0);
      assertEquals(1, rOI0.X());
      assertEquals(4, rOI0.uy());
      assertEquals(4, rOI0.ux());
      assertEquals(4, rOI0.ly());
      assertEquals(4, rOI0.lx());
      assertEquals(1, rOI0.Y());
      
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      // Undeclared exception!
      try { 
        complexImage0.setReal((-175), (-175), (float) 232, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      
      RealGrayImage realGrayImage0 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertNotNull(complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
      
      RealGrayImage realGrayImage1 = complexImage1.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals((-32768.0F), realGrayImage1.max(), 0.01F);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(0, realGrayImage1.Y());
      assertEquals(0, realGrayImage1.X());
      assertEquals(32767.0F, realGrayImage1.min(), 0.01F);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ly());
      assertEquals(0, rOI1.lx());
      
      ComplexImage complexImage5 = complexImage2.add((-32768.0F), (float) 1, rOI0);
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(rOI0.equals((Object)rOI1));
      assertFalse(complexImage5.equals((Object)complexImage1));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertNotNull(complexImage5);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertSame(complexImage2, complexImage5);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(rOI0, rOI1);
      assertNotSame(complexImage5, complexImage1);
      assertSame(complexImage5, complexImage2);
      assertNotSame(complexImage5, complexImage3);
      assertNotSame(complexImage5, complexImage4);
      assertSame(complexImage5, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage5.X());
      assertEquals(255, complexImage5.Y());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ComplexImage complexImage1 = new ComplexImage(complexImage0);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      
      // Undeclared exception!
      try { 
        complexImage1.copy();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      
      ROI rOI1 = new ROI(255, 0, 255, 0);
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(255, rOI1.ux());
      assertEquals(0, rOI1.ly());
      assertEquals(1, rOI1.X());
      assertEquals(255, rOI1.lx());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.getImag(0, 255, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0, complexImage1.Y());
      assertEquals(0, complexImage1.X());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      RealGrayImage realGrayImage0 = complexImage2.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      
      complexImage2.real = realGrayImage0;
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(255, realGrayImage0.Y());
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, complexImage2.real.absSum(), 0.01F);
      assertEquals(0.0F, complexImage2.real.max(), 0.01F);
      assertEquals(255, complexImage2.real.Y());
      assertEquals(1, complexImage2.real.X());
      assertEquals(0.0F, complexImage2.real.addSum(), 0.01F);
      assertEquals(0.0, complexImage2.real.sqrSum(), 0.01);
      assertEquals(0.0F, complexImage2.real.min(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage2.phaseImage();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(realGrayImage1);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertNotNull(complexImage4);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, rOI0.Y());
      assertEquals(1, rOI0.X());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.uy());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage4.Y());
      
      ImageProducer imageProducer0 = complexImage3.getJavaImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertNotNull(imageProducer0);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage4);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage4);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(255, complexImage3.Y());
      
      RealGrayImage realGrayImage2 = complexImage0.imaginary();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertNotNull(realGrayImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertSame(complexImage0, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(255, complexImage0.Y());
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(255, realGrayImage2.Y());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      
      ROI rOI1 = new ROI();
      assertFalse(rOI1.equals((Object)rOI0));
      assertNotNull(rOI1);
      assertEquals(0, rOI1.lx());
      assertEquals(1, rOI1.X());
      assertEquals(1, rOI1.Y());
      assertEquals(0, rOI1.ux());
      assertEquals(0, rOI1.uy());
      assertEquals(0, rOI1.ly());
      
      // Undeclared exception!
      try { 
        complexImage2.add((-387), 0, (-32768.0F), (float) 0, rOI1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -387
         //
         verifyException("jigl.image.types.RealGrayImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.X());
      assertEquals(0, complexImage0.Y());
      
      int int0 = 211;
      int int1 = 218;
      ComplexImage complexImage1 = new ComplexImage(211, 218);
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertEquals(211, complexImage1.X());
      assertEquals(218, complexImage1.Y());
      
      // Undeclared exception!
      try { 
        complexImage1.max();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 1);
      assertNotNull(complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      
      ComplexImage complexImage1 = complexImage0.clear();
      assertNotNull(complexImage1);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage1, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.copy();
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.addbuffer(1, 1820, 240, (-2080), (float) 1820, (float) 1820);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage2.equals((Object)complexImage0));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertNotNull(complexImage3);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage0);
      assertNotSame(complexImage2, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage2.X());
      assertEquals(1, complexImage2.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1820, complexImage3.Y());
      
      ComplexImage complexImage4 = complexImage0.copy();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertNotNull(complexImage4);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage4, complexImage1);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      
      Complex complex0 = complexImage1.max();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertNotNull(complex0);
      assertNotSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertSame(complexImage1, complexImage0);
      assertNotSame(complexImage1, complexImage4);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage1.X());
      assertEquals(1, complexImage1.Y());
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals((short)0, complex0.shortValue());
      
      ComplexImage complexImage5 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertNotNull(complexImage5);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertSame(complexImage5, complexImage0);
      assertNotSame(complexImage5, complexImage3);
      assertNotSame(complexImage5, complexImage4);
      assertSame(complexImage5, complexImage1);
      assertNotSame(complexImage5, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage5.X());
      assertEquals(1, complexImage5.Y());
      
      ComplexImage complexImage6 = complexImage5.addbuffer(1, 1, (float) 1, (float) 1);
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertFalse(complexImage6.equals((Object)complexImage1));
      assertFalse(complexImage6.equals((Object)complexImage5));
      assertFalse(complexImage6.equals((Object)complexImage4));
      assertFalse(complexImage6.equals((Object)complexImage0));
      assertFalse(complexImage6.equals((Object)complexImage3));
      assertFalse(complexImage6.equals((Object)complexImage2));
      assertNotNull(complexImage6);
      assertNotSame(complexImage0, complexImage6);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage5, complexImage6);
      assertNotSame(complexImage5, complexImage3);
      assertSame(complexImage5, complexImage0);
      assertNotSame(complexImage5, complexImage4);
      assertSame(complexImage5, complexImage1);
      assertNotSame(complexImage5, complexImage2);
      assertNotSame(complexImage6, complexImage1);
      assertNotSame(complexImage6, complexImage5);
      assertNotSame(complexImage6, complexImage4);
      assertNotSame(complexImage6, complexImage0);
      assertNotSame(complexImage6, complexImage3);
      assertNotSame(complexImage6, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage5.X());
      assertEquals(1, complexImage5.Y());
      assertEquals(1, complexImage6.X());
      assertEquals(1, complexImage6.Y());
      
      Complex complex1 = complexImage0.min();
      assertFalse(complexImage0.equals((Object)complexImage6));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complex1.equals((Object)complex0));
      assertNotNull(complex1);
      assertNotSame(complexImage0, complexImage6);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complex1, complex0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(0.0, complex1.imaginary(), 0.01);
      assertEquals(0, complex1.intValue());
      assertEquals(0.0, complex1.imag(), 0.01);
      assertEquals(0.0, complex1.magnitude(), 0.01);
      assertEquals(0.0, complex1.doubleValue(), 0.01);
      assertEquals(0L, complex1.longValue());
      assertEquals((byte)0, complex1.byteValue());
      assertEquals(0.0, complex1.real(), 0.01);
      assertEquals(0.0F, complex1.floatValue(), 0.01F);
      assertEquals((short)0, complex1.shortValue());
      assertEquals(0.0, complex1.arg(), 0.01);
      
      ComplexImage complexImage7 = complexImage0.add((-1.0F), (float) 1);
      assertFalse(complexImage0.equals((Object)complexImage6));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage7.equals((Object)complexImage4));
      assertFalse(complexImage7.equals((Object)complexImage6));
      assertFalse(complexImage7.equals((Object)complexImage3));
      assertFalse(complexImage7.equals((Object)complexImage2));
      assertNotNull(complexImage7);
      assertNotSame(complexImage0, complexImage6);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage7);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage7, complexImage4);
      assertNotSame(complexImage7, complexImage6);
      assertNotSame(complexImage7, complexImage3);
      assertSame(complexImage7, complexImage1);
      assertNotSame(complexImage7, complexImage2);
      assertSame(complexImage7, complexImage5);
      assertSame(complexImage7, complexImage0);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage7.X());
      assertEquals(1, complexImage7.Y());
      
      RealGrayImage realGrayImage0 = complexImage6.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage6));
      assertFalse(complexImage0.equals((Object)complexImage2));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage6));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage4));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertFalse(complexImage6.equals((Object)complexImage1));
      assertFalse(complexImage6.equals((Object)complexImage5));
      assertFalse(complexImage6.equals((Object)complexImage4));
      assertFalse(complexImage6.equals((Object)complexImage7));
      assertFalse(complexImage6.equals((Object)complexImage0));
      assertFalse(complexImage6.equals((Object)complexImage3));
      assertFalse(complexImage6.equals((Object)complexImage2));
      assertNotNull(realGrayImage0);
      assertNotSame(complexImage0, complexImage6);
      assertNotSame(complexImage0, complexImage2);
      assertSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage3);
      assertSame(complexImage0, complexImage7);
      assertNotSame(complexImage0, complexImage4);
      assertSame(complexImage0, complexImage1);
      assertNotSame(complexImage5, complexImage6);
      assertNotSame(complexImage5, complexImage3);
      assertSame(complexImage5, complexImage0);
      assertSame(complexImage5, complexImage7);
      assertNotSame(complexImage5, complexImage4);
      assertSame(complexImage5, complexImage1);
      assertNotSame(complexImage5, complexImage2);
      assertNotSame(complexImage6, complexImage1);
      assertNotSame(complexImage6, complexImage5);
      assertNotSame(complexImage6, complexImage4);
      assertNotSame(complexImage6, complexImage7);
      assertNotSame(complexImage6, complexImage0);
      assertNotSame(complexImage6, complexImage3);
      assertNotSame(complexImage6, complexImage2);
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage0.Y());
      assertEquals(1, complexImage5.X());
      assertEquals(1, complexImage5.Y());
      assertEquals(1, complexImage6.X());
      assertEquals(1, complexImage6.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(1, realGrayImage0.Y());
      assertEquals(1, realGrayImage0.X());
      assertEquals(0.0F, realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      // Undeclared exception!
      try { 
        complexImage2.divide(1, 231, 0.0F, (float) 1820);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.ly());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.copy(rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(909, 909);
      assertNotNull(complexImage0);
      assertEquals(909, complexImage0.Y());
      assertEquals(909, complexImage0.X());
      
      ROI rOI0 = new ROI(909, 909, (-1), 0);
      assertNotNull(rOI0);
      assertEquals(911, rOI0.X());
      assertEquals(910, rOI0.Y());
      assertEquals(909, rOI0.lx());
      assertEquals((-1), rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(909, rOI0.ly());
      
      rOI0.setROI(909, 508, (-1), (-962));
      assertEquals(911, rOI0.X());
      assertEquals(909, rOI0.lx());
      assertEquals(508, rOI0.ly());
      assertEquals(1471, rOI0.Y());
      assertEquals((-1), rOI0.ux());
      assertEquals((-962), rOI0.uy());
      
      // Undeclared exception!
      try { 
        complexImage0.divide(2714.0F, 255.0F, rOI0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage();
      assertNotNull(complexImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      RealGrayImage realGrayImage0 = complexImage0.imag();
      assertNull(realGrayImage0);
      assertEquals(0, complexImage0.Y());
      assertEquals(0, complexImage0.X());
      
      float float0 = (-1593.184F);
      int int0 = (-437);
      int int1 = (-1149);
      int int2 = (-2177);
      ROI rOI0 = new ROI((-437), (-1149), (-437), (-1149));
      assertNotNull(rOI0);
      assertEquals((-1149), rOI0.ly());
      assertEquals((-1149), rOI0.uy());
      assertEquals((-437), rOI0.lx());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals((-437), rOI0.ux());
      
      // Undeclared exception!
      try { 
        complexImage0.multiply(0.0F, 0.0F, rOI0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("jigl.image.types.ComplexImage", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ComplexImage complexImage0 = new ComplexImage(1, 255);
      assertNotNull(complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      
      ComplexImage complexImage1 = complexImage0.addbuffer(0, 0, (float) 1, (-32768.0F));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(complexImage1);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      
      ComplexImage complexImage2 = complexImage0.clear();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complexImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      
      ComplexImage complexImage3 = complexImage2.copy();
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertNotNull(complexImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      
      ROI rOI0 = new ROI();
      assertNotNull(rOI0);
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      
      ComplexImage complexImage4 = complexImage3.copy(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertNotNull(complexImage4);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      
      RealGrayImage realGrayImage0 = complexImage1.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage1.equals((Object)complexImage4));
      assertFalse(complexImage1.equals((Object)complexImage2));
      assertFalse(complexImage1.equals((Object)complexImage3));
      assertFalse(complexImage1.equals((Object)complexImage0));
      assertNotNull(realGrayImage0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage1, complexImage4);
      assertNotSame(complexImage1, complexImage2);
      assertNotSame(complexImage1, complexImage3);
      assertNotSame(complexImage1, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(0, complexImage1.X());
      assertEquals(0, complexImage1.Y());
      assertEquals(0.0, realGrayImage0.sqrSum(), 0.01);
      assertEquals(32767.0F, realGrayImage0.min(), 0.01F);
      assertEquals(0.0F, realGrayImage0.absSum(), 0.01F);
      assertEquals(0, realGrayImage0.Y());
      assertEquals(0, realGrayImage0.X());
      assertEquals((-32768.0F), realGrayImage0.max(), 0.01F);
      assertEquals(0.0F, realGrayImage0.addSum(), 0.01F);
      
      Complex complex0 = complexImage2.max(rOI0);
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertNotNull(complex0);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(0.0, complex0.arg(), 0.01);
      assertEquals(0.0, complex0.imaginary(), 0.01);
      assertEquals(0, complex0.intValue());
      assertEquals(0.0, complex0.doubleValue(), 0.01);
      assertEquals((byte)0, complex0.byteValue());
      assertEquals(0L, complex0.longValue());
      assertEquals((short)0, complex0.shortValue());
      assertEquals(0.0, complex0.magnitude(), 0.01);
      assertEquals(0.0, complex0.real(), 0.01);
      assertEquals(0.0, complex0.imag(), 0.01);
      assertEquals(0.0F, complex0.floatValue(), 0.01F);
      
      RealGrayImage realGrayImage1 = complexImage3.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(realGrayImage1.equals((Object)realGrayImage0));
      assertNotNull(realGrayImage1);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(realGrayImage1, realGrayImage0);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(1, realGrayImage1.X());
      assertEquals(0.0F, realGrayImage1.absSum(), 0.01F);
      assertEquals(255, realGrayImage1.Y());
      assertEquals(0.0, realGrayImage1.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage1.addSum(), 0.01F);
      assertEquals(0.0F, realGrayImage1.min(), 0.01F);
      assertEquals(0.0F, realGrayImage1.max(), 0.01F);
      
      RealGrayImage realGrayImage2 = complexImage3.getMagnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(realGrayImage2.equals((Object)realGrayImage0));
      assertFalse(realGrayImage2.equals((Object)realGrayImage1));
      assertNotNull(realGrayImage2);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(realGrayImage2, realGrayImage0);
      assertNotSame(realGrayImage2, realGrayImage1);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(0.0F, realGrayImage2.absSum(), 0.01F);
      assertEquals(1, realGrayImage2.X());
      assertEquals(0.0F, realGrayImage2.max(), 0.01F);
      assertEquals(0.0F, realGrayImage2.min(), 0.01F);
      assertEquals(0.0, realGrayImage2.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage2.addSum(), 0.01F);
      assertEquals(255, realGrayImage2.Y());
      
      RealGrayImage realGrayImage3 = complexImage2.magnitudeImage();
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage1));
      assertFalse(realGrayImage3.equals((Object)realGrayImage0));
      assertFalse(realGrayImage3.equals((Object)realGrayImage2));
      assertNotNull(realGrayImage3);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(realGrayImage3, realGrayImage1);
      assertNotSame(realGrayImage3, realGrayImage0);
      assertNotSame(realGrayImage3, realGrayImage2);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(0.0F, realGrayImage3.absSum(), 0.01F);
      assertEquals(1, realGrayImage3.X());
      assertEquals(255, realGrayImage3.Y());
      assertEquals(0.0F, realGrayImage3.addSum(), 0.01F);
      assertEquals(0.0, realGrayImage3.sqrSum(), 0.01);
      assertEquals(0.0F, realGrayImage3.min(), 0.01F);
      assertEquals(0.0F, realGrayImage3.max(), 0.01F);
      
      ComplexImage complexImage5 = complexImage4.divide(192.0F, (-32768.0F));
      assertFalse(complexImage0.equals((Object)complexImage3));
      assertFalse(complexImage0.equals((Object)complexImage4));
      assertFalse(complexImage0.equals((Object)complexImage1));
      assertFalse(complexImage2.equals((Object)complexImage4));
      assertFalse(complexImage2.equals((Object)complexImage3));
      assertFalse(complexImage2.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage1));
      assertFalse(complexImage3.equals((Object)complexImage4));
      assertFalse(complexImage3.equals((Object)complexImage0));
      assertFalse(complexImage3.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage0));
      assertFalse(complexImage4.equals((Object)complexImage2));
      assertFalse(complexImage4.equals((Object)complexImage1));
      assertFalse(complexImage4.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage1));
      assertFalse(complexImage5.equals((Object)complexImage0));
      assertFalse(complexImage5.equals((Object)complexImage3));
      assertFalse(complexImage5.equals((Object)complexImage2));
      assertNotNull(complexImage5);
      assertSame(complexImage0, complexImage2);
      assertNotSame(complexImage0, complexImage3);
      assertNotSame(complexImage0, complexImage5);
      assertNotSame(complexImage0, complexImage4);
      assertNotSame(complexImage0, complexImage1);
      assertNotSame(complexImage2, complexImage4);
      assertNotSame(complexImage2, complexImage5);
      assertNotSame(complexImage2, complexImage3);
      assertNotSame(complexImage2, complexImage1);
      assertSame(complexImage2, complexImage0);
      assertNotSame(complexImage3, complexImage1);
      assertNotSame(complexImage3, complexImage4);
      assertNotSame(complexImage3, complexImage0);
      assertNotSame(complexImage3, complexImage2);
      assertNotSame(complexImage3, complexImage5);
      assertSame(complexImage4, complexImage5);
      assertNotSame(complexImage4, complexImage0);
      assertNotSame(complexImage4, complexImage2);
      assertNotSame(complexImage4, complexImage1);
      assertNotSame(complexImage4, complexImage3);
      assertNotSame(complexImage5, complexImage1);
      assertNotSame(complexImage5, complexImage0);
      assertSame(complexImage5, complexImage4);
      assertNotSame(complexImage5, complexImage3);
      assertNotSame(complexImage5, complexImage2);
      assertEquals(255, complexImage0.Y());
      assertEquals(1, complexImage0.X());
      assertEquals(1, complexImage2.X());
      assertEquals(255, complexImage2.Y());
      assertEquals(255, complexImage3.Y());
      assertEquals(1, complexImage3.X());
      assertEquals(0, rOI0.ux());
      assertEquals(0, rOI0.uy());
      assertEquals(1, rOI0.X());
      assertEquals(1, rOI0.Y());
      assertEquals(0, rOI0.lx());
      assertEquals(0, rOI0.ly());
      assertEquals(1, complexImage4.Y());
      assertEquals(1, complexImage4.X());
      assertEquals(1, complexImage5.X());
      assertEquals(1, complexImage5.Y());
  }
}

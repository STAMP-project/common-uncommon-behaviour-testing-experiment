/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 14:04:29 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Token;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaParserTokenManager_ESTest extends JavaParserTokenManager_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("g&,tX}[QWW=PLa&Ey`;");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(103, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("w", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals("w", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.endColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("++");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 106, 0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader2 = new StringReader("iMq%<`#O-`!");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      int int0 = stringReader1.read();
      assertEquals(43, int0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      StringReader stringReader3 = new StringReader("==");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      boolean boolean0 = stringReader2.ready();
      assertTrue(boolean0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      long long0 = stringReader2.skip(2L);
      assertEquals(2L, long0);
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      javaCharStream0.ReInit((Reader) stringReader2, 851, 0, 43);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(851, javaCharStream0.getBeginLine());
      assertEquals(851, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(851, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals("q", token0.toString());
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.endColumn);
      assertEquals(851, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(851, token0.beginLine);
      assertEquals(0, token0.beginColumn);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      StringReader stringReader1 = new StringReader("\",dR`ZE$IQa\u0002");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("||");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      boolean boolean1 = stringReader2.ready();
      assertTrue(boolean1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertTrue(boolean1 == boolean0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      StringReader stringReader3 = new StringReader("v@.Px~G]9TEF");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader3, (-1563), (-3907));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader4 = new StringReader("\"<\"");
      assertNotNull(stringReader4);
      assertFalse(stringReader4.equals((Object)stringReader3));
      assertFalse(stringReader4.equals((Object)stringReader2));
      assertFalse(stringReader4.equals((Object)stringReader0));
      assertFalse(stringReader4.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader3, 61, 61);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader4));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader4));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader4));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals((-3907), javaCharStream0.getEndColumn());
      assertEquals((-1563), javaCharStream0.getBeginLine());
      assertEquals((-3907), javaCharStream0.getColumn());
      assertEquals((-1563), javaCharStream0.getLine());
      assertEquals((-1563), javaCharStream0.getEndLine());
      assertEquals((-3907), javaCharStream0.getBeginColumn());
      assertEquals("v", token0.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader4);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1563), token0.beginLine);
      assertEquals((-3907), token0.endColumn);
      assertEquals((-3907), token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1563), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader4));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3906), javaCharStream0.getEndColumn());
      assertEquals((-3906), javaCharStream0.getBeginColumn());
      assertEquals((-1563), javaCharStream0.getBeginLine());
      assertEquals((-3906), javaCharStream0.getColumn());
      assertEquals((-1563), javaCharStream0.getLine());
      assertEquals((-1563), javaCharStream0.getEndLine());
      assertEquals("@", token1.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader4);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3906), token1.beginColumn);
      assertEquals((-3906), token1.endColumn);
      assertEquals(86, token1.kind);
      assertEquals((-1563), token1.beginLine);
      assertEquals((-1563), token1.endLine);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 94);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)118;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)122, (byte)118}, byteArray0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      int int1 = stringReader0.read(charArray0);
      assertEquals(2, int1);
      assertEquals(2, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'i', 'n'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, 2, 2245);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(2245, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2252, javaCharStream0.getEndColumn());
      assertEquals(2252, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals("stanceof", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(2245, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(2, token0.endLine);
      assertEquals(2252, token0.endColumn);
      assertEquals(2, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(2245, javaCharStream0.getBeginColumn());
      assertEquals(2, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginLine());
      assertEquals(2252, javaCharStream0.getEndColumn());
      assertEquals(2252, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getEndLine());
      assertEquals("stanceof", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2, token1.endLine);
      assertEquals(2245, token1.beginColumn);
      assertEquals(2, token1.beginLine);
      assertEquals(2252, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">^zC1KOITBtlxB*n");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 2811, (-432));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(2811, javaCharStream0.getEndLine());
      assertEquals((-432), javaCharStream0.getEndColumn());
      assertEquals((-432), javaCharStream0.getColumn());
      assertEquals((-432), javaCharStream0.getBeginColumn());
      assertEquals(2811, javaCharStream0.getBeginLine());
      assertEquals(2811, javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2811, token0.beginLine);
      assertEquals(2811, token0.endLine);
      assertEquals(124, token0.kind);
      assertEquals((-432), token0.beginColumn);
      assertEquals((-432), token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(2811, javaCharStream0.getEndLine());
      assertEquals((-431), javaCharStream0.getBeginColumn());
      assertEquals((-431), javaCharStream0.getEndColumn());
      assertEquals((-431), javaCharStream0.getColumn());
      assertEquals(2811, javaCharStream0.getBeginLine());
      assertEquals(2811, javaCharStream0.getLine());
      assertEquals("^", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-431), token1.beginColumn);
      assertEquals((-431), token1.endColumn);
      assertEquals(2811, token1.beginLine);
      assertEquals(107, token1.kind);
      assertEquals(2811, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(2811, javaCharStream0.getEndLine());
      assertEquals((-419), javaCharStream0.getColumn());
      assertEquals((-430), javaCharStream0.getBeginColumn());
      assertEquals(2811, javaCharStream0.getBeginLine());
      assertEquals((-419), javaCharStream0.getEndColumn());
      assertEquals(2811, javaCharStream0.getLine());
      assertEquals("zC1KOITBtlxB", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token2, token1);
      assertEquals(13, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-430), token2.beginColumn);
      assertEquals((-419), token2.endColumn);
      assertEquals(2811, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(2811, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatilJe");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = '4';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', 'o'}, charArray0);
      
      stringReader0.mark(133);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 133, 11, 124);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("T}Ry");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("T}Ry");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader2, (-31), (-31));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals((-31), javaCharStream0.getBeginLine());
      assertEquals((-31), javaCharStream0.getLine());
      assertEquals((-31), javaCharStream0.getBeginColumn());
      assertEquals((-31), javaCharStream0.getColumn());
      assertEquals((-31), javaCharStream0.getEndColumn());
      assertEquals((-31), javaCharStream0.getEndLine());
      assertEquals("T", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-31), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals((-31), token0.endLine);
      assertEquals((-31), token0.beginColumn);
      assertEquals((-31), token0.beginLine);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-31), javaCharStream0.getBeginLine());
      assertEquals((-31), javaCharStream0.getLine());
      assertEquals((-31), javaCharStream0.getBeginColumn());
      assertEquals((-31), javaCharStream0.getColumn());
      assertEquals((-31), javaCharStream0.getEndColumn());
      assertEquals((-31), javaCharStream0.getEndLine());
      assertEquals("T", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-31), token1.beginLine);
      assertEquals((-31), token1.endColumn);
      assertEquals((-31), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals((-31), token1.endLine);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals((-31), javaCharStream0.getBeginLine());
      assertEquals((-31), javaCharStream0.getLine());
      assertEquals((-31), javaCharStream0.getBeginColumn());
      assertEquals((-31), javaCharStream0.getColumn());
      assertEquals((-31), javaCharStream0.getEndColumn());
      assertEquals((-31), javaCharStream0.getEndLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1347, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(68, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 1347);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1347, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals(1347, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(1347, javaCharStream0.getLine());
      assertEquals("EFAT", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1347, token0.endLine);
      assertEquals(71, token0.beginColumn);
      assertEquals(1347, token0.beginLine);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1347, javaCharStream0.getEndLine());
      assertEquals(74, javaCharStream0.getEndColumn());
      assertEquals(74, javaCharStream0.getColumn());
      assertEquals(1347, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(1347, javaCharStream0.getLine());
      assertEquals("EFAT", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(74, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1347, token0.endLine);
      assertEquals(71, token0.beginColumn);
      assertEquals(1347, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("SSiYu#4|`T+");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2630), (-2630));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("SSiYu#4|`T+");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-2630), (-1062));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(83, int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader1, 2312, 2312);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1059), javaCharStream1.getEndColumn());
      assertEquals((-1059), javaCharStream1.getColumn());
      assertEquals((-2630), javaCharStream1.getEndLine());
      assertEquals((-2630), javaCharStream1.getLine());
      assertEquals((-1062), javaCharStream1.getBeginColumn());
      assertEquals((-2630), javaCharStream1.getBeginLine());
      assertEquals("SiYu", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals((-2630), token0.beginLine);
      assertEquals((-2630), token0.endLine);
      assertEquals((-1062), token0.beginColumn);
      assertEquals((-1059), token0.endColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1059), javaCharStream1.getEndColumn());
      assertEquals((-1059), javaCharStream1.getColumn());
      assertEquals((-2630), javaCharStream1.getEndLine());
      assertEquals((-2630), javaCharStream1.getLine());
      assertEquals((-1062), javaCharStream1.getBeginColumn());
      assertEquals((-2630), javaCharStream1.getBeginLine());
      assertEquals("SiYu", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals((-1059), token1.endColumn);
      assertEquals((-1062), token1.beginColumn);
      assertEquals((-2630), token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-2630), token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertEquals((-1059), javaCharStream1.getEndColumn());
      assertEquals((-1059), javaCharStream1.getColumn());
      assertEquals((-2630), javaCharStream1.getEndLine());
      assertEquals((-2630), javaCharStream1.getLine());
      assertEquals((-1062), javaCharStream1.getBeginColumn());
      assertEquals((-2630), javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager2.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -2630, column -1058.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1826, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      StringReader stringReader1 = new StringReader("\",dR`ZE$IQa\u0002");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("==");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("jKyOblL-2F2Kp");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader3, 1569, (-421));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-415), javaCharStream1.getEndColumn());
      assertEquals(1569, javaCharStream1.getBeginLine());
      assertEquals(1569, javaCharStream1.getEndLine());
      assertEquals(1569, javaCharStream1.getLine());
      assertEquals((-415), javaCharStream1.getColumn());
      assertEquals((-421), javaCharStream1.getBeginColumn());
      assertEquals("jKyOblL", token0.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream1.bufpos);
      assertEquals(74, token0.kind);
      assertEquals(1569, token0.endLine);
      assertEquals((-415), token0.endColumn);
      assertEquals(1569, token0.beginLine);
      assertEquals((-421), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1569, javaCharStream1.getBeginLine());
      assertEquals((-414), javaCharStream1.getBeginColumn());
      assertEquals(1569, javaCharStream1.getEndLine());
      assertEquals((-414), javaCharStream1.getEndColumn());
      assertEquals(1569, javaCharStream1.getLine());
      assertEquals((-414), javaCharStream1.getColumn());
      assertEquals("-", token1.toString());
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream1.bufpos);
      assertEquals((-414), token1.beginColumn);
      assertEquals(1569, token1.beginLine);
      assertEquals(102, token1.kind);
      assertEquals((-414), token1.endColumn);
      assertEquals(1569, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals("instanceof", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(9, javaCharStream0.bufpos);
      assertEquals(71, token0.beginColumn);
      assertEquals(71, token0.endLine);
      assertEquals(80, token0.endColumn);
      assertEquals(71, token0.beginLine);
      assertEquals(39, token0.kind);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ks2-},}}d*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-3655));
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals((-2147483647), javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals((-2147483647), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals("Ks2", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals((-2147483647), token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals((-2147483646), javaCharStream0.getEndColumn());
      assertEquals((-2147483646), javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-2147483646), javaCharStream0.getColumn());
      assertEquals("-", token1.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token1, token0);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-2147483646), token1.beginColumn);
      assertEquals(Integer.MAX_VALUE, token1.beginLine);
      assertEquals((-2147483646), token1.endColumn);
      assertEquals(102, token1.kind);
      assertEquals(Integer.MAX_VALUE, token1.endLine);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token0.equals((Object)token1));
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals((-2147483646), javaCharStream0.getEndColumn());
      assertEquals((-2147483646), javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-2147483646), javaCharStream0.getColumn());
      assertEquals("Ks2", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token0, token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals((-2147483647), token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals((-2147483645), javaCharStream0.getEndColumn());
      assertEquals((-2147483645), javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-2147483645), javaCharStream0.getColumn());
      assertEquals("}", token2.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(80, token2.kind);
      assertEquals(Integer.MAX_VALUE, token2.beginLine);
      assertEquals((-2147483645), token2.endColumn);
      assertEquals(Integer.MAX_VALUE, token2.endLine);
      assertEquals((-2147483645), token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("Ks2'-M,};5*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(75, int0);
      
      StringReader stringReader1 = new StringReader("pXC]<HxXORa3-]o_l");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 40, 75);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(77, javaCharStream1.getEndColumn());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals(77, javaCharStream1.getColumn());
      assertEquals(75, javaCharStream1.getBeginColumn());
      assertEquals(40, javaCharStream1.getLine());
      assertEquals("pXC", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.endLine);
      assertEquals(40, token0.beginLine);
      assertEquals(77, token0.endColumn);
      assertEquals(75, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager1.TokenLexicalActions(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(77, javaCharStream1.getEndColumn());
      assertEquals(40, javaCharStream1.getBeginLine());
      assertEquals(40, javaCharStream1.getEndLine());
      assertEquals(77, javaCharStream1.getColumn());
      assertEquals(75, javaCharStream1.getBeginColumn());
      assertEquals(40, javaCharStream1.getLine());
      assertEquals("pXC", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(40, token0.endLine);
      assertEquals(40, token0.beginLine);
      assertEquals(77, token0.endColumn);
      assertEquals(75, token0.beginColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"nItanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      StringReader stringReader1 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      javaCharStream0.inBuf = (-1);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(79, javaCharStream0.getEndColumn());
      assertEquals(79, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals("nItanceof", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(79, token0.endColumn);
      assertEquals(71, token0.endLine);
      assertEquals(71, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(71, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(80, javaCharStream0.getBeginColumn());
      assertEquals(80, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals(80, javaCharStream0.getColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(71, token1.endLine);
      assertEquals(80, token1.endColumn);
      assertEquals(80, token1.beginColumn);
      assertEquals(71, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 86);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("XfK[J{fGDVL,m");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("r9");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader3 = new StringReader("ka");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals("com", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(86, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(94, token0.endLine);
      assertEquals(88, token0.endColumn);
      assertEquals(94, token0.beginLine);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream0, 86);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 86. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1825, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      StringReader stringReader1 = new StringReader("!,2R`Z{$IQ-\u0002");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      long long0 = stringReader2.skip(1143492109664256L);
      assertEquals(0L, long0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(1825, javaCharStream0.getEndLine());
      assertEquals(1825, javaCharStream0.getLine());
      assertEquals(1825, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals("=", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(87, token0.kind);
      assertEquals(1825, token0.beginLine);
      assertEquals(1825, token0.endLine);
      assertEquals(71, token0.endColumn);
      assertEquals(71, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1825, javaCharStream0.getEndLine());
      assertEquals(1825, javaCharStream0.getLine());
      assertEquals(1825, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals("=", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(71, token1.beginColumn);
      assertEquals(87, token1.kind);
      assertEquals(71, token1.endColumn);
      assertEquals(1825, token1.endLine);
      assertEquals(1825, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">^zC1KOITBtlxB*n");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1996, 3, 61);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      int int0 = stringReader1.read(charArray0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      assertArrayEquals(new char[] {'>'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader1, 3285, 99);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(99, javaCharStream0.getEndColumn());
      assertEquals(99, javaCharStream0.getBeginColumn());
      assertEquals(3285, javaCharStream0.getEndLine());
      assertEquals(3285, javaCharStream0.getLine());
      assertEquals(3285, javaCharStream0.getBeginLine());
      assertEquals(99, javaCharStream0.getColumn());
      assertEquals("^", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(107, token0.kind);
      assertEquals(3285, token0.endLine);
      assertEquals(3285, token0.beginLine);
      assertEquals(99, token0.endColumn);
      assertEquals(99, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(111, javaCharStream0.getColumn());
      assertEquals(100, javaCharStream0.getBeginColumn());
      assertEquals(111, javaCharStream0.getEndColumn());
      assertEquals(3285, javaCharStream0.getEndLine());
      assertEquals(3285, javaCharStream0.getLine());
      assertEquals(3285, javaCharStream0.getBeginLine());
      assertEquals("zC1KOITBtlxB", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(token1, token0);
      assertEquals(12, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(100, token1.beginColumn);
      assertEquals(3285, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(3285, token1.beginLine);
      assertEquals(111, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DIEFAT");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)0, (byte)118, (byte) (-1)}, byteArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, (byte) (-1), (byte) (-1));
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("vpi9c~`1x3");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      javaCharStream0.ReInit((Reader) stringReader1, (int) (byte)118, (-1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("vpi9c", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-1), token0.beginColumn);
      assertEquals(118, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(3, token0.endColumn);
      assertEquals(118, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getBeginColumn());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("vpi9c", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals((-1), token1.beginColumn);
      assertEquals(118, token1.endLine);
      assertEquals(3, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(118, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals("~", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(118, token2.endLine);
      assertEquals(90, token2.kind);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(118, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=+)1");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      StringReader stringReader1 = new StringReader("g&,tX}[QWW=PLa&Ey`;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int1 = stringReader1.read();
      assertEquals(103, int1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(int1 == int0);
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(")", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(78, token1.kind);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token0.equals((Object)token1));
      assertEquals(2, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("+", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token0, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endColumn);
      assertEquals(101, token0.kind);
      assertEquals(1, token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ng62E!-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1996, (-3308));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-3304), javaCharStream0.getEndColumn());
      assertEquals((-3304), javaCharStream0.getColumn());
      assertEquals((-3308), javaCharStream0.getBeginColumn());
      assertEquals(1996, javaCharStream0.getEndLine());
      assertEquals(1996, javaCharStream0.getLine());
      assertEquals(1996, javaCharStream0.getBeginLine());
      assertEquals("Ng62E", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(1996, token0.endLine);
      assertEquals((-3304), token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(1996, token0.beginLine);
      assertEquals((-3308), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3303), javaCharStream0.getBeginColumn());
      assertEquals((-3303), javaCharStream0.getColumn());
      assertEquals(1996, javaCharStream0.getEndLine());
      assertEquals(1996, javaCharStream0.getLine());
      assertEquals(1996, javaCharStream0.getBeginLine());
      assertEquals((-3303), javaCharStream0.getEndColumn());
      assertEquals("!", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(1996, token1.endLine);
      assertEquals((-3303), token1.endColumn);
      assertEquals(1996, token1.beginLine);
      assertEquals((-3303), token1.beginColumn);
      assertEquals(89, token1.kind);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-3302), javaCharStream0.getBeginColumn());
      assertEquals((-3302), javaCharStream0.getColumn());
      assertEquals(1996, javaCharStream0.getEndLine());
      assertEquals(1996, javaCharStream0.getLine());
      assertEquals(1996, javaCharStream0.getBeginLine());
      assertEquals((-3302), javaCharStream0.getEndColumn());
      assertEquals("-", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(102, token2.kind);
      assertEquals(1996, token2.endLine);
      assertEquals((-3302), token2.endColumn);
      assertEquals((-3302), token2.beginColumn);
      assertEquals(1996, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAT");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)118, (byte)118, (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '[';
      charArray0[2] = 'r';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'D', 'E', 'F', 'A', 'T', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 182, (byte) (-1));
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("vpi9c~`1x3");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader1, (int) (byte)118, 36);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("vpi9c", token0.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(36, token0.beginColumn);
      assertEquals(118, token0.beginLine);
      assertEquals(118, token0.endLine);
      assertEquals(40, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("vpi9c", token1.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertNotSame(token1, token0);
      assertEquals(74, token1.kind);
      assertEquals(40, token1.endColumn);
      assertEquals(118, token1.endLine);
      assertEquals(36, token1.beginColumn);
      assertEquals(118, token1.beginLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals("", token2.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(118, token2.beginLine);
      assertEquals(36, token2.beginColumn);
      assertEquals(0, token2.kind);
      assertEquals(40, token2.endColumn);
      assertEquals(118, token2.endLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatilJe");
      assertNotNull(stringReader0);
      
      stringReader0.mark(133);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 133, 11, 124);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(133, javaCharStream0.getLine());
      assertEquals(133, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(133, javaCharStream0.getEndLine());
      assertEquals("volatilJe", token0.toString());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, token0.beginColumn);
      assertEquals(133, token0.endLine);
      assertEquals(133, token0.beginLine);
      assertEquals(19, token0.endColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(133, javaCharStream0.getLine());
      assertEquals(133, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(133, javaCharStream0.getEndLine());
      assertEquals("volatilJe", token0.toString());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, token0.beginColumn);
      assertEquals(133, token0.endLine);
      assertEquals(133, token0.beginLine);
      assertEquals(19, token0.endColumn);
      assertEquals(74, token0.kind);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals(133, javaCharStream0.getLine());
      assertEquals(133, javaCharStream0.getBeginLine());
      assertEquals(19, javaCharStream0.getEndColumn());
      assertEquals(19, javaCharStream0.getColumn());
      assertEquals(133, javaCharStream0.getEndLine());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream(28);
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 28);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 28. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fEEp_:MO");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 69, 26);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), 69);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(102, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(69, javaCharStream0.getEndLine());
      assertEquals(69, javaCharStream0.getBeginLine());
      assertEquals(69, javaCharStream0.getLine());
      assertEquals(26, javaCharStream0.getBeginColumn());
      assertEquals(29, javaCharStream0.getColumn());
      assertEquals(29, javaCharStream0.getEndColumn());
      assertEquals("EEp_", token0.toString());
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(26, token0.beginColumn);
      assertEquals(29, token0.endColumn);
      assertEquals(69, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(69, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"iynbanceof7");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"iynbanceof7");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-73), (-73));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -73, column -60.  Encountered: <EOF> after : \"\\\"iynb\\u007fanceof7\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      StringReader stringReader1 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 1996, (-3308));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-3304), javaCharStream1.getEndColumn());
      assertEquals((-3304), javaCharStream1.getColumn());
      assertEquals(1996, javaCharStream1.getEndLine());
      assertEquals((-3308), javaCharStream1.getBeginColumn());
      assertEquals(1996, javaCharStream1.getBeginLine());
      assertEquals(1996, javaCharStream1.getLine());
      assertEquals("Ng62E", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-3304), token0.endColumn);
      assertEquals(1996, token0.endLine);
      assertEquals(1996, token0.beginLine);
      assertEquals((-3308), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3303), javaCharStream1.getEndColumn());
      assertEquals((-3303), javaCharStream1.getBeginColumn());
      assertEquals((-3303), javaCharStream1.getColumn());
      assertEquals(1996, javaCharStream1.getEndLine());
      assertEquals(1996, javaCharStream1.getBeginLine());
      assertEquals(1996, javaCharStream1.getLine());
      assertEquals("!", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1996, token1.beginLine);
      assertEquals(1996, token1.endLine);
      assertEquals((-3303), token1.beginColumn);
      assertEquals((-3303), token1.endColumn);
      assertEquals(89, token1.kind);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p2.#{-5s[CjT)h");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 2);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(3, javaCharStream0.getColumn());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(3, javaCharStream0.getEndColumn());
      assertEquals("p2", token0.toString());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals(11, token0.beginLine);
      assertEquals(11, token0.endLine);
      assertEquals(3, token0.endColumn);
      assertEquals(2, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(".", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(11, token1.endLine);
      assertEquals(4, token1.endColumn);
      assertEquals(11, token1.beginLine);
      assertEquals(85, token1.kind);
      assertEquals(4, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(11, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getBeginColumn());
      assertEquals(11, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getEndLine());
      assertEquals(4, javaCharStream0.getEndColumn());
      assertEquals(".", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(11, token2.beginLine);
      assertEquals(4, token2.endColumn);
      assertEquals(4, token2.beginColumn);
      assertEquals(85, token2.kind);
      assertEquals(11, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1825, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      StringReader stringReader1 = new StringReader("!e,2R`(Z{$IQ-\u0002");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      long long0 = stringReader2.skip(1143492109664256L);
      assertEquals(0L, long0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader1, 61, 2220);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(2220, javaCharStream0.getColumn());
      assertEquals(2220, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(2220, javaCharStream0.getEndColumn());
      assertEquals("!", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, token0.endLine);
      assertEquals(2220, token0.endColumn);
      assertEquals(2220, token0.beginColumn);
      assertEquals(61, token0.beginLine);
      assertEquals(89, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(2221, javaCharStream0.getColumn());
      assertEquals(2221, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(2221, javaCharStream0.getEndColumn());
      assertEquals("e", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, token1.beginLine);
      assertEquals(2221, token1.endColumn);
      assertEquals(2221, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(61, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1825, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("!,2R`(Z{$IQ-\u0002");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      char[] charArray0 = new char[2];
      charArray0[0] = '[';
      charArray0[1] = 'r';
      int int0 = stringReader1.read(charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertArrayEquals(new char[] {'!', ','}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader1, (-1), 2245);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(2245, javaCharStream0.getBeginColumn());
      assertEquals(2245, javaCharStream0.getColumn());
      assertEquals(2245, javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("2", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1), token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(2245, token0.beginColumn);
      assertEquals(2245, token0.endColumn);
      assertEquals((-1), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2246, javaCharStream0.getBeginColumn());
      assertEquals(2246, javaCharStream0.getEndColumn());
      assertEquals(2246, javaCharStream0.getColumn());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals("R", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(2246, token1.beginColumn);
      assertEquals(2246, token1.endColumn);
      assertEquals((-1), token1.endLine);
      assertEquals((-1), token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'=W");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-194), (-194));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -194, column -191.  Encountered: <EOF> after : \"\\'=W\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("oM~{'&MkL1wOk");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0, 1710);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      PrintStream printStream0 = javaParserTokenManager0.debugStream;
      assertNotNull(printStream0);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0, false);
      assertNotNull(mockPrintStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.setDebugStream(mockPrintStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("x=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getColumn());
      assertEquals(71, javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals("x", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(71, token0.endLine);
      assertEquals(71, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(71, token0.beginColumn);
      assertEquals(71, token0.endColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals("=", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(71, token1.endLine);
      assertEquals(72, token1.endColumn);
      assertEquals(72, token1.beginColumn);
      assertEquals(71, token1.beginLine);
      assertEquals(87, token1.kind);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(72, javaCharStream0.getColumn());
      assertEquals(72, javaCharStream0.getBeginColumn());
      assertEquals(72, javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals("=", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(71, token2.beginLine);
      assertEquals(87, token2.kind);
      assertEquals(72, token2.beginColumn);
      assertEquals(72, token2.endColumn);
      assertEquals(71, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, (-1), (-1));
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(10, javaCharStream1.getEndColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.getLine());
      assertEquals(10, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getEndLine());
      assertEquals("\"instanceof\"", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(11, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.endLine);
      assertEquals(10, token0.endColumn);
      assertEquals((-1), token0.beginLine);
      assertEquals((-1), token0.beginColumn);
      assertEquals(73, token0.kind);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-8[1p5N#-CW7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals("-", token0.toString());
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=+)1");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(61, int0);
      
      StringReader stringReader1 = new StringReader("g&,tX}[QWW=PLa&Ey`;");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 61, 61);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals("+", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, token0.endColumn);
      assertEquals(61, token0.beginColumn);
      assertEquals(61, token0.endLine);
      assertEquals(101, token0.kind);
      assertEquals(61, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(61, javaCharStream0.getEndLine());
      assertEquals(61, javaCharStream0.getEndColumn());
      assertEquals(61, javaCharStream0.getBeginColumn());
      assertEquals(61, javaCharStream0.getBeginLine());
      assertEquals(61, javaCharStream0.getLine());
      assertEquals(61, javaCharStream0.getColumn());
      assertEquals("+", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(61, token1.beginColumn);
      assertEquals(61, token1.beginLine);
      assertEquals(61, token1.endLine);
      assertEquals(101, token1.kind);
      assertEquals(61, token1.endColumn);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatile");
      assertNotNull(stringReader0);
      
      stringReader0.mark(94);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 11, 124);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals("volatile", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(18, token0.endColumn);
      assertEquals(11, token0.beginColumn);
      assertEquals(94, token0.endLine);
      assertEquals(94, token0.beginLine);
      assertEquals(64, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals("volatile", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(18, token0.endColumn);
      assertEquals(11, token0.beginColumn);
      assertEquals(94, token0.endLine);
      assertEquals(94, token0.beginLine);
      assertEquals(64, token0.kind);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals(94, token1.beginLine);
      assertEquals(94, token1.endLine);
      assertEquals(18, token1.beginColumn);
      assertEquals(18, token1.endColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertFalse(token0.equals((Object)token1));
      assertEquals(18, javaCharStream0.getEndColumn());
      assertEquals(18, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(18, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals("volatile", token0.toString());
      assertNotSame(token0, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(18, token0.endColumn);
      assertEquals(11, token0.beginColumn);
      assertEquals(94, token0.endLine);
      assertEquals(94, token0.beginLine);
      assertEquals(64, token0.kind);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T%bz_");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-1882), 5);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      MockFile mockFile0 = new MockFile("T%bz_");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.print(0.0F);
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("T%bz_", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertEquals(3L, mockFile0.length());
      assertFalse(mockFile0.isDirectory());
      assertEquals("T%bz_", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      
      PrintStream printStream0 = mockPrintStream0.printf("T%bz_", (Object[]) javaParserTokenManager0.lexStateNames);
      assertNotNull(printStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("T%bz_", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("T%bz_", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaParserTokenManager0.setDebugStream(printStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertEquals("T%bz_", mockFile0.toString());
      assertFalse(mockFile0.isAbsolute());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isDirectory());
      assertEquals("T%bz_", mockFile0.getName());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(10L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[6];
      charArray0[0] = '=';
      charArray0[1] = '2';
      charArray0[2] = 'U';
      charArray0[3] = 'M';
      charArray0[4] = '*';
      charArray0[5] = '1';
      int int0 = stringReader0.read(charArray0);
      assertEquals(5, int0);
      assertEquals(6, charArray0.length);
      assertArrayEquals(new char[] {'T', '%', 'b', 'z', '_', '1'}, charArray0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      
      token_GTToken0.image = "T%bz_";
      assertEquals("T%bz_", token_GTToken0.toString());
      
      javaParserTokenManager0.SkipLexicalActions(token_GTToken0);
      assertEquals("T%bz_", token_GTToken0.toString());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.beginLine);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaCharStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 34, 34);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int1 = stringReader0.read();
      assertEquals(105, int1);
      assertFalse(int1 == int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(42, javaCharStream0.getColumn());
      assertEquals(42, javaCharStream0.getEndColumn());
      assertEquals(34, javaCharStream0.getEndLine());
      assertEquals(34, javaCharStream0.getBeginColumn());
      assertEquals(34, javaCharStream0.getBeginLine());
      assertEquals(34, javaCharStream0.getLine());
      assertEquals("nstanceof", token0.toString());
      assertEquals(8, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(34, token0.beginLine);
      assertEquals(34, token0.endLine);
      assertEquals(34, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(42, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      StringReader stringReader0 = new StringReader("S>oj");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1347, 1347);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(83, int0);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 180, 20, 180);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(20, javaCharStream1.getEndColumn());
      assertEquals(180, javaCharStream1.getLine());
      assertEquals(20, javaCharStream1.getColumn());
      assertEquals(180, javaCharStream1.getBeginLine());
      assertEquals(180, javaCharStream1.getEndLine());
      assertEquals(20, javaCharStream1.getBeginColumn());
      assertEquals(">", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(180, token0.beginLine);
      assertEquals(180, token0.endLine);
      assertEquals(20, token0.beginColumn);
      assertEquals(124, token0.kind);
      assertEquals(20, token0.endColumn);
      
      Token token1 = Token.newToken((-69));
      assertNotNull(token1);
      assertNull(token1.toString());
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(20, javaCharStream1.getEndColumn());
      assertEquals(180, javaCharStream1.getLine());
      assertEquals(20, javaCharStream1.getColumn());
      assertEquals(180, javaCharStream1.getBeginLine());
      assertEquals(180, javaCharStream1.getEndLine());
      assertEquals(20, javaCharStream1.getBeginColumn());
      assertNull(token1.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals(0, token1.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(20, javaCharStream1.getEndColumn());
      assertEquals(180, javaCharStream1.getLine());
      assertEquals(20, javaCharStream1.getColumn());
      assertEquals(180, javaCharStream1.getBeginLine());
      assertEquals(180, javaCharStream1.getEndLine());
      assertEquals(20, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.ReInit(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'=W");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(39, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-194), (-194));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-194), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-194), javaCharStream0.getColumn());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-194), javaCharStream0.getBeginColumn());
      assertEquals("=", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-194), token0.endColumn);
      assertEquals((-194), token0.beginLine);
      assertEquals((-194), token0.beginColumn);
      assertEquals((-194), token0.endLine);
      assertEquals(87, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-194), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-194), javaCharStream0.getColumn());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-194), javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-193), javaCharStream0.getEndColumn());
      assertEquals((-193), javaCharStream0.getColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals((-193), javaCharStream0.getBeginColumn());
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals("W", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-193), token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals((-194), token1.endLine);
      assertEquals((-194), token1.beginLine);
      assertEquals((-193), token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">^zC1KOITBtlxB*n");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals(1, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(">", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.endLine);
      assertEquals(124, token0.kind);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DIEFAT");
      assertNotNull(stringReader0);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)118;
      byteArray0[2] = (byte)118;
      byteArray0[3] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(4, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)118, (byte)118, (byte) (-1)}, byteArray0);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'r';
      charArray0[1] = '[';
      charArray0[2] = 'r';
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'D', 'I', 'E', 'F', 'A', 'T', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0, 182, (byte) (-1));
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("vpi9c~`1x3");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      javaCharStream0.ReInit((Reader) stringReader1, (int) (byte)118, 36);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("vpi9c", token0.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(118, token0.beginLine);
      assertEquals(36, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(40, token0.endColumn);
      assertEquals(118, token0.endLine);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals("vpi9c", token1.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getLine());
      assertNotSame(token1, token0);
      assertEquals(118, token1.endLine);
      assertEquals(36, token1.beginColumn);
      assertEquals(118, token1.beginLine);
      assertEquals(40, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, pipedInputStream0.available());
      assertEquals(40, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(40, javaCharStream0.getColumn());
      assertEquals(36, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getLine());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token2 = javaParserTokenManager1.getNextToken();
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals("~", token2.toString());
      assertEquals(0, pipedInputStream0.available());
      assertEquals(41, javaCharStream0.getEndColumn());
      assertEquals(118, javaCharStream0.getEndLine());
      assertEquals(41, javaCharStream0.getColumn());
      assertEquals(41, javaCharStream0.getBeginColumn());
      assertEquals(118, javaCharStream0.getBeginLine());
      assertEquals(118, javaCharStream0.getLine());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(90, token2.kind);
      assertEquals(118, token2.beginLine);
      assertEquals(118, token2.endLine);
      assertEquals(41, token2.beginColumn);
      assertEquals(41, token2.endColumn);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 118, column 42.  Encountered: \"`\" (96), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("final");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-38), 1928);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1932, javaCharStream0.getColumn());
      assertEquals((-38), javaCharStream0.getEndLine());
      assertEquals(1928, javaCharStream0.getBeginColumn());
      assertEquals(1932, javaCharStream0.getEndColumn());
      assertEquals((-38), javaCharStream0.getBeginLine());
      assertEquals((-38), javaCharStream0.getLine());
      assertEquals("final", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1932, token0.endColumn);
      assertEquals(31, token0.kind);
      assertEquals((-38), token0.beginLine);
      assertEquals(1928, token0.beginColumn);
      assertEquals((-38), token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1932, javaCharStream0.getColumn());
      assertEquals((-38), javaCharStream0.getEndLine());
      assertEquals(1932, javaCharStream0.getBeginColumn());
      assertEquals(1932, javaCharStream0.getEndColumn());
      assertEquals((-38), javaCharStream0.getBeginLine());
      assertEquals((-38), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-38), token1.endLine);
      assertEquals(1932, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1932, token1.beginColumn);
      assertEquals((-38), token1.beginLine);
      
      javaParserTokenManager0.SkipLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1932, javaCharStream0.getColumn());
      assertEquals((-38), javaCharStream0.getEndLine());
      assertEquals(1932, javaCharStream0.getBeginColumn());
      assertEquals(1932, javaCharStream0.getEndColumn());
      assertEquals((-38), javaCharStream0.getBeginLine());
      assertEquals((-38), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-38), token1.endLine);
      assertEquals(1932, token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(1932, token1.beginColumn);
      assertEquals((-38), token1.beginLine);
      
      JavaParserTokenManager javaParserTokenManager1 = null;
      try {
        javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0, (-38));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -38. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("||");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 258, 258);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("||");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(259, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(259, javaCharStream0.getEndColumn());
      assertEquals(258, javaCharStream0.getBeginColumn());
      assertEquals("||", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(258, token0.beginColumn);
      assertEquals(97, token0.kind);
      assertEquals(124, token0.beginLine);
      assertEquals(124, token0.endLine);
      assertEquals(259, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(259, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(259, javaCharStream0.getEndColumn());
      assertEquals(258, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(259, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(259, javaCharStream0.getBeginColumn());
      assertEquals(259, javaCharStream0.getEndColumn());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(259, token1.beginColumn);
      assertEquals(259, token1.endColumn);
      assertEquals(124, token1.beginLine);
      assertEquals(124, token1.endLine);
      assertEquals(0, token1.kind);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("'=W");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals(39, int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-194), (-194));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-194), javaCharStream0.getBeginColumn());
      assertEquals((-194), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals((-194), javaCharStream0.getColumn());
      assertEquals("=", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-194), token0.endLine);
      assertEquals((-194), token0.beginColumn);
      assertEquals((-194), token0.beginLine);
      assertEquals((-194), token0.endColumn);
      assertEquals(87, token0.kind);
      
      javaParserTokenManager0.SkipLexicalActions(token0);
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-194), javaCharStream0.getBeginColumn());
      assertEquals((-194), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals((-194), javaCharStream0.getColumn());
      assertEquals("=", token0.toString());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-194), token0.endLine);
      assertEquals((-194), token0.beginColumn);
      assertEquals((-194), token0.beginLine);
      assertEquals((-194), token0.endColumn);
      assertEquals(87, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-193), javaCharStream0.getBeginColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-193), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals((-193), javaCharStream0.getColumn());
      assertEquals("W", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-193), token1.endColumn);
      assertEquals((-194), token1.endLine);
      assertEquals((-194), token1.beginLine);
      assertEquals((-193), token1.beginColumn);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-193), javaCharStream0.getBeginColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-193), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals((-193), javaCharStream0.getColumn());
      assertEquals("W", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals((-193), token1.endColumn);
      assertEquals((-194), token1.endLine);
      assertEquals((-194), token1.beginLine);
      assertEquals((-193), token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("\"|\"");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1807, 48);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader1.read();
      assertEquals(34, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 1807, 100);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(100, javaCharStream1.getEndColumn());
      assertEquals(1807, javaCharStream1.getBeginLine());
      assertEquals(1807, javaCharStream1.getEndLine());
      assertEquals(100, javaCharStream1.getColumn());
      assertEquals(1807, javaCharStream1.getLine());
      assertEquals(100, javaCharStream1.getBeginColumn());
      assertEquals("|", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(1807, token0.endLine);
      assertEquals(1807, token0.beginLine);
      assertEquals(100, token0.beginColumn);
      assertEquals(106, token0.kind);
      assertEquals(100, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("G]");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 35, (-1549));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 2, 35);
      assertNotNull(javaCharStream1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(35, javaCharStream1.getColumn());
      assertEquals(35, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getLine());
      assertEquals(35, javaCharStream1.getBeginColumn());
      assertEquals(2, javaCharStream1.getBeginLine());
      assertEquals("G", token0.toString());
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(35, token0.beginColumn);
      assertEquals(2, token0.beginLine);
      assertEquals(35, token0.endColumn);
      assertEquals(2, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token1 = Token.newToken((-1));
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertNull(token1.toString());
      assertNotSame(token1, token0);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.endColumn);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.kind);
      assertEquals(0, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("Z");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, (-1788), 304);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(304, javaCharStream0.getBeginColumn());
      assertEquals(304, javaCharStream0.getColumn());
      assertEquals(304, javaCharStream0.getEndColumn());
      assertEquals((-1788), javaCharStream0.getEndLine());
      assertEquals((-1788), javaCharStream0.getBeginLine());
      assertEquals((-1788), javaCharStream0.getLine());
      assertEquals("Z", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1788), token0.beginLine);
      assertEquals(304, token0.endColumn);
      assertEquals(304, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals((-1788), token0.endLine);
      
      javaParserTokenManager0.curLexState = (-1788);
      assertEquals(304, javaCharStream0.getBeginColumn());
      assertEquals(304, javaCharStream0.getColumn());
      assertEquals(304, javaCharStream0.getEndColumn());
      assertEquals((-1788), javaCharStream0.getEndLine());
      assertEquals((-1788), javaCharStream0.getBeginLine());
      assertEquals((-1788), javaCharStream0.getLine());
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(304, javaCharStream0.getBeginColumn());
      assertEquals(304, javaCharStream0.getColumn());
      assertEquals(304, javaCharStream0.getEndColumn());
      assertEquals((-1788), javaCharStream0.getEndLine());
      assertEquals((-1788), javaCharStream0.getBeginLine());
      assertEquals((-1788), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals((-1788), token1.endLine);
      assertEquals((-1788), token1.beginLine);
      assertEquals(304, token1.endColumn);
      assertEquals(304, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(304, javaCharStream0.getBeginColumn());
      assertEquals(304, javaCharStream0.getColumn());
      assertEquals(304, javaCharStream0.getEndColumn());
      assertEquals((-1788), javaCharStream0.getEndLine());
      assertEquals((-1788), javaCharStream0.getBeginLine());
      assertEquals((-1788), javaCharStream0.getLine());
      assertEquals("", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(304, token2.beginColumn);
      assertEquals((-1788), token2.beginLine);
      assertEquals(304, token2.endColumn);
      assertEquals(0, token2.kind);
      assertEquals((-1788), token2.endLine);
      
      javaParserTokenManager1.TokenLexicalActions(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(304, javaCharStream0.getBeginColumn());
      assertEquals(304, javaCharStream0.getColumn());
      assertEquals(304, javaCharStream0.getEndColumn());
      assertEquals((-1788), javaCharStream0.getEndLine());
      assertEquals((-1788), javaCharStream0.getBeginLine());
      assertEquals((-1788), javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token2);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token1.kind);
      assertEquals((-1788), token1.endLine);
      assertEquals((-1788), token1.beginLine);
      assertEquals(304, token1.endColumn);
      assertEquals(304, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2v<Ta\"0L(1V");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, (-2602));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-2602), javaCharStream0.getColumn());
      assertEquals((-2602), javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals((-2602), javaCharStream0.getEndColumn());
      assertEquals("2", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(66, token0.kind);
      assertEquals((-2602), token0.endColumn);
      assertEquals(71, token0.endLine);
      assertEquals(71, token0.beginLine);
      assertEquals((-2602), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals((-2601), javaCharStream0.getEndColumn());
      assertEquals((-2601), javaCharStream0.getColumn());
      assertEquals((-2601), javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals("v", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(71, token1.endLine);
      assertEquals(71, token1.beginLine);
      assertEquals(74, token1.kind);
      assertEquals((-2601), token1.endColumn);
      assertEquals((-2601), token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-2601), javaCharStream0.getEndColumn());
      assertEquals((-2601), javaCharStream0.getColumn());
      assertEquals((-2601), javaCharStream0.getBeginColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals("v", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals((-2601), token2.beginColumn);
      assertEquals(71, token2.beginLine);
      assertEquals(71, token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals((-2601), token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1996, (-3308));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(1996, javaCharStream0.getBeginLine());
      assertEquals((-3308), javaCharStream0.getBeginColumn());
      assertEquals((-3304), javaCharStream0.getEndColumn());
      assertEquals(1996, javaCharStream0.getEndLine());
      assertEquals(1996, javaCharStream0.getLine());
      assertEquals((-3304), javaCharStream0.getColumn());
      assertEquals("Ng62E", token0.toString());
      assertEquals(4, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1996, token0.beginLine);
      assertEquals((-3304), token0.endColumn);
      assertEquals(1996, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-3308), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(1996, javaCharStream0.getBeginLine());
      assertEquals(1996, javaCharStream0.getEndLine());
      assertEquals((-3303), javaCharStream0.getBeginColumn());
      assertEquals((-3303), javaCharStream0.getEndColumn());
      assertEquals((-3303), javaCharStream0.getColumn());
      assertEquals(1996, javaCharStream0.getLine());
      assertEquals("!", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(5, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1996, token1.beginLine);
      assertEquals(1996, token1.endLine);
      assertEquals(89, token1.kind);
      assertEquals((-3303), token1.endColumn);
      assertEquals((-3303), token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(1996, javaCharStream0.getBeginLine());
      assertEquals((-3302), javaCharStream0.getBeginColumn());
      assertEquals(1996, javaCharStream0.getEndLine());
      assertEquals((-3302), javaCharStream0.getEndColumn());
      assertEquals((-3302), javaCharStream0.getColumn());
      assertEquals(1996, javaCharStream0.getLine());
      assertEquals("Q", token2.toString());
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1996, token2.beginLine);
      assertEquals((-3302), token2.endColumn);
      assertEquals((-3302), token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(1996, token2.endLine);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("finally");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 2836, 0, 2836);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.backup(64);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(2771, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals(2771, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = 'Y';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 9, 0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager((JavaCharStream) null);
      assertNotNull(javaParserTokenManager0);
      
      Token.GTToken token_GTToken0 = new Token.GTToken();
      assertNotNull(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token_GTToken0);
      assertNull(token_GTToken0.toString());
      assertEquals(0, token_GTToken0.beginColumn);
      assertEquals(0, token_GTToken0.endColumn);
      assertEquals(0, token_GTToken0.kind);
      assertEquals(0, token_GTToken0.endLine);
      assertEquals(0, token_GTToken0.beginLine);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatilJe");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'C';
      charArray0[1] = '4';
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', 'o'}, charArray0);
      
      stringReader0.mark(133);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 133, 11, 124);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("T}Ry");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("T}Ry");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(133, javaCharStream0.getLine());
      assertEquals(133, javaCharStream0.getEndLine());
      assertEquals(17, javaCharStream0.getEndColumn());
      assertEquals(133, javaCharStream0.getBeginLine());
      assertEquals(17, javaCharStream0.getColumn());
      assertEquals(11, javaCharStream0.getBeginColumn());
      assertEquals("latilJe", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(133, token0.beginLine);
      assertEquals(17, token0.endColumn);
      assertEquals(11, token0.beginColumn);
      assertEquals(133, token0.endLine);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 94);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)122;
      byteArray0[2] = (byte)118;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
      assertEquals(3, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)92, (byte)122, (byte)118}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'r';
      charArray0[0] = '[';
      charArray0[2] = '[';
      charArray0[3] = '[';
      int int1 = stringReader0.read(charArray0);
      assertEquals(4, int1);
      assertEquals(4, charArray0.length);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'i', 'n', 's', 't'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader0, 4, 2245);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals("anceof", token0.toString());
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(2250, javaCharStream0.getEndColumn());
      assertEquals(2245, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(2250, javaCharStream0.getColumn());
      assertEquals(4, token0.endLine);
      assertEquals(2250, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(2245, token0.beginColumn);
      assertEquals(4, token0.beginLine);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(2250, javaCharStream0.getEndColumn());
      assertEquals(2245, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(2250, javaCharStream0.getColumn());
      assertEquals("anceof", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(4, token1.beginLine);
      assertEquals(2245, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(2250, token1.endColumn);
      assertEquals(4, token1.endLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(4, javaCharStream0.getBeginLine());
      assertEquals(4, javaCharStream0.getLine());
      assertEquals(2250, javaCharStream0.getEndColumn());
      assertEquals(2245, javaCharStream0.getBeginColumn());
      assertEquals(4, javaCharStream0.getEndLine());
      assertEquals(2250, javaCharStream0.getColumn());
      assertEquals("anceof", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(5, javaCharStream0.bufpos);
      assertEquals(4, token2.beginLine);
      assertEquals(4, token2.endLine);
      assertEquals(2245, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(2250, token2.endColumn);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token token0 = Token.newToken(97);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(0, token0.beginColumn);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertFalse(boolean0);
      
      StringReader stringReader0 = new StringReader("qa9>,");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, (-2741));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-2741), javaCharStream0.getBeginColumn());
      assertEquals((-2740), javaCharStream0.getEndColumn());
      assertEquals((-2740), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("qa", token1.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals(0, token1.endLine);
      assertEquals(0, token1.beginLine);
      assertEquals((-2740), token1.endColumn);
      assertEquals((-2741), token1.beginColumn);
      
      Token token2 = javaParserTokenManager1.jjFillToken();
      assertNotNull(token2);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getEndLine());
      assertEquals((-2741), javaCharStream0.getBeginColumn());
      assertEquals((-2740), javaCharStream0.getEndColumn());
      assertEquals((-2740), javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getLine());
      assertEquals("qa", token2.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(0, token2.endLine);
      assertEquals((-2740), token2.endColumn);
      assertEquals(0, token2.beginLine);
      assertEquals((-2741), token2.beginColumn);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1825, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("\",dR`ZE$IQa\u0002");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("==");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'y';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(1, charArray0.length);
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals("y", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.limit());
      assertArrayEquals(new char[] {'y'}, charArray0);
      
      int int0 = stringReader1.read(charBuffer0);
      assertEquals(1, int0);
      assertEquals(1, charArray0.length);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(1, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(1, charBuffer0.limit());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertArrayEquals(new char[] {'\"'}, charArray0);
      
      StringReader stringReader3 = new StringReader("jKyObl'`L-2F2Kp");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader1, 1569, 739);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader3);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(739, javaCharStream0.getBeginColumn());
      assertEquals(739, javaCharStream0.getEndColumn());
      assertEquals(739, javaCharStream0.getColumn());
      assertEquals(1569, javaCharStream0.getEndLine());
      assertEquals(1569, javaCharStream0.getLine());
      assertEquals(1569, javaCharStream0.getBeginLine());
      assertEquals(",", token0.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(739, token0.endColumn);
      assertEquals(739, token0.beginColumn);
      assertEquals(1569, token0.beginLine);
      assertEquals(84, token0.kind);
      assertEquals(1569, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(token1.equals((Object)token0));
      assertEquals(739, javaCharStream0.getBeginColumn());
      assertEquals(739, javaCharStream0.getEndColumn());
      assertEquals(739, javaCharStream0.getColumn());
      assertEquals(1569, javaCharStream0.getEndLine());
      assertEquals(1569, javaCharStream0.getLine());
      assertEquals(1569, javaCharStream0.getBeginLine());
      assertEquals(",", token1.toString());
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1569, token1.beginLine);
      assertEquals(1569, token1.endLine);
      assertEquals(739, token1.endColumn);
      assertEquals(739, token1.beginColumn);
      assertEquals(84, token1.kind);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 43, 2145388542);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("N.Vd.f-$_]W3FM*");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(78, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      StringReader stringReader2 = new StringReader("N.Vd.f-$_]W3FM*");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader2, 2145388542, 2145388542);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(2145388542, javaCharStream0.getBeginColumn());
      assertEquals(2145388542, javaCharStream0.getEndColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(2145388542, javaCharStream0.getColumn());
      assertEquals("N", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2145388542, token0.beginLine);
      assertEquals(2145388542, token0.beginColumn);
      assertEquals(2145388542, token0.endColumn);
      assertEquals(2145388542, token0.endLine);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(2145388542, javaCharStream0.getBeginColumn());
      assertEquals(2145388542, javaCharStream0.getEndColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(2145388542, javaCharStream0.getColumn());
      assertEquals("N", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(2145388542, token1.endColumn);
      assertEquals(74, token1.kind);
      assertEquals(2145388542, token1.endLine);
      assertEquals(2145388542, token1.beginLine);
      assertEquals(2145388542, token1.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(2145388542, javaCharStream0.getBeginColumn());
      assertEquals(2145388542, javaCharStream0.getEndColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(2145388542, javaCharStream0.getColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(2145388543, javaCharStream0.getBeginColumn());
      assertEquals(2145388543, javaCharStream0.getColumn());
      assertEquals(2145388543, javaCharStream0.getEndColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(".", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(85, token2.kind);
      assertEquals(2145388542, token2.endLine);
      assertEquals(2145388543, token2.beginColumn);
      assertEquals(2145388543, token2.endColumn);
      assertEquals(2145388542, token2.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token0));
      assertEquals(2145388542, javaCharStream0.getBeginLine());
      assertEquals(2145388545, javaCharStream0.getEndColumn());
      assertEquals(2145388544, javaCharStream0.getBeginColumn());
      assertEquals(2145388542, javaCharStream0.getEndLine());
      assertEquals(2145388542, javaCharStream0.getLine());
      assertEquals(2145388545, javaCharStream0.getColumn());
      assertEquals("Vd", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertNotSame(token3, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(2145388542, token3.endLine);
      assertEquals(2145388542, token3.beginLine);
      assertEquals(2145388544, token3.beginColumn);
      assertEquals(2145388545, token3.endColumn);
      assertEquals(74, token3.kind);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader(">^zC1KOITBtlxB*n");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 1996, (-779));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(78, int0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-779), javaCharStream0.getBeginColumn());
      assertEquals((-779), javaCharStream0.getEndColumn());
      assertEquals(1996, javaCharStream0.getEndLine());
      assertEquals(1996, javaCharStream0.getBeginLine());
      assertEquals((-779), javaCharStream0.getColumn());
      assertEquals(1996, javaCharStream0.getLine());
      assertEquals(">", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(124, token0.kind);
      assertEquals(1996, token0.endLine);
      assertEquals((-779), token0.beginColumn);
      assertEquals(1996, token0.beginLine);
      assertEquals((-779), token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("++");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 106, 0);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader2 = new StringReader("after : \"");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 119, 0);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(119, javaCharStream1.getEndLine());
      assertEquals(119, javaCharStream1.getLine());
      assertEquals(119, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals("++", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, token0.beginColumn);
      assertEquals(119, token0.beginLine);
      assertEquals(1, token0.endColumn);
      assertEquals(99, token0.kind);
      assertEquals(119, token0.endLine);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader2, 213, 107);
      assertNotNull(javaCharStream2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager2 = null;
      try {
        javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2, 22);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : 22. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      StringReader stringReader0 = new StringReader("Ks2'-M,};5*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-194), (-194));
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-194), javaCharStream0.getBeginColumn());
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-192), javaCharStream0.getColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-192), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals("Ks2", token0.toString());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token0.kind);
      assertEquals((-194), token0.endLine);
      assertEquals((-194), token0.beginLine);
      assertEquals((-192), token0.endColumn);
      assertEquals((-194), token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-194), javaCharStream0.getBeginColumn());
      assertEquals((-194), javaCharStream0.getEndLine());
      assertEquals((-192), javaCharStream0.getColumn());
      assertEquals((-194), javaCharStream0.getLine());
      assertEquals((-192), javaCharStream0.getEndColumn());
      assertEquals((-194), javaCharStream0.getBeginLine());
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -194, column -189.  Encountered: \"M\" (77), after : \"\\'-\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Token token0 = Token.newToken(91);
      assertNotNull(token0);
      assertNull(token0.toString());
      assertEquals(0, token0.endLine);
      assertEquals(0, token0.kind);
      assertEquals(0, token0.beginLine);
      assertEquals(0, token0.beginColumn);
      assertEquals(0, token0.endColumn);
      
      StringReader stringReader0 = new StringReader("H#=");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-670), 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("H#=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader1.ready();
      assertTrue(boolean0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-670), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-670), javaCharStream0.getLine());
      assertEquals((-670), javaCharStream0.getBeginLine());
      assertEquals("H", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(74, token1.kind);
      assertEquals((-670), token1.beginLine);
      assertEquals(0, token1.beginColumn);
      assertEquals(0, token1.endColumn);
      assertEquals((-670), token1.endLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-670), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-670), javaCharStream0.getLine());
      assertEquals((-670), javaCharStream0.getBeginLine());
      assertEquals("H", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-670), token2.endLine);
      assertEquals(74, token2.kind);
      assertEquals(0, token2.endColumn);
      assertEquals((-670), token2.beginLine);
      assertEquals(0, token2.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals((-670), javaCharStream0.getEndLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getColumn());
      assertEquals(0, javaCharStream0.getEndColumn());
      assertEquals((-670), javaCharStream0.getLine());
      assertEquals((-670), javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line -670, column 1.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(pipedInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = null;
      try {
        javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Error: Ignoring invalid lexical state : -1. State unchanged.
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAT");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("p2.#{-5s[CjT)h");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 712, 11, 124);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader2 = new StringReader("p2.#{-5s[CjT)h");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("15!#d:");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader3, 124, 1793);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(1794, javaCharStream0.getEndColumn());
      assertEquals(1793, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(1794, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals("15", token0.toString());
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1793, token0.beginColumn);
      assertEquals(66, token0.kind);
      assertEquals(124, token0.beginLine);
      assertEquals(124, token0.endLine);
      assertEquals(1794, token0.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1794, javaCharStream0.getEndColumn());
      assertEquals(1793, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(1794, javaCharStream0.getColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager1.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1795, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(1795, javaCharStream0.getBeginColumn());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals(1795, javaCharStream0.getColumn());
      assertEquals("!", token1.toString());
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1795, token1.endColumn);
      assertEquals(124, token1.endLine);
      assertEquals(1795, token1.beginColumn);
      assertEquals(89, token1.kind);
      assertEquals(124, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("double");
      assertNotNull(stringReader0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("_1dmBab@qS_]>.");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals((-1), int0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      boolean boolean1 = stringReader1.ready();
      assertTrue(boolean1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(boolean1 == boolean0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("_1dmBab", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(7, token0.endColumn);
      assertEquals(74, token0.kind);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      
      Token token1 = javaParserTokenManager1.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream0.getBeginColumn());
      assertEquals(1, javaCharStream0.getEndLine());
      assertEquals(7, javaCharStream0.getColumn());
      assertEquals(7, javaCharStream0.getEndColumn());
      assertEquals(1, javaCharStream0.getBeginLine());
      assertEquals(1, javaCharStream0.getLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(7, token1.endColumn);
      assertEquals(1, token1.endLine);
      assertEquals(1, token1.beginLine);
      assertEquals(1, token1.beginColumn);
      assertEquals(0, token1.kind);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p2.#{-5s[CjT)h");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 11, 11, 11);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("p2.#{-5s[CjT)h");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 712, (-1));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn((-1), 712);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(712, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getEndColumn());
      assertEquals(712, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getColumn());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals(712, javaCharStream1.getEndLine());
      assertEquals(712, javaCharStream1.getLine());
      assertEquals("p2", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), token0.beginColumn);
      assertEquals(712, token0.endLine);
      assertEquals(0, token0.endColumn);
      assertEquals(712, token0.beginLine);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(712, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals(712, javaCharStream1.getEndLine());
      assertEquals(712, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.kind);
      assertEquals(1, token1.beginColumn);
      assertEquals(712, token1.endLine);
      assertEquals(712, token1.beginLine);
      assertEquals(1, token1.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 712, column 2.  Encountered: \"#\" (35), after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 94);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)122;
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      byteArray0[2] = (byte)118;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean1);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new byte[] {(byte)92, (byte)122, (byte)118}, byteArray0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = '}';
      charArray0[0] = '}';
      charArray0[2] = '}';
      charArray0[3] = '}';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, int0);
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\"', 'i', 'n', 's'}, charArray0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals("tanceof", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(100, token0.endColumn);
      assertEquals(94, token0.endLine);
      assertEquals(94, token0.beginLine);
      assertEquals(94, token0.beginColumn);
      assertEquals(74, token0.kind);
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(100, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(100, javaCharStream0.getColumn());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals("tanceof", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(6, javaCharStream0.bufpos);
      assertEquals(100, token0.endColumn);
      assertEquals(94, token0.endLine);
      assertEquals(94, token0.beginLine);
      assertEquals(94, token0.beginColumn);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      long long0 = stringReader0.skip((-529L));
      assertEquals((-1L), long0);
      
      javaCharStream0.ReInit((Reader) stringReader0, (-1593), 125, 1533);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals((-1593), javaCharStream0.getBeginLine());
      assertEquals(136, javaCharStream0.getEndColumn());
      assertEquals(125, javaCharStream0.getBeginColumn());
      assertEquals((-1593), javaCharStream0.getEndLine());
      assertEquals((-1593), javaCharStream0.getLine());
      assertEquals(136, javaCharStream0.getColumn());
      assertEquals("\"instanceof\"", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(11, javaCharStream0.bufpos);
      assertEquals((-1593), token0.endLine);
      assertEquals((-1593), token0.beginLine);
      assertEquals(73, token0.kind);
      assertEquals(125, token0.beginColumn);
      assertEquals(136, token0.endColumn);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("==");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 1825, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("\",dR`ZE$IQa\u0002");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      StringReader stringReader2 = new StringReader("==");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      StringReader stringReader3 = new StringReader("jKyObl'`L-2F2Kp");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader1, 1569, 739);
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader3));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader3);
      assertNotSame(stringReader1, stringReader2);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 1569, column 751.  Encountered: <EOF> after : \"\\\",dR`ZE$IQa\\u0002\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ks2-},}}d*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getEndLine());
      assertEquals((-2147483647), javaCharStream0.getColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getBeginLine());
      assertEquals((-2147483647), javaCharStream0.getEndColumn());
      assertEquals(Integer.MAX_VALUE, javaCharStream0.getLine());
      assertEquals("Ks2", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals((-2147483647), token0.endColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginColumn);
      assertEquals(Integer.MAX_VALUE, token0.beginLine);
      assertEquals(Integer.MAX_VALUE, token0.endLine);
      assertEquals(74, token0.kind);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 48, 48);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("iMq%<`#O-`!");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 48, (-1062));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      int int1 = stringReader0.read();
      assertEquals((-1), int1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(int1 == int0);
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader1, (-1), (-1470));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1060), javaCharStream1.getEndColumn());
      assertEquals((-1062), javaCharStream1.getBeginColumn());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals((-1060), javaCharStream1.getColumn());
      assertEquals("iMq", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals(48, token0.beginLine);
      assertEquals((-1060), token0.endColumn);
      assertEquals(48, token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals((-1062), token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1060), javaCharStream1.getEndColumn());
      assertEquals((-1062), javaCharStream1.getBeginColumn());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals((-1060), javaCharStream1.getColumn());
      assertEquals("iMq", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream1.bufpos);
      assertEquals((-1060), token1.endColumn);
      assertEquals(48, token1.beginLine);
      assertEquals((-1062), token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(48, token1.endLine);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1059), javaCharStream1.getEndColumn());
      assertEquals((-1059), javaCharStream1.getColumn());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals((-1059), javaCharStream1.getBeginColumn());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals("%", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream1.bufpos);
      assertEquals((-1059), token2.beginColumn);
      assertEquals(108, token2.kind);
      assertEquals((-1059), token2.endColumn);
      assertEquals(48, token2.endLine);
      assertEquals(48, token2.beginLine);
      
      Token token3 = javaParserTokenManager1.getNextToken();
      assertNotNull(token3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-1471), javaCharStream0.getBeginColumn());
      assertEquals((-1471), javaCharStream0.getEndColumn());
      assertEquals((-1), javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.getEndLine());
      assertEquals((-1), javaCharStream0.getLine());
      assertEquals((-1471), javaCharStream0.getColumn());
      assertEquals("", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1471), token3.endColumn);
      assertEquals((-1471), token3.beginColumn);
      assertEquals(0, token3.kind);
      assertEquals((-1), token3.beginLine);
      assertEquals((-1), token3.endLine);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ks2-},}}d*");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("Ks2-},}}d*");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("-8[1p5N#-CW7");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(1, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(1, javaCharStream1.getColumn());
      assertEquals(1, javaCharStream1.getEndColumn());
      assertEquals("-", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream1.bufpos);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(1, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(1, javaCharStream1.getBeginLine());
      assertEquals(1, javaCharStream1.getEndLine());
      assertEquals(2, javaCharStream1.getBeginColumn());
      assertEquals(1, javaCharStream1.getLine());
      assertEquals(2, javaCharStream1.getEndColumn());
      assertEquals(2, javaCharStream1.getColumn());
      assertEquals("8", token1.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream1.bufpos);
      assertEquals(1, token1.endLine);
      assertEquals(66, token1.kind);
      assertEquals(1, token1.beginLine);
      assertEquals(2, token1.endColumn);
      assertEquals(2, token1.beginColumn);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      StringReader stringReader1 = new StringReader("Ng62E!Q-");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      javaCharStream0.inBuf = 35;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      long long0 = stringReader1.skip(404L);
      assertEquals(8L, long0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      javaCharStream0.inBuf = 71;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      
      javaCharStream0.ReInit((Reader) stringReader1, 71, (-1785), 0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.SwitchTo(0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byte[] byteArray0 = new byte[6];
      javaParserTokenManager0.curLexState = 71;
      byteArray0[0] = (byte)0;
      javaParserTokenManager0.ReInit(javaCharStream0, 0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)50;
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals((-1786), javaCharStream0.getBeginColumn());
      assertEquals((-1786), javaCharStream0.getColumn());
      assertEquals((-1786), javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals("", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token0.kind);
      assertEquals((-1786), token0.beginColumn);
      assertEquals(71, token0.beginLine);
      assertEquals((-1786), token0.endColumn);
      assertEquals(71, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(71, javaCharStream0.getBeginLine());
      assertEquals(71, javaCharStream0.getLine());
      assertEquals((-1786), javaCharStream0.getBeginColumn());
      assertEquals((-1786), javaCharStream0.getColumn());
      assertEquals((-1786), javaCharStream0.getEndColumn());
      assertEquals(71, javaCharStream0.getEndLine());
      assertEquals("", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1786), token1.endColumn);
      assertEquals(0, token1.kind);
      assertEquals(71, token1.endLine);
      assertEquals((-1786), token1.beginColumn);
      assertEquals(71, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatile");
      assertNotNull(stringReader0);
      
      stringReader0.mark(94);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 14, 14, 14);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.bufline = javaParserTokenManager0.jjnewLexState;
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(32, javaCharStream0.getBeginLine());
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals("volatile", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(14, token0.endLine);
      assertEquals(21, token0.endColumn);
      assertEquals(14, token0.beginColumn);
      assertEquals(14, token0.beginLine);
      assertEquals(64, token0.kind);
      
      javaParserTokenManager0.jjround = 14;
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      
      javaParserTokenManager0.TokenLexicalActions(token0);
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(14, javaCharStream0.getBeginColumn());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals("volatile", token0.toString());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(7, javaCharStream0.bufpos);
      assertEquals(14, token0.endLine);
      assertEquals(21, token0.endColumn);
      assertEquals(14, token0.beginColumn);
      assertEquals(14, token0.beginLine);
      assertEquals(64, token0.kind);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(14, token1.endLine);
      assertEquals(14, token1.beginLine);
      assertEquals(21, token1.beginColumn);
      assertEquals(21, token1.endColumn);
      
      Token token2 = Token.newToken(0);
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertNull(token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, token2.endColumn);
      assertEquals(0, token2.beginColumn);
      assertEquals(0, token2.beginLine);
      assertEquals(0, token2.kind);
      assertEquals(0, token2.endLine);
      
      javaParserTokenManager0.TokenLexicalActions(token1);
      assertFalse(token1.equals((Object)token0));
      assertFalse(token1.equals((Object)token2));
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertNotSame(token1, token2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(0, token1.kind);
      assertEquals(14, token1.endLine);
      assertEquals(14, token1.beginLine);
      assertEquals(21, token1.beginColumn);
      assertEquals(21, token1.endColumn);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(14, javaCharStream0.getEndLine());
      assertEquals(14, javaCharStream0.getLine());
      assertEquals(21, javaCharStream0.getColumn());
      assertEquals(21, javaCharStream0.getEndColumn());
      assertEquals(14, javaCharStream0.getBeginLine());
      assertEquals(21, javaCharStream0.getBeginColumn());
      assertEquals("", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals(14, token3.endLine);
      assertEquals(14, token3.beginLine);
      assertEquals(21, token3.beginColumn);
      assertEquals(21, token3.endColumn);
      assertEquals(0, token3.kind);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 86);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader(")%?7=eh$.PTghoQ|=dz");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("com.soops.CEN4010.JMCA.JParser.JavaParserConstants");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      long long0 = stringReader2.skip((-1));
      assertEquals(0L, long0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaCharStream0.ReInit((Reader) stringReader2, 46, 86);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(88, javaCharStream0.getColumn());
      assertEquals(88, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(86, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals("com", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(2, javaCharStream0.bufpos);
      assertEquals(86, token0.beginColumn);
      assertEquals(74, token0.kind);
      assertEquals(88, token0.endColumn);
      assertEquals(46, token0.beginLine);
      assertEquals(46, token0.endLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(89, javaCharStream0.getColumn());
      assertEquals(89, javaCharStream0.getBeginColumn());
      assertEquals(89, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(89, token1.endColumn);
      assertEquals(46, token1.beginLine);
      assertEquals(89, token1.beginColumn);
      assertEquals(85, token1.kind);
      assertEquals(46, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(90, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals("soops", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, javaCharStream0.bufpos);
      assertEquals(74, token2.kind);
      assertEquals(46, token2.endLine);
      assertEquals(94, token2.endColumn);
      assertEquals(90, token2.beginColumn);
      assertEquals(46, token2.beginLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertFalse(token3.equals((Object)token2));
      assertEquals(95, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(95, javaCharStream0.getColumn());
      assertEquals(95, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(".", token3.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertNotSame(token3, token2);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(95, token3.endColumn);
      assertEquals(85, token3.kind);
      assertEquals(46, token3.endLine);
      assertEquals(46, token3.beginLine);
      assertEquals(95, token3.beginColumn);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(token4.equals((Object)token1));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token3));
      assertEquals(102, javaCharStream0.getEndColumn());
      assertEquals(102, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(96, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals("CEN4010", token4.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(token4, token1);
      assertNotSame(token4, token2);
      assertNotSame(token4, token0);
      assertNotSame(token4, token3);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(16, javaCharStream0.bufpos);
      assertEquals(74, token4.kind);
      assertEquals(102, token4.endColumn);
      assertEquals(46, token4.beginLine);
      assertEquals(96, token4.beginColumn);
      assertEquals(46, token4.endLine);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 48, 48);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("iMq%<`#O-`!");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 48, (-1062));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int1 = stringReader0.read();
      assertEquals((-1), int1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertTrue(int1 == int0);
      assertNotSame(stringReader0, stringReader1);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader1, (-1), (-1470));
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(stringReader1, stringReader0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals((-1060), javaCharStream1.getEndColumn());
      assertEquals((-1060), javaCharStream1.getColumn());
      assertEquals((-1062), javaCharStream1.getBeginColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals("iMq", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(48, token0.endLine);
      assertEquals((-1062), token0.beginColumn);
      assertEquals(48, token0.beginLine);
      assertEquals((-1060), token0.endColumn);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-1060), javaCharStream1.getEndColumn());
      assertEquals((-1060), javaCharStream1.getColumn());
      assertEquals((-1062), javaCharStream1.getBeginColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals("iMq", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(2, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token1.kind);
      assertEquals(48, token1.endLine);
      assertEquals((-1062), token1.beginColumn);
      assertEquals(48, token1.beginLine);
      assertEquals((-1060), token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals((-1059), javaCharStream1.getBeginColumn());
      assertEquals((-1059), javaCharStream1.getEndColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals((-1059), javaCharStream1.getColumn());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals("%", token2.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(3, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1059), token2.beginColumn);
      assertEquals(48, token2.endLine);
      assertEquals((-1059), token2.endColumn);
      assertEquals(48, token2.beginLine);
      assertEquals(108, token2.kind);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token1));
      assertEquals((-1058), javaCharStream1.getEndColumn());
      assertEquals(48, javaCharStream1.getBeginLine());
      assertEquals(48, javaCharStream1.getLine());
      assertEquals((-1058), javaCharStream1.getColumn());
      assertEquals(48, javaCharStream1.getEndLine());
      assertEquals((-1058), javaCharStream1.getBeginColumn());
      assertEquals("<", token3.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token3, token2);
      assertNotSame(token3, token0);
      assertNotSame(token3, token1);
      assertEquals(4, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(88, token3.kind);
      assertEquals((-1058), token3.endColumn);
      assertEquals(48, token3.beginLine);
      assertEquals(48, token3.endLine);
      assertEquals((-1058), token3.beginColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAULT");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 106, 0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0, 0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager0.jjFillToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 94);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(103, javaCharStream0.getEndColumn());
      assertEquals(94, javaCharStream0.getEndLine());
      assertEquals(94, javaCharStream0.getBeginColumn());
      assertEquals(94, javaCharStream0.getBeginLine());
      assertEquals(94, javaCharStream0.getLine());
      assertEquals(103, javaCharStream0.getColumn());
      assertEquals("instanceof", token0.toString());
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertEquals(9, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(39, token0.kind);
      assertEquals(94, token0.beginColumn);
      assertEquals(94, token0.beginLine);
      assertEquals(94, token0.endLine);
      assertEquals(103, token0.endColumn);
      
      // Undeclared exception!
      try { 
        javaParserTokenManager1.getNextToken();
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Lexical error at line 94, column 105.  Encountered: <EOF> after : \"\"
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager", e);
      }
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"iynbanceof7");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 953, 953);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read();
      assertEquals(34, int0);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertNotSame(stringReader0, stringReader1);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(956, javaCharStream0.getEndColumn());
      assertEquals(953, javaCharStream0.getBeginLine());
      assertEquals(953, javaCharStream0.getEndLine());
      assertEquals(956, javaCharStream0.getColumn());
      assertEquals(953, javaCharStream0.getLine());
      assertEquals(953, javaCharStream0.getBeginColumn());
      assertEquals("iynb", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(956, token0.endColumn);
      assertEquals(953, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(953, token0.beginColumn);
      assertEquals(953, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(956, javaCharStream0.getEndColumn());
      assertEquals(953, javaCharStream0.getBeginLine());
      assertEquals(953, javaCharStream0.getEndLine());
      assertEquals(956, javaCharStream0.getColumn());
      assertEquals(953, javaCharStream0.getLine());
      assertEquals(953, javaCharStream0.getBeginColumn());
      assertEquals("iynb", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3, javaCharStream0.bufpos);
      assertEquals(956, token1.endColumn);
      assertEquals(953, token1.endLine);
      assertEquals(953, token1.beginColumn);
      assertEquals(74, token1.kind);
      assertEquals(953, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatilJe");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[2];
      stringReader0.mark(133);
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 124, 121, 133);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, int0);
      assertEquals(2, charArray0.length);
      assertArrayEquals(new char[] {'v', 'o'}, charArray0);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertNotNull(pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.ReInit((Reader) stringReader0, 124, 2);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(2, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals("latilJe", token0.toString());
      assertEquals(6, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(8, token0.endColumn);
      assertEquals(124, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(124, token0.endLine);
      assertEquals(2, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(124, javaCharStream0.getEndLine());
      assertEquals(124, javaCharStream0.getLine());
      assertEquals(8, javaCharStream0.getBeginColumn());
      assertEquals(8, javaCharStream0.getColumn());
      assertEquals(8, javaCharStream0.getEndColumn());
      assertEquals(124, javaCharStream0.getBeginLine());
      assertEquals("", token1.toString());
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(124, token1.endLine);
      assertEquals(8, token1.beginColumn);
      assertEquals(124, token1.beginLine);
      assertEquals(8, token1.endColumn);
      assertEquals(0, token1.kind);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Ks2-},}}d*");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, Integer.MAX_VALUE, Integer.MAX_VALUE);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("v@.Px~G]9TEF");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader0, 85, 85);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      StringReader stringReader2 = new StringReader("-8[1p5N#-CW7");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader2);
      assertNotNull(javaCharStream2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertEquals(1, javaCharStream2.getEndLine());
      assertEquals(1, javaCharStream2.getLine());
      assertEquals(1, javaCharStream2.getBeginColumn());
      assertEquals(1, javaCharStream2.getBeginLine());
      assertEquals(1, javaCharStream2.getEndColumn());
      assertEquals(1, javaCharStream2.getColumn());
      assertEquals("-", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream2.bufpos);
      assertEquals(1, token0.beginLine);
      assertEquals(1, token0.beginColumn);
      assertEquals(102, token0.kind);
      assertEquals(1, token0.endColumn);
      assertEquals(1, token0.endLine);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DEFAT");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("G]");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader1, 5, (-1549));
      assertNotNull(javaCharStream0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader2 = new StringReader("after : \"");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 22, 119);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager1.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals((-1549), javaCharStream0.getColumn());
      assertEquals((-1549), javaCharStream0.getEndColumn());
      assertEquals((-1549), javaCharStream0.getBeginColumn());
      assertEquals("G", token0.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager1, javaParserTokenManager0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-1549), token0.beginColumn);
      assertEquals((-1549), token0.endColumn);
      assertEquals(5, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(5, token0.endLine);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader2, (-1388), 14);
      assertNotNull(javaCharStream2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      JavaParserTokenManager javaParserTokenManager2 = new JavaParserTokenManager(javaCharStream2, 0);
      assertNotNull(javaParserTokenManager2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager0));
      assertFalse(javaParserTokenManager2.equals((Object)javaParserTokenManager1));
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals(0, javaCharStream2.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream2.bufpos);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager2));
      assertFalse(token1.equals((Object)token0));
      assertEquals(5, javaCharStream0.getEndLine());
      assertEquals(5, javaCharStream0.getLine());
      assertEquals(5, javaCharStream0.getBeginLine());
      assertEquals((-1548), javaCharStream0.getColumn());
      assertEquals((-1548), javaCharStream0.getEndColumn());
      assertEquals((-1548), javaCharStream0.getBeginColumn());
      assertEquals("]", token1.toString());
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager2);
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1, javaCharStream0.bufpos);
      assertEquals(82, token1.kind);
      assertEquals((-1548), token1.beginColumn);
      assertEquals(5, token1.beginLine);
      assertEquals((-1548), token1.endColumn);
      assertEquals(5, token1.endLine);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"instanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 94, 94);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader3 = new StringReader("5|[mE");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      
      javaCharStream0.ReInit((Reader) stringReader3, (-3151), 1793);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(stringReader3.equals((Object)stringReader1));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(stringReader3, stringReader1);
      assertNotSame(stringReader3, stringReader2);
      assertNotSame(stringReader3, stringReader0);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertEquals(1793, javaCharStream0.getBeginColumn());
      assertEquals((-3151), javaCharStream0.getLine());
      assertEquals(1793, javaCharStream0.getColumn());
      assertEquals((-3151), javaCharStream0.getEndLine());
      assertEquals(1793, javaCharStream0.getEndColumn());
      assertEquals((-3151), javaCharStream0.getBeginLine());
      assertEquals("5", token0.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(1793, token0.endColumn);
      assertEquals((-3151), token0.endLine);
      assertEquals((-3151), token0.beginLine);
      assertEquals(66, token0.kind);
      assertEquals(1793, token0.beginColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(1793, javaCharStream0.getBeginColumn());
      assertEquals((-3151), javaCharStream0.getLine());
      assertEquals(1793, javaCharStream0.getColumn());
      assertEquals((-3151), javaCharStream0.getEndLine());
      assertEquals(1793, javaCharStream0.getEndColumn());
      assertEquals((-3151), javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token1.equals((Object)token0));
      assertEquals((-3151), javaCharStream0.getLine());
      assertEquals(1794, javaCharStream0.getBeginColumn());
      assertEquals((-3151), javaCharStream0.getEndLine());
      assertEquals(1794, javaCharStream0.getEndColumn());
      assertEquals((-3151), javaCharStream0.getBeginLine());
      assertEquals(1794, javaCharStream0.getColumn());
      assertEquals("|", token1.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3151), token1.endLine);
      assertEquals((-3151), token1.beginLine);
      assertEquals(1794, token1.endColumn);
      assertEquals(106, token1.kind);
      assertEquals(1794, token1.beginColumn);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(stringReader0.equals((Object)stringReader3));
      assertFalse(javaParserTokenManager0.equals((Object)javaParserTokenManager1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals((-3151), javaCharStream0.getLine());
      assertEquals((-3151), javaCharStream0.getEndLine());
      assertEquals(1795, javaCharStream0.getEndColumn());
      assertEquals(1795, javaCharStream0.getBeginColumn());
      assertEquals((-3151), javaCharStream0.getBeginLine());
      assertEquals(1795, javaCharStream0.getColumn());
      assertEquals("[", token2.toString());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(stringReader0, stringReader3);
      assertNotSame(javaParserTokenManager0, javaParserTokenManager1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-3151), token2.beginLine);
      assertEquals(81, token2.kind);
      assertEquals(1795, token2.beginColumn);
      assertEquals(1795, token2.endColumn);
      assertEquals((-3151), token2.endLine);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("volatilJe");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("wmu8k=FI");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      int int0 = stringReader1.read();
      assertEquals(119, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 119, 19);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader2 = new StringReader("|r@94pK3R");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 48, (-1062));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      int int1 = stringReader2.read();
      assertEquals(124, int1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(int1 == int0);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      JavaCharStream javaCharStream2 = new JavaCharStream(stringReader2, 122, 19);
      assertNotNull(javaCharStream2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream2);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream2.ReInit((Reader) stringReader1, 30, 122);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(stringReader1.equals((Object)stringReader2));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream2.getBeginLine());
      assertEquals(0, javaCharStream2.getBeginColumn());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(stringReader1, stringReader2);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertEquals((-1), javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertEquals(30, javaCharStream2.getEndLine());
      assertEquals(30, javaCharStream2.getLine());
      assertEquals(122, javaCharStream2.getBeginColumn());
      assertEquals(122, javaCharStream2.getEndColumn());
      assertEquals(122, javaCharStream2.getColumn());
      assertEquals(30, javaCharStream2.getBeginLine());
      assertEquals("m", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(122, token0.beginColumn);
      assertEquals(30, token0.endLine);
      assertEquals(30, token0.beginLine);
      assertEquals(122, token0.endColumn);
      assertEquals(74, token0.kind);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream1));
      assertFalse(javaCharStream2.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(30, javaCharStream2.getEndLine());
      assertEquals(30, javaCharStream2.getLine());
      assertEquals(122, javaCharStream2.getBeginColumn());
      assertEquals(122, javaCharStream2.getEndColumn());
      assertEquals(122, javaCharStream2.getColumn());
      assertEquals(30, javaCharStream2.getBeginLine());
      assertEquals("m", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream2, javaCharStream1);
      assertNotSame(javaCharStream2, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream2.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(30, token1.endLine);
      assertEquals(74, token1.kind);
      assertEquals(122, token1.beginColumn);
      assertEquals(30, token1.beginLine);
      assertEquals(122, token1.endColumn);
      
      JavaParserTokenManager javaParserTokenManager1 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream2));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(javaParserTokenManager1.equals((Object)javaParserTokenManager0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream1.bufpos);
      
      ObjectInputStream objectInputStream0 = null;
      try {
        objectInputStream0 = new ObjectInputStream((InputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ObjectInputStream$PeekInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&s&+A.m'\"Y&");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 114, 712, 712);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader1 = new StringReader("<=");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader(">K{J%HLI&L");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      javaCharStream0.tokenBegin = 114;
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 70, 712);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(712, 712);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(stringReader0.equals((Object)stringReader2));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(712, javaCharStream0.getBeginColumn());
      assertEquals(712, javaCharStream0.getBeginLine());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(stringReader0, stringReader2);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      long long0 = stringReader2.skip(1L);
      assertEquals(1L, long0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(712, javaCharStream1.getColumn());
      assertEquals(712, javaCharStream1.getEndColumn());
      assertEquals(70, javaCharStream1.getEndLine());
      assertEquals(70, javaCharStream1.getLine());
      assertEquals(70, javaCharStream1.getBeginLine());
      assertEquals(712, javaCharStream1.getBeginColumn());
      assertEquals("K", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(70, token0.endLine);
      assertEquals(70, token0.beginLine);
      assertEquals(712, token0.endColumn);
      assertEquals(74, token0.kind);
      assertEquals(712, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(713, javaCharStream1.getEndColumn());
      assertEquals(713, javaCharStream1.getColumn());
      assertEquals(713, javaCharStream1.getBeginColumn());
      assertEquals(70, javaCharStream1.getEndLine());
      assertEquals(70, javaCharStream1.getLine());
      assertEquals(70, javaCharStream1.getBeginLine());
      assertEquals("{", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(713, token1.endColumn);
      assertEquals(713, token1.beginColumn);
      assertEquals(79, token1.kind);
      assertEquals(70, token1.endLine);
      assertEquals(70, token1.beginLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(714, javaCharStream1.getBeginColumn());
      assertEquals(714, javaCharStream1.getEndColumn());
      assertEquals(70, javaCharStream1.getEndLine());
      assertEquals(70, javaCharStream1.getLine());
      assertEquals(714, javaCharStream1.getColumn());
      assertEquals(70, javaCharStream1.getBeginLine());
      assertEquals("J", token2.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(714, token2.beginColumn);
      assertEquals(714, token2.endColumn);
      assertEquals(74, token2.kind);
      assertEquals(70, token2.endLine);
      assertEquals(70, token2.beginLine);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"nItanceof\"");
      assertNotNull(stringReader0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 71, 71);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      StringReader stringReader1 = new StringReader("..Yv,EJ<h");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader1, 3343, (-1));
      assertNotNull(javaCharStream1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      javaCharStream0.adjustBeginLineColumn(3343, 0);
      assertFalse(stringReader0.equals((Object)stringReader1));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(3344, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertNotSame(stringReader0, stringReader1);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      int int0 = stringReader1.read();
      assertEquals(46, int0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertNotSame(stringReader1, stringReader0);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream1);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(3343, javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals(3343, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(3343, javaCharStream1.getBeginLine());
      assertEquals(".", token0.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(3343, token0.beginLine);
      assertEquals(85, token0.kind);
      assertEquals((-1), token0.beginColumn);
      assertEquals((-1), token0.endColumn);
      assertEquals(3343, token0.endLine);
      
      Token token1 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertFalse(token1.equals((Object)token0));
      assertEquals(3343, javaCharStream1.getEndLine());
      assertEquals((-1), javaCharStream1.getColumn());
      assertEquals(3343, javaCharStream1.getLine());
      assertEquals((-1), javaCharStream1.getBeginColumn());
      assertEquals((-1), javaCharStream1.getEndColumn());
      assertEquals(3343, javaCharStream1.getBeginLine());
      assertEquals(".", token1.toString());
      assertNotSame(stringReader1, stringReader0);
      assertNotSame(javaCharStream1, javaCharStream0);
      assertNotSame(token1, token0);
      assertEquals(0, javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(85, token1.kind);
      assertEquals((-1), token1.endColumn);
      assertEquals((-1), token1.beginColumn);
      assertEquals(3343, token1.endLine);
      assertEquals(3343, token1.beginLine);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      StringReader stringReader0 = new StringReader("fEEp_:MO");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("fEEp_:MO");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("5u(S&@P|wFr");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, (-2944), 51);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      int int0 = stringReader2.read();
      assertEquals(53, int0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader0);
      
      StringReader stringReader3 = new StringReader("fEEp_:MO");
      assertNotNull(stringReader3);
      assertFalse(stringReader3.equals((Object)stringReader0));
      assertFalse(stringReader3.equals((Object)stringReader2));
      assertFalse(stringReader3.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream1 = new JavaCharStream(stringReader2, 53, 17);
      assertNotNull(javaCharStream1);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream1.equals((Object)javaCharStream0));
      assertEquals(0, javaCharStream1.getBeginColumn());
      assertEquals(0, javaCharStream1.getBeginLine());
      assertEquals((-1), javaCharStream1.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(stringReader2.equals((Object)stringReader3));
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(javaCharStream0.equals((Object)javaCharStream1));
      assertEquals(51, javaCharStream0.getColumn());
      assertEquals((-2944), javaCharStream0.getEndLine());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(51, javaCharStream0.getEndColumn());
      assertEquals((-2944), javaCharStream0.getBeginLine());
      assertEquals((-2944), javaCharStream0.getLine());
      assertEquals("u", token0.toString());
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(stringReader2, stringReader3);
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(javaCharStream0, javaCharStream1);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(0, javaCharStream0.bufpos);
      assertEquals((-2944), token0.endLine);
      assertEquals(74, token0.kind);
      assertEquals(51, token0.beginColumn);
      assertEquals(51, token0.endColumn);
      assertEquals((-2944), token0.beginLine);
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Z");
      assertNotNull(stringReader0);
      
      StringReader stringReader1 = new StringReader("Z");
      assertNotNull(stringReader1);
      assertFalse(stringReader1.equals((Object)stringReader0));
      
      StringReader stringReader2 = new StringReader("=!w/NzYH");
      assertNotNull(stringReader2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader2, 302, 302);
      assertNotNull(javaCharStream0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(0, javaCharStream0.getBeginLine());
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals((-1), javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(302, javaCharStream0.getEndColumn());
      assertEquals(302, javaCharStream0.getLine());
      assertEquals(302, javaCharStream0.getBeginColumn());
      assertEquals(302, javaCharStream0.getEndLine());
      assertEquals(302, javaCharStream0.getColumn());
      assertEquals(302, javaCharStream0.getBeginLine());
      assertEquals("=", token0.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertEquals(0, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(302, token0.endColumn);
      assertEquals(87, token0.kind);
      assertEquals(302, token0.endLine);
      assertEquals(302, token0.beginColumn);
      assertEquals(302, token0.beginLine);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token1.equals((Object)token0));
      assertEquals(303, javaCharStream0.getBeginColumn());
      assertEquals(302, javaCharStream0.getLine());
      assertEquals(303, javaCharStream0.getColumn());
      assertEquals(303, javaCharStream0.getEndColumn());
      assertEquals(302, javaCharStream0.getEndLine());
      assertEquals(302, javaCharStream0.getBeginLine());
      assertEquals("!", token1.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token1, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(302, token1.beginLine);
      assertEquals(303, token1.beginColumn);
      assertEquals(89, token1.kind);
      assertEquals(303, token1.endColumn);
      assertEquals(302, token1.endLine);
      
      Token token2 = javaParserTokenManager0.jjFillToken();
      assertNotNull(token2);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token2.equals((Object)token0));
      assertFalse(token2.equals((Object)token1));
      assertEquals(303, javaCharStream0.getBeginColumn());
      assertEquals(302, javaCharStream0.getLine());
      assertEquals(303, javaCharStream0.getColumn());
      assertEquals(303, javaCharStream0.getEndColumn());
      assertEquals(302, javaCharStream0.getEndLine());
      assertEquals(302, javaCharStream0.getBeginLine());
      assertEquals("!", token2.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token2, token0);
      assertNotSame(token2, token1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(302, token2.endLine);
      assertEquals(302, token2.beginLine);
      assertEquals(303, token2.beginColumn);
      assertEquals(303, token2.endColumn);
      assertEquals(89, token2.kind);
      
      javaParserTokenManager0.MoreLexicalActions();
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertEquals(303, javaCharStream0.getBeginColumn());
      assertEquals(302, javaCharStream0.getLine());
      assertEquals(303, javaCharStream0.getColumn());
      assertEquals(303, javaCharStream0.getEndColumn());
      assertEquals(302, javaCharStream0.getEndLine());
      assertEquals(302, javaCharStream0.getBeginLine());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(302, javaCharStream0.getLine());
      assertEquals(304, javaCharStream0.getColumn());
      assertEquals(304, javaCharStream0.getEndColumn());
      assertEquals(302, javaCharStream0.getEndLine());
      assertEquals(302, javaCharStream0.getBeginLine());
      assertEquals(304, javaCharStream0.getBeginColumn());
      assertEquals("w", token3.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.kind);
      assertEquals(304, token3.endColumn);
      assertEquals(302, token3.endLine);
      assertEquals(304, token3.beginColumn);
      assertEquals(302, token3.beginLine);
      
      javaParserTokenManager0.TokenLexicalActions(token3);
      assertFalse(stringReader2.equals((Object)stringReader0));
      assertFalse(stringReader2.equals((Object)stringReader1));
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(302, javaCharStream0.getLine());
      assertEquals(304, javaCharStream0.getColumn());
      assertEquals(304, javaCharStream0.getEndColumn());
      assertEquals(302, javaCharStream0.getEndLine());
      assertEquals(302, javaCharStream0.getBeginLine());
      assertEquals(304, javaCharStream0.getBeginColumn());
      assertEquals("w", token3.toString());
      assertNotSame(stringReader2, stringReader0);
      assertNotSame(stringReader2, stringReader1);
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(74, token3.kind);
      assertEquals(304, token3.endColumn);
      assertEquals(302, token3.endLine);
      assertEquals(304, token3.beginColumn);
      assertEquals(302, token3.beginLine);
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      assertNotNull(dataInputStream0);
      
      JavaCharStream javaCharStream0 = new JavaCharStream(dataInputStream0);
      assertNotNull(javaCharStream0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      assertNotNull(javaParserTokenManager0);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      StringReader stringReader0 = new StringReader("ImXm]M0%r#.{.I");
      assertNotNull(stringReader0);
      
      javaCharStream0.ReInit((Reader) stringReader0, 46, 46);
      assertEquals(0, javaCharStream0.getBeginColumn());
      assertEquals(0, javaCharStream0.getBeginLine());
      assertFalse(JavaCharStream.staticFlag);
      assertEquals((-1), javaCharStream0.bufpos);
      
      Token token0 = javaParserTokenManager0.getNextToken();
      assertNotNull(token0);
      assertEquals(49, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(49, javaCharStream0.getColumn());
      assertEquals("ImXm", token0.toString());
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token0.endLine);
      assertEquals(46, token0.beginLine);
      assertEquals(74, token0.kind);
      assertEquals(49, token0.endColumn);
      assertEquals(46, token0.beginColumn);
      
      Token token1 = javaParserTokenManager0.getNextToken();
      assertNotNull(token1);
      assertFalse(token1.equals((Object)token0));
      assertEquals(50, javaCharStream0.getColumn());
      assertEquals(50, javaCharStream0.getEndColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(50, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals("]", token1.toString());
      assertNotSame(token1, token0);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(4, javaCharStream0.bufpos);
      assertEquals(46, token1.beginLine);
      assertEquals(50, token1.endColumn);
      assertEquals(82, token1.kind);
      assertEquals(50, token1.beginColumn);
      assertEquals(46, token1.endLine);
      
      Token token2 = javaParserTokenManager0.getNextToken();
      assertNotNull(token2);
      assertFalse(token2.equals((Object)token1));
      assertFalse(token2.equals((Object)token0));
      assertEquals(52, javaCharStream0.getColumn());
      assertEquals(52, javaCharStream0.getEndColumn());
      assertEquals(51, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals("M0", token2.toString());
      assertNotSame(token2, token1);
      assertNotSame(token2, token0);
      assertEquals(1, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(52, token2.endColumn);
      assertEquals(51, token2.beginColumn);
      assertEquals(74, token2.kind);
      assertEquals(46, token2.beginLine);
      assertEquals(46, token2.endLine);
      
      Token token3 = javaParserTokenManager0.getNextToken();
      assertNotNull(token3);
      assertFalse(token3.equals((Object)token0));
      assertFalse(token3.equals((Object)token2));
      assertFalse(token3.equals((Object)token1));
      assertEquals(53, javaCharStream0.getColumn());
      assertEquals(53, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(53, javaCharStream0.getEndColumn());
      assertEquals("%", token3.toString());
      assertNotSame(token3, token0);
      assertNotSame(token3, token2);
      assertNotSame(token3, token1);
      assertEquals(2, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token3.beginLine);
      assertEquals(46, token3.endLine);
      assertEquals(53, token3.beginColumn);
      assertEquals(108, token3.kind);
      assertEquals(53, token3.endColumn);
      
      Token token4 = javaParserTokenManager0.getNextToken();
      assertNotNull(token4);
      assertFalse(token4.equals((Object)token3));
      assertFalse(token4.equals((Object)token0));
      assertFalse(token4.equals((Object)token2));
      assertFalse(token4.equals((Object)token1));
      assertEquals(54, javaCharStream0.getBeginColumn());
      assertEquals(46, javaCharStream0.getLine());
      assertEquals(54, javaCharStream0.getColumn());
      assertEquals(46, javaCharStream0.getBeginLine());
      assertEquals(46, javaCharStream0.getEndLine());
      assertEquals(54, javaCharStream0.getEndColumn());
      assertEquals("r", token4.toString());
      assertNotSame(token4, token3);
      assertNotSame(token4, token0);
      assertNotSame(token4, token2);
      assertNotSame(token4, token1);
      assertEquals(3, javaCharStream0.bufpos);
      assertFalse(JavaCharStream.staticFlag);
      assertEquals(46, token4.endLine);
      assertEquals(54, token4.endColumn);
      assertEquals(74, token4.kind);
      assertEquals(54, token4.beginColumn);
      assertEquals(46, token4.beginLine);
  }
}

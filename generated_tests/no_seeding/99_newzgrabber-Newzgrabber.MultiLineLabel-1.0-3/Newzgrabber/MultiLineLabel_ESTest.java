/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 04 17:29:54 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.MultiLineLabel;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.text.AttributedCharacterIterator;
import java.util.Hashtable;
import javax.swing.DebugGraphics;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class MultiLineLabel_ESTest extends MultiLineLabel_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 2);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashtable0);
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 0, 30, 2);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("SM[outh", 1218);
      Font font0 = Font.decode("SM[outh");
      multiLineLabel0.setFont(font0);
      // Undeclared exception!
      try { 
        multiLineLabel0.paint((Graphics) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 785, (-2349));
      multiLineLabel0.newLabel(";R?_BE$U*/");
      DebugGraphics debugGraphics0 = new DebugGraphics();
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(debugGraphics0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.swing.DebugGraphics", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("user.dr");
      multiLineLabel0.num_lines = (-4115);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      multiLineLabel0.paint(debugGraphics0);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, dimension0.width);
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4297, 4297);
      Font font0 = Font.decode("South");
      multiLineLabel0.setFont(font0);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(8631, dimension0.width);
      assertEquals(8609, dimension0.height);
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Newzgrabber.MultiLineLabel", 0, 895, 2);
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals(2, multiLineLabel0.getAlignment());
      assertEquals(895, int0);
      assertEquals(0, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("XHShL~(7#)WSvq4dX");
      multiLineLabel0.setMarginHeight((-164));
      assertEquals((-164), multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("!^6MfG,}zM_[", 0, 0);
      assertEquals(0, multiLineLabel0.getMarginWidth());
      
      multiLineLabel0.setMarginWidth((-1));
      assertEquals((-1), multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("z\"2j", 0, 0);
      multiLineLabel0.setAlignment((-728));
      assertEquals((-728), multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4297, 4297);
      Font font0 = Font.decode("South");
      Font font1 = font0.deriveFont((-1.0F));
      multiLineLabel0.setFont(font1);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(4297, multiLineLabel0.getMarginWidth());
      assertEquals(4297, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Newzgrabber.MultiLineLabel", 0, 895, 2);
      // Undeclared exception!
      try { 
        multiLineLabel0.setLabel("aZ&SZ8IFf0Kd'");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4297, 4297);
      Font font0 = Font.decode("South");
      multiLineLabel0.setFont(font0);
      multiLineLabel0.newLabel("South");
      assertEquals(4297, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(4297, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Center");
      Font font0 = Font.decode("Center");
      multiLineLabel0.setFont(font0);
      multiLineLabel0.measure();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 0, 667);
      Font font0 = Font.decode("\n");
      multiLineLabel0.setFont(font0);
      multiLineLabel0.addNotify();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(667, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 0, 667);
      Font font0 = Font.decode("\n");
      multiLineLabel0.setFont(font0);
      multiLineLabel0.setLabel("\n");
      assertEquals(0, multiLineLabel0.getMarginWidth());
      assertEquals(667, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 0, 0);
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals(0, dimension0.height);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, dimension0.width);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("id*_V(hZA!pJzFQ", (-1027), (-1027));
      Dimension dimension0 = multiLineLabel0.getPreferredSize();
      assertEquals((-2054), dimension0.width);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals((-2054), dimension0.height);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("}sK9A2.!+x7", 3, 3, 3);
      multiLineLabel0.max_width = (-265);
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(3, multiLineLabel0.getAlignment());
      assertEquals(3, multiLineLabel0.getMarginWidth());
      assertEquals(3, multiLineLabel0.getMarginHeight());
      assertEquals(0, dimension0.height);
      assertEquals((-265), dimension0.width);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4297, 4297);
      Font font0 = Font.decode("South");
      multiLineLabel0.setFont(font0);
      Dimension dimension0 = multiLineLabel0.getMinimumSize();
      assertEquals(4297, multiLineLabel0.getMarginHeight());
      assertEquals(15, dimension0.height);
      assertEquals(37, dimension0.width);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(4297, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("%ZQ>7E.G+-Tg.");
      assertEquals(10, multiLineLabel0.getMarginWidth());
      
      multiLineLabel0.setMarginWidth(0);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Y", (-1432), (-1432));
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals((-1432), int0);
      assertEquals((-1432), multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("!^6MfG,}zM_[", 0, 0);
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals(0, int0);
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(0, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, int0);
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Newzgr}bber.MultiLineLabel", (-1810), (-1810), (-2089));
      int int0 = multiLineLabel0.getAlignment();
      assertEquals((-1810), multiLineLabel0.getMarginWidth());
      assertEquals((-1810), multiLineLabel0.getMarginHeight());
      assertEquals((-2089), int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("ZCJ7F&=MW6S");
      // Undeclared exception!
      try { 
        multiLineLabel0.setFont((Font) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Font font0 = Font.decode("iMUnj4Y-,B)");
      MultiLineLabel multiLineLabel0 = new MultiLineLabel(";U@m'kbB]3");
      multiLineLabel0.num_lines = 3171;
      // Undeclared exception!
      try { 
        multiLineLabel0.setFont(font0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 172, 2);
      Graphics graphics0 = bufferedImage0.getGraphics();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("cD#3@7(o2E1[QPRT", 1);
      multiLineLabel0.num_lines = 172;
      // Undeclared exception!
      try { 
        multiLineLabel0.paint(graphics0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("Newzgrabber.MultiLineLabel", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("");
      // Undeclared exception!
      try { 
        multiLineLabel0.newLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("&");
      // Undeclared exception!
      try { 
        multiLineLabel0.measure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, (-1214), (-1214), (-1214));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, (-1214), (-1214));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null, (-4092));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = null;
      try {
        multiLineLabel0 = new MultiLineLabel((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      BufferedImage bufferedImage0 = new BufferedImage(1, 172, 2);
      Graphics graphics0 = bufferedImage0.getGraphics();
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("cD#3@7(o2E1[QPRT", 1);
      multiLineLabel0.paint(graphics0);
      assertEquals(1, multiLineLabel0.getAlignment());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(10, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4277, 4277);
      BufferedImage bufferedImage0 = new BufferedImage(1, 172, 2);
      Graphics graphics0 = bufferedImage0.getGraphics();
      multiLineLabel0.paint(graphics0);
      assertEquals(4277, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(4277, multiLineLabel0.getMarginHeight());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4297, 4297);
      Font font0 = Font.decode("South");
      Font font1 = font0.deriveFont((-903.324F));
      multiLineLabel0.setFont(font1);
      assertEquals(4297, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
      assertEquals(4297, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("[Up to parent directory]", 1725);
      int int0 = multiLineLabel0.getAlignment();
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(1725, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("Newzgr}bber.MultiLineLabel", (-1810), (-1810), (-2089));
      int int0 = multiLineLabel0.getMarginHeight();
      assertEquals((-1810), multiLineLabel0.getMarginWidth());
      assertEquals((-2089), multiLineLabel0.getAlignment());
      assertEquals((-1810), int0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("", 809);
      multiLineLabel0.setMarginWidth(809);
      multiLineLabel0.getPreferredSize();
      assertEquals(809, multiLineLabel0.getMarginWidth());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("/JQ3(l*");
      // Undeclared exception!
      try { 
        multiLineLabel0.addNotify();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4297, 4297);
      int int0 = multiLineLabel0.getMarginWidth();
      assertEquals(4297, int0);
      assertEquals(4297, multiLineLabel0.getMarginHeight());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("South", 4277, 4277);
      Font font0 = Font.decode("South");
      multiLineLabel0.setFont(font0);
      BufferedImage bufferedImage0 = new BufferedImage(1, 172, 2);
      Graphics graphics0 = bufferedImage0.getGraphics();
      multiLineLabel0.paint(graphics0);
      assertEquals(4277, multiLineLabel0.getMarginHeight());
      assertEquals(4277, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MultiLineLabel multiLineLabel0 = new MultiLineLabel("y^Y4Aq_8.i=");
      Color color0 = Color.YELLOW;
      multiLineLabel0.setForeground(color0);
      assertEquals(10, multiLineLabel0.getMarginHeight());
      assertEquals(10, multiLineLabel0.getMarginWidth());
      assertEquals(0, multiLineLabel0.getAlignment());
  }
}
